name: HumanEval_77_iscube
language: php
results:
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0 ||\
    \ $a % 5 == 0)\n        return true;\n    else\n        return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgybqeggj.php:23\n\
    Stack trace:\n#0 /tmp/tmpgybqeggj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgybqeggj.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuz3rluy.php:28\n\
    Stack trace:\n#0 /tmp/tmpiuz3rluy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpiuz3rluy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0 ||\
    \ $a % 5 == 0 || $a % 7 == 0)\n        return true;\n    else\n        return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqzgj4ecu.php:24\n\
    Stack trace:\n#0 /tmp/tmpqzgj4ecu.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqzgj4ecu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9nhd6q6b.php:28\n\
    Stack trace:\n#0 /tmp/tmp9nhd6q6b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9nhd6q6b.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcxk3gqj.php:29\n\
    Stack trace:\n#0 /tmp/tmpkcxk3gqj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkcxk3gqj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcz8y_t_.php:28\n\
    Stack trace:\n#0 /tmp/tmpmcz8y_t_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmcz8y_t_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_s8zjq5i.php:29\n\
    Stack trace:\n#0 /tmp/tmp_s8zjq5i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_s8zjq5i.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgn73eyd.php:29\n\
    Stack trace:\n#0 /tmp/tmpjgn73eyd.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjgn73eyd.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplb_ls6wk.php:26\n\
    Stack trace:\n#0 /tmp/tmplb_ls6wk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplb_ls6wk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    if ($a % 7 == 0) return\
    \ true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpan8sh38_.php:24\n\
    Stack trace:\n#0 /tmp/tmpan8sh38_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpan8sh38_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0 ||\
    \ $a % 5 == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgjghvln.php:24\n\
    Stack trace:\n#0 /tmp/tmpvgjghvln.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvgjghvln.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprx92qjko.php:28\n\
    Stack trace:\n#0 /tmp/tmprx92qjko.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprx92qjko.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8henfijg.php:28\n\
    Stack trace:\n#0 /tmp/tmp8henfijg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8henfijg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      if ($a % $a == 0) {\n                    return true;\n               \
    \ }\n            }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2yzave7y.php:31\n\
    Stack trace:\n#0 /tmp/tmp2yzave7y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2yzave7y.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfe9sshec.php:29\n\
    Stack trace:\n#0 /tmp/tmpfe9sshec.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpfe9sshec.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhbtt2zb.php:27\n\
    Stack trace:\n#0 /tmp/tmpwhbtt2zb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwhbtt2zb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3ivwxh3.php:29\n\
    Stack trace:\n#0 /tmp/tmpt3ivwxh3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpt3ivwxh3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpua8avajr.php:28\n\
    Stack trace:\n#0 /tmp/tmpua8avajr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpua8avajr.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return false;\n\
    \    if ($a % 9 == 0)\n        return false;\n    if ($a % 11 == 0)\n        return\
    \ false;\n    if ($a % 13 == 0)\n        return false;\n    if ($a % 15 == 0)\n\
    \        return false;\n    if ($a % 17 == 0)\n        return false;\n    if ($a\
    \ % 19 == 0)\n        return false;\n    if ($a % 21 == 0)\n        return false;\n\
    \    if ($a % 23 == 0)\n        return false;\n    if ($a % 25 == 0)\n       \
    \ return false;\n    if ($a % 27 == 0)\n        return false;\n    if ($a % 29\
    \ == 0)\n        return false;\n    if ($a % 31 == 0)\n        return false;\n\
    \    if ($a % 33 == 0)\n        return false;\n    if ($a % 35 == 0)\n       \
    \ return false;\n    if ($a % 37 == 0)\n        return false;\n    if ($a % 39\
    \ == 0)\n        return false;\n    if ($a % 41 == 0)\n        return false;\n\
    \    if ($a % 43 == 0)\n        return false;\n    if ($a % 45 == 0)\n       \
    \ return false;\n    if ($a % 47 == 0)\n        return false;\n    if ($a % 49\
    \ == 0)\n        return false;\n    if ($a % 51 == 0)\n        return false;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return false;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return false;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return false;\n    if ($a % 65 == 0)\n       \
    \ return false;\n    if ($a % 67 == 0)\n        return false;\n    if ($a % 69\
    \ == 0)\n        return false;\n    if ($a % 71 == 0)\n        return false;\n\
    \    if ($a % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n       \
    \ return false;\n    if ($a % 77 == 0)\n        return false;\n    if ($a % 79\
    \ == 0)\n        return false;\n    if ($a % 81 == 0)\n        return false;\n\
    \    if ($a % 83 == 0)\n        return false;\n    if ($a % 85 == 0)\n       \
    \ return false;\n    if ($a % 87 == 0)\n        return false;\n    if ($a % 89\
    \ == 0)\n        return false;\n    if ($a % 91 == 0)\n        return false;\n\
    \    if ($a % 93 == 0)\n        return false;\n    if ($a % 95 == 0)\n       \
    \ return false;\n    if ($a % 97 == 0)\n        return false;\n    if ($a % 99\
    \ == 0)\n        return false;\n    if ($a % 101 == 0)\n        return false;\n\
    \    if ($a % 10\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpogcp_swa.php on line 116\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    if ($a % 11 == 0) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvfasusk.php:30\n\
    Stack trace:\n#0 /tmp/tmpdvfasusk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdvfasusk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return false;\n\
    \    if ($a % 9 == 0)\n        return false;\n    if ($a % 11 == 0)\n        return\
    \ false;\n    if ($a % 13 == 0)\n        return false;\n    if ($a % 15 == 0)\n\
    \        return false;\n    if ($a % 17 == 0)\n        return false;\n    if ($a\
    \ % 19 == 0)\n        return false;\n    if ($a % 21 == 0)\n        return false;\n\
    \    if ($a % 23 == 0)\n        return false;\n    if ($a % 25 == 0)\n       \
    \ return false;\n    if ($a % 27 == 0)\n        return false;\n    if ($a % 29\
    \ == 0)\n        return false;\n    if ($a % 31 == 0)\n        return false;\n\
    \    if ($a % 33 == 0)\n        return false;\n    if ($a % 35 == 0)\n       \
    \ return false;\n    if ($a % 37 == 0)\n        return false;\n    if ($a % 39\
    \ == 0)\n        return false;\n    if ($a % 41 == 0)\n        return false;\n\
    \    if ($a % 43 == 0)\n        return false;\n    if ($a % 45 == 0)\n       \
    \ return false;\n    if ($a % 47 == 0)\n        return false;\n    if ($a % 49\
    \ == 0)\n        return false;\n    if ($a % 51 == 0)\n        return false;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return false;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return false;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return false;\n    if ($a % 65 == 0)\n       \
    \ return false;\n    if ($a % 67 == 0)\n        return false;\n    if ($a % 69\
    \ == 0)\n        return false;\n    if ($a % 71 == 0)\n        return false;\n\
    \    if ($a % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n       \
    \ return false;\n    if ($a % 77 == 0)\n        return false;\n    if ($a % 79\
    \ == 0)\n        return false;\n    if ($a % 81 == 0)\n        return false;\n\
    \    if ($a % 83 == 0)\n        return false;\n    if ($a % 85 == 0)\n       \
    \ return false;\n    if ($a % 87 == 0)\n        return false;\n    if ($a % 89\
    \ == 0)\n        return false;\n    if ($a % 91 == 0)\n        return false;\n\
    \    if ($a % 93 == 0)\n        return false;\n    if ($a % 95 == 0)\n       \
    \ return false;\n    if ($a % 97 == 0)\n        return false;\n    if ($a % 99\
    \ == 0)\n        return false;\n    if ($a % 101 == 0)\n        return false;\n\
    \    if ($a % 10\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwvmetpu9.php on line 116\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5bkeo9z.php:29\n\
    Stack trace:\n#0 /tmp/tmpp5bkeo9z.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp5bkeo9z.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 !== 0)\
    \ {\n        return false;\n    }\n    $a = $a * $a * $a;\n    $a = $a * $a *\
    \ $a;\n    $a = $a * $a * $a;\n    return $a === 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_p9svm0.php:29\n\
    Stack trace:\n#0 /tmp/tmp6_p9svm0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6_p9svm0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtlcqa66.php:28\n\
    Stack trace:\n#0 /tmp/tmpwtlcqa66.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwtlcqa66.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwxyhvyo_.php:28\n\
    Stack trace:\n#0 /tmp/tmpwxyhvyo_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwxyhvyo_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 2 !== 0) {\n        return false;\n    }\n    if ($a % 3\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 4 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 5 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 6 !== 0) {\n        return false;\n    }\n    if ($a % 7 !== 0) {\n  \
    \      return false;\n    }\n    if ($a % 8 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 9 !== 0) {\n        return false;\n    }\n    if ($a % 10\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 11 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 12 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 13 !== 0) {\n        return false;\n    }\n    if ($a % 14 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 15 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 16 !== 0) {\n        return false;\n    }\n    if ($a % 17\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 18 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 19 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 20 !== 0) {\n        return false;\n    }\n    if ($a % 21 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 22 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 23 !== 0) {\n        return false;\n    }\n    if ($a % 24\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 25 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 26 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 27 !== 0) {\n        return false;\n    }\n    if ($a % 28 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 29 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 30 !== 0) {\n        return false;\n    }\n    if ($a % 31\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 32 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 33 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 34 !== 0) {\n        return false;\n    }\n    if ($a % 35 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 36 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 37 !== 0) {\n        return false;\n    }\n    if ($a % 38\
    \ !== 0) {\n        return false;\n    }\n    if ($a % 39 !== 0) {\n        return\
    \ false;\n    }\n    if ($a % 40 !== 0) {\n        return false;\n    }\n    if\
    \ ($a % 41 !== 0) {\n        return false;\n    }\n    if ($a % 42 !== 0) {\n\
    \        return false;\n    }\n    if ($a % 43 !== 0) {\n        return false;\n\
    \    }\n    if ($a % 44 !== 0) {\n        return false;\n    }\n    if ($a % 45\
    \ !== 0) {\n        return false;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcc2my8bc.php on line 152\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    if ($a % 7 == 0) return\
    \ true;\n    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw4d0ux8.php:23\n\
    Stack trace:\n#0 /tmp/tmprw4d0ux8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprw4d0ux8.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 3) {\n        return true;\n    }\n    if ($a % 3 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 9) {\n        return false;\n \
    \   }\n    if ($a % 9 === 0) {\n        return false;\n    }\n    if ($a < 27)\
    \ {\n        return true;\n    }\n    if ($a % 27 === 0) {\n        return true;\n\
    \    }\n    if ($a < 81) {\n        return false;\n    }\n    if ($a % 81 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 243) {\n        return true;\n\
    \    }\n    if ($a % 243 === 0) {\n        return true;\n    }\n    if ($a < 729)\
    \ {\n        return false;\n    }\n    if ($a % 729 === 0) {\n        return false;\n\
    \    }\n    if ($a < 3119) {\n        return true;\n    }\n    if ($a % 3119 !==\
    \ 0) {\n        return false;\n    }\n    if ($a < 7393) {\n        return false;\n\
    \    }\n    if ($a % 7393 === 0) {\n        return false;\n    }\n    if ($a <\
    \ 10251) {\n        return true;\n    }\n    if ($a % 10251 === 0) {\n       \
    \ return false;\n    }\n    if ($a < 15073) {\n        return false;\n    }\n\
    \    if ($a % 15073 === 0) {\n        return false;\n    }\n    if ($a < 20369)\
    \ {\n        return true;\n    }\n    if ($a % 20369 === 0) {\n        return\
    \ false;\n    }\n    if ($a < 40723) {\n        return false;\n    }\n    if ($a\
    \ % 40723 === 0) {\n        return false;\n    }\n    if ($a < 8193) {\n     \
    \   return true;\n    }\n    if ($a % 8193 === 0) {\n        return false;\n \
    \   }\n    if ($a < 16383) {\n        return false;\n    }\n    if ($a % 16383\
    \ === 0) {\n        return false;\n    }\n    if ($a < 32767) {\n        return\
    \ true;\n    }\n    if ($a % 32767 === 0) {\n        return false;\n    }\n  \
    \  if ($a < 65537) {\n        return false;\n    }\n    if ($a % 65537 === 0)\
    \ {\n        return false;\n    }\n    if ($a < 131071) {\n        return true;\n\
    \    }\n    if ($a % 131071 === 0) {\n        return false;\n    }\n    if ($a\
    \ < 262143) {\n        return false;\n    }\n    if ($a % 262143 === 0) {\n  \
    \      return false;\n    }\n    if ($a < 524287) {\n        return true;\n  \
    \  }\n    if ($a % 524287 === 0) {\n        return false;\n    }\n    if ($a <\
    \ 1048575) {\n        return false;\n    }\n    if ($a % 1048575 === 0) {\n  \
    \      return false;\n    }\n    if ($\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf9vpspy6.php on line 140\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6t35grs.php:29\n\
    Stack trace:\n#0 /tmp/tmpr6t35grs.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr6t35grs.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0 ||\
    \ $a % 5 == 0 || $a % 7 == 0)\n        return true;\n    else\n        return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4xnws4r.php:24\n\
    Stack trace:\n#0 /tmp/tmpl4xnws4r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpl4xnws4r.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4je0dutx.php:28\n\
    Stack trace:\n#0 /tmp/tmp4je0dutx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4je0dutx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kmtncd8.php:28\n\
    Stack trace:\n#0 /tmp/tmp9kmtncd8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9kmtncd8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8wy664h.php:27\n\
    Stack trace:\n#0 /tmp/tmpd8wy664h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpd8wy664h.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_5s918_.php:24\n\
    Stack trace:\n#0 /tmp/tmph_5s918_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph_5s918_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return false;\n    if ($a % 7 == 0) return\
    \ true;\n    if ($a % 9 == 0) return false;\n    if ($a % 11 == 0) return true;\n\
    \    if ($a % 13 == 0) return false;\n    if ($a % 15 == 0) return true;\n   \
    \ if ($a % 17 == 0) return false;\n    if ($a % 19 == 0) return true;\n    if\
    \ ($a % 21 == 0) return false;\n    if ($a % 23 == 0) return true;\n    if ($a\
    \ % 25 == 0) return false;\n    if ($a % 27 == 0) return true;\n    if ($a % 29\
    \ == 0) return false;\n    if ($a % 31 == 0) return true;\n    if ($a % 33 ==\
    \ 0) return false;\n    if ($a % 35 == 0) return true;\n    if ($a % 37 == 0)\
    \ return false;\n    if ($a % 39 == 0) return true;\n    if ($a % 41 == 0) return\
    \ false;\n    if ($a % 43 == 0) return true;\n    if ($a % 45 == 0) return false;\n\
    \    if ($a % 47 == 0) return true;\n    if ($a % 49 == 0) return false;\n   \
    \ if ($a % 51 == 0) return true;\n    if ($a % 53 == 0) return false;\n    if\
    \ ($a % 55 == 0) return true;\n    if ($a % 57 == 0) return false;\n    if ($a\
    \ % 59 == 0) return true;\n    if ($a % 61 == 0) return false;\n    if ($a % 63\
    \ == 0) return true;\n    if ($a % 65 == 0) return false;\n    if ($a % 67 ==\
    \ 0) return true;\n    if ($a % 69 == 0) return false;\n    if ($a % 71 == 0)\
    \ return true;\n    if ($a % 73 == 0) return false;\n    if ($a % 75 == 0) return\
    \ true;\n    if ($a % 77 == 0) return false;\n    if ($a % 79 == 0) return true;\n\
    \    if ($a % 81 == 0) return false;\n    if ($a % 83 == 0) return true;\n   \
    \ if ($a % 85 == 0) return false;\n    if ($a % 87 == 0) return true;\n    if\
    \ ($a % 89 == 0) return false;\n    if ($a % 91 == 0) return true;\n    if ($a\
    \ % 93 == 0) return false;\n    if ($a % 95 == 0) return true;\n    if ($a % 97\
    \ == 0) return false;\n    if ($a % 99 == 0) return true;\n    if ($a % 101 ==\
    \ 0) return false;\n    if ($a % 103 == 0) return true;\n    if ($a \nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe69o4j6q.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            } else {\n                return false;\n     \
    \       }\n        } else {\n            return false;\n        }\n    } else\
    \ {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0k92qc41.php:32\n\
    Stack trace:\n#0 /tmp/tmp0k92qc41.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0k92qc41.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56xwfqg3.php:28\n\
    Stack trace:\n#0 /tmp/tmp56xwfqg3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp56xwfqg3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gk__8br.php:24\n\
    Stack trace:\n#0 /tmp/tmp4gk__8br.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4gk__8br.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplo7nmmj_.php:28\n\
    Stack trace:\n#0 /tmp/tmplo7nmmj_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplo7nmmj_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqtpbuuu.php:28\n\
    Stack trace:\n#0 /tmp/tmpqqtpbuuu.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqqtpbuuu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a > 1) {\n        return false;\n    }\n    if ($a === 1) {\n\
    \        return true;\n    }\n    if ($a === 2) {\n        return true;\n    }\n\
    \    if ($a === 3) {\n        return true;\n    }\n    if ($a === 4) {\n     \
    \   return true;\n    }\n    if ($a === 5) {\n        return true;\n    }\n  \
    \  if ($a === 6) {\n        return true;\n    }\n    if ($a === 7) {\n       \
    \ return true;\n    }\n    if ($a === 8) {\n        return true;\n    }\n    if\
    \ ($a === 9) {\n        return true;\n    }\n    if ($a === 10) {\n        return\
    \ true;\n    }\n    if ($a === 11) {\n        return true;\n    }\n    if ($a\
    \ === 12) {\n        return true;\n    }\n    if ($a === 13) {\n        return\
    \ true;\n    }\n    if ($a === 14) {\n        return true;\n    }\n    if ($a\
    \ === 15) {\n        return true;\n    }\n    if ($a === 16) {\n        return\
    \ true;\n    }\n    if ($a === 17) {\n        return true;\n    }\n    if ($a\
    \ === 18) {\n        return true;\n    }\n    if ($a === 19) {\n        return\
    \ true;\n    }\n    if ($a === 20) {\n        return true;\n    }\n    if ($a\
    \ === 21) {\n        return true;\n    }\n    if ($a === 22) {\n        return\
    \ true;\n    }\n    if ($a === 23) {\n        return true;\n    }\n    if ($a\
    \ === 24) {\n        return true;\n    }\n    if ($a === 25) {\n        return\
    \ true;\n    }\n    if ($a === 26) {\n        return true;\n    }\n    if ($a\
    \ === 27) {\n        return true;\n    }\n    if ($a === 28) {\n        return\
    \ true;\n    }\n    if ($a === 29) {\n        return true;\n    }\n    if ($a\
    \ === 30) {\n        return true;\n    }\n    if ($a === 31) {\n        return\
    \ true;\n    }\n    if ($a === 32) {\n        return true;\n    }\n    if ($a\
    \ === 33) {\n        return true;\n    }\n    if ($a === 34) {\n        return\
    \ true;\n    }\n    if ($a === 35) {\n        return true;\n    }\n    if ($a\
    \ === 36) {\n        return true;\n    }\n    if ($a === 37) {\n        return\
    \ true;\n    }\n    if ($a === 38) {\n        return true;\n    }\n    if ($a\
    \ === 39) {\n        return true;\n    }\n    if ($a === 40) {\n        return\
    \ true;\n    }\n    if ($a === 41) {\n        return true;\n    }\n    if ($a\
    \ === 42) {\n        return true;\n    }\n    if ($a === 43) {\n        return\
    \ true;\n    }\n    if ($a === 44) {\n        return true;\n    }\n    if ($\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyheh6oao.php on line 155\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 2 === 0) {\n        return true;\n\
    \    }\n    $b = $a / 2;\n    return iscube($b) && iscube($b);\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpst26ex95.php:29\n\
    Stack trace:\n#0 /tmp/tmpst26ex95.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpst26ex95.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0unwlo1.php:29\n\
    Stack trace:\n#0 /tmp/tmpi0unwlo1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi0unwlo1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    if ($a % 9 == 0) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvux81q88.php:30\n\
    Stack trace:\n#0 /tmp/tmpvux81q88.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpvux81q88.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbqk1zvwt.php:22\n\
    Stack trace:\n#0 /tmp/tmpbqk1zvwt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbqk1zvwt.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0v7m6k2.php:28\n\
    Stack trace:\n#0 /tmp/tmpj0v7m6k2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpj0v7m6k2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiaktz_l8.php:28\n\
    Stack trace:\n#0 /tmp/tmpiaktz_l8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpiaktz_l8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqjx2g8z6.php:29\n\
    Stack trace:\n#0 /tmp/tmpqjx2g8z6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqjx2g8z6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0 || $a\
    \ > 180) {\n        return false;\n    }\n    if ($a % 9 == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyz89245h.php:26\n\
    Stack trace:\n#0 /tmp/tmpyz89245h.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyz89245h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ek_x354.php:28\n\
    Stack trace:\n#0 /tmp/tmp6ek_x354.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6ek_x354.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    if ($a % 11 == 0) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptsus6doh.php:30\n\
    Stack trace:\n#0 /tmp/tmptsus6doh.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptsus6doh.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsshs4zs1.php:28\n\
    Stack trace:\n#0 /tmp/tmpsshs4zs1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsshs4zs1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcj5lm2c1.php:28\n\
    Stack trace:\n#0 /tmp/tmpcj5lm2c1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcj5lm2c1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20f3g9h6.php:23\n\
    Stack trace:\n#0 /tmp/tmp20f3g9h6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp20f3g9h6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    if ($a % 11 == 0) {\n                    if ($a % 13 == 0) {\n          \
    \              if ($a % 17 == 0) {\n                            if ($a % 19 ==\
    \ 0) {\n                                if ($a % 23 == 0) {\n                \
    \                    if ($a % 25 == 0) {\n                                   \
    \     if ($a % 27 == 0) {\n                                            if ($a\
    \ % 31 == 0) {\n                                                if ($a % 33 ==\
    \ 0) {\n                                                    if ($a % 35 == 0)\
    \ {\n                                                        if ($a % 37 == 0)\
    \ {\n                                                            if ($a % 39 ==\
    \ 0) {\n                                                                if ($a\
    \ % 43 == 0) {\n                                                             \
    \       if ($a % 45 == 0) {\n                                                \
    \                        if ($a % 47 == 0) {\n                               \
    \                                             if ($a % 49 == 0) {\n          \
    \                                                                      if ($a\
    \ % 53 == 0) {\n                                                             \
    \                       if ($a % 55 == 0) {\n                                \
    \                                                        if ($a % 57 == 0) {\n\
    \                                                                            \
    \                if ($a % 59 == 0) {\n                                       \
    \                                                         if ($a % 63 == 0) {\n\
    \                                                                            \
    \                        if ($a % 65 == 0) {\n                               \
    \                                                                         if ($a\
    \ % 67 == 0) {\n                                                             \
    \                                               if ($a % 69 == 0) {\n        \
    \                                                                            \
    \                                            if ($a % 73 == 0) {\n           \
    \                                                                            \
    \                                             if ($a % 75 == 0) {\n          \
    \                                                                            \
    \                                                  if ($a % 77 == 0) {\n     \
    \                                                                            \
    \                                                           if ($a % 79 == 0)\
    \ {\n                                                                        \
    \                                                                        if ($a\
    \ % 83 == 0) {\n                                                             \
    \                                                                            \
    \           if ($a % 85 == 0) {\n                                            \
    \                                                                            \
    \                                if ($a % 87 == 0) {\n                       \
    \                                                                            \
    \                                                         if ($a % 89 == 0) {\n\
    \                                                                            \
    \                                                                            \
    \        if ($a % 93 == 0) {\n                                               \
    \                                                                            \
    \                                         if ($a % 95 == 0) {\n              \
    \                                                                            \
    \                                                                            \
    \  if ($a % 97 == 0) {\n                                                     \
    \                                                                            \
    \                                           if ($a % 99 == 0) {\n            \
    \                                                                            \
    \                                                                            \
    \                            if ($a % 103 == 0) {\n                          \
    \                                                                            \
    \                                                                            \
    \                  if ($a % 105 == 0) {\n                                    \
    \                                                                            \
    \                                                                            \
    \            if ($a % 107 == 0) {\n                                          \
    \                                                                            \
    \                                                                            \
    \          if ($a % 109 == 0) {\n                                            \
    \                                                                            \
    \                                                                            \
    \            if ($a % 113 == 0) {\n                                          \
    \                                                                            \
    \                                                                            \
    \                  if ($a % 115 == 0) {\n                                    \
    \                                                                            \
    \                                                                            \
    \                            if ($a % 117 == 0) {\n                          \
    \                                                                            \
    \                                                                            \
    \                                          if ($a % 119 == 0) {\n            \
    \                                                                            \
    \                                                                            \
    \                                                            if ($a % 121 == 0)\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                            \
    \    if ($a % 123 == 0) {\n                                                  \
    \                                                                            \
    \                                                                            \
    \                              if ($a % 125 == 0) {\n                        \
    \                                                                            \
    \                                                                            \
    \                                                            if ($a % 127 == 0)\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                            \
    \                if ($a % 129 == 0) {\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                      if ($a % 133 == 0) {\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    if ($a % 135 == 0) {\n                                  \
    \                                                                            \
    \                                                                            \
    \                                                                  if ($a % 137\
    \ == 0) {\n                                                                  \
    \                                                                            \
    \                                                                            \
    \                                      if ($\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmds3zrie.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxperl3uo.php:28\n\
    Stack trace:\n#0 /tmp/tmpxperl3uo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxperl3uo.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp733h9jrv.php:26\n\
    Stack trace:\n#0 /tmp/tmp733h9jrv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp733h9jrv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0 || $a\
    \ > 180) {\n        return false;\n    }\n    $b = $a ** 3;\n    if ($b == $a)\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodub9h7y.php:30\n\
    Stack trace:\n#0 /tmp/tmpodub9h7y.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpodub9h7y.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqqukdwc.php:28\n\
    Stack trace:\n#0 /tmp/tmpaqqukdwc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpaqqukdwc.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return false;\n    if ($a % 7 == 0) return\
    \ true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuehazai0.php:24\n\
    Stack trace:\n#0 /tmp/tmpuehazai0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuehazai0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkr2r_tif.php:29\n\
    Stack trace:\n#0 /tmp/tmpkr2r_tif.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpkr2r_tif.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88gbgvun.php:27\n\
    Stack trace:\n#0 /tmp/tmp88gbgvun.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp88gbgvun.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    if ($a % 7 == 0) return\
    \ true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4nx4f32.php:24\n\
    Stack trace:\n#0 /tmp/tmpu4nx4f32.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpu4nx4f32.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j_c2d_q.php:28\n\
    Stack trace:\n#0 /tmp/tmp8j_c2d_q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8j_c2d_q.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7q87sa6n.php:28\n\
    Stack trace:\n#0 /tmp/tmp7q87sa6n.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7q87sa6n.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbh2bzfsj.php:27\n\
    Stack trace:\n#0 /tmp/tmpbh2bzfsj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbh2bzfsj.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28f9fjuc.php:28\n\
    Stack trace:\n#0 /tmp/tmp28f9fjuc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp28f9fjuc.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpolk3ulzr.php:27\n\
    Stack trace:\n#0 /tmp/tmpolk3ulzr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpolk3ulzr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % 2 == 0) {\n            if ($a % 3 == 0) {\n            \
    \    if ($a % 5 == 0) {\n                    if ($a % 7 == 0) {\n            \
    \            return true;\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwcx0g8m.php:32\n\
    Stack trace:\n#0 /tmp/tmpdwcx0g8m.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdwcx0g8m.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a === 0\
    \ && $a % $a === 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2oel46u3.php:26\n\
    Stack trace:\n#0 /tmp/tmp2oel46u3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2oel46u3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0siozfdv.php:23\n\
    Stack trace:\n#0 /tmp/tmp0siozfdv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0siozfdv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % 2 == 0) {\n            if ($a % 3 == 0) {\n            \
    \    if ($a % 4 == 0) {\n                    if ($a % 5 == 0) {\n            \
    \            if ($a % 6 == 0) {\n                            return true;\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhbjivef.php:34\n\
    Stack trace:\n#0 /tmp/tmpfhbjivef.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfhbjivef.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6xlu_xju.php:29\n\
    Stack trace:\n#0 /tmp/tmp6xlu_xju.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6xlu_xju.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc563tjvw.php:23\n\
    Stack trace:\n#0 /tmp/tmpc563tjvw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc563tjvw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil7wiy4c.php:27\n\
    Stack trace:\n#0 /tmp/tmpil7wiy4c.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpil7wiy4c.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbumgcdb.php:27\n\
    Stack trace:\n#0 /tmp/tmpzbumgcdb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzbumgcdb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphmg28t0a.php:29\n\
    Stack trace:\n#0 /tmp/tmphmg28t0a.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphmg28t0a.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3b0qmrhb.php:29\n\
    Stack trace:\n#0 /tmp/tmp3b0qmrhb.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3b0qmrhb.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return false;\n\
    \    if ($a % 9 == 0)\n        return false;\n    if ($a % 11 == 0)\n        return\
    \ false;\n    if ($a % 13 == 0)\n        return false;\n    if ($a % 15 == 0)\n\
    \        return false;\n    if ($a % 17 == 0)\n        return false;\n    if ($a\
    \ % 19 == 0)\n        return false;\n    if ($a % 21 == 0)\n        return false;\n\
    \    if ($a % 23 == 0)\n        return false;\n    if ($a % 25 == 0)\n       \
    \ return false;\n    if ($a % 27 == 0)\n        return false;\n    if ($a % 29\
    \ == 0)\n        return false;\n    if ($a % 31 == 0)\n        return false;\n\
    \    if ($a % 33 == 0)\n        return false;\n    if ($a % 35 == 0)\n       \
    \ return false;\n    if ($a % 37 == 0)\n        return false;\n    if ($a % 39\
    \ == 0)\n        return false;\n    if ($a % 41 == 0)\n        return false;\n\
    \    if ($a % 43 == 0)\n        return false;\n    if ($a % 45 == 0)\n       \
    \ return false;\n    if ($a % 47 == 0)\n        return false;\n    if ($a % 49\
    \ == 0)\n        return false;\n    if ($a % 51 == 0)\n        return false;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return false;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return false;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return false;\n    if ($a % 65 == 0)\n       \
    \ return false;\n    if ($a % 67 == 0)\n        return false;\n    if ($a % 69\
    \ == 0)\n        return false;\n    if ($a % 71 == 0)\n        return false;\n\
    \    if ($a % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n       \
    \ return false;\n    if ($a % 77 == 0)\n        return false;\n    if ($a % 79\
    \ == 0)\n        return false;\n    if ($a % 81 == 0)\n        return false;\n\
    \    if ($a % 83 == 0)\n        return false;\n    if ($a % 85 == 0)\n       \
    \ return false;\n    if ($a % 87 == 0)\n        return false;\n    if ($a % 89\
    \ == 0)\n        return false;\n    if ($a % 91 == 0)\n        return false;\n\
    \    if ($a % 93 == 0)\n        return false;\n    if ($a % 95 == 0)\n       \
    \ return false;\n    if ($a % 97 == 0)\n        return false;\n    if ($a % 99\
    \ == 0)\n        return false;\n    if ($a % 101 == 0)\n        return false;\n\
    \    if ($a % 103\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1e__2hyk.php on line 116\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 == 0) {\n        return true;\n \
    \   }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkjecxq3y.php:27\n\
    Stack trace:\n#0 /tmp/tmpkjecxq3y.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkjecxq3y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 !== 0)\
    \ {\n        return false;\n    }\n    if ($a % 2 === 0) {\n        return true;\n\
    \    }\n    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a % 4 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 5 === 0) {\n        return true;\n\
    \    }\n    if ($a % 6 === 0) {\n        return true;\n    }\n    if ($a % 7 ===\
    \ 0) {\n        return true;\n    }\n    if ($a % 8 === 0) {\n        return true;\n\
    \    }\n    if ($a % 9 === 0) {\n        return true;\n    }\n    if ($a % 10\
    \ === 0) {\n        return true;\n    }\n    if ($a % 11 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 12 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 13 === 0) {\n        return true;\n    }\n    if ($a % 14 === 0) {\n \
    \       return true;\n    }\n    if ($a % 15 === 0) {\n        return true;\n\
    \    }\n    if ($a % 16 === 0) {\n        return true;\n    }\n    if ($a % 17\
    \ === 0) {\n        return true;\n    }\n    if ($a % 18 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 19 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 20 === 0) {\n        return true;\n    }\n    if ($a % 21 === 0) {\n \
    \       return true;\n    }\n    if ($a % 22 === 0) {\n        return true;\n\
    \    }\n    if ($a % 23 === 0) {\n        return true;\n    }\n    if ($a % 24\
    \ === 0) {\n        return true;\n    }\n    if ($a % 25 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 26 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 27 === 0) {\n        return true;\n    }\n    if ($a % 28 === 0) {\n \
    \       return true;\n    }\n    if ($a % 29 === 0) {\n        return true;\n\
    \    }\n    if ($a % 30 === 0) {\n        return true;\n    }\n    if ($a % 31\
    \ === 0) {\n        return true;\n    }\n    if ($a % 32 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 33 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 34 === 0) {\n        return true;\n    }\n    if ($a % 35 === 0) {\n \
    \       return true;\n    }\n    if ($a % 36 === 0) {\n        return true;\n\
    \    }\n    if ($a % 37 === 0) {\n        return true;\n    }\n    if ($a % 38\
    \ === 0) {\n        return true;\n    }\n    if ($a % 39 === 0) {\n        return\
    \ true;\n    }\n    if ($a % 40 === 0) {\n        return true;\n    }\n    if\
    \ ($a % 41 === 0) {\n        return true;\n    }\n    if ($a % 42 === 0) {\n \
    \       return true;\n    }\n    if ($a % 43 === 0) {\n        return true;\n\
    \    }\n    if ($a % 44 === 0) {\n        return true;\n    }\n    if ($a % 45\
    \ === 0) {\n        return true;\n    }\n    if ($a % 46 === 0) {\n        return\
    \ true;\n    }\n    if ($a \nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3j81ppke.php on line 152\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_4sjasy.php:23\n\
    Stack trace:\n#0 /tmp/tmpi_4sjasy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi_4sjasy.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return false;\n\
    \    if ($a % 9 == 0)\n        return false;\n    if ($a % 11 == 0)\n        return\
    \ false;\n    if ($a % 13 == 0)\n        return false;\n    if ($a % 15 == 0)\n\
    \        return false;\n    if ($a % 17 == 0)\n        return false;\n    if ($a\
    \ % 19 == 0)\n        return false;\n    if ($a % 21 == 0)\n        return false;\n\
    \    if ($a % 23 == 0)\n        return false;\n    if ($a % 25 == 0)\n       \
    \ return false;\n    if ($a % 27 == 0)\n        return false;\n    if ($a % 29\
    \ == 0)\n        return false;\n    if ($a % 31 == 0)\n        return false;\n\
    \    if ($a % 33 == 0)\n        return false;\n    if ($a % 35 == 0)\n       \
    \ return false;\n    if ($a % 37 == 0)\n        return false;\n    if ($a % 39\
    \ == 0)\n        return false;\n    if ($a % 41 == 0)\n        return false;\n\
    \    if ($a % 43 == 0)\n        return false;\n    if ($a % 45 == 0)\n       \
    \ return false;\n    if ($a % 47 == 0)\n        return false;\n    if ($a % 49\
    \ == 0)\n        return false;\n    if ($a % 51 == 0)\n        return false;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return false;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return false;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return false;\n    if ($a % 65 == 0)\n       \
    \ return false;\n    if ($a % 67 == 0)\n        return false;\n    if ($a % 69\
    \ == 0)\n        return false;\n    if ($a % 71 == 0)\n        return false;\n\
    \    if ($a % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n       \
    \ return false;\n    if ($a % 77 == 0)\n        return false;\n    if ($a % 79\
    \ == 0)\n        return false;\n    if ($a % 81 == 0)\n        return false;\n\
    \    if ($a % 83 == 0)\n        return false;\n    if ($a % 85 == 0)\n       \
    \ return false;\n    if ($a % 87 == 0)\n        return false;\n    if ($a % 89\
    \ == 0)\n        return false;\n    if ($a % 91 == 0)\n        return false;\n\
    \    if ($a % 93 == 0)\n        return false;\n    if ($a % 95 == 0)\n       \
    \ return false;\n    if ($a % 97 == 0)\n        return false;\n    if ($a % 99\
    \ == 0)\n        return false;\n    if ($a % 101 == 0)\n        return false;\n\
    \    if ($a % 10\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx70a1bd0.php on line 116\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7x2z2gyv.php:28\n\
    Stack trace:\n#0 /tmp/tmp7x2z2gyv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7x2z2gyv.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr783w9jh.php:28\n\
    Stack trace:\n#0 /tmp/tmpr783w9jh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr783w9jh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpno4xyzgw.php:29\n\
    Stack trace:\n#0 /tmp/tmpno4xyzgw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpno4xyzgw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2eory24k.php:28\n\
    Stack trace:\n#0 /tmp/tmp2eory24k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2eory24k.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82nh79c4.php:29\n\
    Stack trace:\n#0 /tmp/tmp82nh79c4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp82nh79c4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) return\
    \ false;\n    if ($a % 3 != 0) return false;\n    if ($a % 5 == 0) return false;\n\
    \    if ($a % 7 == 0) return false;\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17vhfmbd.php:25\n\
    Stack trace:\n#0 /tmp/tmp17vhfmbd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp17vhfmbd.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a === 0\
    \ && $a % $a === 0 && $a % $a === 0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqpnrtue.php:25\n\
    Stack trace:\n#0 /tmp/tmpkqpnrtue.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkqpnrtue.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplebakik1.php:28\n\
    Stack trace:\n#0 /tmp/tmplebakik1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplebakik1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 !== 0\
    \ || $a < 1 || $a > 9) return false;\n    $cube = 0;\n    for ($i = 1; $i <= $a;\
    \ $i++) {\n        $cube += $i;\n        if ($i % $a === 0) $cube *= $a;\n   \
    \ }\n    return $cube === $a;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_popm2v.php:28\n\
    Stack trace:\n#0 /tmp/tmpu_popm2v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpu_popm2v.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0 || $a\
    \ > 180) {\n        return false;\n    }\n    if ($a % 9 == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7ozxvyc.php:27\n\
    Stack trace:\n#0 /tmp/tmpw7ozxvyc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpw7ozxvyc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzevuz0g_.php:29\n\
    Stack trace:\n#0 /tmp/tmpzevuz0g_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzevuz0g_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1swgl1w.php:28\n\
    Stack trace:\n#0 /tmp/tmpx1swgl1w.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpx1swgl1w.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbl1mj5xz.php:28\n\
    Stack trace:\n#0 /tmp/tmpbl1mj5xz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbl1mj5xz.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1a18_ph.php:27\n\
    Stack trace:\n#0 /tmp/tmpt1a18_ph.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpt1a18_ph.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0 ||\
    \ $a % 5 == 0)\n        return true;\n    else\n        return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ptu0fvf.php:23\n\
    Stack trace:\n#0 /tmp/tmp4ptu0fvf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4ptu0fvf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0 || $a\
    \ > 180) {\n        return false;\n    }\n    if ($a % 9 == 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rvkfb_1.php:26\n\
    Stack trace:\n#0 /tmp/tmp0rvkfb_1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0rvkfb_1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph7h9em0q.php:28\n\
    Stack trace:\n#0 /tmp/tmph7h9em0q.php(38): test()\n#1 {main}\n  thrown in /tmp/tmph7h9em0q.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    if ($a % 3 === 1) {\n        return false;\n    }\n    if ($a % 3\
    \ === 2) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsanaesl.php:33\n\
    Stack trace:\n#0 /tmp/tmprsanaesl.php(43): test()\n#1 {main}\n  thrown in /tmp/tmprsanaesl.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 3) {\n        return true;\n    }\n    if ($a % 3 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 9) {\n        return false;\n \
    \   }\n    if ($a % 3 === 1) {\n        return false;\n    }\n    if ($a < 27)\
    \ {\n        return true;\n    }\n    if ($a % 3 === 2) {\n        return true;\n\
    \    }\n    if ($a < 81) {\n        return false;\n    }\n    if ($a % 3 === 3)\
    \ {\n        return true;\n    }\n    if ($a < 243) {\n        return false;\n\
    \    }\n    if ($a % 3 === 4) {\n        return true;\n    }\n    if ($a < 729)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 5) {\n        return true;\n\
    \    }\n    if ($a < 3059) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 6) {\n        return true;\n    }\n    if ($a < 9871) {\n        return false;\n\
    \    }\n    if ($a % 3 === 7) {\n        return true;\n    }\n    if ($a < 4181)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 8) {\n        return true;\n\
    \    }\n    if ($a < 7679) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 9) {\n        return true;\n    }\n    if ($a < 15311) {\n        return false;\n\
    \    }\n    if ($a % 3 === 10) {\n        return true;\n    }\n    if ($a < 30103)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 11) {\n        return true;\n\
    \    }\n    if ($a < 59427) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 12) {\n        return true;\n    }\n    if ($a < 104759) {\n        return false;\n\
    \    }\n    if ($a % 3 === 13) {\n        return true;\n    }\n    if ($a < 152983)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 14) {\n        return true;\n\
    \    }\n    if ($a < 307271) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 15) {\n        return true;\n    }\n    if ($a < 595577) {\n        return false;\n\
    \    }\n    if ($a % 3 === 16) {\n        return true;\n    }\n    if ($a < 1048577)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 17) {\n        return true;\n\
    \    }\n    if ($a < 1529919) {\n        return false;\n    }\n    if ($a % 3\
    \ === 18) {\n        return true;\n    }\n    if ($a < 3072871) {\n        return\
    \ false;\n    }\n    if ($a % 3 === \nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_dxuaqqv.php on line 137\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0 ||\
    \ $a % 5 == 0 || $a % 7 == 0)\n        return true;\n    else\n        return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqf9vxjg.php:24\n\
    Stack trace:\n#0 /tmp/tmpyqf9vxjg.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyqf9vxjg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphphiyecy.php:27\n\
    Stack trace:\n#0 /tmp/tmphphiyecy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphphiyecy.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_017efn.php:28\n\
    Stack trace:\n#0 /tmp/tmpm_017efn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpm_017efn.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptp3u1wv2.php:28\n\
    Stack trace:\n#0 /tmp/tmptp3u1wv2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmptp3u1wv2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    if ($a % 7 == 0) return\
    \ true;\n    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pxnp8hd.php:23\n\
    Stack trace:\n#0 /tmp/tmp5pxnp8hd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5pxnp8hd.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ztvdk7l.php:27\n\
    Stack trace:\n#0 /tmp/tmp6ztvdk7l.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6ztvdk7l.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdd33_79.php:28\n\
    Stack trace:\n#0 /tmp/tmpxdd33_79.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxdd33_79.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    if ($a % 3 === 1) {\n        return false;\n    }\n    if ($a % 3\
    \ === 2) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwyjdcdu2.php:33\n\
    Stack trace:\n#0 /tmp/tmpwyjdcdu2.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwyjdcdu2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5k6hj6xl.php:28\n\
    Stack trace:\n#0 /tmp/tmp5k6hj6xl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5k6hj6xl.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7c2v2h1n.php:27\n\
    Stack trace:\n#0 /tmp/tmp7c2v2h1n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7c2v2h1n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13yotqul.php:28\n\
    Stack trace:\n#0 /tmp/tmp13yotqul.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp13yotqul.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 3) {\n        return true;\n    }\n    if ($a % 3 === 0)\
    \ {\n        return true;\n    }\n    if ($a % 5 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptl606332.php:36\n\
    Stack trace:\n#0 /tmp/tmptl606332.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptl606332.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      if ($a % $a == 0) {\n                    return true;\n               \
    \ }\n            }\n        }\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6vatp0zx.php:30\n\
    Stack trace:\n#0 /tmp/tmp6vatp0zx.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp6vatp0zx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirt4wk3x.php:29\n\
    Stack trace:\n#0 /tmp/tmpirt4wk3x.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpirt4wk3x.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    if ($a % 7 == 0) return\
    \ true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfv6ua16h.php:24\n\
    Stack trace:\n#0 /tmp/tmpfv6ua16h.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfv6ua16h.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vb5wiaz.php:29\n\
    Stack trace:\n#0 /tmp/tmp0vb5wiaz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0vb5wiaz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    if ($a % 9 == 0)\n        return false;\n    if ($a % 11 == 0)\n        return\
    \ true;\n    if ($a % 13 == 0)\n        return false;\n    if ($a % 15 == 0)\n\
    \        return true;\n    if ($a % 17 == 0)\n        return false;\n    if ($a\
    \ % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n        return false;\n\
    \    if ($a % 23 == 0)\n        return true;\n    if ($a % 25 == 0)\n        return\
    \ false;\n    if ($a % 27 == 0)\n        return true;\n    if ($a % 29 == 0)\n\
    \        return false;\n    if ($a % 31 == 0)\n        return true;\n    if ($a\
    \ % 33 == 0)\n        return false;\n    if ($a % 35 == 0)\n        return true;\n\
    \    if ($a % 37 == 0)\n        return false;\n    if ($a % 39 == 0)\n       \
    \ return true;\n    if ($a % 41 == 0)\n        return false;\n    if ($a % 43\
    \ == 0)\n        return true;\n    if ($a % 45 == 0)\n        return false;\n\
    \    if ($a % 47 == 0)\n        return true;\n    if ($a % 49 == 0)\n        return\
    \ false;\n    if ($a % 51 == 0)\n        return true;\n    if ($a % 53 == 0)\n\
    \        return false;\n    if ($a % 55 == 0)\n        return true;\n    if ($a\
    \ % 57 == 0)\n        return false;\n    if ($a % 59 == 0)\n        return true;\n\
    \    if ($a % 61 == 0)\n        return false;\n    if ($a % 63 == 0)\n       \
    \ return true;\n    if ($a % 65 == 0)\n        return false;\n    if ($a % 67\
    \ == 0)\n        return true;\n    if ($a % 69 == 0)\n        return false;\n\
    \    if ($a % 71 == 0)\n        return true;\n    if ($a % 73 == 0)\n        return\
    \ false;\n    if ($a % 75 == 0)\n        return true;\n    if ($a % 77 == 0)\n\
    \        return false;\n    if ($a % 79 == 0)\n        return true;\n    if ($a\
    \ % 81 == 0)\n        return false;\n    if ($a % 83 == 0)\n        return true;\n\
    \    if ($a % 85 == 0)\n        return false;\n    if ($a % 87 == 0)\n       \
    \ return true;\n    if ($a % 89 == 0)\n        return false;\n    if ($a % 91\
    \ == 0)\n        return true;\n    if ($a % 93 == 0)\n        return false;\n\
    \    if ($a % 95 == 0)\n        return true;\n    if ($a % 97 == 0)\n        return\
    \ false;\n    if ($a % 99 == 0)\n        return true;\n    if ($a % 101 == 0)\n\
    \        return false;\n    if ($a % 10\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9nge2dbz.php on line 116\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwlsgohfv.php:28\n\
    Stack trace:\n#0 /tmp/tmpwlsgohfv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwlsgohfv.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk86b32oe.php:23\n\
    Stack trace:\n#0 /tmp/tmpk86b32oe.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpk86b32oe.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            } else {\n                return false;\n   \
    \         }\n        } else {\n            return false;\n        }\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7xguf65.php:34\n\
    Stack trace:\n#0 /tmp/tmpr7xguf65.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpr7xguf65.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      if ($a % $a == 0) {\n                    return true;\n               \
    \ }\n            }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xdywpxv.php:31\n\
    Stack trace:\n#0 /tmp/tmp_xdywpxv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_xdywpxv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    $cube = 0;\n    for ($i = 1; $i <= $a; $i++)\n\
    \        $cube += $i ** 3;\n    return $cube == $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_s88makz.php:32\n\
    Stack trace:\n#0 /tmp/tmp_s88makz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_s88makz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vf_illl.php:29\n\
    Stack trace:\n#0 /tmp/tmp3vf_illl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3vf_illl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqaltqrf.php:29\n\
    Stack trace:\n#0 /tmp/tmpiqaltqrf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpiqaltqrf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogxp6l8i.php:28\n\
    Stack trace:\n#0 /tmp/tmpogxp6l8i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpogxp6l8i.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0 ||\
    \ $a % 5 == 0 || $a % 7 == 0)\n        return true;\n    else\n        return\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0l5ne6br.php:23\n\
    Stack trace:\n#0 /tmp/tmp0l5ne6br.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0l5ne6br.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 == 0) {\n        return true;\n \
    \   }\n    if ($a % 5 == 0) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf4ub4_kf.php:30\n\
    Stack trace:\n#0 /tmp/tmpf4ub4_kf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf4ub4_kf.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpby0w7c8h.php:24\n\
    Stack trace:\n#0 /tmp/tmpby0w7c8h.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpby0w7c8h.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppurpn13u.php:29\n\
    Stack trace:\n#0 /tmp/tmppurpn13u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppurpn13u.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1exjgzyw.php:23\n\
    Stack trace:\n#0 /tmp/tmp1exjgzyw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1exjgzyw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return true;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdivkbpt1.php:29\n\
    Stack trace:\n#0 /tmp/tmpdivkbpt1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpdivkbpt1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphtvueedk.php:23\n\
    Stack trace:\n#0 /tmp/tmphtvueedk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphtvueedk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_w8mfltp.php:28\n\
    Stack trace:\n#0 /tmp/tmp_w8mfltp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_w8mfltp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqgsz0f_u.php:28\n\
    Stack trace:\n#0 /tmp/tmpqgsz0f_u.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqgsz0f_u.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe11ogjv9.php:24\n\
    Stack trace:\n#0 /tmp/tmpe11ogjv9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpe11ogjv9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_90vzwcm.php:28\n\
    Stack trace:\n#0 /tmp/tmp_90vzwcm.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_90vzwcm.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 3 == 0) {\n        return true;\n\
    \    }\n    if ($a % 5 == 0) {\n        return true;\n    }\n    if ($a % 7 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmc308ag_.php:33\n\
    Stack trace:\n#0 /tmp/tmpmc308ag_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmc308ag_.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 3) {\n        return true;\n    }\n    if ($a % 3 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 6) {\n        return false;\n \
    \   }\n    if ($a % 6 === 0) {\n        return false;\n    }\n    if ($a < 9)\
    \ {\n        return true;\n    }\n    if ($a % 9 === 0) {\n        return true;\n\
    \    }\n    if ($a < 12) {\n        return false;\n    }\n    if ($a % 12 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 15) {\n        return true;\n\
    \    }\n    if ($a % 15 === 0) {\n        return true;\n    }\n    if ($a < 18)\
    \ {\n        return false;\n    }\n    if ($a % 18 === 0) {\n        return false;\n\
    \    }\n    if ($a < 21) {\n        return true;\n    }\n    if ($a % 21 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 24) {\n        return false;\n\
    \    }\n    if ($a % 24 === 0) {\n        return false;\n    }\n    if ($a < 27)\
    \ {\n        return true;\n    }\n    if ($a % 27 === 0) {\n        return true;\n\
    \    }\n    if ($a < 30) {\n        return false;\n    }\n    if ($a % 30 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 33) {\n        return true;\n\
    \    }\n    if ($a % 33 === 0) {\n        return true;\n    }\n    if ($a < 36)\
    \ {\n        return false;\n    }\n    if ($a % 36 === 0) {\n        return false;\n\
    \    }\n    if ($a < 39) {\n        return true;\n    }\n    if ($a % 39 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 42) {\n        return false;\n\
    \    }\n    if ($a % 42 === 0) {\n        return false;\n    }\n    if ($a < 45)\
    \ {\n        return true;\n    }\n    if ($a % 45 === 0) {\n        return true;\n\
    \    }\n    if ($a < 48) {\n        return false;\n    }\n    if ($a % 48 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 51) {\n        return true;\n\
    \    }\n    if ($a % 51 === 0) {\n        return true;\n    }\n    if ($a < 54)\
    \ {\n        return false;\n    }\n    if ($a % 54 === 0) {\n        return false;\n\
    \    }\n    if ($a < 57) {\n        return true;\n    }\n    if ($a % 57 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 60) {\n        return false;\n\
    \    }\n    if ($a % 60 === 0) {\n        return false;\n    }\n    if ($a < 63)\
    \ {\n        return true;\n    }\n    if ($a % 63 === 0) {\n        return true;\n\
    \    }\n    if ($a < 66) {\n        return false;\n    }\n    if ($a % 66 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 69) {\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb8c3x3f6.php on line 167\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            } else {\n                return false;\n     \
    \       }\n        } else {\n            return false;\n        }\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymxeqsmk.php:33\n\
    Stack trace:\n#0 /tmp/tmpymxeqsmk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpymxeqsmk.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a === 0\
    \ && $a % $a === 0 && $a % $a === 0) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppnzcddxi.php:25\n\
    Stack trace:\n#0 /tmp/tmppnzcddxi.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppnzcddxi.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppdurq9e4.php:28\n\
    Stack trace:\n#0 /tmp/tmppdurq9e4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppdurq9e4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpikfxokb4.php:27\n\
    Stack trace:\n#0 /tmp/tmpikfxokb4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpikfxokb4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6slr4g7c.php:28\n\
    Stack trace:\n#0 /tmp/tmp6slr4g7c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6slr4g7c.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a === 0\
    \ && $a % $a === 0 && $a % $a === 0)\n        return true;\n    else\n       \
    \ return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvg52rj64.php:24\n\
    Stack trace:\n#0 /tmp/tmpvg52rj64.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvg52rj64.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    if ($a % 9 == 0)\n        return false;\n    if ($a % 11 == 0)\n        return\
    \ true;\n    if ($a % 13 == 0)\n        return false;\n    if ($a % 15 == 0)\n\
    \        return true;\n    if ($a % 17 == 0)\n        return false;\n    if ($a\
    \ % 19 == 0)\n        return true;\n    if ($a % 21 == 0)\n        return false;\n\
    \    if ($a % 23 == 0)\n        return true;\n    if ($a % 25 == 0)\n        return\
    \ false;\n    if ($a % 27 == 0)\n        return true;\n    if ($a % 29 == 0)\n\
    \        return false;\n    if ($a % 31 == 0)\n        return true;\n    if ($a\
    \ % 33 == 0)\n        return false;\n    if ($a % 35 == 0)\n        return true;\n\
    \    if ($a % 37 == 0)\n        return false;\n    if ($a % 39 == 0)\n       \
    \ return true;\n    if ($a % 41 == 0)\n        return false;\n    if ($a % 43\
    \ == 0)\n        return true;\n    if ($a % 45 == 0)\n        return false;\n\
    \    if ($a % 47 == 0)\n        return true;\n    if ($a % 49 == 0)\n        return\
    \ false;\n    if ($a % 51 == 0)\n        return true;\n    if ($a % 53 == 0)\n\
    \        return false;\n    if ($a % 55 == 0)\n        return true;\n    if ($a\
    \ % 57 == 0)\n        return false;\n    if ($a % 59 == 0)\n        return true;\n\
    \    if ($a % 61 == 0)\n        return false;\n    if ($a % 63 == 0)\n       \
    \ return true;\n    if ($a % 65 == 0)\n        return false;\n    if ($a % 67\
    \ == 0)\n        return true;\n    if ($a % 69 == 0)\n        return false;\n\
    \    if ($a % 71 == 0)\n        return true;\n    if ($a % 73 == 0)\n        return\
    \ false;\n    if ($a % 75 == 0)\n        return true;\n    if ($a % 77 == 0)\n\
    \        return false;\n    if ($a % 79 == 0)\n        return true;\n    if ($a\
    \ % 81 == 0)\n        return false;\n    if ($a % 83 == 0)\n        return true;\n\
    \    if ($a % 85 == 0)\n        return false;\n    if ($a % 87 == 0)\n       \
    \ return true;\n    if ($a % 89 == 0)\n        return false;\n    if ($a % 91\
    \ == 0)\n        return true;\n    if ($a % 93 == 0)\n        return false;\n\
    \    if ($a % 95 == 0)\n        return true;\n    if ($a % 97 == 0)\n        return\
    \ false;\n    if ($a % 99 == 0)\n        return true;\n    if ($a % 101 == 0)\n\
    \        return false;\n    if ($a % 103\nfunction candidate(...$args) {\n   \
    \ return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfu5_2peq.php on line 116\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 == 0) {\n        return true;\n \
    \   }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9jkwr2u.php:27\n\
    Stack trace:\n#0 /tmp/tmp_9jkwr2u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_9jkwr2u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ppner53.php:22\n\
    Stack trace:\n#0 /tmp/tmp4ppner53.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4ppner53.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_a86hf4.php:24\n\
    Stack trace:\n#0 /tmp/tmpm_a86hf4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm_a86hf4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9wacmzuv.php:29\n\
    Stack trace:\n#0 /tmp/tmp9wacmzuv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9wacmzuv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkfqphlpk.php:29\n\
    Stack trace:\n#0 /tmp/tmpkfqphlpk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpkfqphlpk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qx42ssg.php:28\n\
    Stack trace:\n#0 /tmp/tmp3qx42ssg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3qx42ssg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpys_8ygpo.php:28\n\
    Stack trace:\n#0 /tmp/tmpys_8ygpo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpys_8ygpo.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2s24v_52.php:22\n\
    Stack trace:\n#0 /tmp/tmp2s24v_52.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2s24v_52.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2apuv7wp.php:28\n\
    Stack trace:\n#0 /tmp/tmp2apuv7wp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp2apuv7wp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjwlj54p.php:28\n\
    Stack trace:\n#0 /tmp/tmppjwlj54p.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppjwlj54p.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a ==\
    \ 0);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprgr19cu6.php:22\n\
    Stack trace:\n#0 /tmp/tmprgr19cu6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprgr19cu6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4haccsf0.php:29\n\
    Stack trace:\n#0 /tmp/tmp4haccsf0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4haccsf0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4877ej6_.php:21\n\
    Stack trace:\n#0 /tmp/tmp4877ej6_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4877ej6_.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    if ($a % 7 == 0) return\
    \ true;\n    if ($a % 9 == 0) return true;\n    if ($a % 11 == 0) return true;\n\
    \    if ($a % 13 == 0) return true;\n    if ($a % 15 == 0) return true;\n    if\
    \ ($a % 17 == 0) return true;\n    if ($a % 19 == 0) return true;\n    if ($a\
    \ % 21 == 0) return true;\n    if ($a % 23 == 0) return true;\n    if ($a % 25\
    \ == 0) return true;\n    if ($a % 27 == 0) return true;\n    if ($a % 29 == 0)\
    \ return true;\n    if ($a % 31 == 0) return true;\n    if ($a % 33 == 0) return\
    \ true;\n    if ($a % 35 == 0) return true;\n    if ($a % 37 == 0) return true;\n\
    \    if ($a % 39 == 0) return true;\n    if ($a % 41 == 0) return true;\n    if\
    \ ($a % 43 == 0) return true;\n    if ($a % 45 == 0) return true;\n    if ($a\
    \ % 47 == 0) return true;\n    if ($a % 49 == 0) return true;\n    if ($a % 51\
    \ == 0) return true;\n    if ($a % 53 == 0) return true;\n    if ($a % 55 == 0)\
    \ return true;\n    if ($a % 57 == 0) return true;\n    if ($a % 59 == 0) return\
    \ true;\n    if ($a % 61 == 0) return true;\n    if ($a % 63 == 0) return true;\n\
    \    if ($a % 65 == 0) return true;\n    if ($a % 67 == 0) return true;\n    if\
    \ ($a % 69 == 0) return true;\n    if ($a % 71 == 0) return true;\n    if ($a\
    \ % 73 == 0) return true;\n    if ($a % 75 == 0) return true;\n    if ($a % 77\
    \ == 0) return true;\n    if ($a % 79 == 0) return true;\n    if ($a % 81 == 0)\
    \ return true;\n    if ($a % 83 == 0) return true;\n    if ($a % 85 == 0) return\
    \ true;\n    if ($a % 87 == 0) return true;\n    if ($a % 89 == 0) return true;\n\
    \    if ($a % 91 == 0) return true;\n    if ($a % 93 == 0) return true;\n    if\
    \ ($a % 95 == 0) return true;\n    if ($a % 97 == 0) return true;\n    if ($a\
    \ % 99 == 0) return true;\n    if ($a % 101 == 0) return true;\n    if ($a % 103\
    \ == 0) return true;\n    if ($a \nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiq3arwly.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_33_u7i.php:27\n\
    Stack trace:\n#0 /tmp/tmpd_33_u7i.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpd_33_u7i.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zxj9bgq.php:28\n\
    Stack trace:\n#0 /tmp/tmp4zxj9bgq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4zxj9bgq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 1 !== 0)\
    \ {\n        return false;\n    }\n    $b = $a / 1;\n    $c = $a / 2;\n    $d\
    \ = $a / 3;\n    $e = $a / 4;\n    $f = $a / 5;\n    $g = $a / 6;\n    $h = $a\
    \ / 7;\n    $i = $a / 8;\n    $j = $a / 9;\n    $k = $a / 10;\n    $l = $a / 11;\n\
    \    $m = $a / 12;\n    $n = $a / 13;\n    $o = $a / 14;\n    $p = $a / 15;\n\
    \    $q = $a / 16;\n    $r = $a / 17;\n    $s = $a / 18;\n    $t = $a / 19;\n\
    \    $u = $a / 20;\n    $v = $a / 21;\n    $w = $a / 22;\n    $x = $a / 23;\n\
    \    $y = $a / 24;\n    $z = $a / 25;\n    $A = $a / 26;\n    $B = $a / 27;\n\
    \    $C = $a / 28;\n    $D = $a / 29;\n    $E = $a / 30;\n    $F = $a / 31;\n\
    \    $G = $a / 32;\n    $H = $a / 33;\n    $I = $a / 34;\n    $J = $a / 35;\n\
    \    $K = $a / 36;\n    $L = $a / 37;\n    $M = $a / 38;\n    $N = $a / 39;\n\
    \    $O = $a / 40;\n    $P = $a / 41;\n    $Q = $a / 42;\n    $R = $a / 43;\n\
    \    $S = $a / 44;\n    $T = $a / 45;\n    $U = $a / 46;\n    $V = $a / 47;\n\
    \    $W = $a / 48;\n    $X = $a / 49;\n    $Y = $a / 50;\n    $Z = $a / 51;\n\
    \    $a = $a / 52;\n    $b = $a / 53;\n    $c = $a / 54;\n    $d = $a / 55;\n\
    \    $e = $a / 56;\n    $f = $a / 57;\n    $g = $a / 58;\n    $h = $a / 59;\n\
    \    $i = $a / 60;\n    $j = $a / 61;\n    $k = $a / 62;\n    $l = $a / 63;\n\
    \    $m = $a / 64;\n    $n = $a / 65;\n    $\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9qqie467.php on line 82\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcddwx0ux.php:29\n\
    Stack trace:\n#0 /tmp/tmpcddwx0ux.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcddwx0ux.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohsnm7am.php:23\n\
    Stack trace:\n#0 /tmp/tmpohsnm7am.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpohsnm7am.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr95kpx6s.php:28\n\
    Stack trace:\n#0 /tmp/tmpr95kpx6s.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr95kpx6s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57bo6d_w.php:22\n\
    Stack trace:\n#0 /tmp/tmp57bo6d_w.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp57bo6d_w.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    if ($a % 7 == 0) return\
    \ true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bxolx1a.php:24\n\
    Stack trace:\n#0 /tmp/tmp0bxolx1a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0bxolx1a.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 == 0) {\n        return true;\n \
    \   }\n    if ($a % 5 == 0) {\n        return false;\n    }\n    if ($a % 7 ==\
    \ 0) {\n        return true;\n    }\n    if ($a % 9 == 0) {\n        return false;\n\
    \    }\n    if ($a % 11 == 0) {\n        return true;\n    }\n    if ($a % 13\
    \ == 0) {\n        return false;\n    }\n    if ($a % 15 == 0) {\n        return\
    \ true;\n    }\n    if ($a % 17 == 0) {\n        return false;\n    }\n    if\
    \ ($a % 19 == 0) {\n        return true;\n    }\n    if ($a % 21 == 0) {\n   \
    \     return false;\n    }\n    if ($a % 23 == 0) {\n        return true;\n  \
    \  }\n    if ($a % 25 == 0) {\n        return false;\n    }\n    if ($a % 27 ==\
    \ 0) {\n        return true;\n    }\n    if ($a % 29 == 0) {\n        return false;\n\
    \    }\n    if ($a % 31 == 0) {\n        return true;\n    }\n    if ($a % 33\
    \ == 0) {\n        return false;\n    }\n    if ($a % 35 == 0) {\n        return\
    \ true;\n    }\n    if ($a % 37 == 0) {\n        return false;\n    }\n    if\
    \ ($a % 39 == 0) {\n        return true;\n    }\n    if ($a % 41 == 0) {\n   \
    \     return false;\n    }\n    if ($a % 43 == 0) {\n        return true;\n  \
    \  }\n    if ($a % 45 == 0) {\n        return false;\n    }\n    if ($a % 47 ==\
    \ 0) {\n        return true;\n    }\n    if ($a % 49 == 0) {\n        return false;\n\
    \    }\n    if ($a % 51 == 0) {\n        return true;\n    }\n    if ($a % 53\
    \ == 0) {\n        return false;\n    }\n    if ($a % 55 == 0) {\n        return\
    \ true;\n    }\n    if ($a % 57 == 0) {\n        return false;\n    }\n    if\
    \ ($a % 59 == 0) {\n        return true;\n    }\n    if ($a % 61 == 0) {\n   \
    \     return false;\n    }\n    if ($a % 63 == 0) {\n        return true;\n  \
    \  }\n    if ($a % 65 == 0) {\n        return false;\n    }\n    if ($a % 67 ==\
    \ 0) {\n        return true;\n    }\n    if ($a % 69 == 0) {\n        return false;\n\
    \    }\n    if ($a % 71 == 0) {\n        return true;\n    }\n    if ($a % 73\
    \ == 0) {\n        return false;\n    }\n    if ($a % 75 == 0) {\n        return\
    \ true;\n    }\n    if ($a % 77 == 0) {\n        return false;\n    }\n    if\
    \ ($a % 79 == 0) {\n        return true;\n    }\n    if ($a % 81 == 0) {\n   \
    \     return false;\n    }\n    if ($a % 83 == 0) {\n        return true;\n  \
    \  }\n    if ($a % 85 == 0) {\n        return false;\n    }\n    if ($a % 87 ==\
    \ 0) {\n        return true;\n    }\n    if ($a % 89 == 0) {\n        return false;\n\
    \    }\n    if ($a % 91 == 0) {\n        return true;\n    }\n    if ($a % \n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi0bsxge6.php on line 152\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpezk6_q7h.php:29\n\
    Stack trace:\n#0 /tmp/tmpezk6_q7h.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpezk6_q7h.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7q9e78pk.php:28\n\
    Stack trace:\n#0 /tmp/tmp7q9e78pk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp7q9e78pk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    return ($a % $a)\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehcu2beq.php:22\n\
    Stack trace:\n#0 /tmp/tmpehcu2beq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpehcu2beq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnl50v_hh.php:28\n\
    Stack trace:\n#0 /tmp/tmpnl50v_hh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpnl50v_hh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq43jpyzb.php:28\n\
    Stack trace:\n#0 /tmp/tmpq43jpyzb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpq43jpyzb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    if ($a % 11 == 0) {\n                    return true;\n                }\n\
    \            }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppc30w7ku.php:30\n\
    Stack trace:\n#0 /tmp/tmppc30w7ku.php(40): test()\n#1 {main}\n  thrown in /tmp/tmppc30w7ku.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nez9mau.php:27\n\
    Stack trace:\n#0 /tmp/tmp7nez9mau.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7nez9mau.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsdwez4u.php:28\n\
    Stack trace:\n#0 /tmp/tmphsdwez4u.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphsdwez4u.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\n\
    \        return true;\n    else\n        return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaemg8axq.php:24\n\
    Stack trace:\n#0 /tmp/tmpaemg8axq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpaemg8axq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphxv0yloq.php:27\n\
    Stack trace:\n#0 /tmp/tmphxv0yloq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphxv0yloq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a <= 0) {\n\
    \        return false;\n    }\n    if ($a % 3 == 0) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgrzu1zlb.php:27\n\
    Stack trace:\n#0 /tmp/tmpgrzu1zlb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgrzu1zlb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsv1ib10y.php:27\n\
    Stack trace:\n#0 /tmp/tmpsv1ib10y.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsv1ib10y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8ovh6w8.php:28\n\
    Stack trace:\n#0 /tmp/tmpo8ovh6w8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpo8ovh6w8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    if ($a % 9 == 0) {\n                    return true;\n                } else\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    return false;\n        }\n    } else {\n        return false;\n    }\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ulyov4_.php:37\n\
    Stack trace:\n#0 /tmp/tmp5ulyov4_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5ulyov4_.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0 ||\
    \ $a % 5 == 0) {\n        return true;\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_i8xdye0.php:23\n\
    Stack trace:\n#0 /tmp/tmp_i8xdye0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_i8xdye0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return false;\n\
    \    if ($a % 9 == 0)\n        return false;\n    if ($a % 11 == 0)\n        return\
    \ false;\n    if ($a % 13 == 0)\n        return false;\n    if ($a % 15 == 0)\n\
    \        return false;\n    if ($a % 17 == 0)\n        return false;\n    if ($a\
    \ % 19 == 0)\n        return false;\n    if ($a % 21 == 0)\n        return false;\n\
    \    if ($a % 23 == 0)\n        return false;\n    if ($a % 25 == 0)\n       \
    \ return false;\n    if ($a % 27 == 0)\n        return false;\n    if ($a % 29\
    \ == 0)\n        return false;\n    if ($a % 31 == 0)\n        return false;\n\
    \    if ($a % 33 == 0)\n        return false;\n    if ($a % 35 == 0)\n       \
    \ return false;\n    if ($a % 37 == 0)\n        return false;\n    if ($a % 39\
    \ == 0)\n        return false;\n    if ($a % 41 == 0)\n        return false;\n\
    \    if ($a % 43 == 0)\n        return false;\n    if ($a % 45 == 0)\n       \
    \ return false;\n    if ($a % 47 == 0)\n        return false;\n    if ($a % 49\
    \ == 0)\n        return false;\n    if ($a % 51 == 0)\n        return false;\n\
    \    if ($a % 53 == 0)\n        return false;\n    if ($a % 55 == 0)\n       \
    \ return false;\n    if ($a % 57 == 0)\n        return false;\n    if ($a % 59\
    \ == 0)\n        return false;\n    if ($a % 61 == 0)\n        return false;\n\
    \    if ($a % 63 == 0)\n        return false;\n    if ($a % 65 == 0)\n       \
    \ return false;\n    if ($a % 67 == 0)\n        return false;\n    if ($a % 69\
    \ == 0)\n        return false;\n    if ($a % 71 == 0)\n        return false;\n\
    \    if ($a % 73 == 0)\n        return false;\n    if ($a % 75 == 0)\n       \
    \ return false;\n    if ($a % 77 == 0)\n        return false;\n    if ($a % 79\
    \ == 0)\n        return false;\n    if ($a % 81 == 0)\n        return false;\n\
    \    if ($a % 83 == 0)\n        return false;\n    if ($a % 85 == 0)\n       \
    \ return false;\n    if ($a % 87 == 0)\n        return false;\n    if ($a % 89\
    \ == 0)\n        return false;\n    if ($a % 91 == 0)\n        return false;\n\
    \    if ($a % 93 == 0)\n        return false;\n    if ($a % 95 == 0)\n       \
    \ return false;\n    if ($a % 97 == 0)\n        return false;\n    if ($a % 99\
    \ == 0)\n        return false;\n    if ($a % 101 == 0)\n        return false;\n\
    \    if ($a % 10\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplyec_dos.php on line 116\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 3) {\n        return true;\n    }\n    if ($a % 3 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 9) {\n        return false;\n \
    \   }\n    if ($a % 9 === 0) {\n        return false;\n    }\n    if ($a < 27)\
    \ {\n        return true;\n    }\n    if ($a % 27 === 0) {\n        return true;\n\
    \    }\n    if ($a < 81) {\n        return false;\n    }\n    if ($a % 8 === 0)\
    \ {\n        return false;\n    }\n    if ($a < 243) {\n        return true;\n\
    \    }\n    if ($a % 24 === 0) {\n        return true;\n    }\n    if ($a < 729)\
    \ {\n        return false;\n    }\n    if ($a % 7 === 0) {\n        return false;\n\
    \    }\n    if ($a < 3119) {\n        return true;\n    }\n    if ($a % 3 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 3303) {\n        return false;\n\
    \    }\n    if ($a % 3 === 0) {\n        return false;\n    }\n    if ($a < 7393)\
    \ {\n        return true;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    if ($a < 7393) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 7393) {\n        return true;\n\
    \    }\n    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 7393)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 0) {\n        return false;\n\
    \    }\n    if ($a < 7393) {\n        return true;\n    }\n    if ($a % 3 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 7393) {\n        return false;\n\
    \    }\n    if ($a % 3 === 0) {\n        return false;\n    }\n    if ($a < 7393)\
    \ {\n        return true;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    if ($a < 7393) {\n        return false;\n    }\n    if ($a % 3 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 7393) {\n        return true;\n\
    \    }\n    if ($a % 3 === 0) {\n        return true;\n    }\n    if ($a < 7393)\
    \ {\n        return false;\n    }\n    if ($a % 3 === 0) {\n        return false;\n\
    \    }\n    if ($a < 7393) {\n        return true;\n    }\n    if ($a % 3 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 7393) {\n        return false;\n\
    \    }\n    if ($a % 3 === 0) {\n        return false;\n    }\n    if ($a < 7393)\
    \ {\n        return true;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdsrh8nry.php on line 161\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 == 0) {\n        return true;\n \
    \   }\n    if ($a % 5 == 0) {\n        return true;\n    }\n    if ($a % 7 ==\
    \ 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkdspyto.php:33\n\
    Stack trace:\n#0 /tmp/tmpmkdspyto.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpmkdspyto.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxb_1vx_.php:29\n\
    Stack trace:\n#0 /tmp/tmpoxb_1vx_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoxb_1vx_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            }\n        }\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztpxmpzk.php:28\n\
    Stack trace:\n#0 /tmp/tmpztpxmpzk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpztpxmpzk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 3) {\n        return true;\n    }\n    if ($a % 3 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 9) {\n        return false;\n \
    \   }\n    if ($a % 9 === 0) {\n        return false;\n    }\n    if ($a < 27)\
    \ {\n        return true;\n    }\n    if ($a % 27 === 0) {\n        return true;\n\
    \    }\n    if ($a < 81) {\n        return false;\n    }\n    if ($a % 81 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 243) {\n        return true;\n\
    \    }\n    if ($a % 243 === 0) {\n        return true;\n    }\n    if ($a < 729)\
    \ {\n        return false;\n    }\n    if ($a % 729 === 0) {\n        return false;\n\
    \    }\n    if ($a < 3105) {\n        return true;\n    }\n    if ($a % 3105 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 7353) {\n        return false;\n\
    \    }\n    if ($a % 7353 === 0) {\n        return false;\n    }\n    if ($a <\
    \ 10289) {\n        return true;\n    }\n    if ($a % 10289 === 0) {\n       \
    \ return true;\n    }\n    if ($a < 15849) {\n        return false;\n    }\n \
    \   if ($a % 15849 === 0) {\n        return false;\n    }\n    if ($a < 20389)\
    \ {\n        return true;\n    }\n    if ($a % 20389 === 0) {\n        return\
    \ true;\n    }\n    if ($a < 25839) {\n        return false;\n    }\n    if ($a\
    \ % 25839 === 0) {\n        return false;\n    }\n    if ($a < 30573) {\n    \
    \    return true;\n    }\n    if ($a % 30573 === 0) {\n        return true;\n\
    \    }\n    if ($a < 35159) {\n        return false;\n    }\n    if ($a % 35159\
    \ === 0) {\n        return false;\n    }\n    if ($a < 40723) {\n        return\
    \ true;\n    }\n    if ($a % 40723 === 0) {\n        return true;\n    }\n   \
    \ if ($a < 46059) {\n        return false;\n    }\n    if ($a % 46059 === 0) {\n\
    \        return false;\n    }\n    if ($a < 51439) {\n        return true;\n \
    \   }\n    if ($a % 51439 === 0) {\n        return true;\n    }\n    if ($a <\
    \ 56993) {\n        return false;\n    }\n    if ($a % 56993 === 0) {\n      \
    \  return false;\n    }\n    if ($a < 62739) {\n        return true;\n    }\n\
    \    if ($a % 62739 === 0) {\n        return true;\n    }\n    if ($a < 67539)\
    \ {\n        return false;\n    }\n    if ($a % 67539 === 0) {\n        return\
    \ false;\n    }\n    if (\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmogvi23x.php on line 140\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    if ($a % 11 == 0) {\n                    if ($a % 13 == 0) {\n          \
    \              if ($a % 17 == 0) {\n                            if ($a % 19 ==\
    \ 0) {\n                                if ($a % 23 == 0) {\n                \
    \                    if ($a % 25 == 0) {\n                                   \
    \     if ($a % 27 == 0) {\n                                            if ($a\
    \ % 31 == 0) {\n                                                if ($a % 33 ==\
    \ 0) {\n                                                    if ($a % 35 == 0)\
    \ {\n                                                        if ($a % 37 == 0)\
    \ {\n                                                            if ($a % 41 ==\
    \ 0) {\n                                                                if ($a\
    \ % 43 == 0) {\n                                                             \
    \       if ($a % 45 == 0) {\n                                                \
    \                        if ($a % 47 == 0) {\n                               \
    \                                             if ($a % 49 == 0) {\n          \
    \                                                                      if ($a\
    \ % 53 == 0) {\n                                                             \
    \                       if ($a % 55 == 0) {\n                                \
    \                                                        if ($a % 57 == 0) {\n\
    \                                                                            \
    \                if ($a % 61 == 0) {\n                                       \
    \                                                         if ($a % 63 == 0) {\n\
    \                                                                            \
    \                        if ($a % 65 == 0) {\n                               \
    \                                                                         if ($a\
    \ % 67 == 0) {\n                                                             \
    \                                               if ($a % 69 == 0) {\n        \
    \                                                                            \
    \                                            if ($a % 73 == 0) {\n           \
    \                                                                            \
    \                                             if ($a % 75 == 0) {\n          \
    \                                                                            \
    \                                                  if ($a % 77 == 0) {\n     \
    \                                                                            \
    \                                                           if ($a % 79 == 0)\
    \ {\n                                                                        \
    \                                                                        if ($a\
    \ % 83 == 0) {\n                                                             \
    \                                                                            \
    \           if ($a % 85 == 0) {\n                                            \
    \                                                                            \
    \                                if ($a % 87 == 0) {\n                       \
    \                                                                            \
    \                                                         if ($a % 89 == 0) {\n\
    \                                                                            \
    \                                                                            \
    \        if ($a % 93 == 0) {\n                                               \
    \                                                                            \
    \                                         if ($a % 95 == 0) {\n              \
    \                                                                            \
    \                                                                            \
    \  if ($a % 97 == 0) {\n                                                     \
    \                                                                            \
    \                                           if ($a % 99 == 0) {\n            \
    \                                                                            \
    \                                                                            \
    \                                            if ($a % 103 == 0) {\n          \
    \                                                                            \
    \                                                                            \
    \                                  if ($a % 105 == 0) {\n                    \
    \                                                                            \
    \                                                                            \
    \                            if ($a % 107 == 0) {\n                          \
    \                                                                            \
    \                                                                            \
    \                          if ($a % 109 == 0) {\n                            \
    \                                                                            \
    \                                                                            \
    \                            if ($a % 113 == 0) {\n                          \
    \                                                                            \
    \                                                                            \
    \                                  if ($a % 115 == 0) {\n                    \
    \                                                                            \
    \                                                                            \
    \                                            if ($a % 117 == 0) {\n          \
    \                                                                            \
    \                                                                            \
    \                                                          if ($a % 119 == 0)\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                            if\
    \ ($a % 121 == 0) {\n                                                        \
    \                                                                            \
    \                                                                            \
    \                    if ($a % 123 == 0) {\n                                  \
    \                                                                            \
    \                                                                            \
    \                                              if ($a % 125 == 0) {\n        \
    \                                                                            \
    \                                                                            \
    \                                                                            if\
    \ ($a % 127 == 0) {\n                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                if ($a % 129\
    \ == 0) {\n                                                                  \
    \                                                                            \
    \                                                                            \
    \                                          if ($a % 133 == 0) {\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                        if ($a % 135 == 0) {\n                              \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          if ($a % 137 == 0) {\n            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                \nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdq45dtxd.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ {\n        if ($a % 5 == 0) {\n            if ($a % 7 == 0) {\n            \
    \    return true;\n            } else {\n                return false;\n     \
    \       }\n        } else {\n            return true;\n        }\n    } else {\n\
    \        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8a7yjv00.php:33\n\
    Stack trace:\n#0 /tmp/tmp8a7yjv00.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8a7yjv00.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % $a == 0)\
    \ {\n        if ($a % $a == 0) {\n            if ($a % $a == 0) {\n          \
    \      return true;\n            } else {\n                return false;\n   \
    \         }\n        } else {\n            return false;\n        }\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrkt7j09.php:34\n\
    Stack trace:\n#0 /tmp/tmptrkt7j09.php(43): test()\n#1 {main}\n  thrown in /tmp/tmptrkt7j09.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dzk0d67.php:29\n\
    Stack trace:\n#0 /tmp/tmp_dzk0d67.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_dzk0d67.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 3 === 0) {\n        return true;\n\
    \    }\n    if ($a % 3 === 1) {\n        return false;\n    }\n    if ($a % 3\
    \ === 2) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ie_ut3a.php:33\n\
    Stack trace:\n#0 /tmp/tmp4ie_ut3a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp4ie_ut3a.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 3 == 1)\n        return false;\n    if ($a % 3 == 2)\n        return true;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotxqr5ep.php:28\n\
    Stack trace:\n#0 /tmp/tmpotxqr5ep.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpotxqr5ep.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0) {\n \
    \       return false;\n    }\n    if ($a % 1 !== 0) {\n        return false;\n\
    \    }\n    if ($a < 3) {\n        return true;\n    }\n    if ($a % 3 === 0)\
    \ {\n        return true;\n    }\n    if ($a < 9) {\n        return false;\n \
    \   }\n    if ($a % 9 === 0) {\n        return false;\n    }\n    if ($a < 27)\
    \ {\n        return true;\n    }\n    if ($a % 27 === 0) {\n        return true;\n\
    \    }\n    if ($a < 81) {\n        return false;\n    }\n    if ($a % 8 === 0)\
    \ {\n        return false;\n    }\n    if ($a < 243) {\n        return true;\n\
    \    }\n    if ($a % 24 === 0) {\n        return true;\n    }\n    if ($a < 729)\
    \ {\n        return false;\n    }\n    if ($a % 7 === 0) {\n        return false;\n\
    \    }\n    if ($a < 3119) {\n        return true;\n    }\n    if ($a % 3 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 739) {\n        return false;\n\
    \    }\n    if ($a % 7 === 0) {\n        return false;\n    }\n    if ($a < 10251)\
    \ {\n        return true;\n    }\n    if ($a % 10 === 0) {\n        return true;\n\
    \    }\n    if ($a < 15031) {\n        return false;\n    }\n    if ($a % 15 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 20369) {\n        return true;\n\
    \    }\n    if ($a % 20 === 0) {\n        return true;\n    }\n    if ($a < 40737)\
    \ {\n        return false;\n    }\n    if ($a % 40 === 0) {\n        return false;\n\
    \    }\n    if ($a < 81919) {\n        return true;\n    }\n    if ($a % 8 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 16383) {\n        return false;\n\
    \    }\n    if ($a % 16 === 0) {\n        return false;\n    }\n    if ($a < 32769)\
    \ {\n        return true;\n    }\n    if ($a % 32 === 0) {\n        return true;\n\
    \    }\n    if ($a < 65537) {\n        return false;\n    }\n    if ($a % 8 ===\
    \ 0) {\n        return false;\n    }\n    if ($a < 131071) {\n        return true;\n\
    \    }\n    if ($a % 13 === 0) {\n        return true;\n    }\n    if ($a < 262143)\
    \ {\n        return false;\n    }\n    if ($a % 26 === 0) {\n        return false;\n\
    \    }\n    if ($a < 524287) {\n        return true;\n    }\n    if ($a % 52 ===\
    \ 0) {\n        return true;\n    }\n    if ($a < 1048575) {\n        return false;\n\
    \    }\n    if ($a % 10 === 0) {\n        return false;\n    }\n    if ($a < 2097151)\
    \ {\n        return true;\n    }\n    if ($a % 20 === 0) {\n        return true;\n\
    \    }\n    if ($a < 419430\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp28_ztk51.php on line 146\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a < 0)\n   \
    \     return false;\n    if ($a % 3 == 0)\n        return true;\n    if ($a %\
    \ 5 == 0)\n        return false;\n    if ($a % 7 == 0)\n        return true;\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi73u_5ch.php:29\n\
    Stack trace:\n#0 /tmp/tmpi73u_5ch.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi73u_5ch.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Write a function that takes an integer a and returns True \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2)\
    \ ==> False\n// iscube(-1) ==> True\n// iscube(64) ==> True\n// iscube(0) ==>\
    \ True\n// iscube(180) ==> False\nfunction iscube($a) {\n    if ($a % 3 == 0)\
    \ return true;\n    if ($a % 5 == 0) return true;\n    if ($a % 7 == 0) return\
    \ true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsg0jzhiz.php:24\n\
    Stack trace:\n#0 /tmp/tmpsg0jzhiz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsg0jzhiz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
