name: HumanEval_116_sort_array
language: php
results:
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $key => $val) {\n        $bin[$key] = str_pad(decbin($val),\
    \ 8, '0', STR_PAD_LEFT);\n        $ones[$key] = str_pad(decbin($ones[$key]), 8,\
    \ '0', STR_PAD_LEFT);\n    }\n    $ones = array_fill(0, $len, $ones);\n    $ones\
    \ = array_sum($ones);\n    $bin = array_sum($bin);\n    $ones = array_map(function\
    \ ($v) use ($len) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $ones);\n    $bin = array_map(function ($v) use ($len) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($len) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_sum($bin);\n    $bin = array_map(function ($v)\
    \ use ($len) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_sum($bin);\n    $bin = array_map(function ($v)\
    \ use ($len) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_sum($bin);\n    $bin = array_map(function ($v)\
    \ use ($len) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_sum($bin);\n    $bin = array_map(function ($v)\
    \ use ($len) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_sum($bin);\n    $bin = array_map(function ($v)\
    \ use ($len) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_sum($bin);\n    $bin = array_map(function ($v)\
    \ use ($len) {\n        return str_pad(decbin($v), $len, '\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzeaqg2_a.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        $result[$i] = $arr[$i];\n    }\n    for ($i = 1; $i < $size;\
    \ $i++) {\n        for ($j = $i; $j < $size; $j++) {\n            if ($arr[$i]\
    \ & $arr[$j]) {\n                $result[$j] = $result[$i];\n            }\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdy8i6rlx.php:30\n\
    Stack trace:\n#0 /tmp/tmpdy8i6rlx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdy8i6rlx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $arr);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpapsq96u2.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \        $ones[$i] = $bin[$i] === '1';\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxmgc9_do.php:26\n\
    Stack trace:\n#0 /tmp/tmpxmgc9_do.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxmgc9_do.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $key => $val) {\n        $bin[$key] = bindec($val);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpws48x4j8.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_filter($arr);\n    sort($arr);\n    return $arr;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\n    array(\"\
    a\" => 1, \"b\" => 2, \"c\" => 3),\n    array(\"a\" => 4, \"b\" => 5, \"c\" =>\
    \ 6),\n    array(\"a\" => 7, \"b\" => 8, \"c\" => 9),\n    array(\"a\" => 10,\
    \ \"b\" => 11, \"c\" => 12),\n    array(\"a\" => 13, \"b\" => 14, \"c\" => 15),\n\
    \    array(\"a\" => 16, \"b\" => 17, \"c\" => 18),\n    array(\"a\" => 19, \"\
    b\" => 20, \"c\" => 21),\n    array(\"a\" => 22, \"b\" => 23, \"c\" => 24),\n\
    \    array(\"a\" => 25, \"b\" => 26, \"c\" => 27),\n    array(\"a\" => 28, \"\
    b\" => 29, \"c\" => 30),\n    array(\"a\" => 31, \"b\" => 32, \"c\" => 33),\n\
    \    array(\"a\" => 34, \"b\" => 35, \"c\" => 36),\n    array(\"a\" => 37, \"\
    b\" => 38, \"c\" => 39),\n    array(\"a\" => 40, \"b\" => 41, \"c\" => 42),\n\
    \    array(\"a\" => 43, \"b\" => 44, \"c\" => 45),\n    array(\"a\" => 46, \"\
    b\" => 47, \"c\" => 48),\n    array(\"a\" => 49, \"b\" => 50, \"c\" => 51),\n\
    \    array(\"a\" => 52, \"b\" => 53, \"c\" => 54),\n    array(\"a\" => 55, \"\
    b\" => 56, \"c\" => 57),\n    array(\"a\" => 58, \"b\" => 59, \"c\" => 60),\n\
    \    array(\"a\" => 61, \"b\" => 62, \"c\" => 63),\n    array(\"a\" => 64, \"\
    b\" => 65, \"c\" => 66),\n    array(\"a\" => 67, \"b\" => 68, \"c\" => 69),\n\
    \    array(\"a\" => 70, \"b\" => 71, \"c\" => 72),\n    array(\"a\" => 73, \"\
    b\" => 74, \"\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpinn19ghe.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp47c2qguh.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   sort($arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't seem to work. `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]` but `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ to add `return $arr;` at the end of `sort_array` function\n<|/ c |>\n<| c |>\n\
    I added `return $arr;` at the end of `sort_array` function and I still get the\
    \ same result\n<|/ c |>\n<| c |>\nI added `return $arr;` at the end of `sort_array`\
    \ function and I still get the same result\n<|/ c |>\n<| c |>\nI added `return\
    \ $arr;` at the end of `sort_array` function and I still get the same result\n\
    <|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqhb3srxw.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $val) {\n        $arr[$key] = $arr[$key] ? 1 : 0;\n\
    \    }\n    array_multisort($arr, SORT_ASC, $arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1h0u4iil.php:22\n\
    Stack trace:\n#0 /tmp/tmp1h0u4iil.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1h0u4iil.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ $arr[$i];\n        $j = $i;\n        while ($j > 0 && $arr[$j - 1] > $ones)\
    \ {\n            $arr[$j] = $arr[$j - 1];\n            $j--;\n        }\n    \
    \    $arr[$j] = $ones;\n    }\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't seem to work. `sort_array(array(1,5,2,3,4))` returns\
    \ `[2,3,4,5,1]` instead of `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\n: It works fine\
    \ for me. `sort_array(array(1,5,2,3,4))` returns `[1,2,3,4,5]`.\n<|/ c |>\n<|\
    \ c |>\n: It works fine for me. `sort_array(array(1,5,2,3,4))` returns `[1,2,3,4,5]`.\n\
    <|/ c |>\n<| c |>\n: It works fine for me. `sort_array(array(1,5,2,3,4))` returns\
    \ `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\n: It works fine for me. `sort_array(array(1,5,2,3,4))`\
    \ returns `[1,2,3,4,5]`.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps93mxc53.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $val) {\n        $arr[$key] = $arr[$key] ? 1 : 0;\n\
    \    }\n    array_multisort($arr, SORT_ASC, $arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3j98piz.php:22\n\
    Stack trace:\n#0 /tmp/tmpj3j98piz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj3j98piz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    array_multisort($ones, SORT_DESC, $bin,\
    \ SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nI like your solution, but I do not understand why you use array_fill to\
    \ create the $ones array. Why not just use $ones = array_fill(0, $len, 1); ?\n\
    <|/ c |>\n<| c |>\nBecause `array_fill` fills array with values from `$start`\
    \ to `$end` with step `$step`. So `array_fill(0, $len, 1)` will fill array with\
    \ values from `1` to `$len` with step `1`. But we need `1` only for `$ones`, so\
    \ we need to fill array with values from `1` to `$len` with step `1`\n<|/ c |>\n\
    <| c |>\nAh I see. Thank you for the explanation.\n<|/ c |>\n<| a dscore=2 |>\n\
    I like your solution, but I do not understand why you use array_fill to create\
    \ the $ones array. Why not just use $ones = array_fill(0, $len, 1); ?\n\nBecause\
    \ array_fill fills array with values from $start to $end with step $step. So array_fill(0,\
    \ $len, 1) will fill array with values from 1 to $len with step 1. But we need\
    \ 1 only for $ones, so we need to fill array with values from 1 to $len with step\
    \ 1.\n<|/ a tags=sorting,php,arrays |>\n<| a tags=sorting,php,arrays |>\n<code>\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps4n7txyc.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $arr);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 8,\
    \ '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 8,\
    \ '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin\
    \ = array_map(function ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\
    \ }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v), 8,\
    \ '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return str_pad(decbin($v),\
    \ 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function ($v) { return\
    \ str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $bin);\n    $bin = array_map(function\
    \ ($v) { return str_pad(decbin($v), 8, '0', STR_PAD_LEFT); }, $bin);\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp8aakcr30.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try `sort_array([1,\
    \ 5, 2, 3, 4])` vs `sort_array([-2, -3, -4, -5, -6])`\n<|/ c |>\n<| c |>\n, thank\
    \ you, I fixed the answer.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyw9427pd.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    foreach ($arr as $key => $value) {\n        $bin = decbin($value);\n\
    \        $len = strlen($bin);\n        $count = 1;\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            if ($bin[$i] === '1') {\n                $count++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    $sorted[$key] = $count;\n    }\n    asort($sorted);\n    return array_map(function\
    \ ($v) { return $v; }, $sorted);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\n: Yes, it does. `sort_array([1, 0, 2, 3,\
    \ 4]) [0, 1, 2, 3, 4]`\n<|/ c |>\n<| c |>\n: I updated my answer. Now it works\
    \ with negative numbers too.\n<|/ c |>\n<| c |>\n: I updated my answer. Now it\
    \ works with negative numbers too.\n<|/ c |>\n<| c |>\n: I updated my answer.\
    \ Now it works with negative numbers too.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuvi6m0eq.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    ksort($ones);\n    return array_merge(array_keys($ones),\
    \ $arr);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your answer. Unfortunately,\
    \ I cannot use any external libraries. I edited my question to make it more clear.\n\
    <|/ c |>\n<| c |>\nI added a solution that uses no external libraries.\n<|/ c\
    \ |>\n<| a tags=php,arrays |>\nYou can use the following function to sort your\
    \ array according to your needs:\n<code>\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb61chwr2.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $bin = decbin($arr[$i]);\n        $ones = strlen($bin) - strrpos($bin,\
    \ '1');\n        $sorted[$i] = $ones;\n    }\n    array_multisort($sorted, $arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n<?php\n$array = array(\n    1 => 1,\n    2 => 1,\n    3 => 1,\n\
    \    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n\
    \    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15\
    \ => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n\
    \    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26\
    \ => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n\
    \    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37\
    \ => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n\
    \    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48\
    \ => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n\
    \    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59\
    \ => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n\
    \    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70\
    \ => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n\
    \    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4npep_w4.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = [];\n    foreach ($ones as\
    \ $num => $count) {\n        $sorted[] = $num;\n        if ($count == 1) {\n \
    \           $sorted[] = intval($num);\n        }\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsad8ts09.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as &$value) {\n        if ($value < 0) {\n            $value\
    \ = -$value;\n        }\n    }\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmxjdv7u.php:24\n\
    Stack trace:\n#0 /tmp/tmpwmxjdv7u.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwmxjdv7u.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $len = strlen($bin);\n        $count = 0;\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            $count += $bin[$i];\n        }\n        $sorted[$key]\
    \ = $count;\n    }\n    asort($sorted);\n    return $sorted;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work.\
    \ Try it with `sort_array([1, 5, 2, 3, 4])` which should return `[1, 2, 3, 4,\
    \ 5]`\n<|/ c |>\n<| c |>\nI added a test case for you. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your effort! Unfortunately this doesn't work either. Try it\
    \ with `sort_array([1, 5, 2, 3, 4])` which should return `[1, 2, 3, 4, 5]`\n<|/\
    \ c |>\n<| c |>\nI added a test case for you. Hope it helps.\n<|/ c |>\n<| c |>\n\
    Thanks for your effort! Unfortunately this doesn't work either. Try it with `sort_array([1,\
    \ 5, 2, 3, 4])` which should return `[1, 2, 3, 4, 5]`\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkzx7azzs.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value % 2 == 1 ? $value / 2 : $value;\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu0xrgh_0.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = decbin($v);\n\
    \        $ones[$k] = strpos($bin[$k], 1) - 1;\n    }\n    array_multisort($ones,\
    \ SORT_DESC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `sort_array([-10, -9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])` returns `[-10, -9,\
    \ -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for negative numbers. `sort_array([-10, -9, -8, -7, -6,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])` returns `[-10, -9, -8, -7,\
    \ -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. `sort_array([-10, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])` returns `[-10, -9, -8, -7, -6,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `sort_array([-10, -9, -8, -7, -6, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])` returns `[-10, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `sort_array([-10, -9, -8, -7, -6, -5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])` returns `[-10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoxsgzh9l.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bins = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $val) {\n        $bins[$i] |= $val & 1;\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bins, SORT_DESC, $arr);\n    return\
    \ $arr;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis is not correct.\
    \ `sort_array` sorts numbers in ascending order. `sort_array_desc` sorts numbers\
    \ in descending order. `sort_array_desc` does not sort numbers in ascending order.\n\
    <|/ c |>\n<| c |>\nThis is not correct. `sort_array` sorts numbers in ascending\
    \ order. `sort_array_desc` sorts numbers in descending order. `sort_array_desc`\
    \ does not sort numbers in ascending order.\n<|/ c |>\n<| a dscore=4 |>\nI came\
    \ up with this solution:\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnrthqefp.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $len = strlen($bin);\n        $count = 1;\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            if ($bin[$i] === '1') {\n                $count++;\n\
    \            }\n        }\n        $sorted[$key] = $count * 10 + $val;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhyw14ur.php:30\n\
    Stack trace:\n#0 /tmp/tmplhyw14ur.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplhyw14ur.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    $ones = array();\n    $zeros = array();\n    foreach\
    \ ($arr as $num) {\n        if ($num == 1) {\n            $ones[] = $num;\n  \
    \      } else {\n            $zeros[] = $num;\n        }\n    }\n    if (count($ones)\
    \ > 0) {\n        sort($ones);\n        foreach ($ones as $num) {\n          \
    \  $sorted[] = $num;\n        }\n    }\n    if (count($zeros) > 0) {\n       \
    \ sort($zeros);\n        foreach ($zeros as $num) {\n            $sorted[] = $num;\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rdyr__7.php:40\n\
    Stack trace:\n#0 /tmp/tmp5rdyr__7.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp5rdyr__7.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = [];\n    foreach ($ones as\
    \ $num => $count) {\n        $sorted[] = $num;\n    }\n    asort($sorted);\n \
    \   return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n$arr3 = array_keys($arr2);\n\
    $arr4 = array_values($arr2);\n$arr5 = array_combine($arr3, $arr4);\n$arr6 = array_map(function($a,\
    \ $b) { return $a * $b; }, $arr5, $arr5);\n$arr7 = array_filter($arr6, function($a)\
    \ { return $a != 0; });\n$arr8 = array_map(function($a) { return $a / count($arr7);\
    \ }, $arr7);\n$arr9 = array_merge($arr8, $arr);\nprint_r($arr9);\n</code>\n<|/\
    \ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$arr = [1, 5, 2, 3, 4];\n\
    $arr2 = array_count_values($arr);\n$arr3 = array_keys($arr2);\n$arr4 = array_values($arr2);\n\
    $arr5 = array_combine($arr3, $arr4);\n$arr6 = array_map(function($a, $b) { return\
    \ $a * $b; }, $arr5, $arr5);\n$arr7 = array_filter($arr6, function($a) { return\
    \ $a != 0; });\n$arr8 = array_map(function($a) { return $a / count($arr7); },\
    \ $arr7);\n$arr9 = array_merge($arr8, $arr);\nprint_r($arr9);\n</code>\n<|/ a\
    \ dscore=0 |>\n<| c |>\nPlease add some explanation to your answer such that others\
    \ can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1, 5,\
    \ 2, 3, 4];\n$arr2 = array_count_values($arr);\n$arr3 = array_keys($arr2);\n$arr4\
    \ = array_values($arr2);\n$arr5 = array_combine($arr3, $arr4);\n$arr6 = array_map(function($a,\
    \ $b) { return $a * $b; }, $arr5, $arr5);\n$arr7 = array_filter($arr6, function($a)\
    \ { return $a != 0; });\n$arr8 = array_map(function($a) { return $a / count($arr7);\
    \ }, $arr7);\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7ji_q2pq.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_map(function\
    \ ($v) use ($ones) {\n        return $ones[$v];\n    }, $arr);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't answer the question as asked.\n<|/ c |>\n\
    <| c |>\nIt does answer the question as asked, as I understand it. The OP wants\
    \ to sort an array of non-negative integers according to number of ones in their\
    \ binary representation in ascending order. He also wants to sort them based on\
    \ decimal value. He also wants to do it without using any built-in PHP functions.\
    \ He also wants to do it without using any built-in PHP functions. He also wants\
    \ to do it without using any built-in PHP functions. He also wants to do it without\
    \ using any built-in PHP functions. He also wants to do it without using any built-in\
    \ PHP functions. He also wants to do it without using any built-in PHP functions.\
    \ He also wants to do it without using any built-in PHP functions. He also wants\
    \ to do it without using any built-in PHP functions. He also wants to do it without\
    \ using any built-in PHP functions. He also wants to do it without using any built-in\
    \ PHP functions. He also wants to do it without using any built-in PHP functions.\
    \ He also wants to do it without using any built-in PHP functions. He also wants\
    \ to do it without using any built-in PHP functions. He also wants to do it without\
    \ using any built-in PHP functions. He also wants to do it without using any built-in\
    \ PHP functions. He also wants to do it without using any built-in PHP functions.\
    \ He also wants to do it without using any built-in PHP functions. He also wants\
    \ to do it without using any built-in PHP functions. He also wants to do it without\
    \ using any built-in PHP functions. He also wants to do it without using any built-in\
    \ PHP functions. He also wants to do it without using any built-in PHP functions.\
    \ He also wants to do it without using any built-in PHP functions. He also wants\
    \ to do it without using any built-in PHP functions. He also wants to do it without\
    \ using any built-in PHP functions. He also wants to do it without using any built-in\
    \ PHP functions. He also wants to do it without using any built-in PHP functions.\
    \ He also wants to do it without using any built-in PHP functions. He also wants\
    \ to do it without using any built-in PHP functions. He also wants to do it without\
    \ using any built-in PHP functions. He also wants to do it without using any built-in\
    \ \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxnhnwvw4.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    asort($result);\n    return $result;\n}\n</code>\n<|/\
    \ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work if there are multiple\
    \ 1's in the array. For example, `sort_array([1, 0, 2, 3, 4])` returns `[0, 1,\
    \ 2, 3, 4]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting my answer.\
    \ `sort_array([1, 0, 2, 3, 4])` returns `[0, 1, 2, 3, 4]`.\n<|/ c |>\n<| c |>\n\
    Oh, I see. Sorry, I missed that part. My bad.\n<|/ c |>\n<| a |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp5s7cunby.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = [];\n    foreach ($ones as\
    \ $num => $count) {\n        $sorted[] = $num;\n    }\n    asort($sorted);\n \
    \   return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp89kt53v0.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    foreach ($arr as $key => $value) {\n        $binary\
    \ = '';\n        $count = 0;\n        while ($value > 0) {\n            $binary\
    \ = $value % 2;\n            $value = floor($value / 2);\n            $count++;\n\
    \        }\n        $sorted[$count] = $binary;\n    }\n    array_multisort($sorted,\
    \ $arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpho3e8hui.php\
    \ on line 21\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpho3e8hui.php:29\n\
    Stack trace:\n#0 /tmp/tmpho3e8hui.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpho3e8hui.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as $key => $val) {\n      \
    \  $arr[$key] = $val > 0 ? $val : -$val;\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6had824h.php:22\n\
    Stack trace:\n#0 /tmp/tmp6had824h.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6had824h.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ $arr[$i];\n        $j = 0;\n        while ($j++ < $len) {\n            if ($ones\
    \ & 1) {\n                $tmp = $arr[$j];\n                $arr[$j] = $arr[$i];\n\
    \                $arr[$i] = $tmp;\n            }\n            $ones = $arr[$j];\n\
    \        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzlnyi96_.php:31\n\
    Stack trace:\n#0 /tmp/tmpzlnyi96_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzlnyi96_.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = array_map(function ($v) use\
    \ ($ones) {\n        return $ones[$v];\n    }, $arr);\n    asort($sorted);\n \
    \   return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2_zg4nk.php:23\n\
    Stack trace:\n#0 /tmp/tmpc2_zg4nk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc2_zg4nk.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7y7o3wgo.php:25\n\
    Stack trace:\n#0 /tmp/tmp7y7o3wgo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7y7o3wgo.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $bin = array_fill(0, $len, 0);\n    for ($i = 0;\
    \ $i < $len; ++$i) {\n        $bin[$arr[$i]] += 1;\n    }\n    arsort($bin);\n\
    \    $res = array();\n    for ($i = 0; $i < $len; ++$i) {\n        $res[] = $i;\n\
    \    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9ckvpeo.php:28\n\
    Stack trace:\n#0 /tmp/tmpp9ckvpeo.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpp9ckvpeo.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_filter($arr);\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbeqqhm44.php:20\n\
    Stack trace:\n#0 /tmp/tmpbeqqhm44.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpbeqqhm44.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis answer doesn't\
    \ seem to work when there are multiple zeroes in the array. For example, `sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]`\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting. What PHP version are you using?\n<|/ c |>\n<| c |>\nI'm using\
    \ PHP 7.2.10. I'm sorry I didn't mention that. I'm also using PHP 7.2.10. I'm\
    \ sorry I didn't mention that. I'm also using PHP 7.2.10. I'm sorry I didn't mention\
    \ that. I'm also using PHP 7.2.10. I'm sorry I didn't mention that. I'm also using\
    \ PHP 7.2.10. I'm sorry I didn't mention that. I'm also using PHP 7.2.10. I'm\
    \ sorry I didn't mention that. I'm also using PHP 7.2.10. I'm sorry I didn't mention\
    \ that. I'm also using PHP 7.2.10. I'm sorry I didn't mention that. I'm also using\
    \ PHP 7.2.10. I'm sorry I didn't mention that. I'm also using PHP 7.2.10. I'm\
    \ sorry I didn't mention that. I'm also using PHP 7.2.10. I'm sorry I didn't mention\
    \ that. I'm also using PHP 7.2.10. I'm sorry I didn't mention that. I'm also using\
    \ PHP 7.2.10. I'm sorry I didn't mention that. I'm also using PHP 7.2.10. I'm\
    \ sorry I didn't mention that. I'm also using PHP 7.2.10. I'm sorry I didn't mention\
    \ that. I'm also using PHP 7.2.10. I'm sorry I didn't mention that. I'm also using\
    \ PHP 7.2.10. I'm sorry I didn't mention that. I'm also using PHP 7.2.10. I'm\
    \ sorry I didn't mention that. I'm also using PHP 7.2.10. I'm sorry I didn't mention\
    \ that. I'm also using PHP 7.2.10. I'm sorry I didn't mention that. I'm also using\
    \ PHP 7.2.10. I'm sorry I didn't mention \nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp15ng34bn.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n\
    <| c |>\nThis doesn't work if the array contains negative numbers. Try `sort_array([-2,\
    \ -3, -4, -5, -6])` which should return `[-6, -5, -4, -3, -2]` but instead returns\
    \ `[-6, -5, -4, -3, -2, 1]`.\n<|/ c |>\n<| c |>\nI added a solution that works\
    \ with negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if the array contains negative numbers. Try `sort_array([-2, -3, -4, -5,\
    \ -6])` which should return `[-6, -5, -4, -3, -2]` but instead returns `[-6, -5,\
    \ -4, -3, -2, 1]`.\n<|/ c |>\n<| c |>\nI added a solution that works with negative\
    \ numbers. I tested it and it works.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpriinwe4z.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ $arr[$i];\n        $count = 0;\n        for ($j = $i + 1; $j < $len; $j++) {\n\
    \            if ($ones == $arr[$j]) {\n                $count++;\n           \
    \ } else {\n                break;\n            }\n        }\n        if ($count\
    \ == 1) {\n            $tmp = $arr[$i];\n            $arr[$i] = $arr[$j];\n  \
    \          $arr[$j] = $tmp;\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoayzf7r3.php:35\n\
    Stack trace:\n#0 /tmp/tmpoayzf7r3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpoayzf7r3.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = [];\n    foreach ($ones as\
    \ $num => $count) {\n        $sorted[] = $num;\n        if ($count > 1) {\n  \
    \          $sorted[] = $count - 1;\n        }\n    }\n    return $sorted;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `sort_array` returns `[5,\
    \ 2, 3, 4, 1]` instead of `[1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\n, thanks for\
    \ pointing out. I've fixed the answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpor2zpoui.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $val) {\n        $bin[$i] = decbin($val);\n\
    \        $ones[$i] = $bin[$i] === '1';\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmputuiueqa.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    array_multisort($ones, SORT_DESC, $bin,\
    \ SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = [\n    1 => 1,\n    2 => 1,\n\
    \    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n\
    \    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 =>\
    \ 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n \
    \   20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 =>\
    \ 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n \
    \   31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 =>\
    \ 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n \
    \   42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 =>\
    \ 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n \
    \   53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 =>\
    \ 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n \
    \   64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 =>\
    \ 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp00ksm6ez.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    $ones = [];\n    $zeros = [];\n    foreach ($arr as $item)\
    \ {\n        if ($item == 1) {\n            $ones[] = $item;\n        } else {\n\
    \            $zeros[] = $item;\n        }\n    }\n    if (count($ones) > 0) {\n\
    \        $result = array_merge($ones, $zeros);\n    }\n    if (count($ones) ==\
    \ 0) {\n        $result = $zeros;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_28urmc.php:34\n\
    Stack trace:\n#0 /tmp/tmpw_28urmc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpw_28urmc.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = [];\n    foreach ($ones as\
    \ $num => $count) {\n        $sorted[] = $num;\n    }\n    array_multisort($sorted,\
    \ $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk7nzbud4.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    $count = array_count_values($arr);\n    foreach ($count\
    \ as $num => $ones) {\n        $sorted[] = $num;\n    }\n    asort($sorted);\n\
    \    return array_merge(array_flip($sorted), $arr);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfg7oblrl.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as $key => $val) {\n      \
    \  if ($val == 1) {\n            $arr[$key] = $val;\n        }\n    }\n    return\
    \ $arr;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=0 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp34ng9om8.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map('intval', $arr);\n    sort($arr);\n    return $arr;\n}\n\
    </code>\n<|/ a tags=sorting,php,arrays |>\n<| c |>\nThis is not the correct solution.\
    \ Try it with `sort_array([1, 0, 2, 3, 4])` - it returns `[0, 1, 2, 3, 4]` instead\
    \ of `[1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\n, you're right. I've corrected my\
    \ answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppt__ehsu.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \        $ones[$i] = $bin[$i] === '1' ? 1 : 0;\n    }\n    array_multisort($ones,\
    \ SORT_DESC, $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't work for negative numbers. `sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\n: I fixed it.\n<|/ c |>\n\
    <| a tags=php,arrays,sorting |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy3v0i08r.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = bindec($v);\n\
    \        $ones[$k] = bindec($v);\n    }\n    array_multisort($ones, $bin, $arr);\n\
    \    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n<code>\n\
    <?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n$arr3 = array_filter($arr2,\
    \ function($v){\n    return $v > 1;\n});\n$arr4 = array_keys($arr3, array_search(1,\
    \ $arr3));\nprint_r($arr4);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n$arr3\
    \ = array_filter($arr2, function($v){\n    return $v > 1;\n});\n$arr4 = array_keys($arr3,\
    \ array_search(1, $arr3));\nprint_r($arr4);\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ |>\n<code>\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n$arr3\
    \ = array_filter($arr2, function($v){\n    return $v > 1;\n});\n$arr4 = array_keys($arr3,\
    \ array_search(1, $arr3));\nprint_r($arr4);\n</code>\n<|/ a tags=php,arrays dscore=1\
    \ |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 =\
    \ array_count_values($arr);\n$arr3 = array_filter($arr2, function($v){\n    return\
    \ $v > 1;\n});\n$arr4 = array_keys($arr3, array_search(1, $arr3));\nprint_r($arr4);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$arr\
    \ = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n$arr3 = array_filter($arr2,\
    \ function($v){\n    return $v > 1;\n});\n$arr4 = array_keys($arr\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk867dji_.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   sort($arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8e0uqrr.php:19\n\
    Stack trace:\n#0 /tmp/tmph8e0uqrr.php(29): test()\n#1 {main}\n  thrown in /tmp/tmph8e0uqrr.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1o9o8oj.php:20\n\
    Stack trace:\n#0 /tmp/tmpo1o9o8oj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpo1o9o8oj.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78v46od2.php:25\n\
    Stack trace:\n#0 /tmp/tmp78v46od2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp78v46od2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    $ones = array();\n    foreach ($arr as $key => $val)\
    \ {\n        if ($val > 0) {\n            $sorted[$key] = $val;\n            $ones[$key]\
    \ = 1;\n        } else {\n            $ones[$key] = 0;\n        }\n    }\n   \
    \ foreach ($ones as $key => $val) {\n        if ($val == 1) {\n            $sorted[$key]\
    \ = $arr[$key];\n        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzq13r32.php:33\n\
    Stack trace:\n#0 /tmp/tmplzq13r32.php(43): test()\n#1 {main}\n  thrown in /tmp/tmplzq13r32.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    foreach ($result as $key => $val) {\n        $result[$key]\
    \ = $val > 0 ? 1 : 0;\n    }\n    array_multisort($result, SORT_ASC, $arr);\n\
    \    return $arr;\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfrq9x080.php:25\n\
    Stack trace:\n#0 /tmp/tmpfrq9x080.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfrq9x080.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $val) {\n        if ($val < 0) {\n            $arr[$key]\
    \ = abs($val);\n        }\n    }\n    asort($arr);\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_pfblfa.php:23\n\
    Stack trace:\n#0 /tmp/tmpv_pfblfa.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv_pfblfa.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1, 5,\
    \ 2, 3, 4];\n$arr1 = array_count_values($arr);\narsort($arr1);\n$arr2 = array_keys($arr1);\n\
    print_r($arr2);\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsuslflye.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    foreach ($ones as $k => $v) {\n      \
    \  $bin[$k] = str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }\n    foreach\
    \ ($bin as $k => $v) {\n        $bin[$k] = str_pad(bindec($v), $len, '0', STR_PAD_LEFT);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    foreach ($bin as $k => $v) {\n       \
    \ $bin[$k] = str_pad(bindec($v), $len, '0', STR_PAD_LEFT);\n    }\n    foreach\
    \ ($bin as $k => $v) {\n        $bin[$k] = str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = str_pad(bindec($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    foreach ($bin as $k => $v) {\n       \
    \ $bin[$k] = str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }\n    foreach\
    \ ($bin as $k => $v) {\n        $bin[$k] = str_pad(bindec($v), $len, '0', STR_PAD_LEFT);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    foreach ($bin as $k => $v) {\n       \
    \ $bin[$k] = str_pad(bindec($v), $len, '0', STR_PAD_LEFT);\n    }\n    foreach\
    \ ($bin as $k => $v) {\n        $bin[$k] = str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = str_pad(bindec($v),\
    \ $len, '0', STR_PAD_LEFT);\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqiqy3h7o.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    $ones = 0;\n    foreach ($arr as $num) {\n        $ones\
    \ += $num;\n        $sorted[] = $num;\n    }\n    if ($ones > 0) {\n        $sorted\
    \ = array_merge($sorted, array_fill(0, $ones, 0));\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like your\
    \ solution, but I wonder how it compares to other solutions posted here (especially\
    \ the one with array_count_values). Do you know how it compares to other solutions?\n\
    <|/ c |>\n<| c |>\nI added a benchmark test to my answer. `array_count_values`\
    \ seems to be the fastest solution, but I haven't tested it extensively.\n<|/\
    \ c |>\n<| c |>\nI added a benchmark test to my answer. `array_count_values` seems\
    \ to be the fastest solution, but I haven't tested it extensively.\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4wa3iqr0.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    $ones = array_fill(0, count($arr), 1);\n    foreach ($arr\
    \ as $key => $val) {\n        $result[$key] = $val;\n        $ones[$key]--;\n\
    \    }\n    foreach ($ones as $key => $val) {\n        if ($val > 0) {\n     \
    \       $result[$key] = $result[$key] + pow(2, $ones[$key]);\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1n5lkc8.php:29\n\
    Stack trace:\n#0 /tmp/tmpp1n5lkc8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp1n5lkc8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = $arr;\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4qqc0xz.php:23\n\
    Stack trace:\n#0 /tmp/tmpu4qqc0xz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpu4qqc0xz.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    foreach ($arr as $key => $value) {\n        $bin =\
    \ decbin($value);\n        $count = substr_count($bin, '1');\n        $sorted[$key]\
    \ = $count;\n    }\n    arsort($sorted);\n    return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumkd1b60.php:24\n\
    Stack trace:\n#0 /tmp/tmpumkd1b60.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpumkd1b60.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    $sorted = [];\n    foreach ($count\
    \ as $num => $count) {\n        $sorted[$num] = $count;\n    }\n    asort($sorted);\n\
    \    return array_values($sorted);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps90e_im1.php:23\n\
    Stack trace:\n#0 /tmp/tmps90e_im1.php(33): test()\n#1 {main}\n  thrown in /tmp/tmps90e_im1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_intersect_key($arr,\
    \ $count);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your\
    \ solution works perfectly for positive integers. But for negative integers it\
    \ doesn't work. For example, `sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4,\
    \ -3, -2]` returns `[-2, -3, -4, -5, -6]` instead of `[-6, -5, -4, -3, -2]`.\n\
    <|/ c |>\n<| c |>\nI added a solution for negative integers. Please check it out.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your solution works perfectly for positive\
    \ integers. But for negative integers it doesn't work. For example, `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]` returns `[-2, -3, -4, -5, -6]` instead\
    \ of `[-6, -5, -4, -3, -2]`.\n<|/ c |>\n<| c |>\nI added a solution for negative\
    \ integers. Please check it out.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpnkyyi9gq.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = [];\n    foreach ($ones as\
    \ $num => $count) {\n        $sorted[] = $num;\n    }\n    asort($sorted);\n \
    \   return $sorted;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a |>\n<code>\n\
    <?php\n$arr = [\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 =>\
    \ 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11\
    \ => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n\
    \    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22\
    \ => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n\
    \    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33\
    \ => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n\
    \    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44\
    \ => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n\
    \    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55\
    \ => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n\
    \    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66\
    \ => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n\
    \    72 => 1,\n    73 => 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77\
    \ => 1,\n    78 => 1,\n    79 => 1,\n    80 => 1,\n    81 => 1,\n    \nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpnbmoqfno.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeaqsvqbt.php:19\n\
    Stack trace:\n#0 /tmp/tmpeaqsvqbt.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpeaqsvqbt.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ array_sum(str_split($arr[$i]));\n        if ($ones == 0) {\n            $arr[$i]\
    \ = $i;\n        } else {\n            $arr[$i] = $ones;\n        }\n    }\n \
    \   asort($arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwq8nxdur.php:28\n\
    Stack trace:\n#0 /tmp/tmpwq8nxdur.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwq8nxdur.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    $ones = 0;\n    foreach ($arr as $num) {\n        $ones\
    \ += $num;\n        $sorted[] = $num;\n    }\n    foreach ($arr as $num) {\n \
    \       $ones = $num - $ones;\n        $sorted[] = $ones;\n    }\n    return $sorted;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    $arr = [1,5,2,3,4];\n$arr2 = array_count_values($arr);\narsort($arr2);\n$arr3\
    \ = array_keys($arr2);\n$arr4 = array_values($arr2);\nprint_r($arr3);\nprint_r($arr4);\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcjuz7g6s.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $len = strlen($bin);\n        $sorted[$key] = $val;\n        for ($i\
    \ = 0; $i < $len; $i++) {\n            $sorted[$key] -= $bin[$i] === '1';\n  \
    \      }\n    }\n    return $sorted;\n}\n</code>\n<|/ a |>\n<| c |>\nThank you\
    \ for your answer. Unfortunately, the code you posted does not work for me. Can\
    \ you please explain how it works?\n<|/ c |>\n<| c |>\nI added some comments to\
    \ the code. Hope it helps.\n<|/ c |>\n<| c |>\nThank you for your answer. Unfortunately,\
    \ the code you posted does not work for me. Can you please explain how it works?\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphs9hflcl.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as &$value) {\n        $value = $value ? 1 : 0;\n    }\n   \
    \ array_multisort(array_count_values($arr), SORT_DESC, $arr);\n    return $arr;\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nI like this solution, but\
    \ I wonder if there is a way to do it without using array_count_values?\n<|/ c\
    \ |>\n<| c |>\nI added a solution without `array_count_values`\n<|/ c |>\n<| a\
    \ tags=php,sorting,arrays |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwsz7l7cp.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpualwtu57.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map('intval', $arr);\n    array_multisort(\n        array_count_values($arr),\n\
    \        SORT_NUMERIC,\n        $arr\n    );\n    return $arr;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately, I cannot use\
    \ any built-in functions. I must implement my own sorting algorithm.\n<|/ c |>\n\
    <| c |>\nI updated my answer, but this algorithm is very inefficient and inelegant\
    \ and I hope you won't use it for real life :)\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer. Unfortunately, I cannot use any built-in functions. I must implement\
    \ my own sorting algorithm.\n<|/ c |>\n<| c |>\nI updated my answer, but this\
    \ algorithm is very inefficient and inelegant and I hope you won't use it for\
    \ real life :)\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately, I cannot\
    \ use any built-in functions. I must implement my own sorting algorithm.\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php\n$array = array(\n    array(\n        'name' =>\
    \ 'John',\n        'age' => 30,\n        'gender' => 'male'\n    ),\n    array(\n\
    \        'name' => 'Jane',\n        'age' => 25,\n        'gender' => 'female'\n\
    \    ),\n    array(\n        'name' => 'Jack',\n        'age' => 25,\n       \
    \ 'gender' => 'male'\n    ),\n    array(\n        'name' => 'Jack',\n        'age'\
    \ => 30,\n        'gender' => 'male'\n    ),\n    array(\n        'name' => 'Jack',\n\
    \        'age' => 25,\n        'gender' => 'female'\n    ),\n    array(\n    \
    \    'name' => 'Jack',\n        'age' => 25,\n        'gender' => 'male'\n   \
    \ ),\n    array(\n        'name' => 'Jack',\n        'age' => 30,\n        'gender'\
    \ => 'male'\n    ),\n    array(\n        'name' => 'Jack',\n        'age' => 30,\n\
    \        'gender' => 'male'\n    ),\n    array(\n        'name' => 'Jack',\n \
    \       'age' => 30,\n        'gender' => 'male'\n    ),\n    array(\n       \
    \ 'name' => 'Jack',\n        'age' => 30,\n        'gender' => 'male'\n    ),\n\
    \    array(\n        'name' => 'Jack',\n        'age' => 30,\n        'gender'\
    \ => 'male'\n    ),\n    array(\n        'name' => 'Jack\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphq_hr9fd.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9d5_9ays.php:20\n\
    Stack trace:\n#0 /tmp/tmp9d5_9ays.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp9d5_9ays.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ $arr[$i];\n        $j = $i + 1;\n        while ($j < $len) {\n            $twos\
    \ = $arr[$j];\n            if ($twos == $ones) {\n                $j++;\n    \
    \            continue;\n            }\n            $ones = $twos;\n          \
    \  $j++;\n        }\n        $arr[$i] = $ones;\n    }\n    return $arr;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvinas8i.php:33\n\
    Stack trace:\n#0 /tmp/tmpuvinas8i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuvinas8i.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as $key => $val) {\n      \
    \  if ($val == 1) {\n            $arr[$key] = $key;\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvzqey15.php:24\n\
    Stack trace:\n#0 /tmp/tmpnvzqey15.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnvzqey15.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as &$v) {\n        $v = $v\
    \ > 0 ? 1 : 0;\n    }\n    return array_reverse($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7uqcrdn.php:22\n\
    Stack trace:\n#0 /tmp/tmpo7uqcrdn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpo7uqcrdn.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `sort_array([-1, -5, -2, 3, 4]) == [-4, -3, -2, -1,\
    \ 5]`\n<|/ c |>\n<| c |>\n: Yes, it does. `sort_array([-1, -5, -2, 3, 4]) == [-4,\
    \ -3, -2, -1, 5]`\n<|/ c |>\n<| c |>\n: I added a solution for negative numbers.\
    \ Please check.\n<|/ c |>\n<| c |>\n: I added a solution for negative numbers.\
    \ Please check.\n<|/ c |>\n<| c |>\n: I added a solution for negative numbers.\
    \ Please check.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv1p07m5w.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \        $ones[$i] = $bin[$i] === '1';\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxb7uozkr.php:26\n\
    Stack trace:\n#0 /tmp/tmpxb7uozkr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxb7uozkr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't seem to work.\
    \ `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]` but `sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nYes, it does. I tested\
    \ it before posting it. I don't know what you are talking about.\n<|/ c |>\n<|\
    \ c |>\nI tested it again and now it works. I must have had a typo when I first\
    \ tested it.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must have had\
    \ a typo when I first tested it.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I must have had a typo when I first tested it.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe7hcbne_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \        $ones[$i] = $bin[$i] === '1';\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| c |>\nI love this solution. Very elegant. Thank you!\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1nwu05cu.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_filter($arr);\n    sort($arr);\n    return $arr;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpywjbfy66.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    $ones = 0;\n    $zeros = 0;\n    foreach ($arr as $val)\
    \ {\n        if ($val == 1) {\n            $ones++;\n        } else {\n      \
    \      $zeros++;\n        }\n    }\n    if ($ones > $zeros) {\n        $result\
    \ = $arr;\n        foreach ($arr as $key => $val) {\n            if ($val == 1)\
    \ {\n                $result[$key] = $ones;\n            } else {\n          \
    \      $result[$key] = $zeros;\n            }\n        }\n    } else {\n     \
    \   $result = $arr;\n        foreach ($arr as $key => $val) {\n            if\
    \ ($val == 1) {\n                $result[$key] = $zeros;\n            } else {\n\
    \                $result[$key] = $ones;\n            }\n        }\n    }\n   \
    \ return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `sort_array([1, 5, 2, 3, 4])`\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I tested it with `sort_array([1, 0, 2, 3, 4])` and it also works.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it with `sort_array([1, 5, 2, 3, 4])`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I tested it with `sort_array([1,\
    \ 0, 2, 3, 4])` and it also works.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I tested it with `sort_array([1, 5, 2, 3, 4])` and it also works.\n<|/ c |>\n\
    <| a tags=php,arrays,sorting |>\n<code>\n<?php\n$array = [1, 5, 2, 3, 4];\n$array\
    \ = array_count_values($array);\narsort($array);\n$array = array_keys($array);\n\
    print_r($array);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try\
    \ it with `sort_array([1, 5, 2, 3, 4])`\n<|/ c |>\n<| c |>\nI tested it and it\
    \ works. I tested it with `sort_array([1, 0, 2, 3, 4])` and it also works.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I tested it with `sort_array([1, 5,\
    \ 2, 3, 4])` and it also works.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I tested it with `sort_array([1, 5, 2, 3, 4])` and it also works.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I tested it with `sort_array([1, 0, 2, 3, 4])`\
    \ and it \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuwcva7ri.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    foreach ($arr as $key => $value) {\n        $bin =\
    \ decbin($value);\n        $len = strlen($bin);\n        $count = 0;\n       \
    \ for ($i = 0; $i < $len; $i++) {\n            $count += $bin[$i] === \"1\";\n\
    \        }\n        $sorted[$key] = $count;\n    }\n    asort($sorted);\n    return\
    \ array_values($sorted);\n}\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkvaqzc6.php:28\n\
    Stack trace:\n#0 /tmp/tmphkvaqzc6.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphkvaqzc6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    asort($result);\n    return $result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. `sort_array` sorts by the number\
    \ of ones in the binary representation. `sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]` but `sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]` because\
    \ `-2` is less than `-6`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated\
    \ my answer to reflect that.\n<|/ c |>\n<| c |>\nThis still doesn't work. `sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]` but `sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]` because `-2` is less than `-6`.\n<|/ c |>\n<| c |>\nI see what\
    \ you mean. I've updated my answer to reflect that.\n<|/ c |>\n<| c |>\nThis still\
    \ doesn't work. `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]` but `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]` because `-2` is less than `-6`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkw_ig9ix.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    if ($len < 2) {\n        return $arr;\n    }\n  \
    \  $ones = array_fill(0, $len, 1);\n    $zeros = array_fill(0, $len - 1, 0);\n\
    \    $arr = array_merge($ones, $zeros, $arr);\n    asort($arr);\n    return $arr;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if the array contains negative\
    \ numbers. Try `sort_array([-2, -3, -4, -5, -6])`.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that works for negative numbers as well.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if the array contains negative numbers. Try `sort_array([-2, -3,\
    \ -4, -5, -6])`.\n<|/ c |>\n<| c |>\nI added a solution that works for negative\
    \ numbers as well.\n<|/ c |>\n<| c |>\nThis doesn't work if the array contains\
    \ negative numbers. Try `sort_array([-2, -3, -4, -5, -6])`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\n$arr = [1, 5, 2, 3, 4];\n$arr = array_count_values($arr);\narsort($arr);\n\
    $arr = array_keys($arr);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\n\
    This doesn't work if the array contains negative numbers. Try `sort_array([-2,\
    \ -3, -4, -5, -6])`.\n<|/ c |>\n<| c |>\nThis doesn't work if the array contains\
    \ negative numbers. Try `sort_array([-2, -3, -4, -5, -6])`.\n<|/ c |>\n<| a dscore=4\
    \ |>\n<code>\n$arr = [1, 5, 2, 3, 4];\n$arr = array_count_values($arr);\narsort($arr);\n\
    $arr = array_keys($arr);\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\n\
    This doesn't work if the array contains negative numbers. Try `sort_array([-2,\
    \ -3, -4, -5, -6])`.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n$arr\
    \ = [1, 5, 2, 3, 4];\n$arr = array_count_values($arr);\narsort($arr);\n$arr =\
    \ array_keys($arr);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work if\
    \ the array contains negative numbers. Try `sort_array([-2, -3, -4, -5, -6])`.\n\
    <|/ \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6gs_d2js.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_map(function\
    \ ($a) use ($ones) {\n        return str_pad(decbin($a), 8, '0', STR_PAD_LEFT);\n\
    \    }, $arr);\n    $bin = array_map(function ($a) use ($ones) {\n        return\
    \ str_pad(implode('', $ones), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin\
    \ = array_map(function ($a) use ($len) {\n        return str_pad(decbin($a), $len,\
    \ '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($a) use ($len)\
    \ {\n        return str_pad(implode('', $ones), $len, '0', STR_PAD_LEFT);\n  \
    \  }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ str_pad(decbin($a), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($a) use ($len) {\n        return str_pad(implode('', $ones), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ str_pad(decbin($a), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($a) use ($len) {\n        return str_pad(implode('', $ones), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ str_pad(decbin($a), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($a) use ($len) {\n        return str_pad(implode('', $ones), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ str_pad(decbin($a), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function\
    \ ($a) use ($len) {\n        return str_pad(implode('', $ones), $len, '0', STR_PAD_LEFT);\n\
    \    }, $bin);\n    $bin = array_map(function ($a) use ($len) {\n        return\
    \ str_pad\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwb1nm5fe.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ array_sum(str_split($arr[$i]));\n        if ($ones == 0) {\n            $arr[$i]\
    \ = $i;\n        } else {\n            $arr[$i] = $ones;\n        }\n    }\n \
    \   asort($arr);\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j097hwi.php:27\n\
    Stack trace:\n#0 /tmp/tmp8j097hwi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8j097hwi.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n        $ones[$k] = str_pad(decbin($ones[$k]), $len,\
    \ '0', STR_PAD_LEFT);\n    }\n    $ones = array_fill(0, $len, 0);\n    foreach\
    \ ($bin as $k => $v) {\n        $ones[$k] = str_pad(decbin($ones[$k]), $len, '0',\
    \ STR_PAD_LEFT);\n    }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones\
    \ as $k => $v) {\n        $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n\
    \    }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n\
    \        $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n  \
    \  }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n\
    \        $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n  \
    \  }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n\
    \        $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n  \
    \  }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n\
    \        $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n  \
    \  }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n\
    \        $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n  \
    \  }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n\
    \        $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n  \
    \  }\n    $ones = array_fill(0, $len, 0);\n    foreach (\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjl_le_p0.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    $ones = 0;\n    $zeros = 0;\n    foreach ($arr as $val)\
    \ {\n        if ($val == 1) {\n            $ones++;\n        } else {\n      \
    \      $zeros++;\n        }\n    }\n    if ($ones > $zeros) {\n        $sorted\
    \ = array_merge($sorted, array_keys($arr));\n        sort($sorted);\n    } else\
    \ {\n        $sorted = array_keys($arr);\n        sort($sorted);\n    }\n    return\
    \ $sorted;\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are two\
    \ or more 1's in the array. For example, `sort_array([1, 5, 2, 3, 4])` returns\
    \ `[1, 2, 3, 4, 5]` instead of `[1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nYes, it\
    \ does. I tested it before posting my answer. Try it yourself.\n<|/ c |>\n<| c\
    \ |>\nI tested it myself and it doesn't work. Try it yourself and you'll see.\n\
    <|/ c |>\n<| c |>\nI tested it myself and it works. Try it yourself and you'll\
    \ see.\n<|/ c |>\n<| c |>\nI tested it myself and it works. Try it yourself and\
    \ you'll see.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwevmjxzd.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_it4iwqi.php:25\n\
    Stack trace:\n#0 /tmp/tmp_it4iwqi.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_it4iwqi.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    if ($len < 2) {\n        return $arr;\n    }\n  \
    \  $ones = array_fill(0, $len, 1);\n    $bins = array_fill(0, $len, 0);\n    foreach\
    \ ($arr as $i => $num) {\n        $bins[$i] = decbin($num);\n    }\n    foreach\
    \ ($bins as $i => $bin) {\n        $bins[$i] = str_pad($bin, strlen($bin), 0);\n\
    \    }\n    foreach ($bins as $i => $bin) {\n        $bins[$i] = str_pad($bin,\
    \ strlen($bin), 0);\n    }\n    foreach ($bins as $i => $bin) {\n        $bins[$i]\
    \ = str_pad($bin, strlen($bin), 0);\n    }\n    foreach ($bins as $i => $bin)\
    \ {\n        $bins[$i] = str_pad($bin, strlen($bin), 0);\n    }\n    foreach ($bins\
    \ as $i => $bin) {\n        $bins[$i] = str_pad($bin, strlen($bin), 0);\n    }\n\
    \    foreach ($bins as $i => $bin) {\n        $bins[$i] = str_pad($bin, strlen($bin),\
    \ 0);\n    }\n    foreach ($bins as $i => $bin) {\n        $bins[$i] = str_pad($bin,\
    \ strlen($bin), 0);\n    }\n    foreach ($bins as $i => $bin) {\n        $bins[$i]\
    \ = str_pad($bin, strlen($bin), 0);\n    }\n    foreach ($bins as $i => $bin)\
    \ {\n        $bins[$i] = str_pad($bin, strlen($bin), 0);\n    }\n    foreach ($bins\
    \ as $i => $bin) {\n        $bins[$i] = str_pad($bin, strlen($bin), 0);\n    }\n\
    \    foreach ($bins as $i => $bin) {\n        $bins[$i] = str_pad($bin, strlen($bin),\
    \ 0);\n    }\n    foreach ($bins as $i => $bin) {\n        $bins[$i] = str_pad($bin,\
    \ strlen($bin), 0);\n    }\n    foreach ($bins as $i => $bin) {\n        $bins[$i]\
    \ = str_pad($bin, strlen($bin), 0);\n    }\n    foreach ($bins as $i => $bin)\
    \ {\n        $bins[$i] = str_pad($bin, strlen($bin), 0);\n    }\n    foreach ($bins\
    \ as $i => $bin) {\n        $\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp96jk3_ei.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $key => $val) {\n        $bin[$key] = str_pad(decbin($val),\
    \ $len, '0', STR_PAD_LEFT);\n        $ones[$key] = str_pad(decbin($ones[$key]),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    $ones = array_flip($ones);\n    $bin =\
    \ array_flip($bin);\n    $result = array();\n    foreach ($arr as $key => $val)\
    \ {\n        $result[$key] = $ones[$key] . $bin[$key];\n    }\n    return array_values($result);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdxqrbw0.php:31\n\
    Stack trace:\n#0 /tmp/tmpkdxqrbw0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkdxqrbw0.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $val) {\n        $arr[$key] = $val > 0 ? $val : -$val;\n\
    \    }\n    return array_multisort(array_count_values($arr), SORT_DESC, $arr);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpljmk048_.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ strlen($bin), 0);\n        $bin = str_split($bin);\n        $bin = array_filter($bin,\
    \ 'strlen');\n        $bin = array_map(function ($val) {\n            return str_pad($val,\
    \ strlen($val), 0);\n        }, $bin);\n        $bin = array_map(function ($val)\
    \ {\n            return str_pad($val, strlen($val), 0);\n        }, $bin);\n \
    \       $bin = array_unique($bin);\n        $bin = array_filter($bin, 'strlen');\n\
    \        $bin = array_map(function ($val) {\n            return str_pad($val,\
    \ strlen($val), 0);\n        }, $bin);\n        $bin = array_map(function ($val)\
    \ {\n            return str_pad($val, strlen($val), 0);\n        }, $bin);\n \
    \       $bin = array_unique($bin);\n        $bin = array_filter($bin, 'strlen');\n\
    \        $bin = array_map(function ($val) {\n            return str_pad($val,\
    \ strlen($val), 0);\n        }, $bin);\n        $bin = array_map(function ($val)\
    \ {\n            return str_pad($val, strlen($val), 0);\n        }, $bin);\n \
    \       $bin = array_unique($bin);\n        $bin = array_filter($bin, 'strlen');\n\
    \        $bin = array_map(function ($val) {\n            return str_pad($val,\
    \ strlen($val), 0);\n        }, $bin);\n        $bin = array_map(function ($val)\
    \ {\n            return str_pad($val, strlen($val), 0);\n        }, $bin);\n \
    \       $bin = array_unique($bin);\n        $bin = array_filter($bin, 'strlen');\n\
    \        $bin = array_map(function ($val) {\n            return str_pad($val,\
    \ strlen($val), 0);\n        }, $bin);\n        $bin = array_map(function ($val)\
    \ {\n            return str_pad($val, strlen($val), 0);\n        }, $bin);\n \
    \       $bin = array_unique($bin);\n        $bin = array_filter($bin, 'strlen');\n\
    \        $bin = array_map(function ($val) {\n            return str_pad($val,\
    \ strlen($val), 0);\n        }, $bin);\n        $bin = array_map(function ($val)\
    \ {\n            return str_pad($val, strlen($val), 0);\n        }, $bin);\n \
    \       $bin = array_unique($bin);\n        $bin = array_filter($bin, 'strlen');\n\
    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx1pcdd6w.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    foreach ($arr as $item) {\n        $result[$item] = count($result);\n\
    \    }\n    array_multisort($result, SORT_DESC, $arr);\n    return $arr;\n}\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. Your solution is\
    \ very similar to mine but yours doesn't use any extra memory and it is much more\
    \ readable. Thanks again.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = [\n\
    \    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n\
    \    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 =>\
    \ 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n \
    \   18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 =>\
    \ 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n \
    \   29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 =>\
    \ 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n \
    \   40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 =>\
    \ 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n \
    \   51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 =>\
    \ 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n \
    \   62 => 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 =>\
    \ 1,\n    68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n \
    \   73 => 1,\n    74 => 1,\n    75 => 1,\n    76\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfia0dd1_.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpf1boy8e_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   sort($arr, function($a, $b) {\n        $ones = bindec($a)[1];\n        $twos\
    \ = bindec($b)[1];\n        if ($ones == $twos) {\n            return 0;\n   \
    \     }\n        return $ones < $twos ? -1 : 1;\n    });\n    return $arr;\n}\n\
    </code>\n<|/ a tags=php,sorting |>\n<| c |>\nThanks for your answer. Your solution\
    \ works perfectly for me. Thanks again.\n<|/ c |>\n<| a tags=php,sorting |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpadif3p7k.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n        $ones[$k] = str_pad(decbin($ones[$k]), $len,\
    \ '0', STR_PAD_LEFT);\n    }\n    $ones = array_fill(0, $len, 0);\n    foreach\
    \ ($bin as $k => $v) {\n        $ones[$k] = substr($v, strlen($v) - 1);\n    }\n\
    \    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n    \
    \    $ones[$k] = str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }\n    $ones\
    \ = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n        $ones[$k]\
    \ = substr($v, strlen($v) - 1);\n    }\n    $ones = array_fill(0, $len, 0);\n\
    \    foreach ($ones as $k => $v) {\n        $ones[$k] = str_pad(decbin($v), $len,\
    \ '0', STR_PAD_LEFT);\n    }\n    $ones = array_fill(0, $len, 0);\n    foreach\
    \ ($ones as $k => $v) {\n        $ones[$k] = substr($v, strlen($v) - 1);\n   \
    \ }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n\
    \        $ones[$k] = str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }\n  \
    \  $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n      \
    \  $ones[$k] = substr($v, strlen($v) - 1);\n    }\n    $ones = array_fill(0, $len,\
    \ 0);\n    foreach ($ones as $k => $v) {\n        $ones[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    $ones = array_fill(0, $len, 0);\n    foreach\
    \ ($ones as $k => $v) {\n        $ones[$k] = substr($v, strlen($v) - 1);\n   \
    \ }\n    $ones = array_fill(0, $len, 0);\n    foreach ($ones as $k => $v) {\n\
    \        $ones[$k] = str_pad(decbin($\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp61o2bzpb.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_map(function\
    \ ($v) use ($ones) {\n        return $ones[$v];\n    }, $arr);\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=php,sorting |>\n<code>\n<?php\n$arr = array(1,5,2,3,4);\n\
    $arr1 = array();\n$arr2 = array();\n$arr3 = array();\n$arr4 = array();\n$arr5\
    \ = array();\n$arr6 = array();\n$arr7 = array();\n$arr8 = array();\n$arr9 = array();\n\
    $arr10 = array();\n$arr11 = array();\n$arr12 = array();\n$arr13 = array();\n$arr14\
    \ = array();\n$arr15 = array();\n$arr16 = array();\n$arr17 = array();\n$arr18\
    \ = array();\n$arr19 = array();\n$arr20 = array();\n$arr21 = array();\n$arr22\
    \ = array();\n$arr23 = array();\n$arr24 = array();\n$arr25 = array();\n$arr26\
    \ = array();\n$arr27 = array();\n$arr28 = array();\n$arr29 = array();\n$arr30\
    \ = array();\n$arr31 = array();\n$arr32 = array();\n$arr33 = array();\n$arr34\
    \ = array();\n$arr35 = array();\n$arr36 = array();\n$arr37 = array();\n$arr38\
    \ = array();\n$arr39 = array();\n$arr40 = array();\n$arr41 = array();\n$arr42\
    \ = array();\n$arr43 = array();\n$arr44 = array();\n$arr45 = array();\n$arr46\
    \ = array();\n$arr47 = array();\n$arr48 = array();\n$arr49 = array();\n$arr50\
    \ = array();\n$arr51 = array();\n$arr52 = array();\n$arr53 = array();\n$arr54\
    \ = array();\n$arr55 = array();\n$arr56 = array();\n$arr57 = array();\n$arr58\
    \ = array();\n$arr59 = array();\n$arr60 = array();\n$arr61 = array();\n$arr62\
    \ = array();\n$arr63 = array();\n$arr64 = array();\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppd1jpigi.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n \
    \   return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkipmr89.php:24\n\
    Stack trace:\n#0 /tmp/tmpkkipmr89.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkkipmr89.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    foreach ($ones as $k => $v) {\n      \
    \  $bin[$k] = str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }\n    foreach\
    \ ($bin as $k => $v) {\n        $bin[$k] = substr($v, -$len);\n    }\n    foreach\
    \ ($bin as $k => $v) {\n        $bin[$k] = array_reverse(str_split($v, 2));\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n    foreach ($bin as $k => $v) {\n        $bin[$k] = array_reverse($v);\n\
    \    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn2zlq9_n.php on line 86\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \        $ones[$i] = $bin[$i] === '1';\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyrmm9qss.php:26\n\
    Stack trace:\n#0 /tmp/tmpyrmm9qss.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyrmm9qss.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpocg23fcl.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ $arr[$i];\n        $j = $i + 1;\n        while ($j < $len) {\n            if\
    \ ($arr[$j] == $ones) {\n                $arr[$i] = $arr[$j];\n              \
    \  $arr[$j] = $ones;\n                $i++;\n                $j++;\n         \
    \   } else {\n                $j++;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxdl1thb.php:33\n\
    Stack trace:\n#0 /tmp/tmpcxdl1thb.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpcxdl1thb.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_map(function\
    \ ($v) use ($count) {\n        return $count[$v];\n    }, $arr);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI see that you have used `arsort()` but I am not able\
    \ to understand how it works. Can you please explain it a little bit?\n<|/ c |>\n\
    <| c |>\n`arsort()` sorts the array in ascending order. `arsort($count)` sorts\
    \ the array in descending order based on the number of ones in their binary representation\
    \ in ascending order. `arsort($count, SORT_NUMERIC)` sorts the array in descending\
    \ order based on the decimal value of their binary representation in ascending\
    \ order. `arsort($count, SORT_DESC)` sorts the array in descending order based\
    \ on the decimal value of their binary representation in descending order.\n<|/\
    \ c |>\n<| c |>\nI understand that but I am not able to understand how it works.\
    \ Can you please explain it a little bit?\n<|/ c |>\n<| c |>\nI added some explanation\
    \ to my answer.\n<|/ c |>\n<| c |>\nThank you so much for explaining it to me.\
    \ I really appreciate it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1,\
    \ 5, 2, 3, 4];\n$count = array_count_values($arr);\narsort($count);\n$result =\
    \ array_map(function ($v) use ($count) {\n    return $count[$v];\n}, $arr);\n\
    print_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nWhile this code\
    \ may answer the question, providing additional context regarding why and/or how\
    \ this code answers the question improves its long-term value.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$count = array_count_values($arr);\n\
    arsort($count);\n$result = array_map(function ($v) use ($count) {\n    return\
    \ $count[$v];\n}, $arr);\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpqhvq2bn2.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as $key => $value) {\n    \
    \    $arr[$key] = $value + 0;\n    }\n    array_multisort($arr);\n    return $arr;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobp4u67i.php:23\n\
    Stack trace:\n#0 /tmp/tmpobp4u67i.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpobp4u67i.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \        $ones[$i] = $bin[$i] === '1';\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,sorting |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprk1sikt3.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \    }\n    array_multisort($ones, $bin, $len);\n    return $arr;\n}\n</code>\n\
    <|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `sort_array([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10])`.\n<|/ c |>\n<| c |>\nI added a version that works for negative\
    \ numbers. I tested it on PHP 5.6.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. Try `sort_array([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])`.\n<|/ c |>\n<| c |>\nI added a version that works\
    \ for negative numbers. I tested it on PHP 5.6.\n<|/ c |>\n<| a dscore=3 |>\n\
    <code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg5n2af81.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ array_count_values(str_split($arr[$i]));\n        $ones = array_filter($ones);\n\
    \        arsort($ones);\n        $ones = array_keys($ones);\n        $ones = array_reverse($ones);\n\
    \        $arr[$i] = implode('', $ones);\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw87l18s.php:27\n\
    Stack trace:\n#0 /tmp/tmpcw87l18s.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcw87l18s.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    $ones = array_fill(0, count($arr), 1);\n    foreach ($arr\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    foreach ($ones\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    foreach ($result\
    \ as $key => $value) {\n        $result[$key] = $value;\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpggnqi7o8.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = bindec($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj0f36of5.php:25\n\
    Stack trace:\n#0 /tmp/tmpj0f36of5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj0f36of5.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as $key => $val) {\n      \
    \  $arr[$key] = $val > 0 ? $val : -$val;\n    }\n    return $arr;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1,\
    \ 5, 2, 3, 4])`\n<|/ c |>\n<| c |>\nIt works fine for me. `sort_array([1, 5, 2,\
    \ 3, 4])` returns `[1, 2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nIt doesn't work for me.\
    \ Try it with `sort_array([-2, -3, -4, -5, -6])`\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. `sort_array([1, 0, 2, 3, 4])` returns `[0, 1, 2, 3, 4]`\n<|/ c\
    \ |>\n<| c |>\nIt doesn't work for me. Try it with `sort_array([1, 5, 2, 3, 4])`\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdhn0542s.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = array();\n    foreach ($ones\
    \ as $num => $count) {\n        $sorted[] = $num;\n    }\n    asort($sorted);\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeruaq_5.php:24\n\
    Stack trace:\n#0 /tmp/tmpgeruaq_5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpgeruaq_5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $len = strlen($bin);\n        $count = 1;\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            if ($bin[$i] === '1') {\n                $count++;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    $sorted[$key] = $count;\n    }\n    arsort($sorted);\n    return array_keys($sorted);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work if you\
    \ have negative numbers. Try `sort_array([1, 5, 2, 3, 4])` vs `sort_array([-2,\
    \ -3, -4, -5, -6])`\n<|/ c |>\n<| c |>\nYes, it does. `sort_array([1, 0, 2, 3,\
    \ 4])` returns `[0, 1, 2, 3, 4]`\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. Try `sort_array([1, 5, 2, 3, 4])` vs `sort_array([-2, -3, -4, -5, -6])`\n\
    <|/ c |>\n<| c |>\nYes, it does. `sort_array([1, 0, 2, 3, 4])` returns `[0, 1,\
    \ 2, 3, 4]`\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. Try `sort_array([1,\
    \ 5, 2, 3, 4])` vs `sort_array([-2, -3, -4, -5, -6])`\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9dag0j64.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ array_sum(str_split(decbin($arr[$i])));\n        if ($ones < 0) {\n        \
    \    $ones = -$ones;\n            $arr[$i] = decbin($arr[$i]);\n            $arr[$i]\
    \ = substr($arr[$i], 1);\n        }\n        $arr[$i] = decbin($arr[$i]);\n  \
    \      $arr[$i] = substr($arr[$i], strlen($arr[$i])-strlen($ones));\n    }\n \
    \   return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_m8sbwao.php:29\n\
    Stack trace:\n#0 /tmp/tmp_m8sbwao.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_m8sbwao.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \    }\n    array_multisort($ones, $bin, $len);\n    return $arr;\n}\n</code>\n\
    <|/ a tags=php,sorting |>\n<| c |>\nThis doesn't work for negative numbers, it\
    \ sorts them in descending order.\n<|/ c |>\n<| c |>\nI added a solution for negative\
    \ numbers, too.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpufegryh4.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    foreach ($bins as $k => $v) {\n      \
    \  $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n    }\n \
    \   $res = array();\n    foreach ($ones as $k => $v) {\n        $res[] = $arr[$k];\n\
    \    }\n    return $res;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for negative numbers, it only works for positive numbers. I added a solution\
    \ that works for negative numbers, too.\n<|/ c |>\n<| a |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp6pkteyzl.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    array_multisort(\n        array_count_values($result),\n\
    \        SORT_NUMERIC,\n        $result\n    );\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| c |>\nI like this solution, but I believe\
    \ it has a bug. Try it with `sort_array([1, 5, 2, 3, 4])` which should return\
    \ `[1, 2, 3, 4, 5]` but instead returns `[1, 5, 2, 3, 4]`.\n<|/ c |>\n<| c |>\n\
    I fixed the bug, thank you for pointing it out. :)\n<|/ c |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoo6al4_o.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\nI came\
    \ up with a solution that is pretty simple, yet it works. I used the array_multisort\
    \ function and used the SORT_DESC flag to sort by descending order.\n<code>\n\
    <?php\n\n$arr = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n \
    \   5 => 5,\n    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n\
    \    11 => 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n \
    \   16 => 16,\n    17 => 17,\n    18 => 18,\n    19 => 19,\n    20 => 20,\n  \
    \  21 => 21,\n    22 => 22,\n    23 => 23,\n    24 => 24,\n    25 => 25,\n   \
    \ 26 => 26,\n    27 => 27,\n    28 => 28,\n    29 => 29,\n    30 => 30,\n    31\
    \ => 31,\n    32 => 32,\n    33 => 33,\n    34 => 34,\n    35 => 35,\n    36 =>\
    \ 36,\n    37 => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n\
    \    42 => 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n \
    \   47 => 47,\n    48 => 48,\n    49 => 49,\n    50 => 50,\n    51 => 51,\n  \
    \  52 => 52,\n    53 => 53,\n    54 => 54,\n    55 => 55,\n    56 => 56,\n   \
    \ 57 => 57,\n    58 => 58,\n    59 => 59,\n    60 => 60,\n    61 => 61,\n    62\
    \ => 62,\n    63 => 63,\n    64 => 64,\n    65 => 65,\n    66 => 66,\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpdpkqtyjo.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nI like\
    \ your solution, however it fails on negative numbers. I added a fix for that\
    \ in my answer.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppa4ifixd.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    $size = count($arr);\n    for ($i = 0; $i < $size;\
    \ $i++) {\n        $result[$i] = $i;\n    }\n    for ($i = 1; $i < $size; $i++)\
    \ {\n        for ($j = $i; $j < $size; $j++) {\n            if ($arr[$i] & $arr[$j])\
    \ {\n                $result[$j] = $result[$i];\n                $i = $j;\n  \
    \          }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpny02ujcy.php:31\n\
    Stack trace:\n#0 /tmp/tmpny02ujcy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpny02ujcy.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_filter($arr);\n    sort($arr);\n    return $arr;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1, 5,\
    \ 2, 3, 4])`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give\
    \ an example where it fails?\n<|/ c |>\n<| c |>\nIt doesn't work when there are\
    \ two or more ones in the same position. Try it with `sort_array([1, 5, 2, 3,\
    \ 4])`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give an example\
    \ where it fails?\n<|/ c |>\n<| c |>\nIt doesn't work when there are two or more\
    \ ones in the same position. Try it with `sort_array([1, 5, 2, 3, 4])`.\n<|/ c\
    \ |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp16100iai.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    foreach ($arr as $key => $val) {\n        $sorted[$key]\
    \ = $val;\n    }\n    array_multisort(\n        array_count_values($sorted),\n\
    \        SORT_ASC,\n        $sorted\n    );\n    return $sorted;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = [\n    1 =>\
    \ 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 =>\
    \ 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n   \
    \ 13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 =>\
    \ 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n \
    \   24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 =>\
    \ 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n \
    \   35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 =>\
    \ 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n \
    \   46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 =>\
    \ 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n    56 => 1,\n \
    \   57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61 => 1,\n    62 =>\
    \ 1,\n    63 => 1,\n    64 => 1,\n    65 => 1,\n    66 => 1,\n    67 => 1,\n \
    \   68 => 1,\n    69 => 1,\n    70 => 1,\n    71 => 1,\n    72 => 1,\n    73 =>\
    \ 1,\n    74 => 1,\n    75 => 1,\n    76 => 1,\n    77 => 1,\n    78 => 1,\n \
    \   79 => 1,\n    80 => 1,\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb5u5ds_6.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value == 1) {\n            $arr[$key] = $key;\n        }\n    }\n  \
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0dg4rr8.php:24\n\
    Stack trace:\n#0 /tmp/tmpk0dg4rr8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpk0dg4rr8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    foreach ($arr as $key => $value) {\n        $bin =\
    \ decbin($value);\n        $bin = substr($bin, strlen($bin) - 1);\n        $count\
    \ = substr_count($bin, '1');\n        $sorted[$key] = $value;\n        if ($count\
    \ > 1) {\n            $sorted[$key] = $count - $value;\n        }\n    }\n   \
    \ return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmxvld1lx.php:28\n\
    Stack trace:\n#0 /tmp/tmpmxvld1lx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmxvld1lx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    $ones = [];\n    foreach ($arr as $item) {\n        $bin\
    \ = decbin($item);\n        $len = strlen($bin);\n        $ones_count = substr_count($bin,\
    \ '1');\n        if ($ones_count > 0) {\n            $ones[] = $ones_count;\n\
    \        }\n        $result[] = $item;\n    }\n    array_multisort($ones, $result);\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = [];\n$arr3 = [];\n$arr4 = array_count_values($arr);\n\
    $arr5 = array_keys($arr4);\n$arr6 = array_values($arr4);\n$arr7 = array_count_values($arr5);\n\
    $arr8 = array_keys($arr7);\n$arr9 = array_values($arr7);\n$arr10 = array_count_values($arr8);\n\
    $arr11 = array_keys($arr10);\n$arr12 = array_values($arr10);\n$arr13 = array_count_values($arr11);\n\
    $arr14 = array_keys($arr13);\n$arr15 = array_values($arr13);\n$arr16 = array_count_values($arr14);\n\
    $arr17 = array_keys($arr16);\n$arr18 = array_values($arr16);\n$arr19 = array_count_values($arr17);\n\
    $arr20 = array_keys($arr19);\n$arr21 = array_values($arr19);\n$arr22 = array_count_values($arr20);\n\
    $arr23 = array_keys($arr22);\n$arr24 = array_values($arr22);\n$arr25 = array_count_values($arr23);\n\
    $arr26 = array_keys($arr25);\n$arr27 = array_values($arr25);\n$arr28 = array_count_values($arr26);\n\
    $arr29 = array_keys($arr28);\n$arr30 = array_values($arr28);\n$arr31 = array_count_values($arr29);\n\
    $arr32 = array_keys($arr31);\n$arr33 = array_values($arr31);\n$arr34 = array_count_values($arr32);\n\
    $arr35 = array_keys($arr34);\n$arr36 = array_values($arr34);\n$arr37 = array_count_values($arr35);\n\
    $arr38 = array_keys($arr37);\n$arr39 = array_values($arr37);\n$arr\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0xdpwnn_.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \        $ones[$i] = $bin[$i] === '1';\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like this solution, but I wonder if there is a way to make it more\
    \ efficient. My test array has about 500 elements and it takes about 3 seconds\
    \ to sort it (on my machine). I'm sure there must be a way to make it faster.\n\
    <|/ c |>\n<| c |>\n: I added a faster solution. Hope it helps.\n<|/ c |>\n<| c\
    \ |>\n: I added a faster solution. Hope it helps.\n<|/ c |>\n<| c |>\n: I added\
    \ a faster solution. Hope it helps.\n<|/ c |>\n<| a tags=sorting,php,arrays |>\n\
    <code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5yh1g2q2.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ array_count_values(str_split($arr[$i]));\n        $ones = array_filter($ones);\n\
    \        $ones = array_keys($ones);\n        $ones = array_reverse($ones);\n \
    \       $ones = array_merge($ones, array_fill(0, count($ones), 0));\n        $ones\
    \ = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones) /\
    \ 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n \
    \       $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($ones, 0, count($ones)\
    \ / 2);\n        $ones = array_merge($ones, array_fill(0, count($ones), 0));\n\
    \        $ones = array_unique($ones);\n        $ones = array_slice($\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpcweuhi36.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $ones = array_sum($ones);\n\
    \    arsort($ones);\n    $ones = array_fill(0, $len, 1);\n    $\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf39es9dw.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = bindec($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\n\
    <?php\n$array = array(\n    0 => 1,\n    1 => 5,\n    2 => 2,\n    3 => 3,\n \
    \   4 => 4,\n    5 => 0\n);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip(\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi1vupq_6.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $bin = decbin($arr[$i]);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, -8);\n        $bin = str_pad($bin, strlen($bin)\
    \ + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, -8);\n        $bin\
    \ = str_pad($bin, strlen($bin) + 8, '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, -8);\n        $bin = str_pad($bin, strlen($bin) + 8\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpunsy8msf.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\n<?php\n\
    $array = array(1, 5, 2, 3, 4);\n$array = array_count_values($array);\narsort($array);\n\
    $array = array_keys($array);\nprint_r($array);\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3maxvfxr.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = array_map(function ($ones)\
    \ use ($ones) {\n        return $ones > 1 ? $ones : $ones * 10;\n    }, $ones);\n\
    \    asort($sorted);\n    return array_map(function ($ones) use ($ones) {\n  \
    \      return $ones > 1 ? $ones / 10 : $ones;\n    }, $sorted);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Cannot use lexical variable $ones as a parameter name in\
    \ /tmp/tmpwf3uhpa9.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = array();\n    foreach ($ones\
    \ as $key => $value) {\n        if ($value == 1) {\n            $sorted[] = $key;\n\
    \        } else {\n            $sorted[] = $key;\n            $sorted[] = $key\
    \ + pow(2, $value - 1);\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work. Try it with `sort_array([1, 5, 2,\
    \ 3, 4])`\n<|/ c |>\n<| c |>\nIt works fine for me. `sort_array([1, 5, 2, 3, 4])`\
    \ returns `[1, 2, 3, 4, 5]`\n<|/ c |>\n<| c |>\nIt doesn't work for me on PHP\
    \ 5.5.9. `sort_array([1, 5, 2, 3, 4])` returns `[5, 2, 3, 4, 1]`\n<|/ c |>\n<|\
    \ c |>\nIt works on PHP 5.5.9. `sort_array([1, 5, 2, 3, 4])` returns `[1, 2, 3,\
    \ 4, 5]`\n<|/ c |>\n<| c |>\nIt doesn't work for me on PHP 5.5.9. `sort_array([1,\
    \ 5, 2, 3, 4])` returns `[5, 2, 3, 4, 1]`\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw5bc58lp.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($result as $key => $value) {\n        if ($value\
    \ == 0) {\n            unset($result[$key]);\n        }\n    }\n    foreach ($result\
    \ as $key => $value) {\n        if ($value == 0) {\n            $result[$key]\
    \ = 1;\n        }\n    }\n    foreach ($result as $key => $value) {\n        $result[$key]\
    \ = $value / pow(10, count($result) - $key);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscbrlf8n.php:35\n\
    Stack trace:\n#0 /tmp/tmpscbrlf8n.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpscbrlf8n.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    asort($result);\n    return $result;\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbas8qo80.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2grcg3k6.php:20\n\
    Stack trace:\n#0 /tmp/tmp2grcg3k6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2grcg3k6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    foreach ($arr as $key => $value) {\n        $bin =\
    \ decbin($value);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n       \
    \ $bin = str_pad($bin, strlen($bin), 0);\n        $bin = str_split($bin);\n  \
    \      $bin = array_filter($bin);\n        $bin = array_map('intval', $bin);\n\
    \        $bin = array_count_values($bin);\n        $bin = array_filter($bin);\n\
    \        $bin = array_keys($bin);\n        $bin = array_map(function($v) { return\
    \ $v * -1; }, $bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin\
    \ = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin\
    \ = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin\
    \ = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin\
    \ = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin\
    \ = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin\
    \ = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin\
    \ = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin\
    \ = array_sum($bin);\n        $bin = array_sum($bin);\n        $bin = array_sum($bin);\n\
    \        $bin = \nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw1_cxq8t.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the array has negative\
    \ numbers. Try `sort_array([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9])`\n<|/ c |>\n<| c |>\nI added a solution for negative numbers.\
    \ Please check.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpin7t195o.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqocjy65h.php:19\n\
    Stack trace:\n#0 /tmp/tmpqocjy65h.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqocjy65h.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    $count = array_count_values($arr);\n    foreach\
    \ ($count as $k => $v) {\n        if ($v > 1) {\n            $tmp = array_keys($arr,\
    \ $k);\n            sort($tmp);\n            $arr[$k] = $tmp;\n        }\n   \
    \ }\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like\
    \ this solution, however it fails on `sort_array([1, 0, 2, 3, 4])` which should\
    \ return `[0, 1, 2, 3, 4]` but instead returns `[0, 1, 2, 3, 4]`.\n<|/ c |>\n\
    <| c |>\nI fixed the bug and added a test case to my answer.\n<|/ c |>\n<| c |>\n\
    I like the idea of using array_count_values to count the ones and then sorting\
    \ by that. Nice.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptwoe6rri.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bin[$i] = decbin($v);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer!\
    \ I tried to implement your solution, but I got this error: `Fatal error: Call\
    \ to undefined function decbin()`. Do you know why this happens?\n<|/ c |>\n<|\
    \ c |>\nI added a link to my answer that explains why `decbin()` is not a PHP\
    \ function.\n<|/ c |>\n<| c |>\nThank you for your answer! I tried to implement\
    \ your solution, but I got this error: `Fatal error: Call to undefined function\
    \ decbin()`. Do you know why this happens?\n<|/ c |>\n<| c |>\nI added a link\
    \ to my answer that explains why `decbin()` is not a PHP function.\n<|/ c |>\n\
    <| c |>\nThank you for your answer! I tried to implement your solution, but I\
    \ got this error: `Fatal error: Call to undefined function decbin()`. Do you know\
    \ why this happens?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwc66dvqr.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    $count = count($arr);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $bin = decbin($arr[$i]);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n   \
    \     $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin)\
    \ - 1);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n   \
    \     $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin)\
    \ - 1);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n    \
    \    $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin),\
    \ '0', STR_PAD_LEFT);\n        $bin = substr($bin, 0, strlen($bin) - 1);\n   \
    \     $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n        $bin = substr($bin,\
    \ 0, strlen($bin) - 1);\n        $bin = str_pad($bin, strlen($bin), '0', STR_PAD_LEFT);\n\
    \        $bin = substr($bin, 0, strlen($bin) - 1);\n        $bin = str_pad($bin,\
    \ strlen($bin), '0', STR_PAD_LEFT);\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz4fjbl_a.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as $key => $val) {\n      \
    \  $arr[$key] = $val > 0 ? $val : -$val;\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmj65xcm.php:22\n\
    Stack trace:\n#0 /tmp/tmprmj65xcm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprmj65xcm.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't work when there are multiple 1's in the array. Try it with `sort_array([1,\
    \ 5, 2, 3, 4])` which should return `[1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nI misunderstood\
    \ the question, sorry. I've updated my answer.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [1,5,2,3,4];\n$arr1 = array_count_values($arr);\narsort($arr1);\n\
    $arr2 = array_keys($arr1);\n$arr3 = array_values($arr1);\n$arr4 = array_combine($arr2,$arr3);\n\
    print_r($arr4);\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [1,5,2,3,4];\n$arr1 = array_count_values($arr);\narsort($arr1);\n\
    $arr2 = array_keys($arr1);\n$arr3 = array_values($arr1);\n$arr4 = array_combine($arr2,$arr3);\n\
    print_r($arr4);\n</code>\n<|/ a tags=arrays,php |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\n$arr = [1,5,2,3,4];\n$arr1 = array_count_values($arr);\narsort($arr1);\n\
    $arr2 = array_keys($arr1);\n$arr3 = array_values($arr1);\n$arr4 = array_combine($arr2,$arr3);\n\
    print_r($arr4);\n</code>\n<|/ a tags=arrays,php dscore=0 |>\n<| c |>\nPlease add\
    \ some explanation to your answer such that others can learn from it\n<|/ c |>\n\
    <| a tags=arrays,php |>\n<code>\n<?php\n$arr = [1,5,2,3,4];\n$arr1 = array_count_values($arr);\n\
    arsort($arr1);\n$arr2 = array_keys($arr1);\n$arr3 = array_values($arr1);\n$arr4\
    \ = array_combine($arr2,$arr3);\nprint_r($arr4);\n</code>\n<|/ a dscore=0 |>\n\
    \nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl_1_y2xo.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    asort($result);\n    return $result;\n}\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't seem to work. `sort_array(['1', '5', '2', '3', '4'])`\
    \ returns `['1', '2', '3', '4', '5']`.\n<|/ c |>\n<| c |>\nThis doesn't seem to\
    \ work. `sort_array(['1', '5', '2', '3', '4'])` returns `['1', '2', '3', '4',\
    \ '5']`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `sort_array(['1', '5',\
    \ '2', '3', '4'])` returns `['1', '2', '3', '4', '5']`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't seem to work. `sort_array(['1', '5', '2', '3', '4'])` returns `['1',\
    \ '2', '3', '4', '5']`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `sort_array(['1',\
    \ '5', '2', '3', '4'])` returns `['1', '2', '3', '4', '5']`.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpedfmhywb.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    array_multisort($ones, SORT_DESC, $bin,\
    \ SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting |>\n\
    <| c |>\nThis is not the right answer. `sort_array` sorts array in descending\
    \ order. `array_multisort` sorts array in ascending order. `array_multisort($ones,\
    \ SORT_DESC, $bin, SORT_NUMERIC, $arr);` should be `array_multisort($bin, SORT_DESC,\
    \ $ones, SORT_NUMERIC, $arr);`\n<|/ c |>\n<| c |>\nI believe that `array_multisort`\
    \ sorts array in ascending order by default. Check [this example](https://3v4l.org/1kJVU).\n\
    <|/ c |>\n<| c |>\nYes, you are right. My bad. Thanks for pointing out.\n<|/ c\
    \ |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz32aub67.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    $ones = 0;\n    foreach ($arr as $num) {\n        $ones\
    \ += $num;\n        $sorted[] = $num;\n    }\n    $sorted = array_reverse($sorted);\n\
    \    $sorted = array_merge($sorted, array_fill(0, $ones, 0));\n    asort($sorted);\n\
    \    return $sorted;\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nThis solution\
    \ works perfectly for me. Thank you so much!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    <?php\n$arr = array(\n    1,\n    5,\n    2,\n    3,\n    4,\n);\n\n$arr = array_count_values($arr);\n\
    arsort($arr);\n$arr = array_keys($arr);\nprint_r($arr);\n</code>\n<|/ a tags=php,sorting\
    \ |>\n<| a tags=php,sorting |>\n<code>\n$arr = array(\n    1,\n    5,\n    2,\n\
    \    3,\n    4,\n);\n\n$arr = array_count_values($arr);\narsort($arr);\n$arr =\
    \ array_keys($arr);\nprint_r($arr);\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting\
    \ |>\n<code>\n$arr = array(\n    1,\n    5,\n    2,\n    3,\n    4,\n);\n\n$arr\
    \ = array_count_values($arr);\narsort($arr);\n$arr = array_keys($arr);\nprint_r($arr);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting |>\n<code>\n$arr = array(\n\
    \    1,\n    5,\n    2,\n    3,\n    4,\n);\n\n$arr = array_count_values($arr);\n\
    arsort($arr);\n$arr = array_keys($arr);\nprint_r($arr);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$arr = array(\n    1,\n    5,\n    2,\n    3,\n\
    \    4,\n);\n\n$arr = array_count_values($arr);\narsort($arr);\n$arr = array_keys($arr);\n\
    print_r($arr);\n</code>\n<|/ a tags=php,sorting |>\n<| a dscore=1 |>\n<code>\n\
    $arr = array(\n    1,\n    5,\n    2,\n    3,\n    4,\n);\n\n$arr = array_count_values($arr);\n\
    arsort($arr);\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptz9tk3jj.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_map(function($v)\
    \ use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $arr);\n    asort($bin);\n    return array_map(function($v) use ($ones)\
    \ {\n        return $ones[strpos($v, '1')];\n    }, $bin);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7dpbhzmp.php:26\n\
    Stack trace:\n#0 /tmp/tmp7dpbhzmp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7dpbhzmp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ $arr[$i];\n        $j = $i + 1;\n        while ($j < $len) {\n            if\
    \ ($ones == $arr[$j]) {\n                $j++;\n                continue;\n  \
    \          }\n            if ($ones > $arr[$j]) {\n                break;\n  \
    \          }\n            $arr[$i] = $arr[$j];\n            $i++;\n          \
    \  $j++;\n        }\n        $arr[$i] = $ones;\n    }\n    return $arr;\n}\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysy7gfus.php:35\n\
    Stack trace:\n#0 /tmp/tmpysy7gfus.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpysy7gfus.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = $arr;\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzizryox1.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    ksort($ones);\n    return array_merge(array_keys($ones),\
    \ $arr);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\nI like this solution.\
    \ Very elegant and simple.\n<|/ c |>\n<| a tags=php,sorting |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpzhgc6vhq.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $bin = array_fill(0, $len, 0);\n    foreach ($arr\
    \ as $i => $num) {\n        $bin[$i] = decbin($num);\n    }\n    $bin = array_map('strrev',\
    \ array_reverse($bin));\n    $bin = array_map('str_pad', array_fill(0, $len, '0'),\
    \ $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '0'), $bin);\n \
    \   $bin = array_map('str_pad', array_fill(0, $len, '0'), $bin);\n    $bin = array_map('str_pad',\
    \ array_fill(0, $len, '0'), $bin);\n    $bin = array_map('str_pad', array_fill(0,\
    \ $len, '0'), $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '0'),\
    \ $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '0'), $bin);\n \
    \   $bin = array_map('str_pad', array_fill(0, $len, '0'), $bin);\n    $bin = array_map('str_pad',\
    \ array_fill(0, $len, '0'), $bin);\n    $bin = array_map('str_pad', array_fill(0,\
    \ $len, '0'), $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '0'),\
    \ $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '0'), $bin);\n \
    \   $bin = array_map('str_pad', array_fill(0, $len, '0'), $bin);\n    $bin = array_map('str_pad',\
    \ array_fill(0, $len, '0'), $bin);\n    $bin = array_map('str_pad', array_fill(0,\
    \ $len, '0'), $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '0'),\
    \ $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '0'), $bin);\n \
    \   $bin = array_map('str_pad', array_fill(0, $len, '0'), $bin);\n    $bin = array_map('str_pad',\
    \ array_fill(0, $len, '0'), $bin);\n    $bin = array_map('str_pad', array_fill(0,\
    \ $len, '0'), $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '0'),\
    \ $bin);\n    $bin = array_map('str_pad', array_fill(0, $len, '\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk7jhjjxh.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    ksort($ones);\n    return array_map(function\
    \ ($v) use ($ones) {\n        return $ones[$v];\n    }, $arr);\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$ones\
    \ = array_count_values($arr);\nksort($ones);\n$result = array_map(function ($v)\
    \ use ($ones) {\n    return $ones[$v];\n}, $arr);\nprint_r($result);\n</code>\n\
    <|/ a tags=arrays,php,sorting |>\n<| a dscore=1 |>\n<code>\n$arr = [1, 5, 2, 3,\
    \ 4];\n$ones = array_count_values($arr);\nksort($ones);\n$result = array_map(function\
    \ ($v) use ($ones) {\n    return $ones[$v];\n}, $arr);\nprint_r($result);\n</code>\n\
    <|/ a tags=arrays,php,sorting |>\n<| a |>\n<code>\n$arr = [1, 5, 2, 3, 4];\n$ones\
    \ = array_count_values($arr);\nksort($ones);\n$result = array_map(function ($v)\
    \ use ($ones) {\n    return $ones[$v];\n}, $arr);\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 tags=arrays,php,sorting |>\n<| a dscore=0 |>\n<code>\n$arr = [1,\
    \ 5, 2, 3, 4];\n$ones = array_count_values($arr);\nksort($ones);\n$result = array_map(function\
    \ ($v) use ($ones) {\n    return $ones[$v];\n}, $arr);\nprint_r($result);\n</code>\n\
    <|/ a tags=arrays,php,sorting |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    $arr = [1, 5, 2, 3, 4];\n$ones = array_count_values($arr);\nksort($ones);\n$result\
    \ = array_map(function ($v) use ($ones) {\n    return $ones[$v];\n}, $arr);\n\
    print_r($result);\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| a dscore=0 |>\n\
    <code>\n$arr = [1, 5, 2, 3, 4];\n$ones = array_count_values($arr);\nksort($ones);\n\
    $result = array_\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbedu__1f.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    $sorted = [];\n    foreach ($count\
    \ as $num => $count) {\n        if ($count == 1) {\n            $sorted[] = $num;\n\
    \        } else {\n            $sorted[] = sprintf('%010d', $num);\n        }\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnib4b3aa.php:27\n\
    Stack trace:\n#0 /tmp/tmpnib4b3aa.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnib4b3aa.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `sort_array` returns\
    \ `[-6, -5, -4, -3, -2]` instead of `[-6, -5, -4, -3, -2, 1]`.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work because `array_count_values` returns an array with keys\
    \ and values reversed. See [this answer](https://stackoverflow.com/a/477018/157957).\n\
    <|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've updated\
    \ the answer.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3mqal_v7.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6t7ga2e.php:19\n\
    Stack trace:\n#0 /tmp/tmpy6t7ga2e.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpy6t7ga2e.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    $ones = 0;\n    foreach ($arr as $num) {\n        $ones\
    \ += $num;\n        $sorted[] = $num;\n    }\n    if ($ones > 0) {\n        $sorted\
    \ = array_merge($sorted, array_keys($arr, array_search($ones, $arr)));\n    }\n\
    \    return $sorted;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays |>\n\
    <code>\n$arr = [1, 5, 2, 3, 4];\n$arr2 = [];\n$arr3 = [];\n$arr4 = [];\n$arr5\
    \ = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9 = [];\n$arr10 = [];\n$arr11\
    \ = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n$arr15 = [];\n$arr16 = [];\n\
    $arr17 = [];\n$arr18 = [];\n$arr19 = [];\n$arr20 = [];\n$arr21 = [];\n$arr22 =\
    \ [];\n$arr23 = [];\n$arr24 = [];\n$arr25 = [];\n$arr26 = [];\n$arr27 = [];\n\
    $arr28 = [];\n$arr29 = [];\n$arr30 = [];\n$arr31 = [];\n$arr32 = [];\n$arr33 =\
    \ [];\n$arr34 = [];\n$arr35 = [];\n$arr36 = [];\n$arr37 = [];\n$arr38 = [];\n\
    $arr39 = [];\n$arr40 = [];\n$arr41 = [];\n$arr42 = [];\n$arr43 = [];\n$arr44 =\
    \ [];\n$arr45 = [];\n$arr46 = [];\n$arr47 = [];\n$arr48 = [];\n$arr49 = [];\n\
    $arr50 = [];\n$arr51 = [];\n$arr52 = [];\n$arr53 = [];\n$arr54 = [];\n$arr55 =\
    \ [];\n$arr56 = [];\n$arr57 = [];\n$arr58 = [];\n$arr59 = [];\n$arr60 = [];\n\
    $arr61 = [];\n$arr62 = [];\n$arr63 = [];\n$arr64 = [];\n$arr65 = [];\n$arr66 =\
    \ [];\n$arr67 = [];\n$arr68 = [];\n$arr69 = [];\n$arr70 = [];\n$arr71 = [];\n\
    $arr72 = [];\n$arr73 = [];\n$arr74 = [];\n$arr75 = [];\n$arr76 = [];\n$arr77 =\
    \ [];\n$arr78 = [];\n$arr79 = [];\n$arr80 = [];\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzv6n2oe9.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_filter($arr);\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmlfue2kr.php:20\n\
    Stack trace:\n#0 /tmp/tmpmlfue2kr.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmlfue2kr.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4wvuugs.php:19\n\
    Stack trace:\n#0 /tmp/tmps4wvuugs.php(29): test()\n#1 {main}\n  thrown in /tmp/tmps4wvuugs.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = [];\n    $ones = 0;\n    foreach ($arr as $num) {\n        $ones\
    \ += $num;\n        $sorted[] = $num;\n    }\n    if ($ones == 0) {\n        return\
    \ $sorted;\n    }\n    $ones = ~$ones;\n    $sorted = array_reverse($sorted);\n\
    \    foreach ($sorted as $i => $num) {\n        if ($num == 1) {\n           \
    \ $sorted[$i] = $ones;\n        }\n    }\n    return $sorted;\n}\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| a tags=php,sorting |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3v29170a.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a tags=php,sorting,arrays |>\n\
    <code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnn5p434h.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as $key => $value) {\n        $arr[$key] = $value;\n    }\n\
    \    array_multisort(array_count_values($arr), SORT_DESC, $arr);\n    return $arr;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Unfortunately\
    \ I cannot use any external libraries. I only can use PHP built-in functions.\n\
    <|/ c |>\n<| c |>\nOk, I added a PHP solution. Hope it helps.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Unfortunately I cannot use any external libraries.\
    \ I only can use PHP built-in functions.\n<|/ c |>\n<| c |>\nOk, I added a PHP\
    \ solution. Hope it helps.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n\
    $array = [\n    1 => 1,\n    2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n\
    \    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n\
    \    12 => 1,\n    13 => 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17\
    \ => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n\
    \    23 => 1,\n    24 => 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28\
    \ => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n\
    \    34 => 1,\n    35 => 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39\
    \ => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n\
    \    45 => 1,\n    46 => 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50\
    \ => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n    54 => 1,\n    55 => 1,\n\
    \    56 => 1,\n    57 => 1,\n    58 => 1,\n    59 => 1,\n    60 => 1,\n    61\
    \ => 1,\n    62 => 1,\n    63 => 1,\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt1ij62ul.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    array_multisort($ones, SORT_DESC, $bin,\
    \ SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThanks for your answer. Your solution is very close to my solution. I just\
    \ need to sort it by decimal value. Your solution sorts array by binary value.\n\
    <|/ c |>\n<| c |>\nI added a solution that sorts decimal values as well.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your solution is very close to my solution.\
    \ I just need to sort it by decimal value. Your solution sorts array by binary\
    \ value.\n<|/ c |>\n<| a tags=php,arrays |>\nI solved it by myself. I used usort\
    \ function and I used a custom comparison function which compares two decimal\
    \ numbers by their decimal value.\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpktyf8lv4.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $num) {\n        $bin[$i] = decbin($num);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work. `sort_array(array(1,5,2,3,4))` returns `Array ( [0] => 1 [1] => 2 [2]\
    \ => 3 [3] => 4 [4] => 5 )` instead of `Array ( [0] => 1 [1] => 2 [2] => 3 [3]\
    \ => 4 [4] => 5 )`\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting\
    \ it. I just tested it again and I see that it does work. Maybe I misunderstood\
    \ your question. Can you please explain what you are trying to do?\n<|/ c |>\n\
    <| c |>\n: I edited my answer to include a solution that sorts arrays of non-negative\
    \ integers.\n<|/ c |>\n<| c |>\n: I edited my answer to include a solution that\
    \ sorts arrays of non-negative integers.\n<|/ c |>\n<| c |>\n: I edited my answer\
    \ to include a solution that sorts arrays of non-negative integers.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpltcl0b3t.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_map(function\
    \ ($v) use ($ones) {\n        return $ones[$v];\n    }, $arr);\n}\n</code>\n<|/\
    \ a tags=php,sorting,arrays |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppdrcgz42.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n\
    $arr3 = array_keys($arr2, array_search(1, $arr2));\n$arr4 = array_keys($arr2,\
    \ array_search(2, $arr2));\n$arr5 = array_keys($arr2, array_search(3, $arr2));\n\
    $arr6 = array_keys($arr2, array_search(4, $arr2));\n$arr7 = array_keys($arr2,\
    \ array_search(5, $arr2));\n$arr8 = array_keys($arr2, array_search(6, $arr2));\n\
    $arr9 = array_keys($arr2, array_search(7, $arr2));\n$arr10 = array_keys($arr2,\
    \ array_search(8, $arr2));\n$arr11 = array_keys($arr2, array_search(9, $arr2));\n\
    $arr12 = array_keys($arr2, array_search(10, $arr2));\n$arr13 = array_keys($arr2,\
    \ array_search(11, $arr2));\n$arr14 = array_keys($arr2, array_search(12, $arr2));\n\
    $arr15 = array_keys($arr2, array_search(13, $arr2));\n$arr16 = array_keys($arr2,\
    \ array_search(14, $arr2));\n$arr17 = array_keys($arr2, array_search(15, $arr2));\n\
    $arr18 = array_keys($arr2, array_search(16, $arr2));\n$arr19 = array_keys($arr2,\
    \ array_search(17, $arr2));\n$arr20 = array_keys($arr2, array_search(18, $arr2));\n\
    $arr21 = array_keys($arr2, array_search(19, $arr2));\n$arr22 = array_keys($arr2,\
    \ array_search(20, $arr2));\n$arr23 = array_keys($arr2, array_search(21, $arr2));\n\
    $arr24 = array_keys($arr2, array_search(22, $arr2));\n$arr25 = array_keys($arr2,\
    \ array_search(23, $arr2));\n$arr26 = array_keys($arr2, array_search(24, $arr2));\n\
    $arr27 = array_keys($arr2, array_search(25, $arr2));\n$arr28 = array_keys($arr2,\
    \ array_search(26, $arr2));\n$arr29 = array_keys($arr2, array_search(27, $arr2));\n\
    $\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_54aq4e8.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    $bin = array_map('str_pad', $bin, $len);\n\
    \    $bin = array_map('ltrim', $bin);\n    $bin = array_map('rtrim', $bin);\n\
    \    $bin = array_map('str_pad', $bin, $len);\n    $bin = array_map('ltrim', $bin);\n\
    \    $bin = array_map('rtrim', $bin);\n    foreach ($bin as $k => $v) {\n    \
    \    $ones[$k] = str_pad(decbin($ones[$k]), $len, '0', STR_PAD_LEFT);\n    }\n\
    \    $ones = array_map('str_pad', $ones, $len);\n    $ones = array_map('ltrim',\
    \ $ones);\n    $ones = array_map('rtrim', $ones);\n    $ones = array_map('str_pad',\
    \ $ones, $len);\n    $ones = array_map('ltrim', $ones);\n    $ones = array_map('rtrim',\
    \ $ones);\n    foreach ($ones as $k => $v) {\n        $arr[$k] = decbin($v);\n\
    \    }\n    foreach ($arr as $k => $v) {\n        $arr[$k] = decbin($v);\n   \
    \ }\n    foreach ($ones as $k => $v) {\n        $arr[$k] = decbin($v);\n    }\n\
    \    foreach ($arr as $k => $v) {\n        $arr[$k] = decbin($v);\n    }\n   \
    \ foreach ($ones as $k => $v) {\n        $arr[$k] = decbin($v);\n    }\n    foreach\
    \ ($arr as $k => $v) {\n        $arr[$k] = decbin($v);\n    }\n    foreach ($ones\
    \ as $k => $v) {\n        $arr[$k] = decbin($v);\n    }\n    foreach ($arr as\
    \ $k => $v) {\n        $arr[$k] = decbin($v);\n    }\n    foreach ($ones as $k\
    \ => $v) {\n        $arr[$k] = decbin($v);\n    }\n    foreach ($arr as $k =>\
    \ $v) {\n        $arr[$k] = decbin($v);\n    }\n    foreach ($ones as $k => $v)\
    \ {\n        $arr[$k] = dec\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp1uxf3zs.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ $arr[$i];\n        $j = $i + 1;\n        while ($j < $len) {\n            if\
    \ ($arr[$j] == $ones) {\n                $tmp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $tmp;\n                $j++;\n     \
    \       } else {\n                break;\n            }\n        }\n    }\n  \
    \  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmper51tlke.php:33\n\
    Stack trace:\n#0 /tmp/tmper51tlke.php(43): test()\n#1 {main}\n  thrown in /tmp/tmper51tlke.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n\
    \    }, $arr);\n    $bin = array_map(function ($v) use ($ones) {\n        return\
    \ str_pad(implode('', $ones), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin\
    \ = array_map(function ($v) use ($len) {\n        return substr($v, 0, $len);\n\
    \    }, $bin);\n    $bin = array_map(function ($v) use ($len) {\n        return\
    \ substr($v, -$len);\n    }, $bin);\n    $bin = array_map(function ($v) {\n  \
    \      return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin\
    \ = array_map(function ($v) {\n        return str_pad(implode('', $ones), 8, '0',\
    \ STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($v) {\n      \
    \  return substr($v, 0, $len);\n    }, $bin);\n    $bin = array_map(function ($v)\
    \ {\n        return substr($v, -$len);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n\
    \    $bin = array_map(function ($v) {\n        return str_pad(implode('', $ones),\
    \ 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($v) {\n\
    \        return substr($v, 0, $len);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) {\n        return substr($v, -$len);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\n    }, $bin);\n\
    \    $bin = array_map(function ($v) {\n        return str_pad(implode('', $ones),\
    \ 8, '0', STR_PAD_LEFT);\n    }, $bin);\n    $bin = array_map(function ($v) {\n\
    \        return substr($v, 0, $len);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) {\n        return substr($v, -$len);\n    }, $bin);\n    $bin = array_map(function\
    \ ($v) {\n        return str_pad(decbin($v), 8, '0', STR_PAD_LEFT);\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp1f0n7d_y.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_filter($arr);\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjul8b_f4.php:20\n\
    Stack trace:\n#0 /tmp/tmpjul8b_f4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjul8b_f4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_filter($arr);\n    sort($arr);\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0457gyi3.php:20\n\
    Stack trace:\n#0 /tmp/tmp0457gyi3.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0457gyi3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a |>\n<| a |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 =\
    \ array_count_values($arr);\narsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n\
    </code>\n<|/ a dscore=0 tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\narsort($arr2);\n$arr3\
    \ = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ a tags=php,arrays |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    <?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\narsort($arr2);\n\
    $arr3 = array_keys($arr2);\nprint_r($arr3);\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = array_count_values($arr);\n\
    arsort($arr2);\n$arr3 = array_\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmputdni56c.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $key => $val) {\n        $bin[$key] = bindec($val);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like your solution,\
    \ but I cannot get it to work. Can you please post the full code for the function?\n\
    <|/ c |>\n<| c |>\nI added the full code for the function\n<|/ c |>\n<| c |>\n\
    I added the full code for the function\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp77a93_hk.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $count = array_count_values($arr);\n    arsort($count);\n    return array_keys($count);\n\
    }\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpv5fu_oes.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = array();\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    array_multisort(array_count_values($result), SORT_DESC,\
    \ $result);\n    return $result;\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n\
    <| c |>\nThis does not answer the question. OP wants to sort an array by number\
    \ of ones in its binary representation in ascending order.\n<|/ c |>\n<| c |>\n\
    : I guess I misunderstood the question. I'll delete my answer if OP clarifies\
    \ it.\n<|/ c |>\n<| c |>\n: I added a solution that sorts based on number of ones\
    \ in their binary representation in ascending order.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that sorts based on number of ones in their binary representation\
    \ in ascending order.\n<|/ c |>\n<| c |>\n: I added a solution that sorts based\
    \ on number of ones in their binary representation in ascending order.\n<|/ c\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$arr = array(\n    1 => 1,\n  \
    \  2 => 1,\n    3 => 1,\n    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n\
    \    8 => 1,\n    9 => 1,\n    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 =>\
    \ 1,\n    14 => 1,\n    15 => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n \
    \   19 => 1,\n    20 => 1,\n    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 =>\
    \ 1,\n    25 => 1,\n    26 => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n \
    \   30 => 1,\n    31 => 1,\n    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 =>\
    \ 1,\n    36 => 1,\n    37 => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n \
    \   41 => 1,\n    42 => 1,\n    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 =>\
    \ 1,\n    47 => 1,\n    48 => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n \
    \   52 => 1,\n    53 => 1,\n    54 => \nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzctuu4tz.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map('intval', $arr);\n    sort($arr);\n    return $arr;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nI fixed it\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9kk_alzn.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value > 0) {\n            $arr[$key] = $value;\n        } else {\n \
    \           $arr[$key] = -$value;\n        }\n    }\n    return $arr;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfbbg12v0.php:26\n\
    Stack trace:\n#0 /tmp/tmpfbbg12v0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfbbg12v0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $val) {\n        $bin[$i] = decbin($val);\n\
    \        $ones[$i] = $bin[$i] === '1';\n    }\n    array_multisort($ones, SORT_DESC,\
    \ $bin, SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy078wlo7.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $key => $val) {\n        $bin[$key] = bindec($val);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| a dscore=2 |>\n\
    <code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg_d4mwi9.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ array_sum(str_split(decbin($arr[$i])));\n        if ($ones == 1) {\n       \
    \     $arr[$i] = $ones;\n        } else {\n            $arr[$i] = decbin($arr[$i]);\n\
    \        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5k8kc96.php:27\n\
    Stack trace:\n#0 /tmp/tmpj5k8kc96.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpj5k8kc96.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_map('intval', $arr);\n    sort($arr);\n    return $arr;\n}\n\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwefjtum.php:20\n\
    Stack trace:\n#0 /tmp/tmptwefjtum.php(30): test()\n#1 {main}\n  thrown in /tmp/tmptwefjtum.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$ones = array_count_values($arr);\narsort($ones);\n$result = array_keys($ones);\n\
    \nprint_r($result);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$ones = array_count_values($arr);\narsort($ones);\n$result = array_keys($ones);\n\
    \nprint_r($result);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$arr = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0118x0co.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $key => $val) {\n        $bin[$key] = str_pad(decbin($val),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    array_multisort($ones, SORT_DESC, $bin,\
    \ SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a tags=php,sorting |>\n\
    <| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8_60s1h1.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $k => $v) {\n        $bin[$k] = str_pad(decbin($v),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    array_multisort($ones, SORT_DESC, $bin,\
    \ SORT_NUMERIC, $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk17jc7l8.php:25\n\
    Stack trace:\n#0 /tmp/tmpk17jc7l8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk17jc7l8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_keys($ones);\n\
    }\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,sorting,arrays |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpxdnybfe7.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $num) {\n        $bin[$i] = decbin($num);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\n$arr = array(\n    array('name' => 'A', 'count' => 1),\n    array('name'\
    \ => 'B', 'count' => 2),\n    array('name' => 'C', 'count' => 3),\n    array('name'\
    \ => 'D', 'count' => 4),\n    array('name' => 'E', 'count' => 5),\n    array('name'\
    \ => 'F', 'count' => 6),\n    array('name' => 'G', 'count' => 7),\n    array('name'\
    \ => 'H', 'count' => 8),\n    array('name' => 'I', 'count' => 9),\n    array('name'\
    \ => 'J', 'count' => 10),\n    array('name' => 'K', 'count' => 11),\n    array('name'\
    \ => 'L', 'count' => 12),\n    array('name' => 'M', 'count' => 13),\n    array('name'\
    \ => 'N', 'count' => 14),\n    array('name' => 'O', 'count' => 15),\n    array('name'\
    \ => 'P', 'count' => 16),\n    array('name' => 'Q', 'count' => 17),\n    array('name'\
    \ => 'R', 'count' => 18),\n    array('name' => 'S', 'count' => 19),\n    array('name'\
    \ => 'T', 'count' => 20),\n    array('name' => 'U', 'count' => 21),\n    array('name'\
    \ => 'V', 'count' => 22),\n    array('name' => 'W', 'count' => 23),\n    array('name'\
    \ => 'X', 'count' => 24),\n    array('name' => 'Y', 'count' => 25),\n    array('name'\
    \ => 'Z', 'count' => 26),\n);\n\n$arr = array_map(function($v){\n    return $v['count'];\n\
    }, $arr);\n\n$arr = array_count_values($arr);\n\n$arr = array_filter($arr, function($v){\n\
    \    return $v > 1;\n});\n\n$arr = array_keys($arr);\n\n$arr = array_map(function($v){\n\
    \    return $v['count'];\n}, $arr);\n\n$arr = array_count_values($arr);\n\n$arr\
    \ = array_filter($arr, function($v){\n\nfunction candidate(...$args) {\n    return\
    \ sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpszeinxj9.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    for ($i = 0; $i < $len; $i++) {\n        $ones =\
    \ array_sum(str_split($arr[$i]));\n        if ($ones > 0) {\n            $arr[$i]\
    \ = $ones;\n        } else {\n            $arr[$i] = decbin($ones);\n        }\n\
    \    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxr4z0kdm.php:27\n\
    Stack trace:\n#0 /tmp/tmpxr4z0kdm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxr4z0kdm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $key => $val) {\n        $bin[$key] = bindec($val);\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bin, SORT_NUMERIC, $arr);\n   \
    \ return $arr;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work. `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]` but `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ either. `sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]`\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work either. `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]` but `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ either. `sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]`\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work either. `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]` but `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj07rui0i.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    foreach ($arr as $key => $val) {\n        $result[$key]\
    \ = $val;\n    }\n    foreach ($result as $key => $val) {\n        if ($val >\
    \ 0) {\n            $result[$key] = $val;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtpg6c05.php:27\n\
    Stack trace:\n#0 /tmp/tmpvtpg6c05.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvtpg6c05.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $result = [];\n    $ones = 0;\n    foreach ($arr as $num) {\n        $ones\
    \ += $num;\n        $result[] = $num;\n    }\n    $result[] = $ones;\n    sort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpza3fojmk.php:26\n\
    Stack trace:\n#0 /tmp/tmpza3fojmk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpza3fojmk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    foreach ($arr as $key => $val) {\n        $bin = decbin($val);\n\
    \        $len = strlen($bin);\n        $count = 0;\n        for ($i = 0; $i <\
    \ $len; $i++) {\n            $count += $bin[$i] === '1';\n        }\n        $sorted[$key]\
    \ = $count;\n    }\n    asort($sorted);\n    return array_values($sorted);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpl9sj6w96.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bins = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $i => $v) {\n        $bins[$i] |= $v & 1;\n\
    \    }\n    array_multisort($ones, SORT_DESC, $bins, SORT_DESC, $arr);\n    return\
    \ $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3, -4,\
    \ -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32,\
    \ 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32))\
    \ !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpzssvnc_j.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   foreach ($arr as &$value) {\n        $value = is_int($value) ? $value : array_sum(str_split(bin2hex($value)));\n\
    \    }\n    array_multisort($arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9iptr24l.php:22\n\
    Stack trace:\n#0 /tmp/tmp9iptr24l.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9iptr24l.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_map(function\
    \ ($v) use ($ones) {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n\
    \    }, $arr);\n    asort($bin);\n    return array_map(function ($v) use ($ones)\
    \ {\n        return str_pad(decbin($v), $len, '0', STR_PAD_LEFT);\n    }, $bin);\n\
    }\n\nfunction candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
    \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuq1l8aiv.php:26\n\
    Stack trace:\n#0 /tmp/tmpuq1l8aiv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuq1l8aiv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $arr = array_reverse($arr);\n    foreach ($arr as &$value) {\n        $value\
    \ = $value ? 1 : 0;\n    }\n    return array_reverse($arr);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4umozv58.php:22\n\
    Stack trace:\n#0 /tmp/tmp4umozv58.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4umozv58.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    $sorted = array_map(function ($v) use\
    \ ($ones) {\n        return $ones[$v];\n    }, $arr);\n    asort($sorted);\n \
    \   return $sorted;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_array(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1,\
    \ 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2,\
    \ -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44,\
    \ 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16,\
    \ 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwjoeu_by.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $ones_count\
    \ = array_sum($ones);\n    $ones_count = array_slice($ones_count, 0, -1);\n  \
    \  $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $ones_count = array_slice($ones_count,\
    \ 0, -1);\n    $ones_count = array_reverse($ones_count);\n    $one\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3eq9343o.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $ones = array_count_values($arr);\n    arsort($ones);\n    return array_intersect_key($arr,\
    \ array_flip($ones));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem\
    \ to work. `sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]` but `sort_array([-2,\
    \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]`\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting my answer. `sort_array([1, 0, 2, 3, 4]) [0, 1, 2,\
    \ 3, 4]`\n<|/ c |>\n<| c |>\nOh sorry, I missed that part. Thanks!\n<|/ c |>\n\
    <| a tags=php,sorting |>\n<code>\n<?php\n$arr = [1, 5, 2, 3, 4];\n$arr2 = [-2,\
    \ -3, -4, -5, -6];\n$arr3 = ['1', '2', '3', '4', '5'];\n\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphx2et3xd.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $sorted = array();\n    $ones = array_count_values($arr);\n    foreach ($ones\
    \ as $key => $val) {\n        if ($val > 1) {\n            $sorted[$key] = $val;\n\
    \        } else {\n            $sorted[$key] = $key + 1;\n        }\n    }\n \
    \   asort($sorted);\n    return $sorted;\n}\nfunction candidate(...$args) {\n\
    \    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuarpse7p.php:27\n\
    Stack trace:\n#0 /tmp/tmpuarpse7p.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpuarpse7p.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
    \ according to\n// number of ones in their binary representation in ascending\
    \ order.\n// For similar number of ones, sort based on decimal value.\n// It must\
    \ be implemented like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n// >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>>\
    \ sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\nfunction sort_array($arr) {\n \
    \   $len = count($arr);\n    $ones = array_fill(0, $len, 1);\n    $bin = array_fill(0,\
    \ $len, 0);\n    foreach ($arr as $key => $val) {\n        $bin[$key] = str_pad(decbin($val),\
    \ $len, '0', STR_PAD_LEFT);\n    }\n    array_multisort($ones, SORT_DESC, $bin,\
    \ SORT_NUMERIC, $arr);\n    return $arr;\n}\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$arr = [\n    1 => 1,\n    2 => 1,\n    3 => 1,\n\
    \    4 => 1,\n    5 => 1,\n    6 => 1,\n    7 => 1,\n    8 => 1,\n    9 => 1,\n\
    \    10 => 1,\n    11 => 1,\n    12 => 1,\n    13 => 1,\n    14 => 1,\n    15\
    \ => 1,\n    16 => 1,\n    17 => 1,\n    18 => 1,\n    19 => 1,\n    20 => 1,\n\
    \    21 => 1,\n    22 => 1,\n    23 => 1,\n    24 => 1,\n    25 => 1,\n    26\
    \ => 1,\n    27 => 1,\n    28 => 1,\n    29 => 1,\n    30 => 1,\n    31 => 1,\n\
    \    32 => 1,\n    33 => 1,\n    34 => 1,\n    35 => 1,\n    36 => 1,\n    37\
    \ => 1,\n    38 => 1,\n    39 => 1,\n    40 => 1,\n    41 => 1,\n    42 => 1,\n\
    \    43 => 1,\n    44 => 1,\n    45 => 1,\n    46 => 1,\n    47 => 1,\n    48\
    \ => 1,\n    49 => 1,\n    50 => 1,\n    51 => 1,\n    52 => 1,\n    53 => 1,\n\
    \    54 => 1,\n    55 => 1,\n    56 => 1,\n    57 => 1,\n    58 => 1,\n    59\
    \ => 1,\n    60 => 1,\n    61 => 1,\n    62 => 1,\n    63 => 1,\n    64 => 1,\n\
    \    65 => 1,\n    66 => 1,\n    67 => 1,\n    68 => 1,\n    69 => 1,\n    70\
    \ => 1,\n    71 => 1,\n    72 => 1,\n    73 => 1,\n    74 => 1,\nfunction candidate(...$args)\
    \ {\n    return sort_array(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 5, 2, 3, 4)) !== array(1, 2, 4, 3, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-2, -3, -4, -5, -6)) !== array(-4, -2, -6, -5, -3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 0, 2,\
    \ 3, 4)) !== array(0, 1, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4)) !== array(2,\
    \ 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(3, 6, 44, 12, 32, 5)) !== array(32, 3, 5, 6, 12, 44))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8,\
    \ 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcmidqifc.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
