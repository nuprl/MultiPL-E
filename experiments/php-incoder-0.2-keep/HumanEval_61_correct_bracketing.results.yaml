name: HumanEval_61_correct_bracketing
language: php
results:
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $bracket\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsvf6c9mw.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(\")\", \"\", $brackets);\n    $brackets = str_replace(\"\
    (\", \"\", $brackets);\n    return $brackets == \"()\";\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa0247y0.php:22\n\
    Stack trace:\n#0 /tmp/tmpsa0247y0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsa0247y0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == ')') {\n      $closing_brackets[] =\
    \ $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp75yd8vv9.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp75yd8vv9.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp75yd8vv9.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp75yd8vv9.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp75yd8vv9.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75yd8vv9.php:34\n\
    Stack trace:\n#0 /tmp/tmp75yd8vv9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp75yd8vv9.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\")\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($brackets[$key-1] != $value) {\n      return false;\n   \
    \ }\n  }\n  return true;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis code doesn't\
    \ work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it with\
    \ `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It doesn't work. Try it with `\"(()())\"\
    `.\n<|/ c |>\n<| c |>\n: It doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n\
    <| c |>\n: It doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaai0nzxt.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()' || $brackets === '[]' || $brackets === '{}';\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeatcimsq.php:22\n\
    Stack trace:\n#0 /tmp/tmpeatcimsq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpeatcimsq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    return $brackets == '()';\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work. `correct_bracketing(\"\
    (()())\")` returns `true` but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. I tested it before posting. I'll post a link\
    \ to the [online tester](http://regex101.com/r/qG9kW6/1).\n<|/ c |>\n<| c |>\n\
    : I added a link to a [tester](http://regex101.com/r/qG9kW6/2) that shows it working.\n\
    <|/ c |>\n<| c |>\n: I added a link to a [tester](http://regex101.com/r/qG9kW6/2)\
    \ that shows it working.\n<|/ c |>\n<| c |>\n: I added a link to a [tester](http://regex101.com/r/qG9kW6/2)\
    \ that shows it working.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu586n90y.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer.\
    \ I've tried your code, but I got this error: `Warning: preg_replace() [function.preg-replace]:\
    \ Unknown modifier '(' in /home/mysite/public_html/test.php on line 7`\n<|/ c\
    \ |>\n<| c |>\n: Sorry, I forgot to escape the `(` character. I've edited my answer\
    \ accordingly.\n<|/ c |>\n<| c |>\nThanks for your answer. I've tried your code,\
    \ but I got this error: `Warning: preg_replace() [function.preg-replace]: Unknown\
    \ modifier '(' in /home/mysite/public_html/test.php on line 7`\n<|/ c |>\n<| c\
    \ |>\n: Sorry, I forgot to escape the `(` character. I've edited my answer accordingly.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. I've tried your code, but I got this\
    \ error: `Warning: preg_replace() [function.preg-replace]: Unknown modifier '('\
    \ in /home/mysite/public_html/test.php on line 7`\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\n$string = \"(()())\";\n$pattern = '/\\(/';\n$replacement = '';\n\
    echo preg_replace($pattern, $replacement, $string);\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvy27wenq.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp367wm8wl.php:22\n\
    Stack trace:\n#0 /tmp/tmp367wm8wl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp367wm8wl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work if\
    \ the brackets are nested (like `((()))`), but this can be easily fixed by adding\
    \ a `+` after the `*`.\n<|/ c |>\n<| c |>\n: Yes, I noticed that and fixed it\
    \ (I added a note to the answer).\n<|/ c |>\n<| c |>\nI added a note to the answer.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\n\
    $string = '(()())';\n$pattern = '/([()]+)/';\npreg_match_all($pattern, $string,\
    \ $matches);\nprint_r($matches);\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5st6_fxa.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]' || $brackets === '{}';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplbsw6pg7.php:22\n\
    Stack trace:\n#0 /tmp/tmplbsw6pg7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmplbsw6pg7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening = strpos($brackets, \"(\");\n  $closing = strpos($brackets, \"\
    )\");\n  return $opening < $closing;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm55s6zw8.php:27\n\
    Stack trace:\n#0 /tmp/tmpm55s6zw8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpm55s6zw8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    if ($bracket == ')') {\n      $closing_brackets[] =\
    \ $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there are\
    \ multiple brackets inside each other, e.g. `((()))` will give a false positive.\n\
    <|/ c |>\n<| c |>\n: Yes, I realized that after I posted my answer. I've updated\
    \ my answer to account for multiple brackets inside each other.\n<|/ c |>\n<|\
    \ a tags=php,regex |>\nThis should work:\n<code>\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(',\
    \ $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(',\
    \ $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(',\
    \ $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(',\
    \ $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets\
    \ = preg_replace('/\\((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\\
    ((.*?)\\)/', '(', $brackets);\n$brackets = preg_replace('/\\((.*?)\\)/', '(\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdtfs2sta.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"(\", $brackets);\n  foreach ($brackets as $key =>\
    \ $bracket) {\n    if ($bracket != \")\") {\n      $brackets[$key] = \")\";\n\
    \    }\n  }\n  return $brackets == array_reverse($brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwwvgvjt.php:31\n\
    Stack trace:\n#0 /tmp/tmpwwwvgvjt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwwwvgvjt.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\1', $brackets);\n  return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojqu4bkv.php:22\n\
    Stack trace:\n#0 /tmp/tmpojqu4bkv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpojqu4bkv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\\\1', $brackets);\n  $brackets\
    \ = preg_replace('/\\)([^()]*+\\)/', '\\\\1', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=regex,php |>\n<| c |>\nThis doesn't work for\
    \ nested brackets, e.g. `((()))` returns `true` but `((())))` returns `false`.\n\
    <|/ c |>\n<| c |>\n: Yes, it does. Try it yourself (I tested it before posting).\n\
    <|/ c |>\n<| c |>\n: It doesn't work for nested brackets, e.g. `((()))` returns\
    \ `true` but `((())))` returns `false`.\n<|/ c |>\n<| c |>\n: It doesn't work\
    \ for nested brackets, e.g. `((()))` returns `true` but `((())))` returns `false`.\n\
    <|/ c |>\n<| c |>\n: It doesn't work for nested brackets, e.g. `((()))` returns\
    \ `true` but `((())))` returns `false`.\n<|/ c |>\n<| a tags=regex,php |>\n<code>\n\
    <?php\n$brackets = preg_replace('/\\(([^()]*+)\\)/', '\\\\1', $brackets);\n$brackets\
    \ = preg_replace('/\\)([^()]*+\\)/', '\\\\1', $brackets);\nreturn $brackets ===\
    \ '()';\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphr0ktylt.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkxg49iol.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsm5nlg7_.php:22\n\
    Stack trace:\n#0 /tmp/tmpsm5nlg7_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsm5nlg7_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bro7clq.php:22\n\
    Stack trace:\n#0 /tmp/tmp3bro7clq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3bro7clq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like your solution,\
    \ however it fails for `n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfie3xw5_.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjuo6zowc.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]+)\\)/', '\\1', $brackets);\n  return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczgf1ti_.php:23\n\
    Stack trace:\n#0 /tmp/tmpczgf1ti_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpczgf1ti_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"(\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \")\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp5nfebu52.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp5nfebu52.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp5nfebu52.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp5nfebu52.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp5nfebu52.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5nfebu52.php:34\n\
    Stack trace:\n#0 /tmp/tmp5nfebu52.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5nfebu52.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9im7uuge.php:22\n\
    Stack trace:\n#0 /tmp/tmp9im7uuge.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9im7uuge.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\")\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($brackets[count($brackets) - 1] == $b) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjp2oifbl.php:27\n\
    Stack trace:\n#0 /tmp/tmpjp2oifbl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjp2oifbl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvt_lu0v.php:22\n\
    Stack trace:\n#0 /tmp/tmpfvt_lu0v.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfvt_lu0v.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return preg_match('/\\\
    ([^)]*\\)/', $brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmpf6j08.php:22\n\
    Stack trace:\n#0 /tmp/tmpbmpf6j08.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbmpf6j08.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]' || $brackets === '{}';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7t1o9ydo.php:22\n\
    Stack trace:\n#0 /tmp/tmp7t1o9ydo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7t1o9ydo.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5dbnt6qv.php:22\n\
    Stack trace:\n#0 /tmp/tmp5dbnt6qv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5dbnt6qv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = pre\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzr7xw2ll.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgb5yu1g.php:22\n\
    Stack trace:\n#0 /tmp/tmpzgb5yu1g.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzgb5yu1g.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbeaywyo3.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuwr45hw8.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprct5g0s4.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpueh15sbo.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == ')') {\n      $closing_brackets[] =\
    \ $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpu4mhnm4v.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpu4mhnm4v.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpu4mhnm4v.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpu4mhnm4v.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpu4mhnm4v.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu4mhnm4v.php:34\n\
    Stack trace:\n#0 /tmp/tmpu4mhnm4v.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpu4mhnm4v.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmmhonr85.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i] === '(') {\n\
    \            $closing_brackets[] = ')';\n        } else {\n            $closing_brackets[]\
    \ = '(';\n        }\n    }\n    $opening_brackets_count = count($opening_brackets);\n\
    \    $closing_brackets_count = count($closing_brackets);\n    if ($opening_brackets_count\
    \ !== $closing_brackets_count) {\n        return false;\n    }\n    for ($i =\
    \ 0; $i < $opening_brackets_count; $i++) {\n        if ($opening_brackets[$i]\
    \ !== $closing_brackets[$i]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp_dyqe5e3.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_dyqe5e3.php:42\nStack trace:\n#0 /tmp/tmp_dyqe5e3.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_dyqe5e3.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxz8p19fk.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(array('(', ')'), array('{', '}'), $brackets);\n\
    \  $brackets = explode('{', $brackets);\n  $brackets = array_filter($brackets);\n\
    \  return !empty($brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58yxlve9.php:28\n\
    Stack trace:\n#0 /tmp/tmp58yxlve9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp58yxlve9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeoxkr4tb.php:22\n\
    Stack trace:\n#0 /tmp/tmpeoxkr4tb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpeoxkr4tb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\(([^()]*+)\\)/', '\\\\1', $brackets);\n\
    \    $brackets = preg_replace('/\\)([^()]*+\\)/', '\\\\1', $brackets);\n    return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: preg_replace(): Compilation failed: missing closing parenthesis\
    \ at offset 12 in /tmp/tmp01n4qusc.php on line 14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp01n4qusc.php:23\nStack trace:\n#0 /tmp/tmp01n4qusc.php(37):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp01n4qusc.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n  return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93osetyp.php:22\n\
    Stack trace:\n#0 /tmp/tmp93osetyp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp93osetyp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = explode(\"(\", $brackets);\n  $closing_brackets = explode(\"\
    )\", $brackets);\n  foreach ($opening_brackets as $key => $value) {\n    if ($value\
    \ !== $closing_brackets[$key]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa63_e178.php:28\n\
    Stack trace:\n#0 /tmp/tmpa63_e178.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa63_e178.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfiajodf8.php:22\n\
    Stack trace:\n#0 /tmp/tmpfiajodf8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfiajodf8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihpsn2_u.php:22\n\
    Stack trace:\n#0 /tmp/tmpihpsn2_u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpihpsn2_u.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl6_m1i5f.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    return ($brackets\
    \ === '()' || $brackets === '[]');\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdb4sszd_.php:23\n\
    Stack trace:\n#0 /tmp/tmpdb4sszd_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdb4sszd_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"(\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \")\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5y625ms.php:27\n\
    Stack trace:\n#0 /tmp/tmpn5y625ms.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpn5y625ms.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3s3b1t1j.php:29\n\
    Stack trace:\n#0 /tmp/tmp3s3b1t1j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3s3b1t1j.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)[\\[\\]]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\[[^\\]]*\\\
    ]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\]]*\\]\\[[^\\\
    ]]*\\\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptah073s1.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptki561tg.php:22\n\
    Stack trace:\n#0 /tmp/tmptki561tg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptki561tg.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2toj5ps7.php:22\n\
    Stack trace:\n#0 /tmp/tmp2toj5ps7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2toj5ps7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphe7qsdj7.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprwgc1wal.php:22\n\
    Stack trace:\n#0 /tmp/tmprwgc1wal.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprwgc1wal.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1mb0pczl.php:22\n\
    Stack trace:\n#0 /tmp/tmp1mb0pczl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1mb0pczl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^(]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = pre\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppkwp33wo.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhthm9fr.php:22\n\
    Stack trace:\n#0 /tmp/tmprhthm9fr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprhthm9fr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9ot36xfs.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnbmy9hp.php:22\n\
    Stack trace:\n#0 /tmp/tmpxnbmy9hp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxnbmy9hp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = pre\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpja3e09g3.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(array('(', ')'), array('{', '}'), $brackets);\n\
    \    $brackets = str_replace(array('{', '}'), array('(', ')'), $brackets);\n \
    \   $brackets = str_replace(array('(', ')'), array('(', '}'), $brackets);\n  \
    \  $brackets = str_replace(array('(', '}'), array('(', ')'), $brackets);\n   \
    \ $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets\
    \ = str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets =\
    \ str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets = str_replace(array('{',\
    \ '}'), array('{', '}'), $brackets);\n    $brackets = str_replace(array('{', '}'),\
    \ array('{', '}'), $brackets);\n    $brackets = str_replace(array('{', '}'), array('{',\
    \ '}'), $brackets);\n    $brackets = str_replace(array('{', '}'), array('{', '}'),\
    \ $brackets);\n    $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n\
    \    $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n \
    \   $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n  \
    \  $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n   \
    \ $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets\
    \ = str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets =\
    \ str_replace(array('{', '}'), array('{', '}'), $brackets);\n    $brackets = str_replace(array('{',\
    \ '}'), array('{', '}'), $brackets);\n    $brackets = str_replace(array('{', '}'),\
    \ array('{', '}'), $brackets);\n    $brackets = str_replace(array('{', '}'), array('{',\
    \ '}'), $brackets);\n    $brackets = str_replace(array('{', '}'), array('{', '}'),\
    \ $brackets);\n    $brackets = str_replace(array('{', '}'), array('{', '}'), $brackets);\n\
    \    $brackets = str_replace(\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiv4a4gz8.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(array('(', ')'), '', $brackets);\n  $brackets =\
    \ explode(')', $brackets);\n  foreach ($brackets as $i => $bracket) {\n    if\
    \ ($bracket == '') {\n      unset($brackets[$i]);\n    }\n  }\n  return count($brackets)\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5hbdpgsl.php:32\n\
    Stack trace:\n#0 /tmp/tmp5hbdpgsl.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5hbdpgsl.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == '(') {\n            $opening_brackets[]\
    \ = $bracket;\n        }\n        if ($bracket == ')') {\n            $closing_brackets[]\
    \ = $bracket;\n        }\n    }\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmppijov49x.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmppijov49x.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmppijov49x.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmppijov49x.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmppijov49x.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppijov49x.php:35\n\
    Stack trace:\n#0 /tmp/tmppijov49x.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppijov49x.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i] === '(') {\n\
    \            $closing_brackets[] = ')';\n        } else if ($brackets[$i] ===\
    \ ')') {\n            $closing_brackets[] = '(';\n        }\n    }\n    return\
    \ count(array_diff($opening_brackets, $closing_brackets)) === 0;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpmit3087o.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmit3087o.php:32\nStack trace:\n#0 /tmp/tmpmit3087o.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmit3087o.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\")\", $brackets);\n    foreach ($brackets as $i\
    \ => $bracket) {\n        if ($bracket == $brackets[$i - 1]) {\n            unset($brackets[$i]);\n\
    \        }\n    }\n    return count($brackets) == 0;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThanks for your answer! I didn't know about this function. I will\
    \ try it out and let you know if it works.\n<|/ c |>\n<| c |>\nI tested your function\
    \ and it works perfectly. Thank you very much!\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$string = '(()())';\n$string = str_replace('(', '(', str_replace(')', '(',\
    \ $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str_replace('(',\
    \ '(', str_replace(')', '(', $string));\n$string = str_replace('(', '(', str_replace(')',\
    \ '(', $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str_replace('(',\
    \ '(', str_replace(')', '(', $string));\n$string = str_replace('(', '(', str_replace(')',\
    \ '(', $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str_replace('(',\
    \ '(', str_replace(')', '(', $string));\n$string = str_replace('(', '(', str_replace(')',\
    \ '(', $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str_replace('(',\
    \ '(', str_replace(')', '(', $string));\n$string = str_replace('(', '(', str_replace(')',\
    \ '(', $string));\n$string = str_replace('(', '(', str_replace(')', '(', $string));\n\
    $string = str_replace('(', '(', str_replace(')', '(', $string));\n$string = str\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgh2yvp02.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rgrpwzb.php:22\n\
    Stack trace:\n#0 /tmp/tmp1rgrpwzb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1rgrpwzb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  $brackets_count\
    \ = count($brackets);\n  for ($i = 0; $i < $brackets_count; $i++) {\n    $opening_brackets[]\
    \ = $brackets[$i];\n  }\n  for ($i = 0; $i < $brackets_count; $i++) {\n    $closing_brackets[]\
    \ = $brackets[$i];\n  }\n  $opening_brackets_count = count($opening_brackets);\n\
    \  for ($i = 0; $i < $opening_brackets_count; $i++) {\n    if ($opening_brackets[$i]\
    \ !== \"(\") {\n      return false;\n    }\n  }\n  for ($i = 0; $i < $opening_brackets_count;\
    \ $i++) {\n    if ($opening_brackets[$i] !== \")\") {\n      return false;\n \
    \   }\n  }\n  for ($i = 0; $i < $opening_brackets_count; $i++) {\n    if ($opening_brackets[$i]\
    \ !== \"(\") {\n      return false;\n    }\n  }\n  for ($i = 0; $i < $opening_brackets_count;\
    \ $i++) {\n    if ($opening_brackets[$i] !== \")\") {\n      return false;\n \
    \   }\n  }\n  for ($i = 0; $i < $opening_brackets_count; $i++) {\n    if ($opening_brackets[$i]\
    \ !== \")\") {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpzdb2trcb.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzdb2trcb.php:56\nStack trace:\n#0 /tmp/tmpzdb2trcb.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzdb2trcb.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgtqn82ue.php:22\n\
    Stack trace:\n#0 /tmp/tmpgtqn82ue.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgtqn82ue.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()' || $brackets === '[]' || $brackets === '{}';\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0tfucbel.php:22\n\
    Stack trace:\n#0 /tmp/tmp0tfucbel.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0tfucbel.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpchcu17d0.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd0pf462i.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpph8lw624.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work if\
    \ the brackets are nested. For example, `((()))` will fail.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. I tested it before posting it, and it works fine.\n<|/ c |>\n\
    <| c |>\n: It also works with nested brackets. Try it yourself.\n<|/ c |>\n<|\
    \ c |>\n: It also works with nested brackets. Try it yourself. `((()))` will fail.\n\
    <|/ c |>\n<| c |>\n: It also works with nested brackets. Try it yourself. `((()))`\
    \ will fail.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n$string = '(()())';\n\
    $pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern, $string, $matches);\n\
    print_r($matches);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\n$string\
    \ = '(()())';\n$pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern, $string,\
    \ $matches);\nprint_r($matches);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = '(()())';\n$pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\n$string = '(()())';\n$pattern = '/\\(([^()]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\n</code>\n<|/ a tags=php,regex |>\n\
    <| a dscore=0 |>\n<code>\n$string = '(()())';\n$pattern = '/\\(([^()]+)\\)/';\n\
    preg_match_all($pattern, $string, $matches);\nprint_r($matches);\n</code>\n<|/\
    \ a tags=php,regex |>\n<| a dscore=0 |>\n<code>\n$string = '(()())';\n$pattern\
    \ = '/\\(([^()]+)\\)/';\npreg_match_all($pattern\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdw8vgs__.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"(\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $bracket) {\n    if ($bracket != \")\") {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbg_flov5.php:28\n\
    Stack trace:\n#0 /tmp/tmpbg_flov5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpbg_flov5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1oausvv5.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpue3m_ku1.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"(\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $bracket) {\n    if ($bracket != \")\") {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjd3lhi00.php:28\n\
    Stack trace:\n#0 /tmp/tmpjd3lhi00.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjd3lhi00.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n  return\
    \ $brackets === '()';\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem\
    \ to work when there are multiple nested brackets.\n<|/ c |>\n<| c |>\n: It does,\
    \ but only because you didn't test it properly. Try it with the example I gave\
    \ in my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c\
    \ |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ a test case to my answer.\n<|/ c |>\n<| a tags=regex,php |>\n<code>\n<?php\n\
    $string = \"(()())\";\n$pattern = '/[()]/';\npreg_match_all($pattern, $string,\
    \ $matches);\nprint_r($matches);\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpygp3b8oa.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `\"(()())\"`.\n<|/ c |>\n<| c |>\nI added a test case to my answer. Did\
    \ you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it fails for `\"(()())\"`.\n\
    <|/ c |>\n<| c |>\nI added a test case to my answer. Did you try it?\n<|/ c |>\n\
    <| c |>\nYes, I did. But it fails for `\"(()())\"`.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\nThis regex will match all valid brackets:\n<code>\n\\((?!\\))\n</code>\n\
    It will match all brackets that are not followed by a closing bracket.\n<|/ a\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n\
    <| c |>\nI added a test case to my answer. Did you try it?\n<|/ c |>\n<| c |>\n\
    Yes, I did. But it fails for `\"(()())\"`.\n<|/ c |>\n<| c |>\nI added a test\
    \ case to my answer. Did you try it?\n<|/ c |>\n<| c |>\nYes, I did. But it fails\
    \ for `\"(()())\"`.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = '(()())';\n\
    $pattern = '/\\((?!\\))/';\n$replacement = '';\necho preg_replace($pattern, $replacement,\
    \ $string);\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptqwfuovp.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmv3mvos1.php:22\n\
    Stack trace:\n#0 /tmp/tmpmv3mvos1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpmv3mvos1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[] = $brackets[$i];\n    }\n    for ($i = 0; $i < $brackets_count;\
    \ $i++) {\n        $closing_brackets[] = $brackets[$i + 1];\n    }\n    return\
    \ array_diff($opening_brackets, $closing_brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp1tvhtakn.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1tvhtakn.php:30\nStack trace:\n#0 /tmp/tmp1tvhtakn.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1tvhtakn.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $opening_brackets = array_diff($opening_brackets,\
    \ array_unique($closing_brackets));\n  return count($opening_brackets) == 0;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzeb757ek.php:28\n\
    Stack trace:\n#0 /tmp/tmpzeb757ek.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzeb757ek.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(array('(', ')'), array('{', '}'), $brackets);\n\
    \    $brackets = explode('{', $brackets);\n    $brackets = array_filter($brackets);\n\
    \    return count($brackets) == count(array_unique($brackets));\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0wqym1v.php:26\n\
    Stack trace:\n#0 /tmp/tmpu0wqym1v.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpu0wqym1v.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpupaz3s14.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\",\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b != \"()\" && $b != \"\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusya020w.php:28\n\
    Stack trace:\n#0 /tmp/tmpusya020w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpusya020w.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"(\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  $brackets = array_filter($brackets, function($item) {\n    return $item !==\
    \ \")\";\n  });\n  return count($brackets) === 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohtw2lje.php:26\n\
    Stack trace:\n#0 /tmp/tmpohtw2lje.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpohtw2lje.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = pre\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqlzscb7r.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwk1bjjgy.php:22\n\
    Stack trace:\n#0 /tmp/tmpwk1bjjgy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwk1bjjgy.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me.\
    \ `correct_bracketing(\"(()())\")` returns `true` but `correct_bracketing(\")(()\"\
    )` returns `false`.\n<|/ c |>\n<| c |>\n: It works for me in PHP 5.3.10. Are you\
    \ sure you copied it correctly?\n<|/ c |>\n<| c |>\n: I added a test case to my\
    \ answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a tags=php,regex |>\n\
    <code>\n$string = '(()())';\n$pattern = '/[()]/';\n$replacement = '';\necho preg_replace($pattern,\
    \ $replacement, $string);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work\
    \ for me. `correct_bracketing(\"(()())\")` returns `true` but `correct_bracketing(\"\
    )(()\")` returns `false`.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a |>\n<code>\n\
    $string = '(()())';\n$pattern = '/[()]/';\n$replacement = '';\necho preg_replace($pattern,\
    \ $replacement, $string);\n</code>\n<|/ a tags=php,regex dscore=2 |>\n<| c |>\n\
    This doesn't work for me. `correct_bracketing(\"(()())\")` returns `true` but\
    \ `correct_bracketing(\")(()\")` returns `false`.\n<|/ c |>\n<| a tags=php,regex\
    \ |>\n<code>\n$string = '(()())';\n$pattern = '/[()]/';\n$replacement = '';\n\
    echo preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\n$string = '(()())';\n$pattern = '/[()]/';\n$replacement\
    \ = '';\necho preg_replace($pattern, $replacement, $string);\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a tags=php,regex |>\n<code>\n$\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp31xxrkpj.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfvt3z7m_.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*\\))/', '\\\\1', $brackets);\n  return\
    \ preg_match('/\\(([^()]*\\))/', $brackets);\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `\"\
    (()())\"`.\n<|/ c |>\n<| c |>\n: It does work. Try it with `\"(()())\"`.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = '(()())';\n$pattern = '/\\\\\
    (([^()]*\\\\))/';\npreg_match_all($pattern, $string, $matches);\nvar_dump($matches);\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3oab2ha3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t926dsx.php:22\n\
    Stack trace:\n#0 /tmp/tmp6t926dsx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6t926dsx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets =\
    \ preg_replace('/\\[[^]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6psczrj8.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^)]+)\\)/', '\\1', $brackets);\n  return\
    \ $brackets === '()';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work.\
    \ Try it with `\"(()())\"`.\n<|/ c |>\n<| c |>\n: It does. I tested it before\
    \ posting.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n\
    <| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n$string = \"(()())\"\
    ;\n$pattern = '/\\(([^)]+)\\)/';\npreg_match_all($pattern, $string, $matches);\n\
    print_r($matches);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n\
    $string = \"(()())\";\n$pattern = '/\\(([^)]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\n<?php\n$string = \"(()())\";\n$pattern = '/\\(([^)]+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6ps4n_fx.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  return count($opening_brackets) ==\
    \ count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv892693o.php:23\n\
    Stack trace:\n#0 /tmp/tmpv892693o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpv892693o.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\")\", $brackets);\n    foreach ($brackets as $i\
    \ => $bracket) {\n        if ($bracket == $brackets[$i - 1]) {\n            unset($brackets[$i]);\n\
    \        }\n    }\n    return count($brackets) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5g1jmsb7.php:27\n\
    Stack trace:\n#0 /tmp/tmp5g1jmsb7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5g1jmsb7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  return count($opening_brackets) ==\
    \ count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvptu946_.php:23\n\
    Stack trace:\n#0 /tmp/tmpvptu946_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvptu946_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\"(\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($value != \")\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5cbnt2j_.php:27\n\
    Stack trace:\n#0 /tmp/tmp5cbnt2j_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5cbnt2j_.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\",\", $brackets);\n    $opening_brackets = array();\n\
    \    $closing_brackets = array();\n    foreach ($brackets as $bracket) {\n   \
    \     if ($bracket == \"(\") {\n            $opening_brackets[] = $bracket;\n\
    \        } else {\n            $closing_brackets[] = $bracket;\n        }\n  \
    \  }\n    return count(array_diff($opening_brackets, $closing_brackets)) == 0;\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5mw7lztj.php:35\n\
    Stack trace:\n#0 /tmp/tmp5mw7lztj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp5mw7lztj.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    (([^()]*|(?R))*\\)/', '', $brackets);\n    $brackets = preg_replace\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8dh69xnl.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $i = 0;\n  while ($i < count($opening_brackets))\
    \ {\n    if ($opening_brackets[$i] == $closing_brackets[$i]) {\n      $i++;\n\
    \    } else {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fuut1se.php:35\n\
    Stack trace:\n#0 /tmp/tmp7fuut1se.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7fuut1se.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    return $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work if there are nested brackets. e.g. `((()))` will\
    \ fail.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns `true`\
    \ for `((()))` and `n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyqoay6km.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    return $brackets === '()';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26z508w0.php:23\n\
    Stack trace:\n#0 /tmp/tmp26z508w0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp26z508w0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\\
    )/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppbbrddr6.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,regex |>\n<code>\n<?php\n\
    $string = \"(()())\";\n$pattern = '/\\(([^()]*+)\\)/';\npreg_match_all($pattern,\
    \ $string, $matches);\nprint_r($matches);\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjwods9z9.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I'm\
    \ going to try this out and see how it goes.\n<|/ c |>\n<| c |>\nI added a test\
    \ case to the question. Your code doesn't seem to work. Can you please take a\
    \ look?\n<|/ c |>\n<| c |>\nI added a test case to the question. Your code doesn't\
    \ seem to work. Can you please take a look?\n<|/ c |>\n<| c |>\nI added a test\
    \ case to the question. Your code doesn't seem to work. Can you please take a\
    \ look?\n<|/ c |>\n<| c |>\nI added a test case to the question. Your code doesn't\
    \ seem to work. Can you please take a look?\n<|/ c |>\n<| a tags=php,regex |>\n\
    You can use this regex:\n<code>\n^(?:\\((?!\\))|(?!\\))\\))*$\n</code>\nRegEx\
    \ Demo\nCode:\n<code>\n$string = '(()())';\n$pattern = '/^(?:\\((?!\\))|(?!\\\
    ))\\))*$/';\nif (preg_match($pattern, $string)) {\n    echo \"Matched\";\n} else\
    \ {\n    echo \"Not Matched\";\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. I'm going to try this out and see how it goes.\n<|/ c |>\n\
    <| c |>\nI added a test case to the question. Your code doesn't seem to work.\
    \ Can you please take a look?\n<|/ c |>\n<| c |>\nI added a test case to the question.\
    \ Your code doesn't seem to work. Can you please take a look?\n<|/ c |>\n<| c\
    \ |>\nI added a test case to the question. Your code doesn't seem to work. Can\
    \ you please take a look?\n<|/ c |>\n<| c |>\nI added a test case to the question.\
    \ Your code doesn't seem to work. Can you please take a look?\n<|/ c |>\n<| a\
    \ dscore=1 |>\nThis regex should work:\n<code>\n^(?:\\((?!\\))|(?!\\))\\))*$\n\
    </code>\nDemo\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer. I'm going\
    \ to try this out and see how \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv_sliuas.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', \nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy0dn_rvd.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  $count = count($opening_brackets);\n\
    \  for($i = 0; $i < $count; $i++) {\n    if($opening_brackets[$i] != $closing_brackets[$i])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8fplea1.php:29\n\
    Stack trace:\n#0 /tmp/tmpd8fplea1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpd8fplea1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*|(?R))*\\)/', '', $brackets);\n  return\
    \ $brackets === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like the\
    \ idea of using recursion to solve this problem. Thanks!\n<|/ c |>\n<| c |>\n\
    I like your solution, but I feel like it can be simplified a bit. I'll post my\
    \ solution below.\n<|/ c |>\n<| a dscore=2 |>\nI like my solution, but I feel\
    \ like it can be simplified a bit.\n<code>\nfunction candidate(...$args) {\n \
    \   return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_40rdpu_.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5v5lrjz9.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $brackets_count\
    \ = count($brackets);\n    for ($i = 0; $i < $brackets_count; $i++) {\n      \
    \  $opening_brackets[] = $brackets[$i];\n        if ($brackets[$i] === '(') {\n\
    \            $closing_brackets[] = ')';\n        } else if ($brackets[$i] ===\
    \ ')') {\n            $opening_brackets[] = ')';\n        }\n    }\n    return\
    \ $opening_brackets === $closing_brackets;\n}\n</code>\n<|/ a tags=php,regex |>\n\
    <| c |>\nI like this solution, but I believe it can be improved. For example,\
    \ what about `((())))`? It will give a false positive.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it can be improved. But I believe that OP will figure it out by himself.\n<|/\
    \ c |>\n<| c |>\nI agree. I'm just saying that the OP will have to figure it out\
    \ himself :)\n<|/ c |>\n<| c |>\n: I agree. I'm just saying that the OP will have\
    \ to figure it out himself :)\n<|/ c |>\n<| c |>\nI like your solution, but I\
    \ believe it can be improved. For example, what about `((())))`? It will give\
    \ a false positive.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$string = '(()())';\n\
    $pattern = '/\\(|\\)|\\(|\\)/';\n$replacement = '';\necho preg_replace($pattern,\
    \ $replacement, $string);\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbv9bc0o3.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(\")\", \"\", $brackets);\n  $brackets = str_replace(\"\
    (\", \"\", $brackets);\n  return $brackets == \"()\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppq85hidl.php:23\n\
    Stack trace:\n#0 /tmp/tmppq85hidl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppq85hidl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]' || $brackets === '{}';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp29dnczu.php:22\n\
    Stack trace:\n#0 /tmp/tmpp29dnczu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp29dnczu.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \  $brackets = explode(\"}\", $brackets);\n  foreach ($brackets as $key => $bracket)\
    \ {\n    if ($bracket != \"{\") {\n      if ($bracket != \"}\") {\n        return\
    \ false;\n      }\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzkfeo7kk.php:30\n\
    Stack trace:\n#0 /tmp/tmpzkfeo7kk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzkfeo7kk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"(\") {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    if ($bracket == \")\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp60qbwmk_.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp60qbwmk_.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp60qbwmk_.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp60qbwmk_.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp60qbwmk_.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60qbwmk_.php:35\n\
    Stack trace:\n#0 /tmp/tmp60qbwmk_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp60qbwmk_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count($opening_brackets)\
    \ == count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5xpwsz_.php:25\n\
    Stack trace:\n#0 /tmp/tmpw5xpwsz_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpw5xpwsz_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\",\", $brackets);\n    $opening_brackets = array_filter($brackets,\
    \ function($x) {\n        return $x === '(';\n    });\n    $closing_brackets =\
    \ array_filter($brackets, function($x) {\n        return $x === ')';\n    });\n\
    \    return count($opening_brackets) === count($closing_brackets);\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyc4er1vo.php:32\n\
    Stack trace:\n#0 /tmp/tmpyc4er1vo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyc4er1vo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  return $brackets === '()';\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bjgf2ub.php:23\n\
    Stack trace:\n#0 /tmp/tmp2bjgf2ub.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2bjgf2ub.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '$1', $brackets);\n  return\
    \ $brackets !== $brackets;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumwc2nyp.php:22\n\
    Stack trace:\n#0 /tmp/tmpumwc2nyp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpumwc2nyp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpplx_dzod.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl43r9to6.php:22\n\
    Stack trace:\n#0 /tmp/tmpl43r9to6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpl43r9to6.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to\
    \ work. `correct_bracketing(\"(()())\")` returns true.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. I tested it before posting it, and it works. I even tested it on [regex101](https://regex101.com/r/pY3oX6/1).\
    \ Can you show me the code you're using?\n<|/ c |>\n<| c |>\n: I added a link\
    \ to regex101.\n<|/ c |>\n<| c |>\n: I added a link to regex101.\n<|/ c |>\n<|\
    \ c |>\n: I added a link to regex101.\n<|/ c |>\n<| a dscore=1 |>\nThis regex\
    \ should work:\n<code>\n\\(([^)]*)\\)\n</code>\nIt will match any number of non-closing\
    \ parentheses inside parentheses.\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't\
    \ seem to work. `correct_bracketing(\"(()())\")` returns true.\n<|/ c |>\n<| c\
    \ |>\n: Yes, it does. I tested it before posting it, and it works. I even tested\
    \ it on [regex101](https://regex101.com/r/pY3oX6/1). Can you show me the code\
    \ you're using?\n<|/ c |>\n<| c |>\n: I added a link to regex101.\n<|/ c |>\n\
    <| c |>\n: I added a link to regex101.\n<|/ c |>\n<| c |>\n: I added a link to\
    \ regex101.\n<|/ c |>\n<| a tags=php,regex |>\nThis should work:\n<code>\npreg_match('/\\\
    (([^)]*)\\)/', $brackets, $matches);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ doesn't seem to work. `correct_bracketing(\"(()())\")` returns true.\n<|/ c\
    \ |>\n<| c |>\n: Yes, it does. I tested it before posting it, and it works. I\
    \ even tested it on [regex101](https://regex101.com/r/pY3oX6/1). Can you show\
    \ me \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt9rple1z.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  return count($opening_brackets) ==\
    \ count($closing_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprl0jgfkm.php:23\n\
    Stack trace:\n#0 /tmp/tmprl0jgfkm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprl0jgfkm.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', \nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm45r43n7.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjb2pw21a.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    else if ($bracket == ')') {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpp86e5arx.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpp86e5arx.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpp86e5arx.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpp86e5arx.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpp86e5arx.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp86e5arx.php:35\n\
    Stack trace:\n#0 /tmp/tmpp86e5arx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp86e5arx.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    else if ($bracket == ')') {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpcoscqxt4.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpcoscqxt4.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpcoscqxt4.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpcoscqxt4.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpcoscqxt4.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcoscqxt4.php:35\n\
    Stack trace:\n#0 /tmp/tmpcoscqxt4.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcoscqxt4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_match_all('/\\(([^()]+)\\)/', $brackets, $matches);\n\
    \  $closing_brackets = preg_match_all('/\\)([^()]+)/', $brackets, $matches);\n\
    \  return $opening_brackets == $closing_brackets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ftuge6r.php:27\n\
    Stack trace:\n#0 /tmp/tmp1ftuge6r.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp1ftuge6r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*+)\\)/', '$1', $brackets);\n  return\
    \ preg_match('/\\(([^()]*+)\\)/', $brackets) === 1;\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't seem to work for me. `preg_match` returns false on\
    \ `(()())` but returns true on `()()()`. Any ideas?\n<|/ c |>\n<| c |>\n: It works\
    \ for me (PHP 5.3.2). Are you sure you're using PHP 5.3? What does `var_dump(preg_match('/\\\
    (([^()]*+)\\)/', '(()())'))` return?\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer. Does that work for you?\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer. Does that work for you?\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer. Does that work for you?\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n\
    <?php\n$string = '(()())';\n$pattern = '/\\(([^()]*+)\\)/';\npreg_match($pattern,\
    \ $string, $matches);\nprint_r($matches);\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprnqj6ux0.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzo046poc.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\",\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b[0] != \"(\" || $b[strlen($b) - 1] != \")\") {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbadlchwl.php:31\n\
    Stack trace:\n#0 /tmp/tmpbadlchwl.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbadlchwl.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa3vbz5kk.php:22\n\
    Stack trace:\n#0 /tmp/tmpa3vbz5kk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa3vbz5kk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^[]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^[]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^{}]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^[]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^{}]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^{}]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^[]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^{}]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^{}]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^[]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdgir4dze.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\")\", $brackets);\n  $brackets = array_reverse($brackets);\n\
    \  foreach ($brackets as $i => $bracket) {\n    if ($bracket != $brackets[$i -\
    \ 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3m5kw8w.php:28\n\
    Stack trace:\n#0 /tmp/tmpw3m5kw8w.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpw3m5kw8w.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\(\\)]/', $brackets);\n  $opening_brackets = array_diff($opening_brackets,\
    \ $closing_brackets);\n  return !empty($opening_brackets);\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykz9u4co.php:24\n\
    Stack trace:\n#0 /tmp/tmpykz9u4co.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpykz9u4co.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    return $brackets\
    \ == '()';\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. I'm going to\
    \ try it out and see if it works. I appreciate your help.\n<|/ c |>\n<| c |>\n\
    I added a test case to my question. Can you please take a look and see if it works?\n\
    <|/ c |>\n<| c |>\nI added a test case to my question. Can you please take a look\
    \ and see if it works?\n<|/ c |>\n<| c |>\nI added a test case to my question.\
    \ Can you please take a look and see if it works?\n<|/ c |>\n<| c |>\nI added\
    \ a test case to my question. Can you please take a look and see if it works?\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"(()())\";\n$string = preg_replace('/\\\
    ([^\\)]*\\)/', '', $string);\n$string = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\\
    )/', '', $string);\necho $string;\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoguaa9ga.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4bs13xap.php:22\n\
    Stack trace:\n#0 /tmp/tmp4bs13xap.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4bs13xap.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvfbl6w85.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppu6sshuh.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\n\
    I like this solution, although it does require a little more work to make it work\
    \ with nested brackets.\n<|/ c |>\n<| c |>\nI added a recursive solution that\
    \ should handle nested brackets.\n<|/ c |>\n<| a tags=php,regex |>\nThis regex\
    \ will match all brackets except for those that are inside a string or comment:\n\
    <code>\n/\\([^()]*\\)/\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't match\
    \ nested brackets.\n<|/ c |>\n<| c |>\nIt does match nested brackets. Try it yourself\
    \ and see for yourself.\n<|/ c |>\n<| c |>\nIt doesn't match nested brackets.\
    \ Try it yourself and see for yourself.\n<|/ c |>\n<| c |>\nIt does match nested\
    \ brackets. Try it yourself and see for yourself.\n<|/ c |>\n<| c |>\nIt does\
    \ match nested brackets. Try it yourself and see for yourself.\n<|/ c |>\n<| a\
    \ dscore=2 |>\nThis regex will match all brackets except for those that are inside\
    \ a string or comment:\n<code>\n/\\([^()]*\\)/\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\([^\\)]*\\\
    )/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't match\
    \ nested brackets.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n$brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,regex |>\n<code>\n$brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n</code>\n\
    <|/ a \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu8eybp4h.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0vugk52.php:22\n\
    Stack trace:\n#0 /tmp/tmpf0vugk52.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpf0vugk52.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', ',',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', ',', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', ',', $brackets);\n    $brackets = preg_replace('/\\\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpklqyxqbf.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't seem to work for me. `correct_bracketing(\"(()())\")` returns `true`,\
    \ but `correct_bracketing(\")(()\")` returns `false`.\n<|/ c |>\n<| c |>\n: Yes,\
    \ it does. I tested it before posting it. I just added a test case to my answer.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to\
    \ my answer.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n$string = '(()())';\n\
    $string = preg_replace('/\\([^)]*\\)/', '', $string);\necho $string;\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work for me. `correct_bracketing(\"\
    (()())\")` returns `true`, but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: It works for me. `correct_bracketing(\"(()())\")` returns\
    \ `true`, but `correct_bracketing(\")(()\")` returns `false`.\n<|/ c |>\n<| c\
    \ |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test\
    \ case to my answer.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$string = '(()())';\n\
    $string = preg_replace('/\\([^)]*\\)/', '', $string);\necho $string;\n</code>\n\
    <|/ a tags=php,regex |>\n<| c |>\nThis doesn't seem to work for me. `correct_bracketing(\"\
    (()())\")` returns `true`, but `correct_bracketing(\")(()\")` returns `false`.\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$string = '(()())';\n$string = preg_replace('/\\([^)]*\\\
    )/', '', $string);\necho $string;\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa88xgxa8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\",\", $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('strtolower', $brackets);\n    $brackets\
    \ = array_filter($brackets);\n    $brackets = array_unique($brackets);\n    $brackets\
    \ = array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $brackets);\n\
    \    $brackets = array_map('trim', $brackets);\n    $brackets = array_map('trim',\
    \ $brackets);\n    $brackets = array_map('trim', $brackets);\n    $brackets =\
    \ array_map('trim', $brackets);\n    $brackets = array_map('trim', $\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfpqidanw.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = str_replace(array('(', ')'), '', $brackets);\n    $brackets\
    \ = explode(')', $brackets);\n    $brackets = array_reverse($brackets);\n    $brackets\
    \ = array_merge($brackets, array($brackets[0]));\n    return count($brackets)\
    \ == count(array_unique($brackets));\n}\n\nfunction candidate(...$args) {\n  \
    \  return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo3l93t4d.php:25\n\
    Stack trace:\n#0 /tmp/tmpo3l93t4d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo3l93t4d.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(\"(\", \"($brackets)\", $brackets);\n  $brackets\
    \ = str_replace(\")\", \"($brackets)\", $brackets);\n  return $brackets === \"\
    ($brackets)\";\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzonnbvv0.php:23\n\
    Stack trace:\n#0 /tmp/tmpzonnbvv0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzonnbvv0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = preg_match_all('/\\(([^()]*?)\\)/', $brackets, $matches);\n\
    \  $closed_brackets = preg_match_all('/\\)([^()]*?)\\)/', $brackets, $matches);\n\
    \  return $open_brackets == $closed_brackets;\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ true.\n<|/ c |>\n<| c |>\n: I fixed the regex to match `(()())` as well.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ true.\n<|/ c |>\n<| c |>\n: I fixed the regex to match `(()())` as well.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ true.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdcr99h28.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for me. However I cannot understand why it works.\
    \ Could you please explain to me how it works?\n<|/ c |>\n<| c |>\n: I added some\
    \ explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$string = \"(()())\"\
    ;\n$pattern = '/\\([^()]*\\)/';\npreg_match($pattern, $string, $matches);\nprint_r($matches);\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzam6nh58.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\")\", $brackets);\n  foreach ($brackets as $key =>\
    \ $value) {\n    if ($brackets[$key - 1] != $value) {\n      return false;\n \
    \   }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64ydo5oo.php:27\n\
    Stack trace:\n#0 /tmp/tmp64ydo5oo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp64ydo5oo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    foreach\
    \ ($brackets as $bracket) {\n        if ($bracket == \"(\") {\n            $opening_brackets[]\
    \ = $bracket;\n        } else {\n            $closing_brackets[] = $bracket;\n\
    \        }\n    }\n    return count($opening_brackets) == count($closing_brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work if there are nested\
    \ brackets.\n<|/ c |>\n<| c |>\n: Yes, it does. Try it out.\n<|/ c |>\n<| c |>\n\
    : It doesn't work if there are nested brackets. Try it out.\n<|/ c |>\n<| c |>\n\
    : It doesn't work if there are nested brackets. Try it out.\n<|/ c |>\n<| c |>\n\
    : It doesn't work if there are nested brackets. Try it out.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\n$string = '(()())';\n$pattern = '/\\(|\\)/';\n$replacement\
    \ = '';\necho preg_replace($pattern, $replacement, $string);\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp87tyud92.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpualef42q.php:22\n\
    Stack trace:\n#0 /tmp/tmpualef42q.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpualef42q.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = array();\n    $closing_brackets = array();\n    $opening_brackets_length\
    \ = strlen($brackets);\n    $closing_brackets_length = strlen($brackets) - $opening_brackets_length;\n\
    \    $i = 0;\n    $j = 0;\n    while ($i < $opening_brackets_length) {\n     \
    \   if ($brackets[$i] == $brackets[$i + 1]) {\n            $i++;\n        } else\
    \ {\n            $opening_brackets[$j] = $brackets[$i];\n            $j++;\n \
    \       }\n        $i++;\n    }\n    while ($j < $closing_brackets_length) {\n\
    \        if ($brackets[$j] == $brackets[$j + 1]) {\n            $j++;\n      \
    \  } else {\n            $closing_brackets[$i] = $brackets[$j];\n            $i++;\n\
    \        }\n        $j++;\n    }\n    for ($i = 0; $i < $opening_brackets_length;\
    \ $i++) {\n        if ($opening_brackets[$i] != $closing_brackets[$i]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95oro79s.php:49\n\
    Stack trace:\n#0 /tmp/tmp95oro79s.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp95oro79s.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp790ypo45.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\",\", $brackets);\n  foreach ($brackets as $b) {\n\
    \    if ($b != \"()\" && $b != \"\") {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymy3tdam.php:28\n\
    Stack trace:\n#0 /tmp/tmpymy3tdam.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpymy3tdam.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]*?)\\)/', '$1', $brackets);\n  return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe44jpf9e.php:22\n\
    Stack trace:\n#0 /tmp/tmpe44jpf9e.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe44jpf9e.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56uipg_z.php:22\n\
    Stack trace:\n#0 /tmp/tmp56uipg_z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp56uipg_z.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  for ($i\
    \ = 0; $i < strlen($brackets); $i++) {\n    if ($brackets[$i] == ')') {\n    \
    \  $closing_brackets[] = $brackets[$i];\n    }\n    if ($brackets[$i] == '(')\
    \ {\n      $opening_brackets[] = $brackets[$i];\n    }\n  }\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    function candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppw59tt0r.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyx6v1ykp.php:22\n\
    Stack trace:\n#0 /tmp/tmpyx6v1ykp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpyx6v1ykp.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1w5rp008.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06fzn4am.php:22\n\
    Stack trace:\n#0 /tmp/tmp06fzn4am.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp06fzn4am.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(array('(', ')'), array('{', '}'), $brackets);\n\
    \  $brackets = explode('{', $brackets);\n  $brackets = array_filter($brackets);\n\
    \  $brackets = array_values($brackets);\n  return $brackets[0] === $brackets[count($brackets)\
    \ - 1];\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThanks, I didn't know about\
    \ this function. I think I'll use it.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ the brackets are nested. For example, it doesn't work for `((()))`. See [my\
    \ answer](http://stackoverflow.com/a/41515331/1438393) for a function that does\
    \ work.\n<|/ c |>\n<| a tags=php,regex |>\nI wrote a function that does work:\n\
    <code>\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxutwz06t.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7_c4isd.php:22\n\
    Stack trace:\n#0 /tmp/tmpx7_c4isd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpx7_c4isd.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_me2tnw3.php:29\n\
    Stack trace:\n#0 /tmp/tmp_me2tnw3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_me2tnw3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgiv16od.php:22\n\
    Stack trace:\n#0 /tmp/tmpbgiv16od.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbgiv16od.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  $opening_brackets_length\
    \ = strlen($brackets);\n  for ($i = 0; $i < $opening_brackets_length; $i++) {\n\
    \    $opening_brackets[] = $brackets[$i];\n  }\n  for ($i = 0; $i < $opening_brackets_length;\
    \ $i++) {\n    $closing_brackets[] = $brackets[$opening_brackets_length - 1 -\
    \ $i];\n  }\n  return $opening_brackets == $closing_brackets;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbscga2h.php:30\n\
    Stack trace:\n#0 /tmp/tmptbscga2h.php(44): test()\n#1 {main}\n  thrown in /tmp/tmptbscga2h.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"(\") {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    if ($bracket == \")\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nI like this solution, although it\
    \ does require a little more code than my solution. Thanks!\n<|/ c |>\n<| c |>\n\
    This solution does not work if there are multiple brackets inside each other.\
    \ Example: `(()())` will give `False`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try\
    \ it out with your example. `correct_bracketing(\"(()())\")` returns `True`.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it out with your example. `correct_bracketing(\"\
    (()())\")` returns `True`.\n<|/ c |>\n<| c |>\n: It does work. Try it out with\
    \ your example. `correct_bracketing(\"(()())\")` returns `True`.\n<|/ c |>\n<|\
    \ a tags=php,regex |>\nI came up with a solution that uses preg_match_all and\
    \ preg_replace:\n<code>\n$string = \"(()())\";\n$pattern = '/[\\(\\)]/';\n$replacement\
    \ = '|';\n\n$matches = preg_match_all($pattern, $string, $matches);\n$string =\
    \ preg_replace($pattern, $replacement, $string);\n\nif ($matches == 0) {\n   \
    \ return false;\n}\n\n$opening_brackets = $matches[0];\n$closing_brackets = $matches[1];\n\
    \n$opening_brackets = array_unique($opening_brackets);\n$closing_brackets = array_unique($closing_brackets);\n\
    \nreturn count($opening_brackets) == count($closing_brackets);\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis solution does not work if there are multiple brackets\
    \ inside each other. Example: `(()())` will give `False`.\n<|/ c |>\n<| c |>\n\
    : Yes, it does. Try it out with your example. `correct_bracketing(\"(()())\")`\
    \ returns `True\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8_87u8e5.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpib4pdbxr.php:22\n\
    Stack trace:\n#0 /tmp/tmpib4pdbxr.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpib4pdbxr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n  $brackets =\
    \ preg_replace('/\\[[^\\]]*\\]\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\nfunction candidate(...$args) {\n\
    \    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg6gs71i3.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == '(') {\n      $opening_brackets[]\
    \ = $bracket;\n    }\n    if ($bracket == ')') {\n      $closing_brackets[] =\
    \ $bracket;\n    }\n  }\n  return count($opening_brackets) == count($closing_brackets);\n\
    }\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpytq4h9xy.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpytq4h9xy.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpytq4h9xy.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpytq4h9xy.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpytq4h9xy.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpytq4h9xy.php:35\n\
    Stack trace:\n#0 /tmp/tmpytq4h9xy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpytq4h9xy.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5f5tbfaz.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = explode(\",\", $brackets);\n  $opening_brackets = array_keys($brackets);\n\
    \  foreach ($brackets as $key => $bracket) {\n    if ($bracket != $opening_brackets[$key])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnow903i8.php:32\n\
    Stack trace:\n#0 /tmp/tmpnow903i8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnow903i8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsz0croj.php:22\n\
    Stack trace:\n#0 /tmp/tmpnsz0croj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnsz0croj.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $opening_brackets = preg_match_all('/\\(([^()]+)\\)/', $brackets, $matches);\n\
    \    $closing_brackets = preg_match_all('/\\)([^()]+)/', $brackets, $matches);\n\
    \    return ($opening_brackets == $closing_brackets);\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't seem to work. `correct_bracketing(\"(()())\")` returns\
    \ true.\n<|/ c |>\n<| c |>\nIt doesn't work because you didn't test it properly.\
    \ `correct_bracketing(\"(()())\")` returns false because `correct_bracketing(\"\
    (()())\")` returns true.\n<|/ c |>\n<| c |>\nI tested it and it returns false\
    \ for me. `correct_bracketing(\"(()())\")` returns false because `correct_bracketing(\"\
    (()())\")` returns true.\n<|/ c |>\n<| c |>\nI tested it and it returns false\
    \ for me. `correct_bracketing(\"(()())\")` returns false because `correct_bracketing(\"\
    (()())\")` returns true.\n<|/ c |>\n<| c |>\nI tested it and it returns false\
    \ for me. `correct_bracketing(\"(()())\")` returns false because `correct_bracketing(\"\
    (()())\")` returns true.\n<|/ c |>\n<| a tags=php,regex |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_jq32pz0.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = explode(\")\", $brackets);\n    foreach ($brackets as $b)\
    \ {\n        if ($brackets[count($brackets) - 1] == $b) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgx59szab.php:27\n\
    Stack trace:\n#0 /tmp/tmpgx59szab.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpgx59szab.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\(([^()]+)\\)/', '$1', $brackets);\n  return\
    \ $brackets === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptb746o5r.php:23\n\
    Stack trace:\n#0 /tmp/tmptb746o5r.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptb746o5r.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n   \
    \ return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpness8tvo.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    return $brackets === '()' || $brackets === '[]';\n}\n\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsuxmajxu.php:25\n\
    Stack trace:\n#0 /tmp/tmpsuxmajxu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpsuxmajxu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksqb68qa.php:22\n\
    Stack trace:\n#0 /tmp/tmpksqb68qa.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpksqb68qa.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^()]*\\]/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^()]*\\\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1hc4zr5d.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rmxstxi.php:22\n\
    Stack trace:\n#0 /tmp/tmp6rmxstxi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rmxstxi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return (strlen($brackets)\
    \ == 0);\n}\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpph4lj_a_.php:25\n\
    Stack trace:\n#0 /tmp/tmpph4lj_a_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpph4lj_a_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ == '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpznvw4_5_.php:22\n\
    Stack trace:\n#0 /tmp/tmpznvw4_5_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpznvw4_5_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^()]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^)]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^)]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^)]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2jme5efm.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2w6hb0wz.php:22\n\
    Stack trace:\n#0 /tmp/tmp2w6hb0wz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2w6hb0wz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a tags=php,regex |>\n<| c |>\nThis doesn't work for\
    \ me. `correct_bracketing(\"(()())\")` returns true.\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and it returns true. Are you sure you copied it correctly?\n\
    <|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c |>\n<| c |>\n: I\
    \ added a test case to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to\
    \ my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\n$brackets = preg_replace('/\\\
    ([^()]*\\)/', '', $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,regex |>\n<code>\n<?php\n$brackets =\
    \ preg_replace('/\\([^()]*\\)/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,regex |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n</code>\n<|/ a tags=php,regex |>\n<| a tags=php,regex |>\n\
    <code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\\\
    )/', '', $brackets);\n</code>\n<|/ a dscore=1 tags=php,regex |>\n<| a tags=php,regex\
    \ |>\n<code>\n<?php\n$brackets = preg_replace('/\\([^()]*\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpry5m1k4b.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $open_brackets = array();\n  $closed_brackets = array();\n  foreach ($brackets\
    \ as $bracket) {\n    if ($bracket == '(') {\n      $open_brackets[] = $bracket;\n\
    \    }\n    else {\n      if (empty($closed_brackets)) {\n        // We haven't\
    \ seen a closing bracket yet, so this isn't a correct bracket.\n        return\
    \ false;\n      }\n      $closed_brackets[] = $bracket;\n    }\n  }\n  return\
    \ empty($closed_brackets);\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpksvu4hi3.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpksvu4hi3.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpksvu4hi3.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpksvu4hi3.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpksvu4hi3.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksvu4hi3.php:39\n\
    Stack trace:\n#0 /tmp/tmpksvu4hi3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpksvu4hi3.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc_6imdd.php:22\n\
    Stack trace:\n#0 /tmp/tmpvc_6imdd.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvc_6imdd.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvitm0f3.php:22\n\
    Stack trace:\n#0 /tmp/tmpgvitm0f3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgvitm0f3.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = preg_split('/[\\(\\)]/', $brackets);\n  $closing_brackets\
    \ = preg_split('/[\\)\\]]/', $brackets);\n  $opening_brackets = array_filter($opening_brackets);\n\
    \  $closing_brackets = array_filter($closing_brackets);\n  return count(array_diff($opening_brackets,\
    \ $closing_brackets)) == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsprlm_n3.php:29\n\
    Stack trace:\n#0 /tmp/tmpsprlm_n3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpsprlm_n3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n  $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n  $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n \
    \ $brackets = preg_\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2ovzzxjy.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $opening_brackets = array();\n  $closing_brackets = array();\n  foreach\
    \ ($brackets as $bracket) {\n    if ($bracket == \"(\") {\n      $opening_brackets[]\
    \ = $bracket;\n    } else if ($bracket == \")\") {\n      $closing_brackets[]\
    \ = $bracket;\n    }\n  }\n  return count(array_diff($opening_brackets, $closing_brackets))\
    \ == 0;\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpg3thyxy1.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpg3thyxy1.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpg3thyxy1.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpg3thyxy1.php\
    \ on line 15\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmpg3thyxy1.php\
    \ on line 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg3thyxy1.php:34\n\
    Stack trace:\n#0 /tmp/tmpg3thyxy1.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpg3thyxy1.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^]]*\\]/', '',\
    \ $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^]]*\\]/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^]]*\\]/', '', $brackets);\n    $brackets = preg_replace('/\\([^)]*\\)/', '',\
    \ $brackets);\n    $brackets = preg_\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp45sgi5wh.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v6fp33u.php:22\n\
    Stack trace:\n#0 /tmp/tmp3v6fp33u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3v6fp33u.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\\
    ([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/',\
    \ '', $brackets);\n    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n\
    \    $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\[[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets\
    \ = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    [[^\\]]*\\]\\([^\\)]*\\)/', '', $brackets);\n    $brackets = preg_replace('/\\\
    \nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_g5450vt.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ == '()' || $brackets == '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_a3y8b4a.php:22\n\
    Stack trace:\n#0 /tmp/tmp_a3y8b4a.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_a3y8b4a.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,regex |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return correct_bracketing(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"()\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps9kpllij.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = str_replace(array(\"(\", \")\"), array(\"{\", \"}\"), $brackets);\n\
    \  $brackets = str_replace(array(\"{\", \"}\"), array(\"(\", \")\"), $brackets);\n\
    \  return preg_match(\"/{$brackets}$/\", $brackets);\n}\n</code>\n<|/ a tags=php,regex\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ `true` but `correct_bracketing(\")(()\")` returns `false`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine for me. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running PHP 5.3.10\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.3.10 and it works fine. Are you sure you copied\
    \ the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running\
    \ PHP 5.3.10\n<|/ c |>\n<| a tags=php,regex |>\nI believe this should work:\n\
    <code>\n$brackets = preg_replace('/\\([^)]*\\)/', '{', $brackets);\n$brackets\
    \ = preg_replace('/\\[[^\\]]*\\]/', '}', $brackets);\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `correct_bracketing(\"(()())\")` returns\
    \ `true` but `correct_bracketing(\")(()\")` returns `false`\n<|/ c |>\n<| c |>\n\
    I tested it and it works fine for me. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nI copied it correctly. I'm running PHP 5.3.10\n<|/ c |>\n<|\
    \ c |>\nI tested it on PHP 5.3.10 and it works fine. Are you sure you copied the\
    \ code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm running\
    \ PHP 5.3.10\n<|/ c |>\n<| a tags=php,regex |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl30vrq42.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]';\n}\n\nfunction candidate(...$args) {\n    return\
    \ correct_bracketing(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    ()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()())\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())()\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()((()()())())(()()(()))\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"((()())))\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\")(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"((((\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\")\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"(()\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"()()(()())())(()\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()))()\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44gj6rns.php:22\n\
    Stack trace:\n#0 /tmp/tmp44gj6rns.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp44gj6rns.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^\\)]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()' || $brackets === '[]' || $brackets === '{}';\n}\n\nfunction candidate(...$args)\
    \ {\n    return correct_bracketing(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"()\") !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"(()())\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"()()(()())()\") !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\")(()\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0teyfg3_.php:22\n\
    Stack trace:\n#0 /tmp/tmp0teyfg3_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp0teyfg3_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// brackets is a string of \"(\" and \")\".\n// return True if\
    \ every opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
    (\")\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
    (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing($brackets)\
    \ {\n  $brackets = preg_replace('/\\([^()]*\\)/', '', $brackets);\n  return $brackets\
    \ === '()';\n}\n\nfunction candidate(...$args) {\n    return correct_bracketing(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"()\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()())\") !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"()()(()())()\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"()()((()()())())(()()(()))\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"((()())))\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )(()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ((((\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    )\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ()()(()())())(()\") !== false) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(\"()()(()())()))()\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpes15r53f.php:22\n\
    Stack trace:\n#0 /tmp/tmpes15r53f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpes15r53f.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
