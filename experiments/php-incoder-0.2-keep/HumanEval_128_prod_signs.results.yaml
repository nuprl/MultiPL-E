name: HumanEval_128_prod_signs
language: php
results:
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = array_map(function ($x) {\n    return $x ? 1 : -1;\n  }, $arr);\n  return\
    \ array_sum(array_map(function ($x) {\n    return $x * $signs;\n  }, $arr));\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzlcdf3yd.php:24\n\
    Stack trace:\n#0 /tmp/tmpzlcdf3yd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzlcdf3yd.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($x) { return $x == 0 ? 0 : ($x < 0 ? -1 : +1); }, $arr);\n\
    \    return array_sum($signs);\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfc39v5l1.php:20\n\
    Stack trace:\n#0 /tmp/tmpfc39v5l1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfc39v5l1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsucg8mrz.php:27\n\
    Stack trace:\n#0 /tmp/tmpsucg8mrz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsucg8mrz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3vsynhh.php:24\n\
    Stack trace:\n#0 /tmp/tmpr3vsynhh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpr3vsynhh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    $prod = array_reduce($signs,\
    \ function ($carry, $sign) {\n        return $carry * $sign;\n    });\n    return\
    \ $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjkhlfkl.php:28\n\
    Stack trace:\n#0 /tmp/tmpzjkhlfkl.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzjkhlfkl.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp84v3i3bm.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp84v3i3bm.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp84v3i3bm.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp84v3i3bm.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84v3i3bm.php:27\n\
    Stack trace:\n#0 /tmp/tmp84v3i3bm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp84v3i3bm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz40xpnec.php:24\n\
    Stack trace:\n#0 /tmp/tmpz40xpnec.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz40xpnec.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7gl18439.php:24\n\
    Stack trace:\n#0 /tmp/tmp7gl18439.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7gl18439.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpvxpklnbi.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpvxpklnbi.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpvxpklnbi.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpvxpklnbi.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxpklnbi.php:27\n\
    Stack trace:\n#0 /tmp/tmpvxpklnbi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvxpklnbi.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $n) {\n        $sign = is_int($n) ? $n : -$n;\n \
    \       $sum += $sign * abs($n);\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchtqf8jv.php:24\n\
    Stack trace:\n#0 /tmp/tmpchtqf8jv.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpchtqf8jv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $num) {\n        $sign = ($num < 0) ? -1 : 1;\n \
    \       $sum += $sign * abs($num);\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1pwtcc4.php:24\n\
    Stack trace:\n#0 /tmp/tmph1pwtcc4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph1pwtcc4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzkhj64f.php:25\n\
    Stack trace:\n#0 /tmp/tmplzkhj64f.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplzkhj64f.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgfffefd6.php:27\n\
    Stack trace:\n#0 /tmp/tmpgfffefd6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgfffefd6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gqhm1w8.php:27\n\
    Stack trace:\n#0 /tmp/tmp9gqhm1w8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9gqhm1w8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuez9qrpw.php:24\n\
    Stack trace:\n#0 /tmp/tmpuez9qrpw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuez9qrpw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdsmlbm0.php:24\n\
    Stack trace:\n#0 /tmp/tmpcdsmlbm0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcdsmlbm0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpyd_dsjhp.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpyd_dsjhp.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpyd_dsjhp.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpyd_dsjhp.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyd_dsjhp.php:27\n\
    Stack trace:\n#0 /tmp/tmpyd_dsjhp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyd_dsjhp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqiyse0vl.php:25\n\
    Stack trace:\n#0 /tmp/tmpqiyse0vl.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqiyse0vl.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_455gph.php:25\n\
    Stack trace:\n#0 /tmp/tmpp_455gph.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpp_455gph.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqme94zmw.php:24\n\
    Stack trace:\n#0 /tmp/tmpqme94zmw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpqme94zmw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnv4fcqz.php:27\n\
    Stack trace:\n#0 /tmp/tmplnv4fcqz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplnv4fcqz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7b9b8mi8.php:24\n\
    Stack trace:\n#0 /tmp/tmp7b9b8mi8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7b9b8mi8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6h_kmtqk.php:27\n\
    Stack trace:\n#0 /tmp/tmp6h_kmtqk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6h_kmtqk.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $result\
    \ = 0;\n    foreach ($arr as $value) {\n        $result *= $value;\n        $result\
    \ %= 3;\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt25ijdp8.php:24\n\
    Stack trace:\n#0 /tmp/tmpt25ijdp8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpt25ijdp8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyk410sju.php:27\n\
    Stack trace:\n#0 /tmp/tmpyk410sju.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyk410sju.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n\
    \    return array_sum(array_map(function ($x) {\n        return $x * $signs;\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ugk030q.php:24\n\
    Stack trace:\n#0 /tmp/tmp2ugk030q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2ugk030q.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xyk3vba.php:27\n\
    Stack trace:\n#0 /tmp/tmp3xyk3vba.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3xyk3vba.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hkxghi3.php:24\n\
    Stack trace:\n#0 /tmp/tmp1hkxghi3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1hkxghi3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp87v_3wty.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp87v_3wty.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp87v_3wty.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp87v_3wty.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87v_3wty.php:27\n\
    Stack trace:\n#0 /tmp/tmp87v_3wty.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp87v_3wty.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxagtlw4.php:27\n\
    Stack trace:\n#0 /tmp/tmpcxagtlw4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcxagtlw4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $result\
    \ = 0;\n    foreach ($arr as $num) {\n        $result *= $num;\n        if ($num\
    \ < 0) {\n            $result *= -1;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeltsgxug.php:26\n\
    Stack trace:\n#0 /tmp/tmpeltsgxug.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpeltsgxug.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    $prod = array_reduce($signs,\
    \ function ($prod, $sign) {\n        return $prod * $sign;\n    });\n    return\
    \ $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8t1zvwi.php:28\n\
    Stack trace:\n#0 /tmp/tmp_8t1zvwi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_8t1zvwi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4een33x.php:27\n\
    Stack trace:\n#0 /tmp/tmpe4een33x.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpe4een33x.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $num) {\n        $sum += $num * sign($num);\n   \
    \ }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmp_05lcpng.php:13\n\
    Stack trace:\n#0 /tmp/tmp_05lcpng.php(19): prod_signs(Array)\n#1 /tmp/tmp_05lcpng.php(23):\
    \ candidate(Array)\n#2 /tmp/tmp_05lcpng.php(33): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp_05lcpng.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphe7p_k4p.php:24\n\
    Stack trace:\n#0 /tmp/tmphe7p_k4p.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphe7p_k4p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjua1t3g.php:25\n\
    Stack trace:\n#0 /tmp/tmpdjua1t3g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdjua1t3g.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    $signs = array_sum($signs);\n\
    \    return $signs * array_product($arr);\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvbt8klly.php:26\n\
    Stack trace:\n#0 /tmp/tmpvbt8klly.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvbt8klly.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum($signs);\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjq7ea78.php:22\n\
    Stack trace:\n#0 /tmp/tmpvjq7ea78.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvjq7ea78.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwqsuall.php:25\n\
    Stack trace:\n#0 /tmp/tmpnwqsuall.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnwqsuall.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($v) { return $v > 0 ? 1 : -1; }, $arr);\n    return array_sum(array_map(function($v)\
    \ { return $v * $signs; }, $arr));\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_rbv1117.php:20\n\
    Stack trace:\n#0 /tmp/tmp_rbv1117.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp_rbv1117.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    $prod = array_reduce($signs,\
    \ function ($carry, $sign) {\n        return $carry * $sign;\n    });\n    return\
    \ $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb20zhzp9.php:28\n\
    Stack trace:\n#0 /tmp/tmpb20zhzp9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb20zhzp9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmphrd4s6i5.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmphrd4s6i5.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmphrd4s6i5.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmphrd4s6i5.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrd4s6i5.php:24\n\
    Stack trace:\n#0 /tmp/tmphrd4s6i5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphrd4s6i5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2qmd76t.php:24\n\
    Stack trace:\n#0 /tmp/tmpb2qmd76t.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb2qmd76t.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoo59bvcm.php:27\n\
    Stack trace:\n#0 /tmp/tmpoo59bvcm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpoo59bvcm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppar4daa4.php:24\n\
    Stack trace:\n#0 /tmp/tmppar4daa4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppar4daa4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfpne472.php:25\n\
    Stack trace:\n#0 /tmp/tmplfpne472.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplfpne472.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpb9t0m9st.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpb9t0m9st.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpb9t0m9st.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpb9t0m9st.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9t0m9st.php:27\n\
    Stack trace:\n#0 /tmp/tmpb9t0m9st.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpb9t0m9st.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhu1nfbn.php:24\n\
    Stack trace:\n#0 /tmp/tmprhu1nfbn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprhu1nfbn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozljupz4.php:24\n\
    Stack trace:\n#0 /tmp/tmpozljupz4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpozljupz4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf10qiuas.php:27\n\
    Stack trace:\n#0 /tmp/tmpf10qiuas.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpf10qiuas.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kgal8es.php:25\n\
    Stack trace:\n#0 /tmp/tmp6kgal8es.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6kgal8es.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n    return array_sum($signs)\
    \ * array_prod($signs);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_prod()\
    \ in /tmp/tmpbcutklge.php:17\nStack trace:\n#0 /tmp/tmpbcutklge.php(21): prod_signs(Array)\n\
    #1 /tmp/tmpbcutklge.php(25): candidate(Array)\n#2 /tmp/tmpbcutklge.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpbcutklge.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhd1dpw5.php:24\n\
    Stack trace:\n#0 /tmp/tmplhd1dpw5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplhd1dpw5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp476es_9u.php:27\n\
    Stack trace:\n#0 /tmp/tmp476es_9u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp476es_9u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupoy4iq3.php:24\n\
    Stack trace:\n#0 /tmp/tmpupoy4iq3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpupoy4iq3.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmhg0f9b.php:25\n\
    Stack trace:\n#0 /tmp/tmpcmhg0f9b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcmhg0f9b.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpla03jbaz.php:27\n\
    Stack trace:\n#0 /tmp/tmpla03jbaz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpla03jbaz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m1pabq_.php:24\n\
    Stack trace:\n#0 /tmp/tmp5m1pabq_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp5m1pabq_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpix2abf9g.php:24\n\
    Stack trace:\n#0 /tmp/tmpix2abf9g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpix2abf9g.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpddqkwc_z.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpddqkwc_z.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpddqkwc_z.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpddqkwc_z.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpddqkwc_z.php:27\n\
    Stack trace:\n#0 /tmp/tmpddqkwc_z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpddqkwc_z.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vr7nkb7.php:24\n\
    Stack trace:\n#0 /tmp/tmp4vr7nkb7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp4vr7nkb7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp2fsac1ug.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp2fsac1ug.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp2fsac1ug.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp2fsac1ug.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2fsac1ug.php:24\n\
    Stack trace:\n#0 /tmp/tmp2fsac1ug.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp2fsac1ug.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $num) {\n        $sign = sign($num);\n        $sum\
    \ += $sign * abs($num);\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpi1ul_dat.php:13\n\
    Stack trace:\n#0 /tmp/tmpi1ul_dat.php(20): prod_signs(Array)\n#1 /tmp/tmpi1ul_dat.php(24):\
    \ candidate(Array)\n#2 /tmp/tmpi1ul_dat.php(34): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpi1ul_dat.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpqi33d1nh.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpqi33d1nh.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpqi33d1nh.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpqi33d1nh.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqi33d1nh.php:27\n\
    Stack trace:\n#0 /tmp/tmpqi33d1nh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqi33d1nh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum($signs) * array_prod($signs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_prod()\
    \ in /tmp/tmpmal0opjo.php:14\nStack trace:\n#0 /tmp/tmpmal0opjo.php(18): prod_signs(Array)\n\
    #1 /tmp/tmpmal0opjo.php(22): candidate(Array)\n#2 /tmp/tmpmal0opjo.php(32): test()\n\
    #3 {main}\n  thrown in /tmp/tmpmal0opjo.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpnplc3a9n.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpnplc3a9n.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpnplc3a9n.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpnplc3a9n.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnplc3a9n.php:27\n\
    Stack trace:\n#0 /tmp/tmpnplc3a9n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnplc3a9n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) { return $x ? 1 : -1; }, $arr);\n    return array_sum(array_map(function\
    \ ($x) { return $x * $signs; }, $arr));\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpue3hxdti.php:20\n\
    Stack trace:\n#0 /tmp/tmpue3hxdti.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpue3hxdti.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp_kd8gr2j.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp_kd8gr2j.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp_kd8gr2j.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp_kd8gr2j.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_kd8gr2j.php:27\n\
    Stack trace:\n#0 /tmp/tmp_kd8gr2j.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_kd8gr2j.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbg6sm03t.php:29\n\
    Stack trace:\n#0 /tmp/tmpbg6sm03t.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbg6sm03t.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjz5l_253.php:27\n\
    Stack trace:\n#0 /tmp/tmpjz5l_253.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjz5l_253.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpbnldfpop.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpbnldfpop.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpbnldfpop.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpbnldfpop.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnldfpop.php:27\n\
    Stack trace:\n#0 /tmp/tmpbnldfpop.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbnldfpop.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu091laa0.php:24\n\
    Stack trace:\n#0 /tmp/tmpu091laa0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpu091laa0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpzd171sgr.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpzd171sgr.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpzd171sgr.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpzd171sgr.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd171sgr.php:27\n\
    Stack trace:\n#0 /tmp/tmpzd171sgr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzd171sgr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpry97i9os.php:27\n\
    Stack trace:\n#0 /tmp/tmpry97i9os.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpry97i9os.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($x) { return $x == 0 ? 0 : abs($x); }, $arr);\n    return\
    \ array_sum($signs) * array_product($signs);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6vdzidwv.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = array_map(function ($x) {\n    return $x ? 1 : -1;\n  }, $arr);\n  return\
    \ array_sum(array_map(function ($x) {\n    return $x * $signs;\n  }, $arr));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n$arr = [1, 2, 2, -4];\n\
    $sum = 0;\n$sign = 1;\nforeach($arr as $num){\n    $sum += $num * $sign;\n   \
    \ $sign *= -1;\n}\necho $sum;\n</code>\n<|/ a tags=php,arrays,algorithm dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg7z_uz4v.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum($signs);\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ocfytvv.php:22\n\
    Stack trace:\n#0 /tmp/tmp6ocfytvv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6ocfytvv.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn452gq69.php:24\n\
    Stack trace:\n#0 /tmp/tmpn452gq69.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn452gq69.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    $prod = array_reduce($signs,\
    \ function ($prod, $sign) {\n        return $prod * $sign;\n    });\n    return\
    \ $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgr19t0a3.php:28\n\
    Stack trace:\n#0 /tmp/tmpgr19t0a3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgr19t0a3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xv2iv74.php:25\n\
    Stack trace:\n#0 /tmp/tmp0xv2iv74.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0xv2iv74.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp39blrf_8.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp39blrf_8.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp39blrf_8.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp39blrf_8.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39blrf_8.php:24\n\
    Stack trace:\n#0 /tmp/tmp39blrf_8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp39blrf_8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqcnn572.php:24\n\
    Stack trace:\n#0 /tmp/tmpnqcnn572.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnqcnn572.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    $prod = array_reduce($signs,\
    \ function ($carry, $sign) {\n        return $carry * $sign;\n    });\n    return\
    \ $prod;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wl1o4_g.php:28\n\
    Stack trace:\n#0 /tmp/tmp_wl1o4_g.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_wl1o4_g.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpya1t48tx.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpya1t48tx.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpya1t48tx.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpya1t48tx.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpya1t48tx.php:27\n\
    Stack trace:\n#0 /tmp/tmpya1t48tx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpya1t48tx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuprxxdmq.php:24\n\
    Stack trace:\n#0 /tmp/tmpuprxxdmq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpuprxxdmq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) { return $x == 0 ? 1 : -1; }, $arr);\n    return array_sum(array_map(function\
    \ ($x) { return $x * $signs; }, $arr));\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesbva8v9.php:20\n\
    Stack trace:\n#0 /tmp/tmpesbva8v9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpesbva8v9.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = array_map(function ($x) {\n    return $x ? 1 : -1;\n  }, $arr);\n  return\
    \ array_sum(array_map(function ($x) {\n    return $x * $signs;\n  }, $arr));\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkchq44m.php:24\n\
    Stack trace:\n#0 /tmp/tmprkchq44m.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprkchq44m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfyj2pcl.php:24\n\
    Stack trace:\n#0 /tmp/tmprfyj2pcl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprfyj2pcl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmprz0vhhnr.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmprz0vhhnr.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmprz0vhhnr.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmprz0vhhnr.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz0vhhnr.php:27\n\
    Stack trace:\n#0 /tmp/tmprz0vhhnr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprz0vhhnr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $num) {\n        $sign = sign($num);\n        $sum\
    \ += $sign * abs($num);\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpd3zdawkz.php:13\n\
    Stack trace:\n#0 /tmp/tmpd3zdawkz.php(20): prod_signs(Array)\n#1 /tmp/tmpd3zdawkz.php(24):\
    \ candidate(Array)\n#2 /tmp/tmpd3zdawkz.php(34): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpd3zdawkz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzy94d95.php:24\n\
    Stack trace:\n#0 /tmp/tmptzy94d95.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptzy94d95.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($a) { return $a<0 ? -1 : 1;}, $arr);\n    return array_sum($signs)\
    \ * array_product($signs);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyrzfqsp.php:20\n\
    Stack trace:\n#0 /tmp/tmplyrzfqsp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmplyrzfqsp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $x) {\n        if ($x > 0) {\n            $sum +=\
    \ $x;\n        } else {\n            $sum -= $x;\n        }\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7q78t11p.php:27\n\
    Stack trace:\n#0 /tmp/tmp7q78t11p.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7q78t11p.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmprmth74xs.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmprmth74xs.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmprmth74xs.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmprmth74xs.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmth74xs.php:27\n\
    Stack trace:\n#0 /tmp/tmprmth74xs.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprmth74xs.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp113xkugh.php:24\n\
    Stack trace:\n#0 /tmp/tmp113xkugh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp113xkugh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($num) { return $num > 0 ? 1 : -1; }, $arr);\n    return\
    \ array_sum(array_map(function ($num) { return $num * $signs; }, $arr));\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcd7ylea4.php:20\n\
    Stack trace:\n#0 /tmp/tmpcd7ylea4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpcd7ylea4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkr4aka5z.php:25\n\
    Stack trace:\n#0 /tmp/tmpkr4aka5z.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkr4aka5z.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph8hejs2a.php:25\n\
    Stack trace:\n#0 /tmp/tmph8hejs2a.php(35): test()\n#1 {main}\n  thrown in /tmp/tmph8hejs2a.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $signs = array_map(function\
    \ ($x) {\n        return $x === -0 ? -1 : 1;\n    }, $arr);\n\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i07jr_l.php:29\n\
    Stack trace:\n#0 /tmp/tmp0i07jr_l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0i07jr_l.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5grjiu8.php:24\n\
    Stack trace:\n#0 /tmp/tmpb5grjiu8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb5grjiu8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpi76wtsew.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpi76wtsew.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpi76wtsew.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpi76wtsew.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi76wtsew.php:27\n\
    Stack trace:\n#0 /tmp/tmpi76wtsew.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpi76wtsew.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpbl76r1wm.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpbl76r1wm.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpbl76r1wm.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpbl76r1wm.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbl76r1wm.php:27\n\
    Stack trace:\n#0 /tmp/tmpbl76r1wm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbl76r1wm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf28jlx1q.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($x) { return $x ? 1 : -1; }, $arr);\n    return array_sum(array_map(function($x)\
    \ { return $x * $signs; }, $arr));\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdq1dwvzv.php:20\n\
    Stack trace:\n#0 /tmp/tmpdq1dwvzv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdq1dwvzv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum($signs);\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfihxb7nq.php:22\n\
    Stack trace:\n#0 /tmp/tmpfihxb7nq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfihxb7nq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpx90qsyt1.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpx90qsyt1.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpx90qsyt1.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpx90qsyt1.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx90qsyt1.php:24\n\
    Stack trace:\n#0 /tmp/tmpx90qsyt1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpx90qsyt1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphk3uozuw.php:24\n\
    Stack trace:\n#0 /tmp/tmphk3uozuw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphk3uozuw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs)\
    \ * array_product($signs);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp264a03oj.php:25\n\
    Stack trace:\n#0 /tmp/tmp264a03oj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp264a03oj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphggzeyzk.php:24\n\
    Stack trace:\n#0 /tmp/tmphggzeyzk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphggzeyzk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x == 0 ? 0 : 1;\n    }, $arr);\n\
    \    return array_sum(array_map(function ($x) {\n        return $x * $signs;\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqsouz23.php:24\n\
    Stack trace:\n#0 /tmp/tmppqsouz23.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppqsouz23.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfc9whu8.php:27\n\
    Stack trace:\n#0 /tmp/tmpjfc9whu8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjfc9whu8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpl_p2rnnj.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpl_p2rnnj.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpl_p2rnnj.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpl_p2rnnj.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_p2rnnj.php:27\n\
    Stack trace:\n#0 /tmp/tmpl_p2rnnj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpl_p2rnnj.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n\
    \    return array_sum(array_map(function ($x) {\n        return $x * $signs;\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpru494mw1.php:24\n\
    Stack trace:\n#0 /tmp/tmpru494mw1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpru494mw1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8782mh3.php:25\n\
    Stack trace:\n#0 /tmp/tmpl8782mh3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpl8782mh3.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptg1at752.php:27\n\
    Stack trace:\n#0 /tmp/tmptg1at752.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptg1at752.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $num) {\n        $sum += $num * sign($num);\n   \
    \ }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpgl5fzvfv.php:13\n\
    Stack trace:\n#0 /tmp/tmpgl5fzvfv.php(19): prod_signs(Array)\n#1 /tmp/tmpgl5fzvfv.php(23):\
    \ candidate(Array)\n#2 /tmp/tmpgl5fzvfv.php(33): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpgl5fzvfv.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x == 0 ? 1 : $x == -1 ? -1 : 0;\n\
    \    }, $arr);\n    return array_sum($signs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuapzds1m.php:22\n\
    Stack trace:\n#0 /tmp/tmpuapzds1m.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpuapzds1m.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpn5v8be8w.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpn5v8be8w.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpn5v8be8w.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpn5v8be8w.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5v8be8w.php:27\n\
    Stack trace:\n#0 /tmp/tmpn5v8be8w.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpn5v8be8w.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $val) {\n        $sign = sign($val);\n        $sum\
    \ += $sign * abs($val);\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmp2esus0g3.php:13\n\
    Stack trace:\n#0 /tmp/tmp2esus0g3.php(20): prod_signs(Array)\n#1 /tmp/tmp2esus0g3.php(24):\
    \ candidate(Array)\n#2 /tmp/tmp2esus0g3.php(34): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmp2esus0g3.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm13bbg8k.php:25\n\
    Stack trace:\n#0 /tmp/tmpm13bbg8k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm13bbg8k.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwke7ty45.php:24\n\
    Stack trace:\n#0 /tmp/tmpwke7ty45.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwke7ty45.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeeqvzshk.php:24\n\
    Stack trace:\n#0 /tmp/tmpeeqvzshk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpeeqvzshk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($v) { return $v > 0 ? 1 : -1; }, $arr);\n    return array_sum(array_map(function($v)\
    \ { return $v * $signs; }, $arr));\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj9werwcl.php:20\n\
    Stack trace:\n#0 /tmp/tmpj9werwcl.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpj9werwcl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpnp_uq7pr.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpnp_uq7pr.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpnp_uq7pr.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpnp_uq7pr.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp_uq7pr.php:27\n\
    Stack trace:\n#0 /tmp/tmpnp_uq7pr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpnp_uq7pr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbv3e1d9p.php:25\n\
    Stack trace:\n#0 /tmp/tmpbv3e1d9p.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbv3e1d9p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamwd2nc8.php:27\n\
    Stack trace:\n#0 /tmp/tmpamwd2nc8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpamwd2nc8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n    return array_sum($signs)\
    \ * array_product($signs);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for\
    \ your answer. Your solution works well for positive numbers. But for negative\
    \ numbers it returns `0` instead of `-1`. Can you please help me to fix it?\n\
    <|/ c |>\n<| c |>\n: I added a note at the bottom of my answer.\n<|/ c |>\n<|\
    \ c |>\nThanks for your answer. Your solution works well for positive numbers.\
    \ But for negative numbers it returns `0` instead of `-1`. Can you please help\
    \ me to fix it?\n<|/ c |>\n<| c |>\n: I added a note at the bottom of my answer.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your solution works well for positive\
    \ numbers. But for negative numbers it returns `0` instead of `-1`. Can you please\
    \ help me to fix it?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpywwuago2.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpcfk6vc2n.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpcfk6vc2n.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpcfk6vc2n.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpcfk6vc2n.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfk6vc2n.php:27\n\
    Stack trace:\n#0 /tmp/tmpcfk6vc2n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcfk6vc2n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpa9kggtpk.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpa9kggtpk.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpa9kggtpk.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpa9kggtpk.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9kggtpk.php:27\n\
    Stack trace:\n#0 /tmp/tmpa9kggtpk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpa9kggtpk.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpqrpfxk.php:24\n\
    Stack trace:\n#0 /tmp/tmpvpqrpfxk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvpqrpfxk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14s824if.php:24\n\
    Stack trace:\n#0 /tmp/tmp14s824if.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp14s824if.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpka2y9fe6.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpka2y9fe6.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpka2y9fe6.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpka2y9fe6.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpka2y9fe6.php:24\n\
    Stack trace:\n#0 /tmp/tmpka2y9fe6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpka2y9fe6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp9eoborib.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp9eoborib.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp9eoborib.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp9eoborib.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9eoborib.php:27\n\
    Stack trace:\n#0 /tmp/tmp9eoborib.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9eoborib.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv77bc4qz.php:24\n\
    Stack trace:\n#0 /tmp/tmpv77bc4qz.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpv77bc4qz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    $prod = array_reduce($signs,\
    \ function ($prod, $sign) {\n        return $prod * $sign;\n    });\n    return\
    \ $prod;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. I'm\
    \ still trying to understand how this works. I understand that `array_map` creates\
    \ a new array with the results of calling the function on each element of the\
    \ original array, but I don't understand how `array_reduce` works. Can you please\
    \ explain how it works?\n<|/ c |>\n<| c |>\n`array_reduce` works like `array_map`\
    \ but for multiple elements. So `array_reduce($signs, function ($prod, $sign)\
    \ {\n        return $prod * $sign;\n    });` will multiply each element of `$signs`\
    \ with the product of its signs.\n<|/ c |>\n<| c |>\nOk, I understand now. Thank\
    \ you very much!\n<|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_ar2uont.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_2csm5e.php:25\n\
    Stack trace:\n#0 /tmp/tmpv_2csm5e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpv_2csm5e.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $signs = array_map(function\
    \ ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n\n    return array_sum($signs)\
    \ * array_prod($signs);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_prod()\
    \ in /tmp/tmpn65s166q.php:19\nStack trace:\n#0 /tmp/tmpn65s166q.php(23): prod_signs(Array)\n\
    #1 /tmp/tmpn65s166q.php(27): candidate(Array)\n#2 /tmp/tmpn65s166q.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn65s166q.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1t16s6b_.php:25\n\
    Stack trace:\n#0 /tmp/tmp1t16s6b_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1t16s6b_.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($num) {\n        return $num > 0 ? 1 : $num < 0 ? -1 :\
    \ 0;\n    }, $arr);\n    return array_sum($signs);\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hfn0dmb.php:22\n\
    Stack trace:\n#0 /tmp/tmp3hfn0dmb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3hfn0dmb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5ypdo06.php:27\n\
    Stack trace:\n#0 /tmp/tmpf5ypdo06.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpf5ypdo06.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvjxcqpy7.php:24\n\
    Stack trace:\n#0 /tmp/tmpvjxcqpy7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvjxcqpy7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcfn0ao4.php:27\n\
    Stack trace:\n#0 /tmp/tmpbcfn0ao4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpbcfn0ao4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpioi6xqi8.php:27\n\
    Stack trace:\n#0 /tmp/tmpioi6xqi8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpioi6xqi8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = array_map(function ($x) {\n    return $x ? 1 : -1;\n  }, $arr);\n  return\
    \ array_sum(array_map(function ($x) {\n    return $x * array_sum($signs);\n  },\
    \ $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpzsrpsuce.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpzsrpsuce.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpzsrpsuce.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpzsrpsuce.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzsrpsuce.php:24\n\
    Stack trace:\n#0 /tmp/tmpzsrpsuce.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzsrpsuce.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6zkt3mxq.php:27\n\
    Stack trace:\n#0 /tmp/tmp6zkt3mxq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6zkt3mxq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmvrf66l.php:24\n\
    Stack trace:\n#0 /tmp/tmpsmvrf66l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsmvrf66l.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to\
    \ work. `prod_signs([1, 2, 2, -4]) == -9` but `prod_signs([0, 1]) == 0`\n<|/ c\
    \ |>\n<| c |>\n: I missed that case. Fixed now.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2,\
    \ 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
    \ 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(-1, 1, 1, 0)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxjyvbq1r.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaym4lxik.php:25\n\
    Stack trace:\n#0 /tmp/tmpaym4lxik.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpaym4lxik.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp0uk3ofg9.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp0uk3ofg9.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp0uk3ofg9.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp0uk3ofg9.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0uk3ofg9.php:24\n\
    Stack trace:\n#0 /tmp/tmp0uk3ofg9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0uk3ofg9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyb2qfsgp.php:27\n\
    Stack trace:\n#0 /tmp/tmpyb2qfsgp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyb2qfsgp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpsekr4_iv.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpsekr4_iv.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpsekr4_iv.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpsekr4_iv.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsekr4_iv.php:27\n\
    Stack trace:\n#0 /tmp/tmpsekr4_iv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsekr4_iv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojfvv1c3.php:27\n\
    Stack trace:\n#0 /tmp/tmpojfvv1c3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpojfvv1c3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi1fbiik.php:24\n\
    Stack trace:\n#0 /tmp/tmpmi1fbiik.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmi1fbiik.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2ctwe4k.php:24\n\
    Stack trace:\n#0 /tmp/tmpn2ctwe4k.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn2ctwe4k.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyy0ckyha.php:24\n\
    Stack trace:\n#0 /tmp/tmpyy0ckyha.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpyy0ckyha.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgu8mnij.php:27\n\
    Stack trace:\n#0 /tmp/tmppgu8mnij.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppgu8mnij.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpgtaus5j5.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpgtaus5j5.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpgtaus5j5.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpgtaus5j5.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgtaus5j5.php:27\n\
    Stack trace:\n#0 /tmp/tmpgtaus5j5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgtaus5j5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($num) {\n        return $num < 0 ? -1 : 1;\n    }, $arr);\n\
    \    return array_sum(array_map(function ($num) {\n        return $num * $signs;\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1syayxsw.php:24\n\
    Stack trace:\n#0 /tmp/tmp1syayxsw.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1syayxsw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5182go8.php:25\n\
    Stack trace:\n#0 /tmp/tmpg5182go8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg5182go8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpmyxalr9s.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpmyxalr9s.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpmyxalr9s.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpmyxalr9s.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyxalr9s.php:24\n\
    Stack trace:\n#0 /tmp/tmpmyxalr9s.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmyxalr9s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $sum\
    \ = 0;\n  foreach ($arr as $num) {\n    $sign = is_int($num) ? $num : $num < 0\
    \ ? -1 : 1;\n    $sum += $sign * abs($num);\n  }\n  return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfltfarfl.php:25\n\
    Stack trace:\n#0 /tmp/tmpfltfarfl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpfltfarfl.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqg5wyd5n.php:27\n\
    Stack trace:\n#0 /tmp/tmpqg5wyd5n.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqg5wyd5n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmployd18t4.php:27\n\
    Stack trace:\n#0 /tmp/tmployd18t4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmployd18t4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvlpjfi7.php:27\n\
    Stack trace:\n#0 /tmp/tmpwvlpjfi7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwvlpjfi7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplnxl35ao.php:25\n\
    Stack trace:\n#0 /tmp/tmplnxl35ao.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplnxl35ao.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($x) { return $x ? 1 : -1; }, $arr);\n    return array_sum(array_map(function($x)\
    \ { return $x * $x; }, $signs));\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvqxjwqly.php:20\n\
    Stack trace:\n#0 /tmp/tmpvqxjwqly.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvqxjwqly.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1fckx0h.php:27\n\
    Stack trace:\n#0 /tmp/tmpq1fckx0h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq1fckx0h.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpvvyujmx0.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpvvyujmx0.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpvvyujmx0.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpvvyujmx0.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvyujmx0.php:27\n\
    Stack trace:\n#0 /tmp/tmpvvyujmx0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvvyujmx0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp1mvt8f6t.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp1mvt8f6t.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp1mvt8f6t.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp1mvt8f6t.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1mvt8f6t.php:24\n\
    Stack trace:\n#0 /tmp/tmp1mvt8f6t.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1mvt8f6t.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n\
    \    return array_sum(array_map(function ($x) {\n        return $x * $signs;\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74lsb6z5.php:24\n\
    Stack trace:\n#0 /tmp/tmp74lsb6z5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp74lsb6z5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpeg8l_hf8.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpeg8l_hf8.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpeg8l_hf8.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpeg8l_hf8.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeg8l_hf8.php:27\n\
    Stack trace:\n#0 /tmp/tmpeg8l_hf8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpeg8l_hf8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqoudtoqu.php:25\n\
    Stack trace:\n#0 /tmp/tmpqoudtoqu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqoudtoqu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * array_sum($signs);\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpa2hlyifb.php\
    \ on line 15\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpa2hlyifb.php on line 15\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpa2hlyifb.php on line 15\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpa2hlyifb.php on line\
    \ 15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa2hlyifb.php:24\n\
    Stack trace:\n#0 /tmp/tmpa2hlyifb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpa2hlyifb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum($signs);\n}\n\nfunction candidate(...$args) {\n    return\
    \ prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3iqg37qb.php:22\n\
    Stack trace:\n#0 /tmp/tmp3iqg37qb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3iqg37qb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0p6dukl.php:27\n\
    Stack trace:\n#0 /tmp/tmpm0p6dukl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpm0p6dukl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function($x) {\n        return $x == 0 ? 0 : 1;\n    }, $arr);\n\
    \    return array_sum(array_map(function($x) {\n        return $x * $signs[0];\n\
    \    }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_bgsdv9.php:24\n\
    Stack trace:\n#0 /tmp/tmpy_bgsdv9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpy_bgsdv9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2ama5qb.php:27\n\
    Stack trace:\n#0 /tmp/tmpo2ama5qb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpo2ama5qb.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    $signs = array_sum($signs);\n\
    \    $prod = array_product($arr);\n    return $signs * $prod;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0qq8ed9.php:27\n\
    Stack trace:\n#0 /tmp/tmpf0qq8ed9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpf0qq8ed9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebmqx2_2.php:24\n\
    Stack trace:\n#0 /tmp/tmpebmqx2_2.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpebmqx2_2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesjm6cds.php:27\n\
    Stack trace:\n#0 /tmp/tmpesjm6cds.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpesjm6cds.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs)\
    \ * array_product($signs);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd0w8kdg.php:25\n\
    Stack trace:\n#0 /tmp/tmpzd0w8kdg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzd0w8kdg.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $sum\
    \ = 0;\n    foreach ($arr as $val) {\n        $sign = sign($val);\n        $sum\
    \ *= $sign;\n        $sum += $sign;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sign() in /tmp/tmpqhhal32e.php:13\n\
    Stack trace:\n#0 /tmp/tmpqhhal32e.php(21): prod_signs(Array)\n#1 /tmp/tmpqhhal32e.php(25):\
    \ candidate(Array)\n#2 /tmp/tmpqhhal32e.php(35): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpqhhal32e.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmp9pbc90w6.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmp9pbc90w6.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmp9pbc90w6.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmp9pbc90w6.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pbc90w6.php:27\n\
    Stack trace:\n#0 /tmp/tmp9pbc90w6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9pbc90w6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_cm2s_8m.php:27\n\
    Stack trace:\n#0 /tmp/tmp_cm2s_8m.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_cm2s_8m.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n    return array_sum($signs)\
    \ * array_prod($signs);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_prod()\
    \ in /tmp/tmpzlj5sai0.php:17\nStack trace:\n#0 /tmp/tmpzlj5sai0.php(21): prod_signs(Array)\n\
    #1 /tmp/tmpzlj5sai0.php(25): candidate(Array)\n#2 /tmp/tmpzlj5sai0.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpzlj5sai0.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) { return $x ? 1 : -1; }, $arr);\n    return array_sum(array_map(function\
    \ ($x) { return $x * $signs; }, $arr));\n}\n\nfunction candidate(...$args) {\n\
    \    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9o3bsnv.php:20\n\
    Stack trace:\n#0 /tmp/tmpx9o3bsnv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpx9o3bsnv.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbo_jni6t.php:25\n\
    Stack trace:\n#0 /tmp/tmpbo_jni6t.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbo_jni6t.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4o_yhj0i.php:27\n\
    Stack trace:\n#0 /tmp/tmp4o_yhj0i.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4o_yhj0i.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x < 0 ? -1 : 1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6y6h_5c.php:25\n\
    Stack trace:\n#0 /tmp/tmpq6y6h_5c.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq6y6h_5c.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmplskxkg71.php\
    \ on line 20\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmplskxkg71.php on line 20\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmplskxkg71.php on line 20\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmplskxkg71.php on line\
    \ 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplskxkg71.php:29\n\
    Stack trace:\n#0 /tmp/tmplskxkg71.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplskxkg71.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n\n    $product = array_reduce($signs,\
    \ function ($carry, $sign) {\n        return $carry * $sign;\n    });\n\n    return\
    \ $product;\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pn3c3zi.php:31\n\
    Stack trace:\n#0 /tmp/tmp5pn3c3zi.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5pn3c3zi.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs);\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuhz5xc8e.php:25\n\
    Stack trace:\n#0 /tmp/tmpuhz5xc8e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuhz5xc8e.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * array_sum($signs);\n    }, $arr));\n}\n\nfunction\
    \ candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_sum() expects parameter 1 to be array, null given in /tmp/tmpdw2yv5kw.php\
    \ on line 18\n\nWarning: array_sum() expects parameter 1 to be array, null given\
    \ in /tmp/tmpdw2yv5kw.php on line 18\n\nWarning: array_sum() expects parameter\
    \ 1 to be array, null given in /tmp/tmpdw2yv5kw.php on line 18\n\nWarning: array_sum()\
    \ expects parameter 1 to be array, null given in /tmp/tmpdw2yv5kw.php on line\
    \ 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw2yv5kw.php:27\n\
    Stack trace:\n#0 /tmp/tmpdw2yv5kw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdw2yv5kw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fcm9ioq.php:27\n\
    Stack trace:\n#0 /tmp/tmp8fcm9ioq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8fcm9ioq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = array_map(function ($num) { return $num > 0 ? 1 : -1; }, $arr);\n  return\
    \ array_sum(array_map(function ($num) { return $num * $signs; }, $arr));\n}\n\n\
    function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppeehksda.php:20\n\
    Stack trace:\n#0 /tmp/tmppeehksda.php(30): test()\n#1 {main}\n  thrown in /tmp/tmppeehksda.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs)\
    \ * array_prod($signs);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,algorithm\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxwf3cmme.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    $signs\
    \ = array_map(function ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n  \
    \  return array_sum(array_map(function ($x) {\n        return $x * $signs;\n \
    \   }, $arr));\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbggl76vf.php:24\n\
    Stack trace:\n#0 /tmp/tmpbggl76vf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpbggl76vf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum(array_map(function\
    \ ($x) {\n        return $x * $signs;\n    }, $arr));\n}\n\nfunction candidate(...$args)\
    \ {\n    return prod_signs(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 2, -4)) !== -9) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 1)) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 1, 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpflv7sg0l.php:27\n\
    Stack trace:\n#0 /tmp/tmpflv7sg0l.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpflv7sg0l.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n  $signs\
    \ = array_map(function ($x) {\n    return $x ? 1 : -1;\n  }, $arr);\n  return\
    \ array_sum(array_map(function ($x) {\n    return $x * $signs;\n  }, $arr));\n\
    }\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1,\
    \ 2, -1, -1, 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
    \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdhsat63.php:24\n\
    Stack trace:\n#0 /tmp/tmpsdhsat63.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsdhsat63.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given an array arr of integers and you need to return\n\
    // sum of magnitudes of integers multiplied by product of all signs\n// of each\
    \ number in the array, represented by 1, -1 or 0.\n// Note: return None for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4]) == -9\n// >>> prod_signs([0,\
    \ 1]) == 0\n// >>> prod_signs([]) == None\nfunction prod_signs($arr) {\n    if\
    \ (empty($arr)) {\n        return null;\n    }\n    $signs = array_map(function\
    \ ($x) {\n        return $x ? 1 : -1;\n    }, $arr);\n    return array_sum($signs)\
    \ * array_prod($signs);\n}\n\nfunction candidate(...$args) {\n    return prod_signs(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 1)) !==\
    \ 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1,\
    \ 1, 2, 3, -1, 1)) !== -10) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== null) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(2, 4, 1, 2, -1, -1, 9)) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(-1, 1, -1, 1)) !== 4) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1, 1)) !== -4)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1, 1,\
    \ 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function array_prod()\
    \ in /tmp/tmpd0qf1306.php:17\nStack trace:\n#0 /tmp/tmpd0qf1306.php(21): prod_signs(Array)\n\
    #1 /tmp/tmpd0qf1306.php(25): candidate(Array)\n#2 /tmp/tmpd0qf1306.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmpd0qf1306.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
