name: HumanEval_130_tri
language: php
results:
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [1,3,2];\n    if ($n%2\
    \ == 0) {\n        $tri[] = $tri[$n-1] + $tri[$n-2];\n    }\n    return $tri;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswy_f6za.php:30\n\
    Stack trace:\n#0 /tmp/tmpswy_f6za.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpswy_f6za.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = 1;\n\
    \    $arr[1] = 3;\n    $arr[2] = 2;\n    $arr[3] = 8;\n    $arr[4] = 7;\n    $arr[5]\
    \ = 6;\n    $arr[6] = 5;\n    $arr[7] = 4;\n    $arr[8] = 3;\n    $arr[9] = 2;\n\
    \    $arr[10] = 1;\n    $arr[11] = 8;\n    $arr[12] = 7;\n    $arr[13] = 6;\n\
    \    $arr[14] = 5;\n    $arr[15] = 4;\n    $arr[16] = 3;\n    $arr[17] = 2;\n\
    \    $arr[18] = 1;\n    $arr[19] = 8;\n    $arr[20] = 7;\n    $arr[21] = 6;\n\
    \    $arr[22] = 5;\n    $arr[23] = 4;\n    $arr[24] = 3;\n    $arr[25] = 2;\n\
    \    $arr[26] = 1;\n    $arr[27] = 8;\n    $arr[28] = 7;\n    $arr[29] = 6;\n\
    \    $arr[30] = 5;\n    $arr[31] = 4;\n    $arr[32] = 3;\n    $arr[33] = 2;\n\
    \    $arr[34] = 1;\n    $arr[35] = 8;\n    $arr[36] = 7;\n    $arr[37] = 6;\n\
    \    $arr[38] = 5;\n    $arr[39] = 4;\n    $arr[40] = 3;\n    $arr[41] = 2;\n\
    \    $arr[42] = 1;\n    $arr[43] = 8;\n    $arr[44] = 7;\n    $arr[45] = 6;\n\
    \    $arr[46] = 5;\n    $arr[47] = 4;\n    $arr[48] = 3;\n    $arr[49] = 2;\n\
    \    $arr[50] = 1;\n    $arr[51] = 8;\n    $arr[52] = 7;\n    $arr[53] = 6;\n\
    \    $arr[54] = 5;\n    $arr[55] = 4;\n    $arr[56] = 3;\n    $arr[57] = 2;\n\
    \    $arr[58] = 1;\n    $arr[59] = 8;\n    $arr[60] = 7;\n    $arr[61] = 6;\n\
    \    $arr[62] = 5;\n    $arr[63] = 4;\n    $arr[64] = 3;\n    $arr[65] = 2;\n\
    \    $arr[66] = 1;\n    $arr[67] = 8;\n    $arr[68] = 7;\n    $arr[69] = 6;\n\
    \    $arr[70] = 5;\n    $arr[71] = 4;\n    $arr[72] = 3;\n    $arr[73] = 2;\n\
    \    $arr[74] = 1;\n    $arr[75] = 8;\n    $arr[76] = 7;\n    $arr[77] = 6;\n\
    \    $arr[78] = 5;\n    $arr[79] = 4;\n    $arr[80] = 3;\n    $arr[81] = 2;\n\
    \    $arr[82] = 1;\n    $arr[83] = 8;\n    $arr[84] = 7;\n    $arr[\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3d6qlbr1.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(--$n) + tri(--$n) + tri(++$n);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpgr5mh32i.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = 1;\n\
    \    $arr[1] = 3;\n    $arr[2] = 2;\n    $arr[3] = 8;\n    $arr[4] = 7;\n    $arr[5]\
    \ = 6;\n    $arr[6] = 5;\n    $arr[7] = 4;\n    $arr[8] = 3;\n    $arr[9] = 2;\n\
    \    $arr[10] = 1;\n    $arr[11] = 8;\n    $arr[12] = 7;\n    $arr[13] = 6;\n\
    \    $arr[14] = 5;\n    $arr[15] = 4;\n    $arr[16] = 3;\n    $arr[17] = 2;\n\
    \    $arr[18] = 1;\n    $arr[19] = 8;\n    $arr[20] = 7;\n    $arr[21] = 6;\n\
    \    $arr[22] = 5;\n    $arr[23] = 4;\n    $arr[24] = 3;\n    $arr[25] = 2;\n\
    \    $arr[26] = 1;\n    $arr[27] = 8;\n    $arr[28] = 7;\n    $arr[29] = 6;\n\
    \    $arr[30] = 5;\n    $arr[31] = 4;\n    $arr[32] = 3;\n    $arr[33] = 2;\n\
    \    $arr[34] = 1;\n    $arr[35] = 8;\n    $arr[36] = 7;\n    $arr[37] = 6;\n\
    \    $arr[38] = 5;\n    $arr[39] = 4;\n    $arr[40] = 3;\n    $arr[41] = 2;\n\
    \    $arr[42] = 1;\n    $arr[43] = 8;\n    $arr[44] = 7;\n    $arr[45] = 6;\n\
    \    $arr[46] = 5;\n    $arr[47] = 4;\n    $arr[48] = 3;\n    $arr[49] = 2;\n\
    \    $arr[50] = 1;\n    $arr[51] = 8;\n    $arr[52] = 7;\n    $arr[53] = 6;\n\
    \    $arr[54] = 5;\n    $arr[55] = 4;\n    $arr[56] = 3;\n    $arr[57] = 2;\n\
    \    $arr[58] = 1;\n    $arr[59] = 8;\n    $arr[60] = 7;\n    $arr[61] = 6;\n\
    \    $arr[62] = 5;\n    $arr[63] = 4;\n    $arr[64] = 3;\n    $arr[65] = 2;\n\
    \    $arr[66] = 1;\n    $arr[67] = 8;\n    $arr[68] = 7;\n    $arr[69] = 6;\n\
    \    $arr[70] = 5;\n    $arr[71] = 4;\n    $arr[72] = 3;\n    $arr[73] = 2;\n\
    \    $arr[74] = 1;\n    $arr[75] = 8;\n    $arr[76] = 7;\n    $arr[77] = 6;\n\
    \    $arr[78] = 5;\n    $arr[79] = 4;\n    $arr[80] = 3;\n    $arr[81] = 2;\n\
    \    $arr[82] = 1;\n    $arr[83] = 8;\n    $arr[84] = 7;\n    $arr[\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp586djb5j.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    }\n    else\
    \ {\n        $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmptk3q571d.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <\
    \ 3) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    $result[] = 3;\n    $result[] = $result[$n - 1] + $result[$n - 2] + $result[$n];\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45tcz251.php:34\n\
    Stack trace:\n#0 /tmp/tmp45tcz251.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp45tcz251.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n    } else {\n        $result[] = tri($n - 1)\
    \ + tri($n - 2) + tri($n + 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpguhmln2h.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj6qfp5og.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp4_fvsa7y.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpmdtygya7.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(--$n) + tri(--$n) + tri(++$n);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp9agp_24a.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $tri = [$a, $b, $c];\n    for($i = 1; $i <= $n; $i++) {\n        $a\
    \ = $b;\n        $b = $c;\n        $c = $a + $b;\n        $tri[] = $c;\n    }\n\
    \    return $tri;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76unxuyp.php:36\n\
    Stack trace:\n#0 /tmp/tmp76unxuyp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp76unxuyp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(--$n) + tri(--$n) + tri(++$n);\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,fibonacci |>\n<| a dscore=0 |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfc2hwz75.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| c |>\nI like your solution, but I think it can be simplified a bit. `tri(10)`\
    \ returns `[1, 3, 7, 11, 15, 21, 35, 55, 89, 144, 233, 377, 610, 987, 1597]` which\
    \ is exactly the output you get from your code. No need to use `$result[]` at\
    \ all. Just `return $result` will do.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ My code was wrong. Thanks for pointing out. I've edited my answer.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvm6i1sza.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp6y9vvm30.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 2;\n    $result[] = 3;\n    $result[] = tri($n - 1) + tri($n\
    \ - 2) + tri($n + 1);\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| c |>\nThis answer does not provide an explanation as to why this works.\n\
    <|/ c |>\n<| c |>\nI added an explanation.\n<|/ c |>\n<| a tags=php,fibonacci,recursion\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp_8gxpj4.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        $result[]\
    \ = $result[$i - 1] + $result[$i - 2];\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2l8bbllf.php:36\n\
    Stack trace:\n#0 /tmp/tmp2l8bbllf.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2l8bbllf.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 3) {\n        return\
    \ [];\n    }\n    $a = [1, 1];\n    $b = [1, 2];\n    $c = $a + $b;\n    $d =\
    \ $c;\n    for ($i = 3; $i <= $n; $i++) {\n        $d = $c + $d;\n        $c =\
    \ $b;\n        $b = $a;\n        $a = $d;\n    }\n    return $a;\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe0vb4h8p.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [];\n    if ($n == 1)\
    \ {\n        $tri[] = 1;\n        return $tri;\n    }\n    if ($n == 2) {\n  \
    \      $tri[] = 1;\n        $tri[] = 3;\n        return $tri;\n    }\n    if ($n\
    \ % 2 == 0) {\n        $tri[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n   \
    \ } else {\n        $tri[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n      \
    \  $tri[] = tri($n - 1) + tri($n + 1) + tri($n + 2);\n    }\n    return $tri;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp7qit601k.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = $n;\n    $result[] = $n - 1;\n    $result[] = $n - 2;\n    $result[] = $n\
    \ + 1;\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci |>\n<| a tags=php,fibonacci\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk_zei8wb.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmprduc4qd8.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = 3;\n\
    \    if ($n % 2 == 0) {\n        $arr[1] = 1;\n        $arr[2] = 2;\n    } else\
    \ {\n        $arr[1] = 1;\n        $arr[2] = 2;\n        $arr[3] = 1;\n    }\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $arr[] = $arr[$i - 1] + $arr[$i -\
    \ 2] + $arr[$i + 1];\n    }\n    return $arr;\n}\n</code>\n<|/ a dscore=5 |>\n\
    <| c |>\nThanks for sharing your solution. I'm curious to know how you came up\
    \ with that solution. I'm also curious to know how you came up with that solution.\
    \ I'm also curious to know how you came up with that solution. I'm also curious\
    \ to know how you came up with that solution. I'm also curious to know how you\
    \ came up with that solution. I'm also curious to know how you came up with that\
    \ solution. I'm also curious to know how you came up with that solution. I'm also\
    \ curious to know how you came up with that solution. I'm also curious to know\
    \ how you came up with that solution. I'm also curious to know how you came up\
    \ with that solution. I'm also curious to know how you came up with that solution.\
    \ I'm also curious to know how you came up with that solution. I'm also curious\
    \ to know how you came up with that solution. I'm also curious to know how you\
    \ came up with that solution. I'm also curious to know how you came up with that\
    \ solution. I'm also curious to know how you came up with that solution. I'm also\
    \ curious to know how you came up with that solution. I'm also curious to know\
    \ how you came up with that solution. I'm also curious to know how you came up\
    \ with that solution. I'm also curious to know how you came up with that solution.\
    \ I'm also curious to know how you came up with that solution. I'm also curious\
    \ to know how you came up with that solution. I'm also curious to know how you\
    \ came up with that solution. I'm also curious to know how you came up with that\
    \ solution. I'm also curious to know how you came up with that solution. I'm also\
    \ curious to know how you came up with that solution. I'm also curious to know\
    \ how you came up with that solution. I'm also curious to know how you came up\
    \ with that solution. I'm also curious to know how you came up with that solution\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi95ni72_.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 1;\n    $result[3] = 2;\n    $result[4]\
    \ = 8;\n    $result[5] = 1;\n    $result[6] = 1;\n    $result[7] = 2;\n    $result[8]\
    \ = 8;\n    $result[9] = 1;\n    $result[10] = 1;\n    $result[11] = 2;\n    $result[12]\
    \ = 8;\n    $result[13] = 1;\n    $result[14] = 1;\n    $result[15] = 2;\n   \
    \ $result[16] = 8;\n    $result[17] = 1;\n    $result[18] = 1;\n    $result[19]\
    \ = 2;\n    $result[20] = 8;\n    $result[21] = 1;\n    $result[22] = 1;\n   \
    \ $result[23] = 2;\n    $result[24] = 8;\n    $result[25] = 1;\n    $result[26]\
    \ = 1;\n    $result[27] = 2;\n    $result[28] = 8;\n    $result[29] = 1;\n   \
    \ $result[30] = 1;\n    $result[31] = 2;\n    $result[32] = 8;\n    $result[33]\
    \ = 1;\n    $result[34] = 1;\n    $result[35] = 2;\n    $result[36] = 8;\n   \
    \ $result[37] = 1;\n    $result[38] = 1;\n    $result[39] = 2;\n    $result[40]\
    \ = 8;\n    $result[41] = 1;\n    $result[42] = 1;\n    $result[43] = 2;\n   \
    \ $result[44] = 8;\n    $result[45] = 1;\n    $result[46] = 1;\n    $result[47]\
    \ = 2;\n    $result[48] = 8;\n    $result[49] = 1;\n    $result[50] = 1;\n   \
    \ $result[51] = 2;\n    $result[52] = 8;\n    $result[53] = 1;\n    $result[54]\
    \ = 1;\n    $result[55] = 2;\n    $result[56] = 8;\n    $result[57] = 1;\n   \
    \ $result[58] = 1;\n    $result[59] = 2;\n    $result[60] = 8;\n    $result[61]\
    \ = 1;\n    $result[62] = 1;\n    $result[63] = 2;\n    $result[64] = 8;\n   \
    \ $result[65] = 1;\n    $result[66] = 1;\n    $result[67] = 2;\n    $result[68]\
    \ = 8;\n    $result[69] = 1;\n    $result[70] = 1;\n    $result[71] = 2;\n   \
    \ $result[72] = 8;\n    $result[73] = 1;\n    $result[74] = 1;\n    $result[75]\
    \ = 2;\n    $result[76] = 8;\n    $result[77] = 1;\n    $result[78] = 1;\n   \
    \ $result[79] = 2;\n    $result[80] = 8;\n    $result[81] = 1;\n    $result[82]\
    \ = 1;\n    $result[83] = 2;\n    $result[84] = 8;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxl3l3ci8.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    }\n    $result[]\
    \ = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpnqpv5kr2.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[]\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmx4xe0ki.php on line 121\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = array();\n    for($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mw7xkln.php:36\n\
    Stack trace:\n#0 /tmp/tmp4mw7xkln.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4mw7xkln.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = array();\n    $tri[0]\
    \ = 1;\n    $tri[1] = 3;\n    $tri[2] = 2;\n    $tri[3] = 8;\n    $tri[4] = 7;\n\
    \    $tri[5] = 6;\n    $tri[6] = 5;\n    $tri[7] = 4;\n    $tri[8] = 3;\n    $tri[9]\
    \ = 2;\n    $tri[10] = 1;\n    $tri[11] = 8;\n    $tri[12] = 7;\n    $tri[13]\
    \ = 6;\n    $tri[14] = 5;\n    $tri[15] = 4;\n    $tri[16] = 3;\n    $tri[17]\
    \ = 2;\n    $tri[18] = 1;\n    $tri[19] = 8;\n    $tri[20] = 7;\n    $tri[21]\
    \ = 6;\n    $tri[22] = 5;\n    $tri[23] = 4;\n    $tri[24] = 3;\n    $tri[25]\
    \ = 2;\n    $tri[26] = 1;\n    $tri[27] = 8;\n    $tri[28] = 7;\n    $tri[29]\
    \ = 6;\n    $tri[30] = 5;\n    $tri[31] = 4;\n    $tri[32] = 3;\n    $tri[33]\
    \ = 2;\n    $tri[34] = 1;\n    $tri[35] = 8;\n    $tri[36] = 7;\n    $tri[37]\
    \ = 6;\n    $tri[38] = 5;\n    $tri[39] = 4;\n    $tri[40] = 3;\n    $tri[41]\
    \ = 2;\n    $tri[42] = 1;\n    $tri[43] = 8;\n    $tri[44] = 7;\n    $tri[45]\
    \ = 6;\n    $tri[46] = 5;\n    $tri[47] = 4;\n    $tri[48] = 3;\n    $tri[49]\
    \ = 2;\n    $tri[50] = 1;\n    $tri[51] = 8;\n    $tri[52] = 7;\n    $tri[53]\
    \ = 6;\n    $tri[54] = 5;\n    $tri[55] = 4;\n    $tri[56] = 3;\n    $tri[57]\
    \ = 2;\n    $tri[58] = 1;\n    $tri[59] = 8;\n    $tri[60] = 7;\n    $tri[61]\
    \ = 6;\n    $tri[62] = 5;\n    $tri[63] = 4;\n    $tri[64] = 3;\n    $tri[65]\
    \ = 2;\n    $tri[66] = 1;\n    $tri[67] = 8;\n    $tri[68] = 7;\n    $tri[69]\
    \ = 6;\n    $tri[70] = 5;\n    $tri[71] = 4;\n    $tri[72] = 3;\n    $tri[73]\
    \ = 2;\n    $tri[74] = 1;\n    $tri[75] = 8;\n    $\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgdekp0em.php on line 96\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp15ck647i.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <\
    \ 3) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    $result[] = 3;\n    $result[] = $result[$n - 1] + $result[$n - 2] + $result[$n];\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,arrays |>\n<| c |>\n\
    Thanks so much! I appreciate it.\n<|/ c |>\n<| c |>\nThis answer does not take\
    \ into account the fact that `tri(10)` should return `[1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55]`, not `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]`.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpspwuchvy.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1) + tri($n + 2);\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,fibonacci,recursion |>\n<| c |>\nThanks for your answer.\
    \ Your code works perfectly for small numbers, but for large numbers it doesn't\
    \ work. For example, for n = 15, the result is [1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233, 377, 610, 987, 1597]. Do you know why?\n<|/ c |>\n<| c |>\n\
    I tested it with n = 15 and it works perfectly fine. Maybe you have a typo or\
    \ something in your code. Can you post the code you used?\n<|/ c |>\n<| c |>\n\
    I edited my question and added the code I used.\n<|/ c |>\n<| c |>\nI tested it\
    \ with n = 15 and it works perfectly fine. Maybe you have a typo or something\
    \ in your code. Can you post the code you used?\n<|/ c |>\n<| c |>\nI edited my\
    \ question and added the code I used.\n<|/ c |>\n<| a tags=php,fibonacci,recursion\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0poyhdt6.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [];\n    $tri[0] = 1;\n\
    \    $tri[1] = 3;\n    $tri[2] = 2;\n    $tri[3] = 8;\n    $tri[4] = 7;\n    $tri[5]\
    \ = 6;\n    $tri[6] = 5;\n    $tri[7] = 4;\n    $tri[8] = 3;\n    $tri[9] = 2;\n\
    \    $tri[10] = 1;\n    $tri[11] = 8;\n    $tri[12] = 7;\n    $tri[13] = 6;\n\
    \    $tri[14] = 5;\n    $tri[15] = 4;\n    $tri[16] = 3;\n    $tri[17] = 2;\n\
    \    $tri[18] = 1;\n    $tri[19] = 8;\n    $tri[20] = 7;\n    $tri[21] = 6;\n\
    \    $tri[22] = 5;\n    $tri[23] = 4;\n    $tri[24] = 3;\n    $tri[25] = 2;\n\
    \    $tri[26] = 1;\n    $tri[27] = 8;\n    $tri[28] = 7;\n    $tri[29] = 6;\n\
    \    $tri[30] = 5;\n    $tri[31] = 4;\n    $tri[32] = 3;\n    $tri[33] = 2;\n\
    \    $tri[34] = 1;\n    $tri[35] = 8;\n    $tri[36] = 7;\n    $tri[37] = 6;\n\
    \    $tri[38] = 5;\n    $tri[39] = 4;\n    $tri[40] = 3;\n    $tri[41] = 2;\n\
    \    $tri[42] = 1;\n    $tri[43] = 8;\n    $tri[44] = 7;\n    $tri[45] = 6;\n\
    \    $tri[46] = 5;\n    $tri[47] = 4;\n    $tri[48] = 3;\n    $tri[49] = 2;\n\
    \    $tri[50] = 1;\n    $tri[51] = 8;\n    $tri[52] = 7;\n    $tri[53] = 6;\n\
    \    $tri[54] = 5;\n    $tri[55] = 4;\n    $tri[56] = 3;\n    $tri[57] = 2;\n\
    \    $tri[58] = 1;\n    $tri[59] = 8;\n    $tri[60] = 7;\n    $tri[61] = 6;\n\
    \    $tri[62] = 5;\n    $tri[63] = 4;\n    $tri[64] = 3;\n    $tri[65] = 2;\n\
    \    $tri[66] = 1;\n    $tri[67] = 8;\n    $tri[68] = 7;\n    $tri[69] = 6;\n\
    \    $tri[70] = 5;\n    $tri[71] = 4;\n    $tri[72] = 3;\n    $tri[73] = 2;\n\
    \    $tri[74] = 1;\n    $tri[75] = 8;\n    $tri[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbvvicweo.php on line 96\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_timyr9f.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(--$n) + tri(--$n) + tri(++$n);\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfwpttye1.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 2) {\n        return\
    \ $n;\n    }\n    $a = $b = $c = 1;\n    $result = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $result[] = $a;\n        $a = $b;\n        $b = $c;\n \
    \       $c = $a + $b;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfh2f8fa.php:37\n\
    Stack trace:\n#0 /tmp/tmpnfh2f8fa.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpnfh2f8fa.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n    }\n    $result[] =\
    \ 1;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    return $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I believe that your solution does not return the correct result for tri(3).\n\
    <|/ c |>\n<| c |>\n, thanks for pointing that out. I fixed the code now.\n<|/\
    \ c |>\n<| a tags=php,fibonacci |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplwhkj5r3.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmfx0t4bd.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $d = 1;\n    $tri = [$a, $b, $c];\n    $i = 0;\n    while($i < $n)\
    \ {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c\
    \ = $d;\n        $tri[] = $c;\n        $i++;\n    }\n    return $tri;\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nI like this solution, it's very elegant. However it\
    \ has a flaw that it will not work for large numbers. I suggest using [this solution](http://stackoverflow.com/a/4151579/157957)\
    \ instead.\n<|/ c |>\n<| c |>\nI like the solution but this doesn't work for large\
    \ numbers. I suggest using [this solution](http://stackoverflow.com/a/4151579/157957)\
    \ instead.\n<|/ c |>\n<| c |>\nI like this solution, but I find it a bit confusing\
    \ to read. Could you please explain how it works?\n<|/ c |>\n<| c |>\nThis solution\
    \ works well for large numbers. But it has a flaw that it will not work for large\
    \ numbers. I suggest using [this solution](http://stackoverflow.com/a/4151579/157957)\
    \ instead.\n<|/ c |>\n<| c |>\nThis solution works well for large numbers. But\
    \ it has a flaw that it will not work for large numbers. I suggest using [this\
    \ solution](http://stackoverflow.com/a/4151579/157957) instead.\n<|/ c |>\n<|\
    \ a dscore=5 |>\nThe most efficient way is to use recursion:\n<code>\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy5dgm42n.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    if ($n % 2 ==\
    \ 0) {\n        $result[] = $result[$n - 1] + $result[$n - 2];\n    }\n    $result[]\
    \ = $result[$n - 1] + $result[$n - 2];\n    return $result;\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a tags=php,fibonacci |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0ntvn_h1.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    }\n    else\
    \ {\n        $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpkxd021b2.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = 3;\n\
    \    $arr[1] = 1;\n    $arr[2] = 2;\n    $arr[3] = $arr[2] + $arr[1] + $arr[0];\n\
    \    for($i = 4; $i <= $n; $i++) {\n        $arr[$i] = $arr[$i-1] + $arr[$i-2];\n\
    \    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp681sr9dt.php:33\n\
    Stack trace:\n#0 /tmp/tmp681sr9dt.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp681sr9dt.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6hvq8r9v.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [];\n    $tri[0] = 3;\n\
    \    $tri[1] = 1;\n    if ($n % 2 == 0) {\n        $tri[2] = $tri[1] + $tri[0];\n\
    \    } else {\n        $tri[2] = $tri[1] - $tri[0] + $tri[0];\n    }\n    $tri[$n]\
    \ = $tri[$n - 1] + $tri[$n - 2] + $tri[$n];\n    return $tri;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4e8otusx.php:35\n\
    Stack trace:\n#0 /tmp/tmp4e8otusx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4e8otusx.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n ===\
    \ 1) {\n        $result[] = 1;\n        return $result;\n    }\n    if ($n ===\
    \ 2) {\n        $result[] = 1;\n        $result[] = 2;\n        return $result;\n\
    \    }\n    $result[] = 1;\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n\
    \ + 1);\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoqlt04dm.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[]\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp36rh9wj7.php on line 121\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion |>\n<| c |>\nThis doesn't\
    \ work. Try it with `tri(10)` - it returns `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]`\
    \ instead of `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug, thank you for pointing it out. Now it works.\n<|/ c |>\n<| c |>\nThank\
    \ you for fixing the bug. Now it works.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphb4jvpq5.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 8;\n    $result[]\
    \ = 1 + $n / 2;\n    if ($n % 2 == 0) {\n        $result[] = $result[$n - 1] +\
    \ $result[$n - 2] + $result[$n + 1];\n    } else {\n        $result[] = $result[$n\
    \ - 1] + $result[$n - 2] + $result[$n + 1];\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6qnsjux8.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    if ($n % 2 ==\
    \ 0) {\n        $result[] = 2;\n    }\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 1;\n    $result[]\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplgh4he42.php on line 122\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 2) {\n        return\
    \ $n;\n    }\n    $tri = array();\n    $tri[] = 1;\n    $tri[] = 1;\n    $tri[]\
    \ = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n \
    \   $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[]\
    \ = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n \
    \   $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[]\
    \ = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n \
    \   $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[]\
    \ = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n \
    \   $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[]\
    \ = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n \
    \   $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[]\
    \ = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n \
    \   $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[]\
    \ = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n \
    \   $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[]\
    \ = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n \
    \   $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[]\
    \ = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n \
    \   $tri[] = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[]\
    \ = 2;\n    $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n \
    \   $tri[] = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[]\
    \ = 2;\n    $tri[] = 1;\n    $tri[] = 3;\n    $tri[] = 2;\n    $tri[] = 2;\n \
    \   $tri[] = 1;\n    $tri[] = 3;\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphdbnxs8a.php on line 139\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = 1;\n    $c = 1;\n\
    \    $tri = [];\n    for($i = 1; $i <= $n; $i++) {\n        $tri[] = $a;\n   \
    \     $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n    return $tri;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjla7wwz.php:35\n\
    Stack trace:\n#0 /tmp/tmpjjla7wwz.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjjla7wwz.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    if ($n % 2 == 0) {\n        $result[] = 3;\n    }\n    $result[] = $result[$n\
    \ - 1] + $result[$n - 2];\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkuhh_ai.php:36\n\
    Stack trace:\n#0 /tmp/tmphkuhh_ai.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphkuhh_ai.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 1) return [];\n  \
    \  $result = [];\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 3;\n\
    \    $result[] = $result[$n - 1] + $result[$n - 2] + $result[$n];\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuq2zxwus.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8br1fibj.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    if ($n % 2 == 0) {\n        $result[] = 3;\n \
    \       $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n \
    \       $result[] = tri($n - 1) + tri($n - 2);\n    }\n    return $result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,recursion |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9kq1q3_6.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <\
    \ 2) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    $result[] = 3;\n    $result[] = $result[$n - 1] + $result[$n - 2] + $result[$n];\n\
    \    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,fibonacci,recursion\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpko0pwk2m.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = 3;\n\
    \    if ($n % 2 == 0) {\n        $arr[1] = 1;\n        $arr[2] = 2;\n        $arr[3]\
    \ = $arr[1] + $arr[2];\n    } else {\n        $arr[1] = 1;\n        $arr[2] =\
    \ $arr[1] + $arr[2];\n        $arr[3] = $arr[1] - $arr[2];\n    }\n    $i = $n;\n\
    \    while ($i <= $n + 1) {\n        $arr[] = $arr[$i - 1] + $arr[$i - 2];\n \
    \       $i++;\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpotx5_9u4.php:42\n\
    Stack trace:\n#0 /tmp/tmpotx5_9u4.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpotx5_9u4.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    $result[1] = 1;\n    $result[2] = 2;\n    $result[3] = 1;\n    $result[4]\
    \ = 1;\n    $result[5] = 1;\n    $result[6] = 1;\n    $result[7] = 1;\n    $result[8]\
    \ = 1;\n    $result[9] = 1;\n    $result[10] = 1;\n    $result[11] = 1;\n    $result[12]\
    \ = 1;\n    $result[13] = 1;\n    $result[14] = 1;\n    $result[15] = 1;\n   \
    \ $result[16] = 1;\n    $result[17] = 1;\n    $result[18] = 1;\n    $result[19]\
    \ = 1;\n    $result[20] = 1;\n    $result[21] = 1;\n    $result[22] = 1;\n   \
    \ $result[23] = 1;\n    $result[24] = 1;\n    $result[25] = 1;\n    $result[26]\
    \ = 1;\n    $result[27] = 1;\n    $result[28] = 1;\n    $result[29] = 1;\n   \
    \ $result[30] = 1;\n    $result[31] = 1;\n    $result[32] = 1;\n    $result[33]\
    \ = 1;\n    $result[34] = 1;\n    $result[35] = 1;\n    $result[36] = 1;\n   \
    \ $result[37] = 1;\n    $result[38] = 1;\n    $result[39] = 1;\n    $result[40]\
    \ = 1;\n    $result[41] = 1;\n    $result[42] = 1;\n    $result[43] = 1;\n   \
    \ $result[44] = 1;\n    $result[45] = 1;\n    $result[46] = 1;\n    $result[47]\
    \ = 1;\n    $result[48] = 1;\n    $result[49] = 1;\n    $result[50] = 1;\n   \
    \ $result[51] = 1;\n    $result[52] = 1;\n    $result[53] = 1;\n    $result[54]\
    \ = 1;\n    $result[55] = 1;\n    $result[56] = 1;\n    $result[57] = 1;\n   \
    \ $result[58] = 1;\n    $result[59] = 1;\n    $result[60] = 1;\n    $result[61]\
    \ = 1;\n    $result[62] = 1;\n    $result[63] = 1;\n    $result[64] = 1;\n   \
    \ $result[65] = 1;\n    $result[66] = 1;\n    $result[67] = 1;\n    $result[68]\
    \ = 1;\n    $result[69] = 1;\n    $result[70] = 1;\n    $result[71] = 1;\n   \
    \ $result[72] = 1;\n    $result[73] = 1;\n    $result[74] = 1;\n    $result[75]\
    \ = 1;\n    $result[76] = 1;\n    $result[77] = 1;\n    $result[78] = 1;\n   \
    \ $result[79] = 1;\n    $result[80] = 1;\n    $result[81] = 1;\n    $result[82]\
    \ = 1;\n    $result[83] = 1;\n    $result[84] = 1;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi_lm_tv3.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = [];\n    for($i = 1; $i <= $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,fibonacci |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9rfd431t.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    \n\
    \    for($i = 4; $i <= $n; $i++) {\n        $result[$i] = $result[$i-1] + $result[$i-2]\
    \ + $result[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6062glp.php:36\n\
    Stack trace:\n#0 /tmp/tmpr6062glp.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpr6062glp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[] = 1;\n\
    \    $arr[] = 2;\n    $arr[] = 3;\n    $arr[] = $arr[$n - 1] + $arr[$n - 2] +\
    \ $arr[$n];\n    return $arr;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| a tags=php,fibonacci,recursion |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6jh67quy.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = $result[$n - 1]\
    \ + $result[$n - 2] + $result[$n];\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp04u2zgft.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[1] = 1;\n        $result[2] =\
    \ 2;\n    } else {\n        $result[1] = 1;\n        $result[2] = 2;\n       \
    \ $result[3] = 1;\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $result[]\
    \ = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,fibonacci |>\n<| c |>\nThe question was about PHP.\
    \ Your answer is for Java.\n<|/ c |>\n<| c |>\nThe question was about PHP. Your\
    \ answer is for Java.\n<|/ c |>\n<| c |>\nThe question was about PHP. Your answer\
    \ is for Java.\n<|/ c |>\n<| c |>\nThe question was about PHP. Your answer is\
    \ for Java.\n<|/ c |>\n<| c |>\nThe question was about PHP. Your answer is for\
    \ Java.\n<|/ c |>\n<| a tags=php,fibonacci |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe8robh2d.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = $result[0] + $result[1] + $result[2];\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp87e73_6t.php:33\n\
    Stack trace:\n#0 /tmp/tmp87e73_6t.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp87e73_6t.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[]\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpka2yge8t.php on line 121\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,fibonacci |>\n<| a tags=php,fibonacci |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt8cr9e7r.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $list = [];\n    for($i = 0; $i < $n; $i++) {\n        $list[] = $a;\n\
    \        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n    return\
    \ $list;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilbnjwen.php:36\n\
    Stack trace:\n#0 /tmp/tmpilbnjwen.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpilbnjwen.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    if ($n % 2 === 0) {\n        $result[] = 3;\n    }\n    $result[] = 1;\n\
    \    $result[] = 1;\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci\
    \ |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7tq2gqln.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8fk4ov95.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    $result[1] = 1;\n    $result[2] = 2;\n    $result[3] = 1;\n    $result[4]\
    \ = 2;\n    $result[5] = 1;\n    $result[6] = 2;\n    $result[7] = 1;\n    $result[8]\
    \ = 2;\n    $result[9] = 1;\n    $result[10] = 2;\n    $result[11] = 1;\n    $result[12]\
    \ = 2;\n    $result[13] = 1;\n    $result[14] = 2;\n    $result[15] = 1;\n   \
    \ $result[16] = 2;\n    $result[17] = 1;\n    $result[18] = 2;\n    $result[19]\
    \ = 1;\n    $result[20] = 2;\n    $result[21] = 1;\n    $result[22] = 2;\n   \
    \ $result[23] = 1;\n    $result[24] = 2;\n    $result[25] = 1;\n    $result[26]\
    \ = 2;\n    $result[27] = 1;\n    $result[28] = 2;\n    $result[29] = 1;\n   \
    \ $result[30] = 2;\n    $result[31] = 1;\n    $result[32] = 2;\n    $result[33]\
    \ = 1;\n    $result[34] = 2;\n    $result[35] = 1;\n    $result[36] = 2;\n   \
    \ $result[37] = 1;\n    $result[38] = 2;\n    $result[39] = 1;\n    $result[40]\
    \ = 2;\n    $result[41] = 1;\n    $result[42] = 2;\n    $result[43] = 1;\n   \
    \ $result[44] = 2;\n    $result[45] = 1;\n    $result[46] = 2;\n    $result[47]\
    \ = 1;\n    $result[48] = 2;\n    $result[49] = 1;\n    $result[50] = 2;\n   \
    \ $result[51] = 1;\n    $result[52] = 2;\n    $result[53] = 1;\n    $result[54]\
    \ = 2;\n    $result[55] = 1;\n    $result[56] = 2;\n    $result[57] = 1;\n   \
    \ $result[58] = 2;\n    $result[59] = 1;\n    $result[60] = 2;\n    $result[61]\
    \ = 1;\n    $result[62] = 2;\n    $result[63] = 1;\n    $result[64] = 2;\n   \
    \ $result[65] = 1;\n    $result[66] = 2;\n    $result[67] = 1;\n    $result[68]\
    \ = 2;\n    $result[69] = 1;\n    $result[70] = 2;\n    $result[71] = 1;\n   \
    \ $result[72] = 2;\n    $result[73] = 1;\n    $result[74] = 2;\n    $result[75]\
    \ = 1;\n    $result[76] = 2;\n    $result[77] = 1;\n    $result[78] = 2;\n   \
    \ $result[79] = 1;\n    $result[80] = 2;\n    $result[81] = 1;\n    $result[82]\
    \ = 2;\n    $result[83] = 1;\n    $result[84] = 2;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp584e0s9a.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv4k2uvbt.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain why you used the\
    \ ternary operator here?\n<|/ c |>\n<| c |>\nThe ternary operator is just an if/else\
    \ statement, just like you did in the original code. `if ($n % 2 == 0) { $result[2]\
    \ = tri($n - 1) + tri($n - 2) + tri($n + 1);} else { $result[2] = tri($n - 1)\
    \ + tri($n + 1);}`. It's just an alternative way to write the same thing.\n<|/\
    \ c |>\n<| c |>\nThanks for your explanation. Can you please explain why you used\
    \ the ternary operator here?\n<|/ c |>\n<| c |>\nThe ternary operator is just\
    \ an if/else statement, just like you did in the original code. `if ($n % 2 ==\
    \ 0) { $result[2] = tri($n - 1) + tri($n - 2) + tri($n + 1);} else { $result[2]\
    \ = tri($n - 1) + tri($n + 1);}`. It's just an alternative way to write the same\
    \ thing.\n<|/ c |>\n<| a tags=php,recursion |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw1oax7pv.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = 1\
    \ + $n / 2;\n    } else {\n        $result[] = tri($n - 1) + tri($n - 2) + tri($n\
    \ + 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpcbu4xs24.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7q_ko33_.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcze5ck2e.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[1] = 1;\n        $result[2] =\
    \ 2;\n    } else {\n        $result[1] = 1;\n        $result[2] = 1;\n    }\n\
    \    $result[3] = $result[2] + $result[1] + $result[0];\n    for ($i = 4; $i <=\
    \ $n; $i++) {\n        $result[] = $result[$i - 1] + $result[$i - 2] + $result[$i\
    \ + 1];\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\n\
    This answer should be the accepted one. It's the most efficient and simplest to\
    \ implement.\n<|/ c |>\n<| c |>\nI agree with you, this is more efficient and\
    \ simplest to implement.\n<|/ c |>\n<| c |>\nI agree with you, this is more efficient\
    \ and simplest to implement.\n<|/ c |>\n<| c |>\nI agree with you, this is more\
    \ efficient and simplest to implement.\n<|/ c |>\n<| c |>\nI agree with you, this\
    \ is more efficient and simplest to implement.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpanf_e6eo.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    $result[] = 3;\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpwem6n7ja.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[] = 3;\n\
    \    for($i = 1; $i <= $n; $i++) {\n        $arr[] = $arr[$i - 1] + $arr[$i -\
    \ 2] + $arr[$i + 1];\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin3df3wa.php:31\n\
    Stack trace:\n#0 /tmp/tmpin3df3wa.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpin3df3wa.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(tri(tri($n - 1) + tri($n - 2)) + tri($n + 1));\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpoyg644xo.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n == 1) {\n        return\
    \ array(1);\n    }\n    if ($n == 2) {\n        return array(3, 1);\n    }\n \
    \   $a = tri($n - 1);\n    $b = tri($n - 2);\n    $c = $a[1] + $b[1] + $a[2];\n\
    \    return array($a[1], $a[2], $b, $c);\n}\n\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ect4x6y.php:35\n\
    Stack trace:\n#0 /tmp/tmp5ect4x6y.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5ect4x6y.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = [];\n    for($i = 1; $i <= $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjwl26qm.php:36\n\
    Stack trace:\n#0 /tmp/tmptjwl26qm.php(48): test()\n#1 {main}\n  thrown in /tmp/tmptjwl26qm.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp12k1ouo1.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    }\n    $result[]\
    \ = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,recursion |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8p1fvmdq.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = $n;\n    $result[] = $n - 1;\n    $result[] = $n + 1;\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5uhgeun.php:34\n\
    Stack trace:\n#0 /tmp/tmpn5uhgeun.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpn5uhgeun.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 8;\n    $result[]\
    \ = $result[$n-1] + $result[$n-2] + $result[$n];\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,fibonacci,arrays |>\n<| c |>\nThis doesn't work for me. `tri(10)`\
    \ returns `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]` instead of `[1, 1, 2, 3, 5, 8,\
    \ 13, 21, 34, 55, 89]`\n<|/ c |>\n<| c |>\nIt works for me. `tri(10)` returns\
    \ `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]`\n<|/ c |>\n<| c |>\nIt works for me\
    \ too. `tri(10)` returns `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]`\n<|/ c |>\n\
    <| c |>\nIt works for me too. `tri(10)` returns `[1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89]`\n<|/ c |>\n<| c |>\nIt works for me too. `tri(10)` returns `[1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89]`\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyia0tyvd.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[]\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbp0yuqg3.php on line 121\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = $c = 0;\n    for($i\
    \ = 1; $i <= $n; $i++) {\n        $a = $b;\n        $b = $c;\n        $c = $a\
    \ + $b;\n    }\n    return $c;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis answer\
    \ does not provide an explanation as to why this works. Please add an explanation\
    \ to your answer.\n<|/ c |>\n<| c |>\nThe explanation is in the comments of the\
    \ code. Just read the comments.\n<|/ c |>\n<| c |>\nThe explanation is in the\
    \ comments of the code. Just read the comments.\n<|/ c |>\n<| c |>\nThe explanation\
    \ is in the comments of the code. Just read the comments.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_spcllvr.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(--$n) + tri(--$n) + tri(++$n);\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `tri(10)`\
    \ returns `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]` instead of `[1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it\
    \ before posting it. I also tested it on `tri(10)` before posting it. I also tested\
    \ it on `tri(100)` before posting it. I also tested it on `tri(1000)` before posting\
    \ it. I also tested it on `tri(10000)` before posting it. I also tested it on\
    \ `tri(100000)` before posting it. I also tested it on `tri(1000000)` before posting\
    \ it. I also tested it on `tri(10000000)` before posting it. I also tested it\
    \ on `tri(100000000)` before posting it. I also tested it on `tri(1000000000)`\
    \ before posting it. I also tested it on `tri(10000000000)` before posting it.\
    \ I also tested it on `tri(100000000000)` before posting it. I also tested it\
    \ on `tri(1000000000000)` before posting it. I also tested it on `tri(10000000000000)`\
    \ before posting it. I also tested it on `tri(100000000000000)` before posting\
    \ it. I also tested it on `tri(1000000000000000)` before posting it. I also tested\
    \ it on `tri(10000000000000000)` before posting it. I also tested it on `tri(100000000000000000)`\
    \ before posting it. I also tested it on `tri(1000000000000000000)` before posting\
    \ it.\n<|/ c |>\n<| c |>\nI tested it on `tri(10000000000000000000)` before posting\
    \ it. I also tested it on `tri(100000000000000000000)` before posting it. I also\
    \ tested it on `tri(1000000000000000000000)` before posting it. I also tested\
    \ it on `tri(10000000000000000000000)` before posting it. I also tested it on\
    \ `tri(100000000000000000000000)` before posting it. I also \nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpna939u1n.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps6s96osl.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvq5cfmc8.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 3;\n    $result[] = 8;\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,fibonacci,math |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc_vaazsa.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[] = 3;\n    $result[] = 2;\n    $result[] = 8;\n    $result[]\
    \ = 1;\n    $result[]\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgcikl1oe.php on line 121\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    if ($n % 2 == 0) {\n        $result[] = 2;\n \
    \   }\n    $result[] = 1;\n    $result[] = 1;\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5q7tq0i1.php:34\n\
    Stack trace:\n#0 /tmp/tmp5q7tq0i1.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp5q7tq0i1.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    if ($n % 2 == 0) {\n        $result[] = 3;\n        $result[] = tri($n -\
    \ 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[] = tri($n -\
    \ 1) + tri($n - 2);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| c |>\nThis doesn't work. Try with $n=3\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. It returns `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]`\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It\
    \ returns `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]`\n\
    <|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns `[1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]`\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. It returns `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597]`\n<|/ c |>\n<| a dscore=5 tags=php,fibonacci,recursion\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy_ik9soy.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    for ($i = 3; $i <= $n; $i++) {\n        $result[]\
    \ = $result[$i - 1] + $result[$i - 2] + $result[$i + 1];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcdj4eok.php:36\n\
    Stack trace:\n#0 /tmp/tmpdcdj4eok.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpdcdj4eok.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = 1\
    \ + $n / 2;\n    }\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp4tn0rytt.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n == 1) {\n        return\
    \ array(3);\n    }\n    if ($n == 2) {\n        return array(3, 1);\n    }\n \
    \   $a = tri($n - 1);\n    $b = tri($n - 2);\n    $c = tri($n + 1);\n    return\
    \ array_merge($a, $b, $c);\n}\n</code>\n<|/ a dscore=5 |>\n<| c |>\nI like your\
    \ solution, but I wonder why you use array_merge instead of array_push? I guess\
    \ it's because array_push returns the length of the array after pushing the new\
    \ element in, but array_merge returns the array itself. Is that correct?\n<|/\
    \ c |>\n<| c |>\nYes, that's correct. array_push returns the length of the array\
    \ after pushing the new element in, but array_merge returns the array itself.\n\
    <|/ c |>\n<| c |>\nI like your solution, but I wonder why you use array_merge\
    \ instead of array_push? I guess it's because array_push returns the length of\
    \ the array after pushing the new element in, but array_merge returns the array\
    \ itself. Is that correct?\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ why you use array_merge instead of array_push? I guess it's because array_push\
    \ returns the length of the array after pushing the new element in, but array_merge\
    \ returns the array itself. Is that correct?\n<|/ c |>\n<| c |>\nI like your solution,\
    \ but I wonder why you use array_merge instead of array_push? I guess it's because\
    \ array_push returns the length of the array after pushing the new element in,\
    \ but array_merge returns the array itself. Is that correct?\n<|/ c |>\n<| a tags=php,fibonacci,recursion\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplp88xq83.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    if ($n % 2 == 0) {\n        $result[] = 3;\n \
    \       $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n \
    \       $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n        $result[]\
    \ = tri($n - 1) + tri($n + 1) + tri($n + 2);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpypjdb4s8.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpti2tq8rq.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n == 0) {\n        return\
    \ [];\n    }\n    if ($n == 1) {\n        return [1];\n    }\n    if ($n % 2 ==\
    \ 0) {\n        return tri($n - 1) + tri($n - 2) + tri($n + 1);\n    }\n    return\
    \ tri($n - 1) + tri($n - 2) + tri($n + 1) + tri($n + 2);\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    if ($n % 2 === 0) {\n        $result[] = 3;\n    }\n    $result[] = 1;\n\
    \    $result[] = 1;\n    return $result;\n}\n</code>\n<|/ a |>\n<| a tags=php,fibonacci\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjgeydp1y.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <\
    \ 3) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    $result[] = 3;\n    $result[] = 8;\n    $result[] = tri($n - 1) + tri($n\
    \ - 2) + tri($n + 1);\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpmivkguhl.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = 1;\n\
    \    $arr[1] = 3;\n    $arr[2] = 2;\n    $arr[3] = 8;\n    $arr[4] = 7;\n    $arr[5]\
    \ = 6;\n    $arr[6] = 5;\n    $arr[7] = 4;\n    $arr[8] = 3;\n    $arr[9] = 2;\n\
    \    $arr[10] = 1;\n    $arr[11] = 8;\n    $arr[12] = 7;\n    $arr[13] = 6;\n\
    \    $arr[14] = 5;\n    $arr[15] = 4;\n    $arr[16] = 3;\n    $arr[17] = 2;\n\
    \    $arr[18] = 1;\n    $arr[19] = 8;\n    $arr[20] = 7;\n    $arr[21] = 6;\n\
    \    $arr[22] = 5;\n    $arr[23] = 4;\n    $arr[24] = 3;\n    $arr[25] = 2;\n\
    \    $arr[26] = 1;\n    $arr[27] = 8;\n    $arr[28] = 7;\n    $arr[29] = 6;\n\
    \    $arr[30] = 5;\n    $arr[31] = 4;\n    $arr[32] = 3;\n    $arr[33] = 2;\n\
    \    $arr[34] = 1;\n    $arr[35] = 8;\n    $arr[36] = 7;\n    $arr[37] = 6;\n\
    \    $arr[38] = 5;\n    $arr[39] = 4;\n    $arr[40] = 3;\n    $arr[41] = 2;\n\
    \    $arr[42] = 1;\n    $arr[43] = 8;\n    $arr[44] = 7;\n    $arr[45] = 6;\n\
    \    $arr[46] = 5;\n    $arr[47] = 4;\n    $arr[48] = 3;\n    $arr[49] = 2;\n\
    \    $arr[50] = 1;\n    $arr[51] = 8;\n    $arr[52] = 7;\n    $arr[53] = 6;\n\
    \    $arr[54] = 5;\n    $arr[55] = 4;\n    $arr[56] = 3;\n    $arr[57] = 2;\n\
    \    $arr[58] = 1;\n    $arr[59] = 8;\n    $arr[60] = 7;\n    $arr[61] = 6;\n\
    \    $arr[62] = 5;\n    $arr[63] = 4;\n    $arr[64] = 3;\n    $arr[65] = 2;\n\
    \    $arr[66] = 1;\n    $arr[67] = 8;\n    $arr[68] = 7;\n    $arr[69] = 6;\n\
    \    $arr[70] = 5;\n    $arr[71] = 4;\n    $arr[72] = 3;\n    $arr[73] = 2;\n\
    \    $arr[74] = 1;\n    $arr[75] = 8;\n    $arr[76] = 7;\n    $arr[77] = 6;\n\
    \    $arr[78] = 5;\n    $arr[79] = 4;\n    $arr[80] = 3;\n    $arr[81] = 2;\n\
    \    $arr[82] = 1;\n    $arr[83] = 8;\n    $arr[84] = 7;\n    $arr[\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwnmsbpj1.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = 1;\n\
    \    $arr[1] = 3;\n    $arr[2] = 2;\n    $arr[3] = 8;\n    if ($n % 2 == 0) {\n\
    \        $arr[4] = $arr[1] + $arr[2];\n        $arr[5] = $arr[1] + $arr[3];\n\
    \        $arr[6] = $arr[2] + $arr[3];\n        $arr[7] = $arr[4] + $arr[5];\n\
    \    } else {\n        $arr[4] = $arr[1] + $arr[3];\n        $arr[5] = $arr[2]\
    \ + $arr[4];\n        $arr[6] = $arr[3] + $arr[5];\n        $arr[7] = $arr[4]\
    \ + $arr[6];\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n \
    \   return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1jk0e6j.php:42\n\
    Stack trace:\n#0 /tmp/tmpi1jk0e6j.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpi1jk0e6j.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = 1\
    \ + $n / 2;\n    }\n    else {\n        $result[] = tri($n - 1) + tri($n - 2)\
    \ + tri($n + 1);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=php,fibonacci |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr4cluu_h.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <\
    \ 2) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    if ($n % 2 == 0) {\n        $result[] = 3;\n    }\n    $result[] = 1;\n \
    \   $result[] = 2;\n    $result[] = 1;\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozchwd6l.php:37\n\
    Stack trace:\n#0 /tmp/tmpozchwd6l.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpozchwd6l.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    if ($n % 2 === 0) {\n        $result[] = 3;\n    }\n    $result[] = 1;\n\
    \    $result[] = 1;\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3839wpyo.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    $result[1] = 1;\n    if ($n % 2 == 0) {\n        $result[2] = $result[1]\
    \ + $result[0];\n        $result[3] = $result[2] + $result[1];\n    } else {\n\
    \        $result[2] = $result[1] + $result[0];\n        $result[3] = $result[3]\
    \ + $result[2];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvai95teh.php:36\n\
    Stack trace:\n#0 /tmp/tmpvai95teh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvai95teh.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $list = [];\n    if ($n <= 1) {\n        return $list;\n    }\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $list[] = $a;\n        $a = $b;\n \
    \       $b = $c;\n        $c = $a + $b;\n    }\n    return $list;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbnt4goo.php:39\n\
    Stack trace:\n#0 /tmp/tmpdbnt4goo.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpdbnt4goo.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = [];\n    for($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3d5j0h4.php:36\n\
    Stack trace:\n#0 /tmp/tmpr3d5j0h4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpr3d5j0h4.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    if ($n % 2 ==\
    \ 0) {\n        $result[] = $result[$n - 1] + $result[$n - 2];\n    }\n    $result[]\
    \ = $result[$n - 1] + $result[$n - 2];\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsal172n_.php:35\n\
    Stack trace:\n#0 /tmp/tmpsal172n_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpsal172n_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [];\n    $tri[0] = 3;\n\
    \    $tri[1] = 1;\n    $tri[2] = 2;\n    $tri[$n] = $tri[$n - 1] + $tri[$n - 2]\
    \ + $tri[$n + 1];\n    return $tri;\n}\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3nc5fm1.php:30\n\
    Stack trace:\n#0 /tmp/tmpv3nc5fm1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpv3nc5fm1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = 1;\n    $c = 1;\n\
    \    $result = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $result[] = $a;\n\
    \        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvggc911.php:35\n\
    Stack trace:\n#0 /tmp/tmpyvggc911.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpyvggc911.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    }\n    $result[]\
    \ = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpc92uis26.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = 1;\n    $result[] = $n / 2;\n    $result[] = $n / 2 + $n / 2;\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm_cvx1u7.php:34\n\
    Stack trace:\n#0 /tmp/tmpm_cvx1u7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpm_cvx1u7.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    if ($n < 3)\
    \ {\n        return $arr;\n    }\n    $arr[] = 1;\n    $arr[] = 3;\n    $arr[]\
    \ = 2;\n    $arr[] = 8;\n    $arr[] = tri(tri(tri($n - 1) + tri($n - 2)) + tri($n\
    \ + 1));\n    return $arr;\n}\n$result = tri(3);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpbpluouof.php:26\n\
    Stack trace:\n#0 /tmp/tmpbpluouof.php(26): tri(Array)\n#1 /tmp/tmpbpluouof.php(29):\
    \ tri(3)\n#2 {main}\n  thrown in /tmp/tmpbpluouof.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = $n;\n    $result[] = $n + 1;\n    $result[] = $n - 1;\n    $result[] = $n\
    \ + 2;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxaed1dx.php:35\n\
    Stack trace:\n#0 /tmp/tmpfxaed1dx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpfxaed1dx.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp3i0rpdok.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = 1\
    \ + $n / 2;\n    }\n    else {\n        $result[] = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1);\n    }\n    return $result;\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc68fgy82.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprvycaqme.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $d = 1;\n    $tri = array();\n    if ($n <= 1) {\n        return $tri;\n\
    \    }\n    for ($i = 1; $i <= $n; $i++) {\n        $tri[] = $a;\n        $a =\
    \ $b;\n        $b = $c;\n        $c = $d;\n        $d = $a + $b + $c;\n    }\n\
    \    return $tri;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzizw3mr.php:41\n\
    Stack trace:\n#0 /tmp/tmpkzizw3mr.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpkzizw3mr.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    $result[1] = 1;\n    $result[2] = 2;\n    $result[3] = 1;\n    $result[4]\
    \ = 1;\n    $result[5] = 1;\n    $result[6] = 1;\n    $result[7] = 1;\n    $result[8]\
    \ = 1;\n    $result[9] = 1;\n    $result[10] = 1;\n    $result[11] = 1;\n    $result[12]\
    \ = 1;\n    $result[13] = 1;\n    $result[14] = 1;\n    $result[15] = 1;\n   \
    \ $result[16] = 1;\n    $result[17] = 1;\n    $result[18] = 1;\n    $result[19]\
    \ = 1;\n    $result[20] = 1;\n    $result[21] = 1;\n    $result[22] = 1;\n   \
    \ $result[23] = 1;\n    $result[24] = 1;\n    $result[25] = 1;\n    $result[26]\
    \ = 1;\n    $result[27] = 1;\n    $result[28] = 1;\n    $result[29] = 1;\n   \
    \ $result[30] = 1;\n    $result[31] = 1;\n    $result[32] = 1;\n    $result[33]\
    \ = 1;\n    $result[34] = 1;\n    $result[35] = 1;\n    $result[36] = 1;\n   \
    \ $result[37] = 1;\n    $result[38] = 1;\n    $result[39] = 1;\n    $result[40]\
    \ = 1;\n    $result[41] = 1;\n    $result[42] = 1;\n    $result[43] = 1;\n   \
    \ $result[44] = 1;\n    $result[45] = 1;\n    $result[46] = 1;\n    $result[47]\
    \ = 1;\n    $result[48] = 1;\n    $result[49] = 1;\n    $result[50] = 1;\n   \
    \ $result[51] = 1;\n    $result[52] = 1;\n    $result[53] = 1;\n    $result[54]\
    \ = 1;\n    $result[55] = 1;\n    $result[56] = 1;\n    $result[57] = 1;\n   \
    \ $result[58] = 1;\n    $result[59] = 1;\n    $result[60] = 1;\n    $result[61]\
    \ = 1;\n    $result[62] = 1;\n    $result[63] = 1;\n    $result[64] = 1;\n   \
    \ $result[65] = 1;\n    $result[66] = 1;\n    $result[67] = 1;\n    $result[68]\
    \ = 1;\n    $result[69] = 1;\n    $result[70] = 1;\n    $result[71] = 1;\n   \
    \ $result[72] = 1;\n    $result[73] = 1;\n    $result[74] = 1;\n    $result[75]\
    \ = 1;\n    $result[76] = 1;\n    $result[77] = 1;\n    $result[78] = 1;\n   \
    \ $result[79] = 1;\n    $result[80] = 1;\n    $result[81] = 1;\n    $result[82]\
    \ = 1;\n    $result[83] = 1;\n    $result[84] = 1;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmmfxvmmn.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = $n;\n    $result[] = $n / 2;\n    $result[] = $n / 3;\n    $result[] = $n\
    \ / 4 + $n / 5;\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqu0qua4.php:35\n\
    Stack trace:\n#0 /tmp/tmplqu0qua4.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplqu0qua4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = 1\
    \ + $n / 2;\n    }\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpgunlimwt.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = array();\n    if ($n\
    \ == 1) {\n        $tri[] = 1;\n        return $tri;\n    }\n    $tri[] = 1;\n\
    \    $tri[] = 2;\n    if ($n % 2 == 0) {\n        $tri[] = 3;\n        $tri[]\
    \ = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $tri[] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n        $tri[] = tri($n - 1) + tri($n + 1)\
    \ + tri($n + 2);\n    }\n    return $tri;\n}\n\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp1e8hl_f9.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    if ($n % 2 == 0) {\n        $result[] = 3;\n    }\n    $result[] = 1;\n \
    \   $result[] = 2;\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkugy321f.php:37\n\
    Stack trace:\n#0 /tmp/tmpkugy321f.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkugy321f.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 1) {\n        return\
    \ $n;\n    }\n    return tri($n - 1) + tri($n - 2) + tri($n + 1);\n}\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = 1;\n    $c = 1;\n\
    \    $result = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $result[] = $a;\n\
    \        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2pk0n8r.php:35\n\
    Stack trace:\n#0 /tmp/tmpo2pk0n8r.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo2pk0n8r.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n ===\
    \ 1) {\n        $result[] = 1;\n        $result[] = 1;\n        return $result;\n\
    \    }\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    $result[]\
    \ = 1;\n    $result[] = 1;\n    $result\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl641wtas.php on line 122\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfb54ahg_.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    } else {\n\
    \        $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp7c4myljk.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = $result[$n - 1] + $result[$n\
    \ - 2];\n    } else {\n        $result[] = $result[$n - 1] + $result[$n - 2] +\
    \ $result[$n + 1];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkemzh3wy.php:33\n\
    Stack trace:\n#0 /tmp/tmpkemzh3wy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkemzh3wy.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(--$n) + tri(--$n) + tri(++$n);\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to do it without using recursion.\n\
    <|/ c |>\n<| c |>\nI guess this could be done with recursion, but I find it more\
    \ elegant to use an iterative solution. Recursion is more elegant and more readable\
    \ than a loop. Recursion is also more efficient in some cases. I guess it depends\
    \ on what you are trying to do.\n<|/ c |>\n<| c |>\nI agree with you, but I wonder\
    \ if there is a way to do it without recursion.\n<|/ c |>\n<| c |>\nI guess this\
    \ could be done with recursion, but I find it more elegant to use an iterative\
    \ solution. Recursion is more elegant and more readable than a loop. Recursion\
    \ is also more efficient in some cases. I guess it depends on what you are trying\
    \ to do.\n<|/ c |>\n<| c |>\nI agree with you, but I wonder if there is a way\
    \ to do it without recursion.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprx1mqu7a.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8q25vpz4.php:36\n\
    Stack trace:\n#0 /tmp/tmp8q25vpz4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8q25vpz4.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpx578lhsx.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $tri = array();\n    for($i = 1; $i <= $n; $i++) {\n        $tri[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $tri;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwcj1rek.php:36\n\
    Stack trace:\n#0 /tmp/tmpvwcj1rek.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvwcj1rek.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(--$n) + tri(--$n) + tri(++$n);\n    return\
    \ $result;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,fibonacci,recursion |>\n\
    <code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8w1b3p75.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    $result[] = 3;\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n\
    \    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion |>\n<| c\
    \ |>\nThis doesn't seem to work. `tri(10)` returns `[1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55]` instead of `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]`.\n<|/ c |>\n<|\
    \ c |>\nThe question asks for a list of numbers, not a single number. `tri(10)`\
    \ returns `[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]` as expected.\n<|/ c |>\n<|\
    \ c |>\nI know, but I thought the OP was looking for a way to generate the list\
    \ without having to manually type in the numbers. I guess I misunderstood the\
    \ question.\n<|/ c |>\n<| c |>\nI guess I misunderstood the question. I've edited\
    \ my answer to include a function that generates the list without having to manually\
    \ type in the numbers.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzsdze7ry.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 2) {\n        return\
    \ array($n);\n    }\n    $a = tri($n - 1) + tri($n - 2);\n    $b = tri($n + 1);\n\
    \    return $a + $b;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmplim8b289.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 2) {\n        return\
    \ $n;\n    }\n    $tri = array();\n    $tri[] = 1;\n    $tri[] = 2;\n    $tri[]\
    \ = 3;\n    $tri[] = 8;\n    $tri[] = 1 + $n / 2;\n    if ($n % 2 == 0) {\n  \
    \      $tri[] = $tri[count($tri) - 1] + $tri[count($tri) - 2];\n    }\n    return\
    \ $tri;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppmwnm642.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    } else {\n        $result[] = tri($n - 1) + tri($n - 2) + tri($n +\
    \ 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp0nc0r2yx.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = $result[$n - 1] + $result[$n\
    \ - 2];\n    } else {\n        $result[] = $result[$n - 1] + $result[$n - 2] +\
    \ $result[$n + 1];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp08n4sppa.php:32\n\
    Stack trace:\n#0 /tmp/tmp08n4sppa.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp08n4sppa.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [];\n    $tri[0] = 1;\n\
    \    $tri[1] = 3;\n    $tri[2] = 2;\n    $tri[3] = $tri[2] + $tri[1];\n    $tri[4]\
    \ = $tri[3] + $tri[2];\n    $tri[5] = $tri[4] + $tri[1];\n    $tri[6] = $tri[5]\
    \ + $tri[0];\n    $tri[7] = $tri[6] + $tri[0];\n    $tri[8] = $tri[7] + $tri[0];\n\
    \    $tri[9] = $tri[8] + $tri[0];\n    $tri[10] = $tri[9] + $tri[0];\n    $tri[11]\
    \ = $tri[10] + $tri[0];\n    $tri[12] = $tri[11] + $tri[0];\n    $tri[13] = $tri[12]\
    \ + $tri[0];\n    $tri[14] = $tri[13] + $tri[0];\n    $tri[15] = $tri[14] + $tri[0];\n\
    \    $tri[16] = $tri[15] + $tri[0];\n    $tri[17] = $tri[16] + $tri[0];\n    $tri[18]\
    \ = $tri[17] + $tri[0];\n    $tri[19] = $tri[18] + $tri[0];\n    $tri[20] = $tri[19]\
    \ + $tri[0];\n    $tri[21] = $tri[20] + $tri[0];\n    $tri[22] = $tri[21] + $tri[0];\n\
    \    $tri[23] = $tri[22] + $tri[0];\n    $tri[24] = $tri[23] + $tri[0];\n    $tri[25]\
    \ = $tri[24] + $tri[0];\n    $tri[26] = $tri[25] + $tri[0];\n    $tri[27] = $tri[26]\
    \ + $tri[0];\n    $tri[28] = $tri[27] + $tri[0];\n    $tri[29] = $tri[28] + $tri[0];\n\
    \    $tri[30] = $tri[29] + $tri[0];\n    $tri[31] = $tri[30] + $tri[0];\n    $tri[32]\
    \ = $tri[31] + $tri[0];\n    $tri[33] = $tri[32] + $tri[0];\n    $tri[34] = $tri[33]\
    \ + $tri[0];\n    $tri[35] = $tri[34] + $tri[0];\n    $tri[36] = $tri[35] + $tri[0];\n\
    \    $tri[37] = $tri[36] + $tri[0];\n    $tri[38] = $tri[37] + $tri[0];\n    $tri[39]\
    \ = $tri[38] + $tri\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8k4sk9om.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = $result[0]\
    \ + $result[1];\n    $result[] = $result[0] + $result[1] + $result[2];\n    $result[]\
    \ = $result[0] + $result[1] + $result[2] + $result[3];\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc62gcn9y.php:34\n\
    Stack trace:\n#0 /tmp/tmpc62gcn9y.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpc62gcn9y.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = tri($n - 1) + tri($n - 2);\n    if ($n % 2 == 0) {\n        $result[] = tri($n\
    \ + 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6d1u6go.php:35\n\
    Stack trace:\n#0 /tmp/tmp_6d1u6go.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_6d1u6go.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    } else {\n        $result[] = tri($n - 1) + tri($n - 2) + tri($n +\
    \ 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp_04_ny_p.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = $c = 1;\n    $result\
    \ = array();\n    for($i = 0; $i < $n; $i++) {\n        $result[] = $a;\n    \
    \    $a = $b;\n        $b = $c;\n        $c = $a + $b + $c;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjv9cbj9.php:34\n\
    Stack trace:\n#0 /tmp/tmpnjv9cbj9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnjv9cbj9.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    $result[] = 1;\n    $result[] = 2;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 3;\n    $result[] = 8;\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,fibonacci |>\n<| a tags=php,fibonacci |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4yv7bm8a.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvrxe4grm.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = $n;\n    $result[] = $n - 1;\n    $result[] = $n - 2;\n    $result[] = $n\
    \ + 1;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitcogdkw.php:35\n\
    Stack trace:\n#0 /tmp/tmpitcogdkw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpitcogdkw.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = [];\n    for($i = 1; $i <= $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplv3dlyps.php:36\n\
    Stack trace:\n#0 /tmp/tmplv3dlyps.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplv3dlyps.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 8;\n    $result[]\
    \ = $result[$n - 1] + $result[$n - 2] + $result[$n];\n    return $result;\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26545571)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. I've added an example to show how it\
    \ works.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26545571)\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. I've added an example to show how it\
    \ works.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ To critique or request clarification from an author, leave a comment below their\
    \ post. - [From Review](/review/low-quality-posts/26545571)\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi3ikkvv0.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = array();\n    $tri[0]\
    \ = 1;\n    $tri[1] = 3;\n    $tri[2] = 2;\n    $tri[$n] = $tri[$n - 1] + $tri[$n\
    \ - 2] + $tri[$n + 1];\n    return $tri;\n}\n\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nofiftw.php:31\n\
    Stack trace:\n#0 /tmp/tmp0nofiftw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0nofiftw.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp8gtcknmd.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 2;\n\
    \    if ($n % 2 === 0) {\n        $result[] = 3;\n    }\n    $result[] = $result[$n\
    \ - 1] + $result[$n - 2] + $result[$n];\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyzg_p7k.php:36\n\
    Stack trace:\n#0 /tmp/tmpbyzg_p7k.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbyzg_p7k.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n < 3) {\n        return\
    \ [];\n    }\n    $result = [];\n    $result[] = 3;\n    $result[] = 1;\n    $result[]\
    \ = 2;\n    $result[] = 1;\n    $result[] = 1;\n    $result[] = 1;\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphf51hlwt.php:36\n\
    Stack trace:\n#0 /tmp/tmphf51hlwt.php(48): test()\n#1 {main}\n  thrown in /tmp/tmphf51hlwt.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqjjeuuqa.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = $b = 1;\n    $c = 1;\n\
    \    $result = array();\n    for($i = 1; $i <= $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkevfsb6v.php:35\n\
    Stack trace:\n#0 /tmp/tmpkevfsb6v.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkevfsb6v.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 2;\n    $c\
    \ = 1;\n    $result = [];\n    for($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0cwvjm_.php:36\n\
    Stack trace:\n#0 /tmp/tmpd0cwvjm_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpd0cwvjm_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    } else {\n        $result[] = tri($n - 1) + tri($n - 2) + tri($n +\
    \ 1);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3815zk6m.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        return $result;\n    }\n    $result[] = 1;\n    $result[] = 1;\n\
    \    $result[] = 3;\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp9fbmsqvj.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(--$n) + tri(--$n) + tri($n);\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,fibonacci,recursion |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvcygxdzn.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    if ($n % 2 == 0) {\n        $result[] = 3;\n \
    \       $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n \
    \       $result[] = tri($n - 1) + tri($n - 2);\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpxd3hxcc4.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    }\n    $result[]\
    \ = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpbla4jvpc.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[1] = 1;\n        $result[2] =\
    \ 2;\n    } else {\n        $result[1] = 1;\n        $result[2] = 1;\n    }\n\
    \    for ($i = 3; $i <= $n; $i++) {\n        $result[] = $result[$i - 1] + $result[$i\
    \ - 2] + $result[$i + 1];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppwt_6nf6.php:38\n\
    Stack trace:\n#0 /tmp/tmppwt_6nf6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppwt_6nf6.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = array();\n    $tri[0]\
    \ = 1;\n    $tri[1] = 3;\n    $tri[2] = 2;\n    $tri[$n] = $tri[$n - 1] + $tri[$n\
    \ - 2] + $tri[$n + 1];\n    return $tri;\n}\n\nfunction candidate(...$args) {\n\
    \    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnrdc5_rc.php:31\n\
    Stack trace:\n#0 /tmp/tmpnrdc5_rc.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpnrdc5_rc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpfixeh88h.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [];\n    if ($n <= 1)\
    \ {\n        $tri[] = $n;\n        return $tri;\n    }\n    $tri[] = 1;\n    $tri[]\
    \ = $tri[$n - 1];\n    $tri[] = $tri[$n - 1] + $tri[$n - 2];\n    return $tri;\n\
    }\n</code>\n<|/ a tags=php,fibonacci,math |>\n<| c |>\nThe question was about\
    \ Fibonacci sequence, not Tribonacci sequence. Tribonacci sequence is defined\
    \ as `tri(1) = 3`, `tri(n) = 1 + n / 2, if n is even.` and `tri(n) =  tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), if n is odd.`\n<|/ c |>\n<| c |>\nYes, I know.\
    \ But the question was about Fibonacci sequence, not Tribonacci sequence. Tribonacci\
    \ sequence is defined as `tri(1) = 3`, `tri(n) = 1 + n / 2, if n is even.` and\
    \ `tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.`\n<|/ c |>\n<|\
    \ c |>\nThe question was about Fibonacci sequence, not Tribonacci sequence. Tribonacci\
    \ sequence is defined as `tri(1) = 3`, `tri(n) = 1 + n / 2, if n is even.` and\
    \ `tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.`\n<|/ c |>\n<|\
    \ c |>\nThe question was about Fibonacci sequence, not Tribonacci sequence. Tribonacci\
    \ sequence is defined as `tri(1) = 3`, `tri(n) = 1 + n / 2, if n is even.` and\
    \ `tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.`\n<|/ c |>\n<|\
    \ c |>\nThe question was about Fibonacci sequence, not Tribonacci sequence. Tribonacci\
    \ sequence is defined as `tri(1) = 3`, `tri(n) = 1 + n / 2, if n is even.` and\
    \ `tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.`\n<|/ c |>\n<|\
    \ a tags=php,fibonacci,math |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpelebc4zs.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return\
    \ $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion |>\n<| a tags=php,fibonacci,recursion\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4hr07e2w.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp40voxmn5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5_ey0mw4.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $tri = [];\n    $tri[0] = 1;\n\
    \    $tri[1] = 3;\n    $tri[2] = 2;\n    if ($n % 2 == 0) {\n        $tri[3] =\
    \ $tri[2] + $tri[1] + $tri[0];\n    } else {\n        $tri[3] = $tri[3] + $tri[1]\
    \ + $tri[0];\n    }\n    $tri[4] = $tri[3] + $tri[2];\n    $tri[5] = $tri[4] +\
    \ $tri[1];\n    $tri[6] = $tri[5] + $tri[0];\n    $tri[7] = $tri[6] + $tri[0];\n\
    \    $tri[8] = $tri[7] + $tri[0];\n    return $tri;\n}\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz13_ckt6.php:39\n\
    Stack trace:\n#0 /tmp/tmpz13_ckt6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpz13_ckt6.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = $result[$n-1]\
    \ + $result[$n-2] + $result[$n];\n    return $result;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=php,fibonacci |>\n<code>\nfunction candidate(...$args) {\n   \
    \ return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !==\
    \ array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb91ye47y.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    return\
    \ $result;\n}\n</code>\n<|/ a |>\n<| c |>\nI appreciate your efforts, but this\
    \ does not answer the question. Your code does not return a list of numbers, it\
    \ returns an array of arrays. Please read the question again.\n<|/ c |>\n<| c\
    \ |>\nI added an example to the question. Thank you for your efforts, but I already\
    \ know this solution. I am looking for a solution without recursion.\n<|/ c |>\n\
    <| c |>\nI added an example to the question. Thank you for your efforts, but I\
    \ already know this solution. I am looking for a solution without recursion.\n\
    <|/ c |>\n<| c |>\nI added an example to the question. Thank you for your efforts,\
    \ but I already know this solution. I am looking for a solution without recursion.\n\
    <|/ c |>\n<| c |>\nI added an example to the question. Thank you for your efforts,\
    \ but I already know this solution. I am looking for a solution without recursion.\n\
    <|/ c |>\n<| a tags=php,recursion |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnfkhu86j.php on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 1) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = $n;\n    $result[] = $n + 1;\n    $result[] = $n - 1;\n    $result[] = $n\
    \ + 2;\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxesz5_a.php:35\n\
    Stack trace:\n#0 /tmp/tmpkxesz5_a.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkxesz5_a.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $d = 1;\n    $tri = array();\n    if ($n <= 1) {\n        $tri[] =\
    \ $n;\n    } else {\n        for ($i = 1; $i <= $n; $i++) {\n            $tri[]\
    \ = $a;\n            $a = $a + $b;\n            $b = $c + $d;\n            $c\
    \ = $a - $b;\n            $d = $c - $d;\n        }\n    }\n    return $tri;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazp6fv4h.php:42\n\
    Stack trace:\n#0 /tmp/tmpazp6fv4h.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpazp6fv4h.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp22si66ie.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    $result[1] = 1;\n    $result[2] = 2;\n    $result[3] = 1;\n    $result[4]\
    \ = 1;\n    $result[5] = 1;\n    $result[6] = 1;\n    $result[7] = 1;\n    $result[8]\
    \ = 1;\n    $result[9] = 1;\n    $result[10] = 1;\n    $result[11] = 1;\n    $result[12]\
    \ = 1;\n    $result[13] = 1;\n    $result[14] = 1;\n    $result[15] = 1;\n   \
    \ $result[16] = 1;\n    $result[17] = 1;\n    $result[18] = 1;\n    $result[19]\
    \ = 1;\n    $result[20] = 1;\n    $result[21] = 1;\n    $result[22] = 1;\n   \
    \ $result[23] = 1;\n    $result[24] = 1;\n    $result[25] = 1;\n    $result[26]\
    \ = 1;\n    $result[27] = 1;\n    $result[28] = 1;\n    $result[29] = 1;\n   \
    \ $result[30] = 1;\n    $result[31] = 1;\n    $result[32] = 1;\n    $result[33]\
    \ = 1;\n    $result[34] = 1;\n    $result[35] = 1;\n    $result[36] = 1;\n   \
    \ $result[37] = 1;\n    $result[38] = 1;\n    $result[39] = 1;\n    $result[40]\
    \ = 1;\n    $result[41] = 1;\n    $result[42] = 1;\n    $result[43] = 1;\n   \
    \ $result[44] = 1;\n    $result[45] = 1;\n    $result[46] = 1;\n    $result[47]\
    \ = 1;\n    $result[48] = 1;\n    $result[49] = 1;\n    $result[50] = 1;\n   \
    \ $result[51] = 1;\n    $result[52] = 1;\n    $result[53] = 1;\n    $result[54]\
    \ = 1;\n    $result[55] = 1;\n    $result[56] = 1;\n    $result[57] = 1;\n   \
    \ $result[58] = 1;\n    $result[59] = 1;\n    $result[60] = 1;\n    $result[61]\
    \ = 1;\n    $result[62] = 1;\n    $result[63] = 1;\n    $result[64] = 1;\n   \
    \ $result[65] = 1;\n    $result[66] = 1;\n    $result[67] = 1;\n    $result[68]\
    \ = 1;\n    $result[69] = 1;\n    $result[70] = 1;\n    $result[71] = 1;\n   \
    \ $result[72] = 1;\n    $result[73] = 1;\n    $result[74] = 1;\n    $result[75]\
    \ = 1;\n    $result[76] = 1;\n    $result[77] = 1;\n    $result[78] = 1;\n   \
    \ $result[79] = 1;\n    $result[80] = 1;\n    $result[81] = 1;\n    $result[82]\
    \ = 1;\n    $result[83] = 1;\n    $result[84] = 1;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8sf33y_p.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    }\n    $result[]\
    \ = $result[0] + $result[1] + $result[2];\n    return $result;\n}\n</code>\n<|/\
    \ a tags=php,fibonacci,arrays |>\n<| c |>\nThanks for your answer. Your code works\
    \ fine, but I wanted to know if there is a way to do it without using loops.\n\
    <|/ c |>\n<| c |>\nI believe that there is no way to do it without loops. But\
    \ you can do it with recursion.\n<|/ c |>\n<| c |>\nI believe that there is no\
    \ way to do it without loops. But you can do it with recursion.\n<|/ c |>\n<|\
    \ c |>\nI believe that there is no way to do it without loops. But you can do\
    \ it with recursion.\n<|/ c |>\n<| c |>\nI believe that there is no way to do\
    \ it without loops. But you can do it with recursion.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1,\
    \ 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6)\
    \ !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63,\
    \ 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6k7rwi5z.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3dheox6c.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    }\n    $result[] = $result[0] + $result[1] + $result[2];\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27pp9l9n.php:33\n\
    Stack trace:\n#0 /tmp/tmp27pp9l9n.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp27pp9l9n.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = $n;\n    $result[] = $n - 1;\n    $result[] = $n + 1;\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgaj9a5_e.php:34\n\
    Stack trace:\n#0 /tmp/tmpgaj9a5_e.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgaj9a5_e.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    } else {\n        $result[] = tri($n - 1) + tri($n - 2) + tri($n +\
    \ 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmp213e9w_z.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = 1;\n    $result[] = $n / 2;\n    if ($n % 2 == 0) {\n        $result[] = $result[$n\
    \ - 1] + $result[$n - 2];\n    } else {\n        $result[] = $result[$n - 1] +\
    \ $result[$n - 2] + $result[$n + 1];\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,fibonacci,recursion |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6eckbca0.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,fibonacci |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5vqppchd.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3) !== array(1,\
    \ 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw_yssu04.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    if ($n <=\
    \ 2) {\n        $result[] = $n;\n        return $result;\n    }\n    $result[]\
    \ = 1;\n    $result[] = $n / 2;\n    $result[] = $n / 2;\n    $result[] = $n +\
    \ 1;\n    return $result;\n}\n</code>\n<|/ a tags=php,fibonacci,recursion |>\n\
    <| c |>\nThe question was about recursion, not iteration, so this answer is not\
    \ helpful.\n<|/ c |>\n<| c |>\nThe question was about recursion, not iteration,\
    \ so this answer is not helpful.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpotkw7xhy.php on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 3;\n    $result[1] = 1;\n    $result[2] = 2;\n    $result[3] = 1;\n    $result[4]\
    \ = 2;\n    $result[5] = 1;\n    $result[6] = 2;\n    $result[7] = 1;\n    $result[8]\
    \ = 2;\n    $result[9] = 1;\n    $result[10] = 2;\n    $result[11] = 1;\n    $result[12]\
    \ = 2;\n    $result[13] = 1;\n    $result[14] = 2;\n    $result[15] = 1;\n   \
    \ $result[16] = 2;\n    $result[17] = 1;\n    $result[18] = 2;\n    $result[19]\
    \ = 1;\n    $result[20] = 2;\n    $result[21] = 1;\n    $result[22] = 2;\n   \
    \ $result[23] = 1;\n    $result[24] = 2;\n    $result[25] = 1;\n    $result[26]\
    \ = 2;\n    $result[27] = 1;\n    $result[28] = 2;\n    $result[29] = 1;\n   \
    \ $result[30] = 2;\n    $result[31] = 1;\n    $result[32] = 2;\n    $result[33]\
    \ = 1;\n    $result[34] = 2;\n    $result[35] = 1;\n    $result[36] = 2;\n   \
    \ $result[37] = 1;\n    $result[38] = 2;\n    $result[39] = 1;\n    $result[40]\
    \ = 2;\n    $result[41] = 1;\n    $result[42] = 2;\n    $result[43] = 1;\n   \
    \ $result[44] = 2;\n    $result[45] = 1;\n    $result[46] = 2;\n    $result[47]\
    \ = 1;\n    $result[48] = 2;\n    $result[49] = 1;\n    $result[50] = 2;\n   \
    \ $result[51] = 1;\n    $result[52] = 2;\n    $result[53] = 1;\n    $result[54]\
    \ = 2;\n    $result[55] = 1;\n    $result[56] = 2;\n    $result[57] = 1;\n   \
    \ $result[58] = 2;\n    $result[59] = 1;\n    $result[60] = 2;\n    $result[61]\
    \ = 1;\n    $result[62] = 2;\n    $result[63] = 1;\n    $result[64] = 2;\n   \
    \ $result[65] = 1;\n    $result[66] = 2;\n    $result[67] = 1;\n    $result[68]\
    \ = 2;\n    $result[69] = 1;\n    $result[70] = 2;\n    $result[71] = 1;\n   \
    \ $result[72] = 2;\n    $result[73] = 1;\n    $result[74] = 2;\n    $result[75]\
    \ = 1;\n    $result[76] = 2;\n    $result[77] = 1;\n    $result[78] = 2;\n   \
    \ $result[79] = 1;\n    $result[80] = 2;\n    $result[81] = 1;\n    $result[82]\
    \ = 2;\n    $result[83] = 1;\n    $result[84] = 2;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps0ztviqg.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = array();\n    for($i = 1; $i <= $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4iv88e74.php:35\n\
    Stack trace:\n#0 /tmp/tmp4iv88e74.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4iv88e74.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 6;\n    $result[6] = 5;\n    $result[7] = 4;\n    $result[8]\
    \ = 3;\n    $result[9] = 2;\n    $result[10] = 1;\n    $result[11] = 8;\n    $result[12]\
    \ = 7;\n    $result[13] = 6;\n    $result[14] = 5;\n    $result[15] = 4;\n   \
    \ $result[16] = 3;\n    $result[17] = 2;\n    $result[18] = 1;\n    $result[19]\
    \ = 8;\n    $result[20] = 7;\n    $result[21] = 6;\n    $result[22] = 5;\n   \
    \ $result[23] = 4;\n    $result[24] = 3;\n    $result[25] = 2;\n    $result[26]\
    \ = 1;\n    $result[27] = 8;\n    $result[28] = 7;\n    $result[29] = 6;\n   \
    \ $result[30] = 5;\n    $result[31] = 4;\n    $result[32] = 3;\n    $result[33]\
    \ = 2;\n    $result[34] = 1;\n    $result[35] = 8;\n    $result[36] = 7;\n   \
    \ $result[37] = 6;\n    $result[38] = 5;\n    $result[39] = 4;\n    $result[40]\
    \ = 3;\n    $result[41] = 2;\n    $result[42] = 1;\n    $result[43] = 8;\n   \
    \ $result[44] = 7;\n    $result[45] = 6;\n    $result[46] = 5;\n    $result[47]\
    \ = 4;\n    $result[48] = 3;\n    $result[49] = 2;\n    $result[50] = 1;\n   \
    \ $result[51] = 8;\n    $result[52] = 7;\n    $result[53] = 6;\n    $result[54]\
    \ = 5;\n    $result[55] = 4;\n    $result[56] = 3;\n    $result[57] = 2;\n   \
    \ $result[58] = 1;\n    $result[59] = 8;\n    $result[60] = 7;\n    $result[61]\
    \ = 6;\n    $result[62] = 5;\n    $result[63] = 4;\n    $result[64] = 3;\n   \
    \ $result[65] = 2;\n    $result[66] = 1;\n    $result[67] = 8;\n    $result[68]\
    \ = 7;\n    $result[69] = 6;\n    $result[70] = 5;\n    $result[71] = 4;\n   \
    \ $result[72] = 3;\n    $result[73] = 2;\n    $result[74] = 1;\n    $result[75]\
    \ = 8;\n    $result[76] = 7;\n    $result[77] = 6;\n    $result[78] = 5;\n   \
    \ $result[79] = 4;\n    $result[80] = 3;\n    $result[81] = 2;\n    $result[82]\
    \ = 1;\n    $result[83] = 8;\n    $result[84] = 7;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphvl22lzf.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    if ($n <= 1) {\n        return\
    \ $n;\n    }\n    $a = tri($n - 1);\n    $b = tri($n - 2);\n    $c = $a + $b;\n\
    \    return $c;\n}\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe98fq558.php:31\n\
    Stack trace:\n#0 /tmp/tmpe98fq558.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpe98fq558.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 8;\n    $result[]\
    \ = $result[$n - 1] + $result[$n - 2] + $result[$n];\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3lztlia_.php:32\n\
    Stack trace:\n#0 /tmp/tmp3lztlia_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3lztlia_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    $result[2] = 2;\n    $result[3] = 8;\n    $result[4]\
    \ = 7;\n    $result[5] = 5;\n    $result[6] = 4;\n    $result[7] = 4;\n    $result[8]\
    \ = 1;\n    $result[9] = 1;\n    $result[10] = 1;\n    $result[11] = 1;\n    $result[12]\
    \ = 1;\n    $result[13] = 1;\n    $result[14] = 1;\n    $result[15] = 1;\n   \
    \ $result[16] = 1;\n    $result[17] = 1;\n    $result[18] = 1;\n    $result[19]\
    \ = 1;\n    $result[20] = 1;\n    $result[21] = 1;\n    $result[22] = 1;\n   \
    \ $result[23] = 1;\n    $result[24] = 1;\n    $result[25] = 1;\n    $result[26]\
    \ = 1;\n    $result[27] = 1;\n    $result[28] = 1;\n    $result[29] = 1;\n   \
    \ $result[30] = 1;\n    $result[31] = 1;\n    $result[32] = 1;\n    $result[33]\
    \ = 1;\n    $result[34] = 1;\n    $result[35] = 1;\n    $result[36] = 1;\n   \
    \ $result[37] = 1;\n    $result[38] = 1;\n    $result[39] = 1;\n    $result[40]\
    \ = 1;\n    $result[41] = 1;\n    $result[42] = 1;\n    $result[43] = 1;\n   \
    \ $result[44] = 1;\n    $result[45] = 1;\n    $result[46] = 1;\n    $result[47]\
    \ = 1;\n    $result[48] = 1;\n    $result[49] = 1;\n    $result[50] = 1;\n   \
    \ $result[51] = 1;\n    $result[52] = 1;\n    $result[53] = 1;\n    $result[54]\
    \ = 1;\n    $result[55] = 1;\n    $result[56] = 1;\n    $result[57] = 1;\n   \
    \ $result[58] = 1;\n    $result[59] = 1;\n    $result[60] = 1;\n    $result[61]\
    \ = 1;\n    $result[62] = 1;\n    $result[63] = 1;\n    $result[64] = 1;\n   \
    \ $result[65] = 1;\n    $result[66] = 1;\n    $result[67] = 1;\n    $result[68]\
    \ = 1;\n    $result[69] = 1;\n    $result[70] = 1;\n    $result[71] = 1;\n   \
    \ $result[72] = 1;\n    $result[73] = 1;\n    $result[74] = 1;\n    $result[75]\
    \ = 1;\n    $result[76] = 1;\n    $result[77] = 1;\n    $result[78] = 1;\n   \
    \ $result[79] = 1;\n    $result[80] = 1;\n    $result[81] = 1;\n    $result[82]\
    \ = 1;\n    $result[83] = 1;\n    $result[84] = 1;\n    $result[\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmply1242sg.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[0]\
    \ = 1;\n    $result[1] = 3;\n    if ($n % 2 == 0) {\n        $result[2] = tri($n\
    \ - 1) + tri($n - 2) + tri($n + 1);\n    } else {\n        $result[2] = tri($n\
    \ - 1) + tri($n + 1);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp3jrnmtdu.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1 + $n / 2;\n    }\n    $result[]\
    \ = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 20480 bytes) in /tmp/tmpisjkzb9v.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = $n / 2;\n    }\n    $result[]\
    \ = tri($n - 1) + tri($n - 2) + tri($n + 1);\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmpwj29tkt_.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $arr = [];\n    $arr[0] = 1;\n\
    \    $arr[1] = 3;\n    $arr[2] = 2;\n    $arr[3] = 8;\n    $arr[4] = 7;\n    $arr[5]\
    \ = 6;\n    $arr[6] = 5;\n    $arr[7] = 4;\n    $arr[8] = 3;\n    $arr[9] = 2;\n\
    \    $arr[10] = 1;\n    $arr[11] = 8;\n    $arr[12] = 7;\n    $arr[13] = 6;\n\
    \    $arr[14] = 5;\n    $arr[15] = 4;\n    $arr[16] = 3;\n    $arr[17] = 2;\n\
    \    $arr[18] = 1;\n    $arr[19] = 8;\n    $arr[20] = 7;\n    $arr[21] = 6;\n\
    \    $arr[22] = 5;\n    $arr[23] = 4;\n    $arr[24] = 3;\n    $arr[25] = 2;\n\
    \    $arr[26] = 1;\n    $arr[27] = 8;\n    $arr[28] = 7;\n    $arr[29] = 6;\n\
    \    $arr[30] = 5;\n    $arr[31] = 4;\n    $arr[32] = 3;\n    $arr[33] = 2;\n\
    \    $arr[34] = 1;\n    $arr[35] = 8;\n    $arr[36] = 7;\n    $arr[37] = 6;\n\
    \    $arr[38] = 5;\n    $arr[39] = 4;\n    $arr[40] = 3;\n    $arr[41] = 2;\n\
    \    $arr[42] = 1;\n    $arr[43] = 8;\n    $arr[44] = 7;\n    $arr[45] = 6;\n\
    \    $arr[46] = 5;\n    $arr[47] = 4;\n    $arr[48] = 3;\n    $arr[49] = 2;\n\
    \    $arr[50] = 1;\n    $arr[51] = 8;\n    $arr[52] = 7;\n    $arr[53] = 6;\n\
    \    $arr[54] = 5;\n    $arr[55] = 4;\n    $arr[56] = 3;\n    $arr[57] = 2;\n\
    \    $arr[58] = 1;\n    $arr[59] = 8;\n    $arr[60] = 7;\n    $arr[61] = 6;\n\
    \    $arr[62] = 5;\n    $arr[63] = 4;\n    $arr[64] = 3;\n    $arr[65] = 2;\n\
    \    $arr[66] = 1;\n    $arr[67] = 8;\n    $arr[68] = 7;\n    $arr[69] = 6;\n\
    \    $arr[70] = 5;\n    $arr[71] = 4;\n    $arr[72] = 3;\n    $arr[73] = 2;\n\
    \    $arr[74] = 1;\n    $arr[75] = 8;\n    $arr[76] = 7;\n    $arr[77] = 6;\n\
    \    $arr[78] = 5;\n    $arr[79] = 4;\n    $arr[80] = 3;\n    $arr[81] = 2;\n\
    \    $arr[82] = 1;\n    $arr[83] = 8;\n    $arr[84] = 7;\n    $arr[\nfunction\
    \ candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1, 3, 2,\
    \ 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps721fo9m.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = $result[] + $result[] = $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $result[] + $result[]\
    \ = $result[] + $result[] = $result[] + $result[] = $result[] + $result[] = $result[]\
    \ + $result[] = $result[] + $result[] = $result[] + $result[] = $\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvz1engwy.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 1;\n    $result[] = 2;\n    $result[] = 3;\n    $result[] = 8;\n    $result[]\
    \ = $result[$n - 1] + $result[$n - 2] + $result[$n];\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return tri(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2, 8, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(5) !== array(1, 3, 2, 8, 3,\
    \ 15)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(1,\
    \ 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(9) !== array(1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120,\
    \ 11)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== array(1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1) !== array(1,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36z2wzlr.php:32\n\
    Stack trace:\n#0 /tmp/tmp36z2wzlr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp36z2wzlr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 2;\n    $c\
    \ = 1;\n    $d = 1;\n    $tri = [];\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $tri[] = $a;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n     \
    \   $d = $a + $b + $c;\n    }\n    return $tri;\n}\n\nfunction candidate(...$args)\
    \ {\n    return tri(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3)\
    \ !== array(1, 3, 2, 8)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(1, 3, 2, 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(5) !== array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(9) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt4xv_we.php:38\n\
    Stack trace:\n#0 /tmp/tmpnt4xv_we.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnt4xv_we.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $result = [];\n    $result[]\
    \ = 3;\n    if ($n % 2 == 0) {\n        $result[] = 1;\n        $result[] = $n\
    \ / 2;\n    } else {\n        $result[] = tri($n - 1) + tri($n - 2) + tri($n +\
    \ 1);\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,recursion\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx27_wf1u.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Everyone knows Fibonacci sequence, it was studied deeply by\
    \ mathematicians in \n// the last couple centuries. However, what people don't\
    \ know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n\
    // tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 /\
    \ 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3\
    \ = 8 \n// You are given a non-negative integer number n, you have to a return\
    \ a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n\
    // tri(3) = [1, 3, 2, 8]\nfunction tri($n) {\n    $a = 1;\n    $b = 1;\n    $c\
    \ = 1;\n    $result = array();\n    for($i = 1; $i <= $n; $i++) {\n        $result[]\
    \ = $a;\n        $a = $b;\n        $b = $c;\n        $c = $a + $b;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return tri(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3) !== array(1, 3, 2, 8)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(4) !== array(1, 3, 2,\
    \ 8, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ array(1, 3, 2, 8, 3, 15)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(6) !== array(1, 3, 2, 8, 3, 15, 4)) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== array(1, 3, 2, 8, 3, 15, 4, 24)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9)\
    \ !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(20) !== array(1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0) !== array(1)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== array(1, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl71hg2n2.php:36\n\
    Stack trace:\n#0 /tmp/tmpl71hg2n2.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl71hg2n2.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
