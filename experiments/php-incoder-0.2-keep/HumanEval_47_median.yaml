name: HumanEval_47_median
language: php
prompt: "<?php\n// Return median of elements in the list l.\n// >>> median([3, 1,\
  \ 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return median(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(3, 1, 2, 4, 5)) !== 3) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-10, 4, 6, 1000, 10, 20)) !== 8.0) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5)) !== 5) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 5)) !== 5.5)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 1, 3, 9,\
  \ 9, 2, 7)) !== 7) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $l = array_filter($l);\n    if (count($l) == 0) {\n        return\
    \ null;\n    }\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n\
    \ - 1) / 2];\n    }\n    else {\n        return ($l[($n - 1) / 2] + $l[($n - 1)\
    \ / 2 - 1]) / 2;\n    }\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2 ==\
    \ 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 1) / 2 + 1] / 2);\n  }\n  return\
    \ $l[($n - 1) / 2];\n}", "    $l = array_filter($l);\n    if (count($l) == 0)\
    \ {\n        return null;\n    }\n    $n = count($l);\n    if ($n % 2 == 0) {\n\
    \        return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2.0;\n    }\n    return\
    \ $l[($n - 1) / 2];\n}\n", "    $l = array_filter($l);\n    if (count($l) == 0)\
    \ {\n        return null;\n    }\n    $sorted = array_values($l);\n    sort($sorted);\n\
    \    $middle = count($sorted) / 2;\n    if ($middle == 0) {\n        return $sorted[0];\n\
    \    }\n    return ($sorted[$middle - 1] + $sorted[$middle]) / 2;\n}\n", "   \
    \ $l = array_values($l);\n    sort($l);\n    return $l[count($l)/2];\n}\n", " \
    \ $l = array_filter($l);\n  if (count($l) < 2) {\n    return $l[0];\n  }\n  $sorted\
    \ = array_values($l);\n  sort($sorted);\n  $middle = count($sorted) / 2;\n  return\
    \ $sorted[$middle];\n}\n", "    return $l[count($l)/2];\n}\n", "    $l = array_filter($l);\n\
    \    if (count($l) == 0) {\n        return null;\n    }\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n    }\n    else {\n\
    \        return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n}", " \
    \ $l = array_values($l);\n  sort($l);\n  return $l[count($l) / 2 - 1];\n}\n",
  "  $l = array_filter($l);\n  if (count($l) == 0) return null;\n  sort($l);\n  $l\
    \ = array_slice($l, count($l) / 2);\n  return $l[0];\n}", "  $l = array_reverse($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2]; // median =\
    \ (left + right) / 2.0\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n -\
    \ 2) / 2]) / 2.0; // median = (left + right) / 2.0\n  }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n\
    \  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", " \
    \ $l = array_filter($l);\n  if (count($l) == 0) {\n    return 0;\n  }\n  $n =\
    \ count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + $l[($n - 1)\
    \ / 2 + 1];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1])\
    \ / 2;\n  }\n}\n", "    return $l[count($l)/2];\n}\n", "    sort($l);\n    $n\
    \ = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n   \
    \ } else {\n        return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n    }\n\
    }\n", "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2) {\n \
    \       return $l[($n - 1) / 2] + $l[($n - 1) / 2 - 1];\n    }\n    return $l[($n\
    \ - 1) / 2];\n}\n", "    $l = array_filter($l);\n    if (count($l) == 0) {\n \
    \       return null;\n    }\n    $sorted = array_values($l);\n    sort($sorted);\n\
    \    return $sorted[count($sorted) / 2];\n}\n", "  $l = array_filter($l);\n  if\
    \ (count($l) == 0) {\n    return null;\n  }\n  sort($l);\n  $l = array_slice($l,\
    \ count($l) / 2);\n  return $l[0];\n}", "    $l = array_values($l);\n    $n =\
    \ count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n    }\n\
    \    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "    $l = array_filter($l);\n\
    \    return $l[count($l)/2];\n}\n", "    $l = array_values($l);\n    sort($l);\n\
    \    return $l[count($l)/2];\n}\n", "    $l = array_filter($l);\n    if (count($l)\
    \ == 0) return null;\n    $l = array_reverse($l);\n    $l = array_slice($l, 0,\
    \ floor(count($l) / 2));\n    return $l[count($l) / 2 - 1];\n}\n", "    if (count($l)\
    \ == 0) {\n        return null;\n    }\n    $sorted = array_sort($l);\n    return\
    \ $sorted[count($sorted) / 2 - 1];\n}\n", "  if (count($l) % 2 == 0) {\n    return\
    \ $l[count($l) / 2 - 1];\n  }\n  return ($l[count($l) / 2] + $l[count($l) / 2\
    \ - 1]) / 2;\n}", "    $l = array_filter($l);\n    if (count($l) == 0) {\n   \
    \     return null;\n    }\n    $l = array_slice($l, 0, -1);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n", "    if (count($l) % 2 == 0) {\n\
    \        return $l[count($l) / 2 - 1];\n    }\n    return ($l[count($l) / 2] +\
    \ $l[count($l) / 2 - 1]) / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }", "    $l = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n\
    \    }\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1)\
    \ / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n",
  "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n    \
    \    return $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  \
    \  }\n    return $l[($n - 1) / 2];\n}\n", "    $l = array_filter($l);\n    if\
    \ (count($l) == 0) {\n        throw new Exception('Cannot calculate median of\
    \ an empty list');\n    }\n    return $l[count($l) / 2 - 1];\n}\n", "    $l =\
    \ sort($l);\n    return $l[count($l)/2];\n}\n", "    return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n\
    \ + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] - $l[($n - 2) / 2 +\
    \ 1]) / 2;\n  }\n}", "  $l = sort($l);\n  $n = count($l);\n  if ($n % 2) {\n \
    \   return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2]) / 2;\n  }\n}\n", "  if (count($l) % 2 === 0) {\n    return $l[count($l)\
    \ / 2 - 1];\n  }\n  sort($l);\n  return $l[count($l) / 2];\n}", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n\
    \ - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  }\n  return $l[($n - 1) / 2];\n}", " \
    \   $l = array_filter($l);\n    if (count($l) == 0) return null;\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2] + $l[($n - 1) / 2 - 1];\n\
    \    }\n    else {\n        return ($l[($n - 1) / 2] + $l[($n - 1) / 2]) / 2;\n\
    \    }\n}\n", "    $l = array_filter($l);\n    if (count($l) == 0) return null;\n\
    \    $l = array_reverse($l);\n    $l = array_slice($l, count($l) / 2);\n    return\
    \ $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n + 1)\
    \ / 2];\n  }\n  else {\n    return ($l[$n / 2] + $l[($n - 1) / 2) / 2];\n  }\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n -\
    \ 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) /\
    \ 2;\n  }\n}", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return $l[(count($l)/2)-1];\n    } else {\n        return ($l[($n-1)/2]\
    \ + $l[($n)/2]) / 2.0;\n    }\n}\n", "    $l = array_filter($l);\n    $l = array_reverse($l);\n\
    \    $l = array_values($l);\n    $l = array_slice($l, count($l) / 2);\n    return\
    \ $l[0];\n}\n", "    $l = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0)\
    \ {\n        return $l[($n - 1) / 2];\n    } else {\n        return ($l[($n -\
    \ 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n}\n", "    if (count($l) % 2 ===\
    \ 0) {\n        return $l[(count($l) / 2) - 1];\n    }\n    return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n", "  if (count($l) < 1) return null;\n\
    \  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1)\
    \ / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) /\
    \ 2;\n  }\n}", "    $l = array_reverse($l);\n    $n = count($l);\n    if ($n %\
    \ 2) {\n        return $l[$n/2];\n    }\n    return ($l[$n/2] + $l[($n/2)-1])\
    \ / 2;\n}\n", "  $l = sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return\
    \ $l[(count($l) / 2) - 1];\n  }\n  else {\n    return ($l[($n - 1) / 2] - $l[($n\
    \ - 1) / 2]) / 2;\n  }\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n    }\
    \ else {\n        return $l[($n - 1) / 2];\n    }\n}\n", "    $l = sort($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[(count($l) / 2) - 1];\n\
    \    }\n    return ($l[($n - 1) / 2] - $l[($n - 1) / 2]) / 2;\n}\n", "  if (count($l)\
    \ % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n}", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    $l = array_values($l);\n    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "    sort($l);\n    return $l[count($l)/2];\n}", "  $l = sort($l);\n  return\
    \ $l[count($l)/2];\n}\n", "  $l = sort($l);\n  $n = count($l);\n  if ($n % 2)\
    \ {\n    return $l[$n / 2];\n  }\n  else {\n    return ($l[$n / 2] + $l[($n -\
    \ 1) / 2]) / 2;\n  }\n}", "    $l = sort($l);\n    $n = count($l);\n    if ($n\
    \ % 2 == 0) {\n        return $l[(count($l) / 2) - 1];\n    }\n    return ($l[($n\
    \ - 1) / 2] - $l[$n / 2]) / 2;\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    $l = sort($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[(count($l) / 2) - 1];\n    }\n    return\
    \ ($l[($n - 1) / 2] - $l[($n - 1) / 2]) / 2;\n}", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n\
    \ - 1) / 2]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n  }\n}", "    $l\
    \ = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n    }\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n\
    \    }\n    else {\n        return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) /\
    \ 2;\n    }\n}\n", "  $l = sort($l);\n  $n = count($l);\n  if ($n % 2) {\n   \
    \ return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return ($l[($n - 1) / 2]\
    \ - $l[($n - 2) / 2];\n  }\n}\n", "  if (count($l) < 1) return NULL;\n  $sorted\
    \ = array_sort($l);\n  $count = count($sorted);\n  if ($count % 2) return $sorted[($count\
    \ / 2) - 1];\n  else return ($sorted[($count / 2) - 1] + $sorted[$count / 2])\
    \ / 2;\n}\n", "    if (count($l) % 2 === 0) {\n        return $l[count($l) / 2\
    \ - 1];\n    }\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n\
    }\n", "    $l = array_filter($l);\n    if (count($l) == 0) return null;\n    $sorted\
    \ = array_values($l);\n    sort($sorted);\n    return $sorted[count($sorted) /\
    \ 2 - 1];\n}", "    $l = array_filter($l);\n    $l = array_map('intval', $l);\n\
    \    $l = array_filter($l);\n    return $l[count($l) / 2 - 1];\n}\n", "    $l\
    \ = sort($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n    return $l[($n - 1) / 2];\n\
    }\n", "    $l = array_filter($l);\n    return $l[count($l)/2];\n}\n", "  if (count($l)\
    \ % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  else {\n    return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}\n", "  $l = array_reverse($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + $l[($n\
    \ - 2) / 2];\n  }\n  return ($l[($n - 1) / 2] + $l[($n - 2) / 2] + $l[($n - 3)\
    \ / 2]) / 3;\n}", "  $l = array_filter($l);\n  if (count($l) == 0) {\n    return\
    \ 0;\n  }\n  sort($l);\n  return $l[count($l) / 2 - 1];\n}\n", "  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 1) / 2 + 1] / 2);\n\
    \  }\n  return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}\n", "    $l =\
    \ array_values($l);\n    $n = count($l);\n    if ($n % 2 == 0) {\n        return\
    \ ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n    }\n    return $l[($n - 1)\
    \ / 2];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return\
    \ $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1)\
    \ / 2 - 1]) / 2;\n  }\n}\n", "  $l = sort($l);\n  $n = count($l);\n  if ($n %\
    \ 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n -\
    \ 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    sort($l);\n    return $l[count($l)/2];\n\
    }", "  sort($l);\n  return $l[count($l)/2];\n}", "    $l = array_filter($l);\n\
    \    if (count($l) == 0) {\n        return null;\n    }\n    $l = array_reverse($l);\n\
    \    return $l[floor(count($l) / 2)];\n}\n", "    sort($l);\n    return $l[count($l)/2];\n\
    }\n", "    $l = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n\
    \    }\n    $l = array_reverse($l);\n    $l = array_slice($l, 0, count($l) / 2);\n\
    \    return $l[count($l) / 2];\n}\n", "    $l = array_filter($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n    $m = $l[($n -\
    \ 1) / 2];\n    foreach ($l as $i => $x) {\n        if ($x < $m) {\n         \
    \   $m = $x;\n        }\n    }\n    return $m;\n}\n", "    $l = sort($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}", "    $l = array_filter($l);\n\
    \    if (count($l) == 0) {\n        return null;\n    }\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2];\n    }\n    else {\n\
    \        return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n    }\n}\n", "  $l\
    \ = sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[$n/2];\n  }\n\
    \  else {\n    return ($l[$n/2] + $l[($n-1)/2]) / 2.0;\n  }\n}\n", "    sort($l);\n\
    \    return $l[count($l)/2];\n}", "  $l = array_reverse($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n  }\n\
    \  return ($l[($n - 1) / 2] + $l[($n - 2) / 2] + $l[($n - 3) / 2]) / 3;\n}", " \
    \   $l = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n\
    \    }\n    $n = count($l);\n    $m = floor($n / 2);\n    if ($n % 2 == 0) {\n\
    \        return $l[$m];\n    }\n    return ($l[$m] + $l[($m - 1)]);\n}\n", " \
    \ if (count($l) % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  $m = $l[count($l)\
    \ / 2];\n  foreach ($l as $n) {\n    if ($n < $m) {\n      $m = $n;\n    }\n \
    \ }\n  return $m;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n<?php\n\
    $arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$median = array_sum($arr) / count($arr);\n\
    $median = array_sum($arr) / count($arr);\necho $median;", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2];\n  \
    \  }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  sort($l);\n\
    \  return $l[count($l)/2];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n",
  "    $l = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n \
    \   }\n    $l = array_reverse($l);\n    $l = array_slice($l, 0, count($l) / 2);\n\
    \    return $l[count($l) / 2];\n}\n", "    $l = array_reverse($l);\n    $l = array_slice($l,\
    \ 0, count($l) / 2);\n    $l = array_merge($l, array_slice($l, count($l) / 2));\n\
    \    return $l[count($l) / 2];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return ($l[$n-1]\
    \ + $l[$n/2]) / 2.0;\n  } else {\n    return $l[$n/2];\n  }\n}\n", "    $l = array_filter($l);\n\
    \    if (count($l) == 0) {\n        return null;\n    }\n    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 0, -1);\n    return $l[count($l) / 2 - 1];\n}\n", " \
    \   $l = sort($l);\n    return $l[count($l)/2];\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 0, -1);\n    $l = array_filter($l);\n    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 0, -1);\n    return $l[0];\n}\n", "  sort($l);\n  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}", "  if\
    \ (count($l) % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n}", "  $l = sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n\
    \ - 1) / 2]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n  }\n}\n", "  $l\
    \ = array_filter($l);\n  return $l[count($l) / 2 - 1];\n}", "  sort($l);\n  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return ($l[$n-1] + $l[$n/2]) / 2.0;\n\
    \  } else {\n    return $l[$n/2];\n  }\n}\n", "    $l = array_filter($l);\n  \
    \  if (count($l) == 0) {\n        return null;\n    }\n    $sorted = array_values($l);\n\
    \    sort($sorted);\n    $middle = count($sorted) / 2;\n    return $sorted[$middle];\n\
    }", "  sort($l);\n  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 -\
    \ 1]) / 2;\n  }\n}\n", "    sort($l);\n    return $l[count($l)/2];\n}\n", "  if\
    \ (count($l) % 2 == 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  else {\n \
    \   return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2];\n  \
    \  }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "  if (count($l)\
    \ % 2 == 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return\
    \ ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[(count($l) / 2)];\n  }\
    \ else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "  \
    \  return $l[count($l)/2];\n}\n", "    $l = array_filter($l);\n    if (count($l)\
    \ == 0) return null;\n    $n = count($l);\n    $l = array_slice($l, 0, $n / 2);\n\
    \    $l = array_merge($l, array_slice($l, ($n - 1) / 2));\n    return $l[count($l)\
    \ / 2 - 1];\n}\n", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 -\
    \ 1]) / 2;\n  }\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n   \
    \ if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n    $m = $l[($n - 1)\
    \ / 2];\n    foreach ($l as $i => $e) {\n        if ($e < $m) {\n            $m\
    \ = $e;\n        }\n    }\n    return $m;\n}\n", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[$n / 2];\n    }\n \
    \   return ($l[$n / 2] + $l[($n - 1) / 2]) / 2;\n}\n", "  $l = sort($l);\n  $n\
    \ = count($l);\n  if ($n % 2) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] - $l[($n - 2) / 2];\n  }\n}\n", "  $l = array_filter($l);\n\
    \  if (count($l) == 0) return null;\n  sort($l);\n  $n = count($l);\n  if ($n\
    \ % 2 == 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return\
    \ ($l[($n - 1) / 2] - $l[($n - 1) / 2]) / 2;\n  }\n}\n", "  $l = array_filter($l);\n\
    \  if (count($l) == 0) {\n    return 0;\n  }\n  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n  \
    \  return ($l[($n - 1) / 2] - $l[($n - 1) / 2]) / 2;\n  }\n}\n", "  $l = array_filter($l);\n\
    \  if (count($l) == 0) return null;\n  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    $l = array_values($l);\n    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2) / 2];\n}\n", "  $l = sort($l);\n  return $l[count($l)/2];\n\
    }", "    if (count($l) % 2 === 0) {\n        return $l[count($l) / 2 - 1];\n \
    \   }\n    return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n", "  \
    \  $l = array_filter($l);\n    return $l[count($l)/2];\n}", "  $l = sort($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", " \
    \ $l = sort($l);\n  return $l[count($l)/2];\n}\n", "    return $l[count($l)/2];\n\
    }\n", "  $l = array_filter($l);\n  return $l[count($l)/2];\n}\n", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[(count($l) / 2)\
    \ - 1];\n    }\n    return ($l[($n - 1) / 2] - $l[($n - 2) / 2];\n}", "  if (count($l)\
    \ % 2 == 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return\
    \ ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}", "    if (count($l)\
    \ % 2 == 0) {\n        $l = array_reverse($l);\n    }\n    $l = array_slice($l,\
    \ count($l) / 2);\n    return $l[count($l) / 2 - 1];\n}\n", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2]; // median\
    \ = (n-1) / 2\n    }\n    else {\n        return ($l[($n - 1) / 2] + $l[($n -\
    \ 2) / 2]) / 2;\n    }\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}\n", " \
    \ $l = array_filter($l);\n  if (count($l) == 0) {\n    return null;\n  }\n  sort($l);\n\
    \  $l = array_slice($l, count($l) / 2);\n  return $l[0];\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "    sort($l);\n\
    \    return $l[count($l)/2];\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2) {\n        return $l[($n + 1) / 2];\n    } else {\n        return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n    }\n}\n", "    sort($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n + 1) / 2];\n    } else {\n    \
    \    return ($l[($n - 1) / 2] - $l[($n - 2) / 2 + 1]) / 2;\n    }\n}\n", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n + 1) / 2];\n  }\n\
    \  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", " \
    \   $l = array_filter($l);\n    if (count($l) == 0) return null;\n    $l = array_reverse($l);\n\
    \    $l = array_slice($l, count($l) / 2);\n    return $l[0];\n}", "    $l = array_values($l);\n\
    \    sort($l);\n    return $l[count($l)/2];\n}", "  $l = sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2] + ($l[($n - 2) / 2] + $l[($n\
    \ - 1) / 2]) / 2;\n  } else {\n    return $l[($n - 1) / 2];\n  }\n}\n", "  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}", "  if\
    \ (count($l) % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  $mid = count($l)\
    \ / 2;\n  return ($l[$mid - 1] + $l[$mid]) / 2;\n}\n", "  if (count($l) % 2 ===\
    \ 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  else {\n    return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n  }\n}\n", "    $l = array_reverse($l);\n\
    \    $l = array_slice($l, 0, count($l)/2);\n    return $l[count($l)/2];\n}", " \
    \   sort($l);\n    $n = count($l);\n    if ($n % 2) {\n        return $l[($n -\
    \ 1) / 2];\n    }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n\
    </code>\n<|/ a tags=php,median,arrays |>\n<| c |>\nThis doesn't work if there\
    \ are two equal numbers in the array.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ there are two equal numbers in the array.\n<|/ c |>\n<| a dscore=4 |>\n<code>",
  "  $l = array_filter($l);\n  if (count($l) == 0) {\n    return null;\n  }\n  $n\
    \ = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else\
    \ {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", " \
    \ sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[(count($l)\
    \ / 2)];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \  }\n}", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return $l[($n\
    \ + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2])\
    \ / 2;\n  }\n}\n", "  if (count($l) % 2 == 0) {\n    return $l[count($l) / 2 -\
    \ 1];\n  }\n  return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n", " \
    \ $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n - 1) / 2];\n  }\n\
    \  else {\n    $m = $n / 2;\n    $l[0] = $l[$m];\n    $l[$m] = $l[0];\n    return\
    \ $l[($n - 1) / 2];\n  }\n}\n", "    return $l[count($l)/2];\n}\n", "    $l =\
    \ array_filter($l);\n    if (count($l) == 0) {\n        return null;\n    }\n\
    \    $sorted = array_values($l);\n    sort($sorted);\n    return $sorted[(count($sorted)\
    \ - 1) / 2];\n}\n", "  $n = count($l);\n  if ($n % 2 === 0) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2])\
    \ / 2;\n  }\n}", "  $l = sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n\
    \    return $l[(count($l) / 2) - 1];\n  }\n  else {\n    return ($l[($n - 1) /\
    \ 2] - $l[($n - 1) / 2]) / 2;\n  }\n}\n", "  $l = array_filter($l);\n  if (count($l)\
    \ == 0) {\n    return null;\n  }\n  sort($l);\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[$n / 2];\n  }\n  return ($l[$n / 2] + $l[($n - 1) / 2])\
    \ / 2;\n}", "  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1) /\
    \ 2] + ($l[($n - 2) / 2] + $l[($n - 1) / 2]) / 2;\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "    $l = sort($l);\n    return\
    \ $l[count($l)/2];\n}", "    if (count($l) % 2 === 0) {\n        $l = $l[count($l)\
    \ / 2 - 1];\n    }\n    return $l[floor(count($l) / 2)];\n}\n", "    $l = array_filter($l);\n\
    \    $n = count($l);\n    if ($n & 1) {\n        return $l[($n - 1) / 2];\n  \
    \  }\n    $m = $n / 2;\n    $l1 = $l[$m];\n    $l2 = $l[$n - 1];\n    return ($l1\
    \ + $l2) / 2;\n}\n", "  $l = array_filter($l);\n  if (count($l) == 0) return NULL;\n\
    \  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n - 1)\
    \ / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) /\
    \ 2;\n  }\n}\n", "    $l = array_filter($l);\n    $l = array_reverse($l);\n  \
    \  $l = array_slice($l, 0, floor(count($l)/2));\n    return $l[count($l)-1];\n\
    }\n", "  $l = array_filter($l);\n  if (count($l) == 0) {\n    return 0;\n  }\n\
    \  sort($l);\n  return $l[count($l) / 2 - 1];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2 == 0) {\n    return $l[($n\
    \ - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2])\
    \ / 2;\n  }\n}", "    $l = array_filter($l);\n    if (count($l) == 0) {\n    \
    \    return null;\n    }\n    $sorted = array_values($l);\n    sort($sorted);\n\
    \    return $sorted[count($sorted) / 2];\n}\n", "    $l = array_filter($l);\n\
    \    $n = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2] / $n;\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / $n;\n}\n", "  if (count($l)\
    \ % 2 === 0) {\n    return $l[count($l) / 2 - 1];\n  }\n  return ($l[count($l)\
    \ / 2] + $l[count($l) / 2 - 1]) / 2;\n}\n", "  sort($l);\n  return $l[count($l)/2];\n\
    }\n", "    if (count($l) % 2 == 0) {\n        return $l[(count($l) / 2) - 1];\n\
    \    } else {\n        return ($l[count($l) / 2] + $l[count($l) / 2 - 1]) / 2;\n\
    \    }\n}", "    sort($l);\n    return $l[count($l)/2];\n}\n", "    sort($l);\n\
    \    return $l[count($l)/2];\n}", "    $l = array_reverse($l);\n    $n = count($l);\n\
    \    if ($n % 2) {\n        return $l[($n - 1) / 2]; // median = (left + right)\
    \ / 2;\n    } else {\n        return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n\
    \    }\n}\n", "  $l = array_filter($l);\n  if (count($l) % 2 == 0) {\n    return\
    \ $l[count($l) / 2 - 1];\n  }\n  else {\n    return ($l[count($l) / 2] + $l[count($l)\
    \ / 2 - 1]) / 2;\n  }\n}\n", "    $l = array_reverse($l);\n    $n = count($l);\n\
    \    if ($n % 2 == 0) {\n        return $l[($n - 1) / 2] + $l[($n - 2) / 2];\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "    $l =\
    \ array_filter($l);\n    if (count($l) == 0) {\n        throw new Exception('Cannot\
    \ calculate median of an empty list');\n    }\n    $l = array_values($l);\n  \
    \  $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[($n - 1) / 2] +\
    \ $l[($n - 1) / 2 + 1]) / 2.0;\n    }\n    return ($l[($n - 1) / 2] + $l[($n -\
    \ 1) / 2 - 1]) / 2.0;\n}\n", "    return $l[count($l)/2];\n}", "    sort($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return $l[($n + 1) / 2];\n\
    \    }\n    return ($l[($n - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n}", "    $l\
    \ = array_filter($l);\n    if (count($l) == 0) {\n        return null;\n    }\n\
    \    $sorted = array_values($l);\n    sort($sorted);\n    return $sorted[count($sorted)\
    \ / 2 - 1];\n}\n", "  sort($l);\n  $n = count($l);\n  if ($n % 2) {\n    return\
    \ $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1) / 2] + $l[($n - 1)\
    \ / 2 - 1]) / 2;\n  }\n}\n", "    $l = array_filter($l);\n    if (count($l) ==\
    \ 0) {\n        return null;\n    }\n    $sorted = array_values($l);\n    sort($sorted);\n\
    \    return $sorted[count($sorted) / 2];\n}\n", "  $l = array_filter($l);\n  if\
    \ (count($l) == 0) return null;\n  sort($l);\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[($n + 1) / 2];\n  }\n  else {\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    $l = array_filter($l);\n    return\
    \ $l[count($l)/2];\n}\n", "  sort($l);\n  return $l[count($l)/2];\n}", "    sort($l);\n\
    \    return $l[count($l)/2];\n}\n", "    $l = sort($l);\n    return $l[count($l)/2];\n\
    }", "  if (count($l) == 0) return null;\n  sort($l);\n  $n = count($l);\n  if\
    \ ($n % 2 == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}\n", "  sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 == 0) {\n    return $l[(count($l) / 2) - 1];\n  }\n  else {\n  \
    \  return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}", "    $l = array_reverse($l);\n\
    \    $n = count($l);\n    if ($n % 2 == 0) {\n        return ($l[($n - 1) / 2]\
    \ + $l[($n - 2) / 2]) / 2;\n    }\n    return $l[($n - 1) / 2];\n}", "  sort($l);\n\
    \  $n = count($l);\n  if ($n % 2) {\n    return $l[$n / 2];\n  }\n  else {\n \
    \   return ($l[$n / 2] + $l[($n - 1) / 2]) / 2;\n  }\n}", "  $l = array_filter($l);\n\
    \  if (count($l) == 0) {\n    return 0;\n  }\n  $n = count($l);\n  if ($n % 2\
    \ == 0) {\n    return $l[($n - 1) / 2];\n  }\n  else {\n    return ($l[($n - 1)\
    \ / 2] + $l[($n - 1) / 2 - 1]) / 2;\n  }\n}", "  $l = sort($l);\n  $n = count($l);\n\
    \  if ($n % 2 === 0) {\n    return $l[(count($l) - 1) / 2];\n  }\n  else {\n \
    \   return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n  }\n}\n", "  sort($l);\n\
    \  return $l[count($l)/2];\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return $l[($n + 1) / 2];\n    }\n    return ($l[($n\
    \ - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "    $l = array_filter($l);\n    $n\
    \ = count($l);\n    if ($n % 2) {\n        return $l[($n - 1) / 2];\n    }\n \
    \   return ($l[($n - 1) / 2] + $l[($n - 2) / 2]) / 2;\n}\n", "    $l = array_filter($l);\n\
    \    return $l[count($l)/2];\n}\n", "    sort($l);\n    $n = count($l);\n    if\
    \ ($n % 2 == 0) {\n        return $l[(count($l) / 2)];\n    }\n    return ($l[($n\
    \ - 1) / 2] - $l[($n - 2) / 2];\n}\n", "    return $l[count($l)/2];\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
