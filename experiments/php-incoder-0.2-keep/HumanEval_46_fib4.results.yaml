name: HumanEval_46_fib4
language: php
results:
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7a27z9m5.php:27\n\
    Stack trace:\n#0 /tmp/tmp7a27z9m5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7a27z9m5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxrt9i5mh.php:26\n\
    Stack trace:\n#0 /tmp/tmpxrt9i5mh.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxrt9i5mh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7at1ptnr.php:26\n\
    Stack trace:\n#0 /tmp/tmp7at1ptnr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7at1ptnr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3508vxb.php:26\n\
    Stack trace:\n#0 /tmp/tmpp3508vxb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpp3508vxb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpznbztdph.php:33\n\
    Stack trace:\n#0 /tmp/tmpznbztdph.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpznbztdph.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkomjsdbl.php:27\n\
    Stack trace:\n#0 /tmp/tmpkomjsdbl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkomjsdbl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv733fa4d.php:33\n\
    Stack trace:\n#0 /tmp/tmpv733fa4d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpv733fa4d.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpychknh4e.php:34\n\
    Stack trace:\n#0 /tmp/tmpychknh4e.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpychknh4e.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwcl7dbd1.php:29\n\
    Stack trace:\n#0 /tmp/tmpwcl7dbd1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwcl7dbd1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocv98t86.php:27\n\
    Stack trace:\n#0 /tmp/tmpocv98t86.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpocv98t86.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptw5nizza.php:27\n\
    Stack trace:\n#0 /tmp/tmptw5nizza.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptw5nizza.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5t8pf2s.php:34\n\
    Stack trace:\n#0 /tmp/tmpm5t8pf2s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpm5t8pf2s.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppve703mu.php:29\n\
    Stack trace:\n#0 /tmp/tmppve703mu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppve703mu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnwgovoz.php:26\n\
    Stack trace:\n#0 /tmp/tmprnwgovoz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprnwgovoz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp62z16z00.php:26\n\
    Stack trace:\n#0 /tmp/tmp62z16z00.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp62z16z00.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fbv_7ac.php:27\n\
    Stack trace:\n#0 /tmp/tmp9fbv_7ac.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9fbv_7ac.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8rapge4.php:26\n\
    Stack trace:\n#0 /tmp/tmpw8rapge4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpw8rapge4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmf5w135.php:26\n\
    Stack trace:\n#0 /tmp/tmpdmf5w135.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdmf5w135.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8oszdh_n.php:26\n\
    Stack trace:\n#0 /tmp/tmp8oszdh_n.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8oszdh_n.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkbhoc66.php:27\n\
    Stack trace:\n#0 /tmp/tmpwkbhoc66.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwkbhoc66.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3szh7f6d.php:27\n\
    Stack trace:\n#0 /tmp/tmp3szh7f6d.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3szh7f6d.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1pnfawck.php:33\n\
    Stack trace:\n#0 /tmp/tmp1pnfawck.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1pnfawck.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    if ($n === 4) {\n        return 4;\n    }\n    return fib4($n - 1)\
    \ + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfz3xdn8d.php:39\n\
    Stack trace:\n#0 /tmp/tmpfz3xdn8d.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfz3xdn8d.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfn130y5g.php:29\n\
    Stack trace:\n#0 /tmp/tmpfn130y5g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfn130y5g.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuw6zmyed.php:34\n\
    Stack trace:\n#0 /tmp/tmpuw6zmyed.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpuw6zmyed.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4x7ts56x.php:26\n\
    Stack trace:\n#0 /tmp/tmp4x7ts56x.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4x7ts56x.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcxovz6n.php:27\n\
    Stack trace:\n#0 /tmp/tmpdcxovz6n.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdcxovz6n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvktatei.php:29\n\
    Stack trace:\n#0 /tmp/tmpmvktatei.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmvktatei.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dcr0zyz.php:30\n\
    Stack trace:\n#0 /tmp/tmp6dcr0zyz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6dcr0zyz.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppw9wuaq6.php:30\n\
    Stack trace:\n#0 /tmp/tmppw9wuaq6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppw9wuaq6.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpig30ipqr.php:27\n\
    Stack trace:\n#0 /tmp/tmpig30ipqr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpig30ipqr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rhayqvl.php:26\n\
    Stack trace:\n#0 /tmp/tmp0rhayqvl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp0rhayqvl.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi548d70.php:27\n\
    Stack trace:\n#0 /tmp/tmpxi548d70.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxi548d70.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftvxbmat.php:27\n\
    Stack trace:\n#0 /tmp/tmpftvxbmat.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpftvxbmat.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmo4kolug.php:29\n\
    Stack trace:\n#0 /tmp/tmpmo4kolug.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmo4kolug.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjjvlt91.php:34\n\
    Stack trace:\n#0 /tmp/tmpzjjvlt91.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpzjjvlt91.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ap1ahbj.php:29\n\
    Stack trace:\n#0 /tmp/tmp5ap1ahbj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5ap1ahbj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp94mi9974.php:29\n\
    Stack trace:\n#0 /tmp/tmp94mi9974.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp94mi9974.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphy6dhm9u.php:27\n\
    Stack trace:\n#0 /tmp/tmphy6dhm9u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphy6dhm9u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7or1o53.php:27\n\
    Stack trace:\n#0 /tmp/tmpd7or1o53.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd7or1o53.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5a_d5czp.php:30\n\
    Stack trace:\n#0 /tmp/tmp5a_d5czp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5a_d5czp.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ee7viij.php:27\n\
    Stack trace:\n#0 /tmp/tmp6ee7viij.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6ee7viij.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxu58xic6.php:27\n\
    Stack trace:\n#0 /tmp/tmpxu58xic6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxu58xic6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3wmsj0z.php:26\n\
    Stack trace:\n#0 /tmp/tmpv3wmsj0z.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpv3wmsj0z.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzy82rp8r.php:26\n\
    Stack trace:\n#0 /tmp/tmpzy82rp8r.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzy82rp8r.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnzmszd6.php:29\n\
    Stack trace:\n#0 /tmp/tmpfnzmszd6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfnzmszd6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 2) return 0;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp5nruk3.php:26\n\
    Stack trace:\n#0 /tmp/tmpyp5nruk3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyp5nruk3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gg5v48o.php:33\n\
    Stack trace:\n#0 /tmp/tmp0gg5v48o.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0gg5v48o.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1jiou5l6.php:26\n\
    Stack trace:\n#0 /tmp/tmp1jiou5l6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp1jiou5l6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    if ($n === 4) {\n        return 4;\n    }\n    return fib4($n - 1)\
    \ + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3e70ae8.php:38\n\
    Stack trace:\n#0 /tmp/tmpj3e70ae8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpj3e70ae8.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90701s_q.php:27\n\
    Stack trace:\n#0 /tmp/tmp90701s_q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp90701s_q.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp35pnae_i.php:26\n\
    Stack trace:\n#0 /tmp/tmp35pnae_i.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp35pnae_i.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6dlkxa0.php:27\n\
    Stack trace:\n#0 /tmp/tmpo6dlkxa0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo6dlkxa0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf78_roc3.php:26\n\
    Stack trace:\n#0 /tmp/tmpf78_roc3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpf78_roc3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyc185wn.php:27\n\
    Stack trace:\n#0 /tmp/tmpzyc185wn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzyc185wn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7su3g6hc.php:26\n\
    Stack trace:\n#0 /tmp/tmp7su3g6hc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7su3g6hc.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4s8zgi9.php:27\n\
    Stack trace:\n#0 /tmp/tmpe4s8zgi9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe4s8zgi9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpagxtdvs4.php:30\n\
    Stack trace:\n#0 /tmp/tmpagxtdvs4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpagxtdvs4.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8c_g2bi8.php:27\n\
    Stack trace:\n#0 /tmp/tmp8c_g2bi8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8c_g2bi8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wdbxdi9.php:27\n\
    Stack trace:\n#0 /tmp/tmp7wdbxdi9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7wdbxdi9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptu89ynzz.php:34\n\
    Stack trace:\n#0 /tmp/tmptu89ynzz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptu89ynzz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi64qkt11.php:30\n\
    Stack trace:\n#0 /tmp/tmpi64qkt11.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi64qkt11.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8utt757.php:27\n\
    Stack trace:\n#0 /tmp/tmpj8utt757.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpj8utt757.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kszl_ca.php:26\n\
    Stack trace:\n#0 /tmp/tmp6kszl_ca.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6kszl_ca.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocoob1g7.php:27\n\
    Stack trace:\n#0 /tmp/tmpocoob1g7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpocoob1g7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vwr6u81.php:26\n\
    Stack trace:\n#0 /tmp/tmp4vwr6u81.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4vwr6u81.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvfyenty.php:33\n\
    Stack trace:\n#0 /tmp/tmpvvfyenty.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpvvfyenty.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpaujcdf.php:26\n\
    Stack trace:\n#0 /tmp/tmprpaujcdf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprpaujcdf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvlvongx.php:27\n\
    Stack trace:\n#0 /tmp/tmphvlvongx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphvlvongx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgjdm52be.php:27\n\
    Stack trace:\n#0 /tmp/tmpgjdm52be.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgjdm52be.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk1lh6ue.php:27\n\
    Stack trace:\n#0 /tmp/tmpbk1lh6ue.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpbk1lh6ue.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bvqa39k.php:27\n\
    Stack trace:\n#0 /tmp/tmp6bvqa39k.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6bvqa39k.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpageqy4uq.php:29\n\
    Stack trace:\n#0 /tmp/tmpageqy4uq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpageqy4uq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5czwv6v4.php:26\n\
    Stack trace:\n#0 /tmp/tmp5czwv6v4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp5czwv6v4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcvsihzv8.php:27\n\
    Stack trace:\n#0 /tmp/tmpcvsihzv8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcvsihzv8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0dnf005q.php:34\n\
    Stack trace:\n#0 /tmp/tmp0dnf005q.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0dnf005q.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwtztt7i.php:26\n\
    Stack trace:\n#0 /tmp/tmpcwtztt7i.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcwtztt7i.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnd6my68d.php:26\n\
    Stack trace:\n#0 /tmp/tmpnd6my68d.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnd6my68d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpieicwp4z.php:27\n\
    Stack trace:\n#0 /tmp/tmpieicwp4z.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpieicwp4z.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17qs6ybz.php:33\n\
    Stack trace:\n#0 /tmp/tmp17qs6ybz.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp17qs6ybz.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx463tikw.php:27\n\
    Stack trace:\n#0 /tmp/tmpx463tikw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpx463tikw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99gej2bc.php:30\n\
    Stack trace:\n#0 /tmp/tmp99gej2bc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp99gej2bc.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zxjr81j.php:27\n\
    Stack trace:\n#0 /tmp/tmp5zxjr81j.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5zxjr81j.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_wltwrz.php:26\n\
    Stack trace:\n#0 /tmp/tmpu_wltwrz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu_wltwrz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i8a9por.php:27\n\
    Stack trace:\n#0 /tmp/tmp7i8a9por.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7i8a9por.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqoax0pp_.php:30\n\
    Stack trace:\n#0 /tmp/tmpqoax0pp_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqoax0pp_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3fbk8en.php:26\n\
    Stack trace:\n#0 /tmp/tmpy3fbk8en.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpy3fbk8en.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6f8skqxx.php:26\n\
    Stack trace:\n#0 /tmp/tmp6f8skqxx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp6f8skqxx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8aixeaog.php:27\n\
    Stack trace:\n#0 /tmp/tmp8aixeaog.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8aixeaog.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprgt_m452.php:26\n\
    Stack trace:\n#0 /tmp/tmprgt_m452.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprgt_m452.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6yeyd5y2.php:27\n\
    Stack trace:\n#0 /tmp/tmp6yeyd5y2.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6yeyd5y2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsuguuq0.php:29\n\
    Stack trace:\n#0 /tmp/tmpbsuguuq0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpbsuguuq0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7aheruk.php:26\n\
    Stack trace:\n#0 /tmp/tmpn7aheruk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpn7aheruk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjji7e5ck.php:29\n\
    Stack trace:\n#0 /tmp/tmpjji7e5ck.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjji7e5ck.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dwvnwi6.php:27\n\
    Stack trace:\n#0 /tmp/tmp_dwvnwi6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_dwvnwi6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_ocp254.php:26\n\
    Stack trace:\n#0 /tmp/tmpk_ocp254.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk_ocp254.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozwv2bjv.php:27\n\
    Stack trace:\n#0 /tmp/tmpozwv2bjv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpozwv2bjv.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fw560i9.php:27\n\
    Stack trace:\n#0 /tmp/tmp3fw560i9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3fw560i9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusrdxj3x.php:26\n\
    Stack trace:\n#0 /tmp/tmpusrdxj3x.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpusrdxj3x.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_gjea02.php:27\n\
    Stack trace:\n#0 /tmp/tmp1_gjea02.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1_gjea02.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wdpaqqz.php:26\n\
    Stack trace:\n#0 /tmp/tmp3wdpaqqz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3wdpaqqz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxkd8_in.php:27\n\
    Stack trace:\n#0 /tmp/tmpcxkd8_in.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcxkd8_in.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4xvmdyu9.php:27\n\
    Stack trace:\n#0 /tmp/tmp4xvmdyu9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4xvmdyu9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcorj61n5.php:26\n\
    Stack trace:\n#0 /tmp/tmpcorj61n5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcorj61n5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuobmgph6.php:27\n\
    Stack trace:\n#0 /tmp/tmpuobmgph6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpuobmgph6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7e9fwxad.php:26\n\
    Stack trace:\n#0 /tmp/tmp7e9fwxad.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7e9fwxad.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4p7tk86e.php:27\n\
    Stack trace:\n#0 /tmp/tmp4p7tk86e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4p7tk86e.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7dyn6z3.php:27\n\
    Stack trace:\n#0 /tmp/tmpr7dyn6z3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr7dyn6z3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_tc6kh9g.php:30\n\
    Stack trace:\n#0 /tmp/tmp_tc6kh9g.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_tc6kh9g.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3yubz95.php:26\n\
    Stack trace:\n#0 /tmp/tmpk3yubz95.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk3yubz95.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2todeep8.php:27\n\
    Stack trace:\n#0 /tmp/tmp2todeep8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2todeep8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbapf6ny.php:26\n\
    Stack trace:\n#0 /tmp/tmptbapf6ny.php(32): test()\n#1 {main}\n  thrown in /tmp/tmptbapf6ny.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51xdvrop.php:29\n\
    Stack trace:\n#0 /tmp/tmp51xdvrop.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp51xdvrop.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq4r9l9hy.php:26\n\
    Stack trace:\n#0 /tmp/tmpq4r9l9hy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq4r9l9hy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7x4gltyk.php:29\n\
    Stack trace:\n#0 /tmp/tmp7x4gltyk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7x4gltyk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) return 0;\n\
    \    if ($n < 8) return 1;\n    return fib4($n - 4) + fib4($n - 3) + fib4($n -\
    \ 2) + fib4($n - 1);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7brumz7z.php:25\n\
    Stack trace:\n#0 /tmp/tmp7brumz7z.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7brumz7z.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gukpf7f.php:27\n\
    Stack trace:\n#0 /tmp/tmp1gukpf7f.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1gukpf7f.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return 0;\n    }\n    if ($n <=\
    \ 5) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyu3b1812.php:32\n\
    Stack trace:\n#0 /tmp/tmpyu3b1812.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpyu3b1812.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpncaxsk.php:30\n\
    Stack trace:\n#0 /tmp/tmpwpncaxsk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwpncaxsk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kvw75fn.php:27\n\
    Stack trace:\n#0 /tmp/tmp7kvw75fn.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7kvw75fn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgumarv8d.php:30\n\
    Stack trace:\n#0 /tmp/tmpgumarv8d.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgumarv8d.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5hn3vdz.php:30\n\
    Stack trace:\n#0 /tmp/tmpj5hn3vdz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpj5hn3vdz.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6uoos6_p.php:27\n\
    Stack trace:\n#0 /tmp/tmp6uoos6_p.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6uoos6_p.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp213a3suw.php:26\n\
    Stack trace:\n#0 /tmp/tmp213a3suw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp213a3suw.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpz3xdie.php:27\n\
    Stack trace:\n#0 /tmp/tmpnpz3xdie.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnpz3xdie.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9ognzmy.php:27\n\
    Stack trace:\n#0 /tmp/tmpc9ognzmy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpc9ognzmy.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpreq44kf8.php:27\n\
    Stack trace:\n#0 /tmp/tmpreq44kf8.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpreq44kf8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvnztk05i.php:29\n\
    Stack trace:\n#0 /tmp/tmpvnztk05i.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvnztk05i.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4oro0if.php:27\n\
    Stack trace:\n#0 /tmp/tmpv4oro0if.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv4oro0if.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0sr0vyu.php:27\n\
    Stack trace:\n#0 /tmp/tmpi0sr0vyu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi0sr0vyu.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ofoy0ch.php:27\n\
    Stack trace:\n#0 /tmp/tmp6ofoy0ch.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6ofoy0ch.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpapg7lfr9.php:26\n\
    Stack trace:\n#0 /tmp/tmpapg7lfr9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpapg7lfr9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6nngkzom.php:29\n\
    Stack trace:\n#0 /tmp/tmp6nngkzom.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6nngkzom.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 3) return $n;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxzdd3va.php:25\n\
    Stack trace:\n#0 /tmp/tmprxzdd3va.php(31): test()\n#1 {main}\n  thrown in /tmp/tmprxzdd3va.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6meq_6v.php:26\n\
    Stack trace:\n#0 /tmp/tmpo6meq_6v.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpo6meq_6v.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71jpak1o.php:27\n\
    Stack trace:\n#0 /tmp/tmp71jpak1o.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp71jpak1o.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpef42kdfb.php:26\n\
    Stack trace:\n#0 /tmp/tmpef42kdfb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpef42kdfb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0itzwmgu.php:27\n\
    Stack trace:\n#0 /tmp/tmp0itzwmgu.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0itzwmgu.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuaygwsl0.php:29\n\
    Stack trace:\n#0 /tmp/tmpuaygwsl0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuaygwsl0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyrvxdxo.php:27\n\
    Stack trace:\n#0 /tmp/tmpfyrvxdxo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfyrvxdxo.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ris1thh.php:30\n\
    Stack trace:\n#0 /tmp/tmp9ris1thh.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9ris1thh.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcb1crhtd.php:29\n\
    Stack trace:\n#0 /tmp/tmpcb1crhtd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcb1crhtd.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqylaf2gc.php:29\n\
    Stack trace:\n#0 /tmp/tmpqylaf2gc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqylaf2gc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprsbcn_uk.php:26\n\
    Stack trace:\n#0 /tmp/tmprsbcn_uk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprsbcn_uk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnej6l1qj.php:26\n\
    Stack trace:\n#0 /tmp/tmpnej6l1qj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnej6l1qj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy2aqp844.php:27\n\
    Stack trace:\n#0 /tmp/tmpy2aqp844.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpy2aqp844.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 2) return 0;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8wpsivk.php:25\n\
    Stack trace:\n#0 /tmp/tmps8wpsivk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps8wpsivk.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipissm43.php:27\n\
    Stack trace:\n#0 /tmp/tmpipissm43.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpipissm43.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsfjvi66x.php:27\n\
    Stack trace:\n#0 /tmp/tmpsfjvi66x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsfjvi66x.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7n5_7bg.php:29\n\
    Stack trace:\n#0 /tmp/tmpx7n5_7bg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpx7n5_7bg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmt_aus8h.php:34\n\
    Stack trace:\n#0 /tmp/tmpmt_aus8h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpmt_aus8h.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 1) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6k6sq3iy.php:27\n\
    Stack trace:\n#0 /tmp/tmp6k6sq3iy.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6k6sq3iy.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdyuamou6.php:27\n\
    Stack trace:\n#0 /tmp/tmpdyuamou6.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdyuamou6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyh71b7a.php:26\n\
    Stack trace:\n#0 /tmp/tmppyh71b7a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppyh71b7a.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkx44yv2h.php:26\n\
    Stack trace:\n#0 /tmp/tmpkx44yv2h.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkx44yv2h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxctn0b5q.php:26\n\
    Stack trace:\n#0 /tmp/tmpxctn0b5q.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxctn0b5q.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdjw3omir.php:27\n\
    Stack trace:\n#0 /tmp/tmpdjw3omir.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdjw3omir.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwimjp099.php:26\n\
    Stack trace:\n#0 /tmp/tmpwimjp099.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwimjp099.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprdn_wcwm.php:29\n\
    Stack trace:\n#0 /tmp/tmprdn_wcwm.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprdn_wcwm.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ie6_06e.php:27\n\
    Stack trace:\n#0 /tmp/tmp9ie6_06e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9ie6_06e.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw9wsukaw.php:27\n\
    Stack trace:\n#0 /tmp/tmpw9wsukaw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpw9wsukaw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgngjpht7.php:26\n\
    Stack trace:\n#0 /tmp/tmpgngjpht7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpgngjpht7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50nglehx.php:26\n\
    Stack trace:\n#0 /tmp/tmp50nglehx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp50nglehx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2v4a9qw.php:27\n\
    Stack trace:\n#0 /tmp/tmpt2v4a9qw.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt2v4a9qw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpamajlftz.php:29\n\
    Stack trace:\n#0 /tmp/tmpamajlftz.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpamajlftz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxa9p0he.php:27\n\
    Stack trace:\n#0 /tmp/tmppxa9p0he.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppxa9p0he.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpava_72tm.php:27\n\
    Stack trace:\n#0 /tmp/tmpava_72tm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpava_72tm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3iyvxy4a.php:26\n\
    Stack trace:\n#0 /tmp/tmp3iyvxy4a.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3iyvxy4a.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 2) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzco40kls.php:27\n\
    Stack trace:\n#0 /tmp/tmpzco40kls.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzco40kls.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzdeygyg.php:27\n\
    Stack trace:\n#0 /tmp/tmprzdeygyg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprzdeygyg.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 2) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgic8qkkc.php:25\n\
    Stack trace:\n#0 /tmp/tmpgic8qkkc.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpgic8qkkc.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bpkt1tq.php:26\n\
    Stack trace:\n#0 /tmp/tmp2bpkt1tq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp2bpkt1tq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    if ($n <=\
    \ 3) {\n        return 2;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphsp0d5d.php:34\n\
    Stack trace:\n#0 /tmp/tmpphsp0d5d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpphsp0d5d.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6e6fqbi.php:27\n\
    Stack trace:\n#0 /tmp/tmpn6e6fqbi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpn6e6fqbi.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8luvzms.php:29\n\
    Stack trace:\n#0 /tmp/tmpx8luvzms.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpx8luvzms.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10tnf0wb.php:26\n\
    Stack trace:\n#0 /tmp/tmp10tnf0wb.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp10tnf0wb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjqxwtab9.php:29\n\
    Stack trace:\n#0 /tmp/tmpjqxwtab9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjqxwtab9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgo0xliiq.php:27\n\
    Stack trace:\n#0 /tmp/tmpgo0xliiq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgo0xliiq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 1) return 1;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmn3l90rf.php:26\n\
    Stack trace:\n#0 /tmp/tmpmn3l90rf.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmn3l90rf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvkzl809.php:26\n\
    Stack trace:\n#0 /tmp/tmpyvkzl809.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyvkzl809.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaar27wvc.php:29\n\
    Stack trace:\n#0 /tmp/tmpaar27wvc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpaar27wvc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwko1u7ry.php:27\n\
    Stack trace:\n#0 /tmp/tmpwko1u7ry.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwko1u7ry.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdh9ru5q0.php:29\n\
    Stack trace:\n#0 /tmp/tmpdh9ru5q0.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdh9ru5q0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehx4k3ap.php:26\n\
    Stack trace:\n#0 /tmp/tmpehx4k3ap.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpehx4k3ap.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybmnlsh3.php:27\n\
    Stack trace:\n#0 /tmp/tmpybmnlsh3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpybmnlsh3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) return 0;\n\
    \    if ($n <= 1) return 0;\n    return fib4($n - 1) + fib4($n - 2) + fib4($n\
    \ - 3) + fib4($n - 4);\n}\nfunction candidate(...$args) {\n    return fib4(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjodpxuk.php:25\n\
    Stack trace:\n#0 /tmp/tmpbjodpxuk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpbjodpxuk.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeslkkw2t.php:30\n\
    Stack trace:\n#0 /tmp/tmpeslkkw2t.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpeslkkw2t.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n === 0) {\n      \
    \  return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n\
    \ === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n\
    \    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n\
    }\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 3) {\n        return $n;\n    }\n    return\
    \ fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58ypbz6z.php:30\n\
    Stack trace:\n#0 /tmp/tmp58ypbz6z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp58ypbz6z.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyy6ervez.php:27\n\
    Stack trace:\n#0 /tmp/tmpyy6ervez.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyy6ervez.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv1t1ifka.php:27\n\
    Stack trace:\n#0 /tmp/tmpv1t1ifka.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpv1t1ifka.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 4) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp5adx_w.php:27\n\
    Stack trace:\n#0 /tmp/tmpyp5adx_w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyp5adx_w.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 0) {\n       \
    \ return 0;\n    }\n    if ($n <= 2) {\n        return 0;\n    }\n    return fib4($n\
    \ - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n - 4);\n}\n\nfunction candidate(...$args)\
    \ {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5)\
    \ !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !==\
    \ 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsfguxdn.php:30\n\
    Stack trace:\n#0 /tmp/tmphsfguxdn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphsfguxdn.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n <= 3) {\n       \
    \ return $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpju1x693h.php:27\n\
    Stack trace:\n#0 /tmp/tmpju1x693h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpju1x693h.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci\
    \ sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2)\
    \ -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    // Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n\
    // 8\n// >>> fib4(7)\n// 14\nfunction fib4($n) {\n    if ($n < 3) {\n        return\
    \ $n;\n    }\n    return fib4($n - 1) + fib4($n - 2) + fib4($n - 3) + fib4($n\
    \ - 4);\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwrrqbpr.php:27\n\
    Stack trace:\n#0 /tmp/tmpwwrrqbpr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwwrrqbpr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
