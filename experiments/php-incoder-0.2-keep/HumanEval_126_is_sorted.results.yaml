name: HumanEval_126_is_sorted
language: php
results:
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $val) {\n        if ($val != $lst[$key - 1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwbxqmpy3.php:30\n\
    Stack trace:\n#0 /tmp/tmpwbxqmpy3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpwbxqmpy3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ystsj3v.php:32\n\
    Stack trace:\n#0 /tmp/tmp2ystsj3v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2ystsj3v.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item == $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp192wkxwa.php:32\n\
    Stack trace:\n#0 /tmp/tmp192wkxwa.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp192wkxwa.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp40f7mab.php:32\n\
    Stack trace:\n#0 /tmp/tmpp40f7mab.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpp40f7mab.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07pqehkm.php:29\n\
    Stack trace:\n#0 /tmp/tmp07pqehkm.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp07pqehkm.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9wk94u4.php:32\n\
    Stack trace:\n#0 /tmp/tmp_9wk94u4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_9wk94u4.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ge54j6k.php:31\n\
    Stack trace:\n#0 /tmp/tmp7ge54j6k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7ge54j6k.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64gwk8l7.php:29\n\
    Stack trace:\n#0 /tmp/tmp64gwk8l7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp64gwk8l7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdtxk3w_.php:41\n\
    Stack trace:\n#0 /tmp/tmpkdtxk3w_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkdtxk3w_.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2eiie28n.php:30\n\
    Stack trace:\n#0 /tmp/tmp2eiie28n.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2eiie28n.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajzzl9bo.php:29\n\
    Stack trace:\n#0 /tmp/tmpajzzl9bo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpajzzl9bo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcm4uya7s.php:33\n\
    Stack trace:\n#0 /tmp/tmpcm4uya7s.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpcm4uya7s.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6hmgi6u.php:41\n\
    Stack trace:\n#0 /tmp/tmpv6hmgi6u.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpv6hmgi6u.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = null;\n    foreach ($lst as $item) {\n        if ($item == $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_hbc34l.php:34\n\
    Stack trace:\n#0 /tmp/tmpe_hbc34l.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpe_hbc34l.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_5ymdry.php:29\n\
    Stack trace:\n#0 /tmp/tmpp_5ymdry.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp_5ymdry.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsu6yzb6.php:31\n\
    Stack trace:\n#0 /tmp/tmpcsu6yzb6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcsu6yzb6.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zq_d1ky.php:32\n\
    Stack trace:\n#0 /tmp/tmp7zq_d1ky.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7zq_d1ky.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr1af59lu.php:41\n\
    Stack trace:\n#0 /tmp/tmpr1af59lu.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpr1af59lu.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawm9j6oq.php:30\n\
    Stack trace:\n#0 /tmp/tmpawm9j6oq.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpawm9j6oq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $num => $count) {\n        if ($count > 1) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7h63cpyz.php:32\n\
    Stack trace:\n#0 /tmp/tmp7h63cpyz.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7h63cpyz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc5ilk4_z.php:32\n\
    Stack trace:\n#0 /tmp/tmpc5ilk4_z.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpc5ilk4_z.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeomhvv4w.php:33\n\
    Stack trace:\n#0 /tmp/tmpeomhvv4w.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpeomhvv4w.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8_4fm2x.php:32\n\
    Stack trace:\n#0 /tmp/tmpl8_4fm2x.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpl8_4fm2x.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6kw5t147.php:32\n\
    Stack trace:\n#0 /tmp/tmp6kw5t147.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6kw5t147.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxp0eml8i.php:41\n\
    Stack trace:\n#0 /tmp/tmpxp0eml8i.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxp0eml8i.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppn8mv3m5.php:30\n\
    Stack trace:\n#0 /tmp/tmppn8mv3m5.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppn8mv3m5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $number => $count) {\n        if ($count > 1) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_72l9o09.php:32\n\
    Stack trace:\n#0 /tmp/tmp_72l9o09.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_72l9o09.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvz1s02bo.php:32\n\
    Stack trace:\n#0 /tmp/tmpvz1s02bo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvz1s02bo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61nyrd6k.php:32\n\
    Stack trace:\n#0 /tmp/tmp61nyrd6k.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp61nyrd6k.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_711jwp.php:32\n\
    Stack trace:\n#0 /tmp/tmpp_711jwp.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpp_711jwp.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tr541o9.php:41\n\
    Stack trace:\n#0 /tmp/tmp1tr541o9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1tr541o9.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqyhoiq85.php:32\n\
    Stack trace:\n#0 /tmp/tmpqyhoiq85.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqyhoiq85.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjcg6g9th.php:32\n\
    Stack trace:\n#0 /tmp/tmpjcg6g9th.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjcg6g9th.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaf426ck_.php:41\n\
    Stack trace:\n#0 /tmp/tmpaf426ck_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpaf426ck_.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9qfk0j8e.php:32\n\
    Stack trace:\n#0 /tmp/tmp9qfk0j8e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9qfk0j8e.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd49hc4mc.php:32\n\
    Stack trace:\n#0 /tmp/tmpd49hc4mc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpd49hc4mc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjd9y8tc.php:32\n\
    Stack trace:\n#0 /tmp/tmppjd9y8tc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppjd9y8tc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpma73d70k.php:32\n\
    Stack trace:\n#0 /tmp/tmpma73d70k.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpma73d70k.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3spmavu.php:32\n\
    Stack trace:\n#0 /tmp/tmpl3spmavu.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpl3spmavu.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8hw_z_d4.php:40\n\
    Stack trace:\n#0 /tmp/tmp8hw_z_d4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8hw_z_d4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $val) {\n        if ($val != $lst[$key - 1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpog3wttyh.php:29\n\
    Stack trace:\n#0 /tmp/tmpog3wttyh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpog3wttyh.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqco_qnq6.php:32\n\
    Stack trace:\n#0 /tmp/tmpqco_qnq6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqco_qnq6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pekk7df.php:29\n\
    Stack trace:\n#0 /tmp/tmp5pekk7df.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5pekk7df.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zxbiynu.php:29\n\
    Stack trace:\n#0 /tmp/tmp3zxbiynu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3zxbiynu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9w5dmvl6.php:32\n\
    Stack trace:\n#0 /tmp/tmp9w5dmvl6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp9w5dmvl6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujdn6aaq.php:32\n\
    Stack trace:\n#0 /tmp/tmpujdn6aaq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpujdn6aaq.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsa00u2z.php:30\n\
    Stack trace:\n#0 /tmp/tmphsa00u2z.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphsa00u2z.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $last = array_pop($lst);\n\
    \    foreach ($lst as $item) {\n        if ($item == $last) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2fu5klw.php:32\n\
    Stack trace:\n#0 /tmp/tmpw2fu5klw.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpw2fu5klw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key + 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6dewn5qo.php:29\n\
    Stack trace:\n#0 /tmp/tmp6dewn5qo.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6dewn5qo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdff41xu6.php:33\n\
    Stack trace:\n#0 /tmp/tmpdff41xu6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdff41xu6.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphj8v4nhd.php:30\n\
    Stack trace:\n#0 /tmp/tmphj8v4nhd.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphj8v4nhd.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key + 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9dje2dio.php:30\n\
    Stack trace:\n#0 /tmp/tmp9dje2dio.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9dje2dio.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0bbuayv.php:30\n\
    Stack trace:\n#0 /tmp/tmph0bbuayv.php(45): test()\n#1 {main}\n  thrown in /tmp/tmph0bbuayv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6v24pi1d.php:32\n\
    Stack trace:\n#0 /tmp/tmp6v24pi1d.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6v24pi1d.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3korbzl.php:29\n\
    Stack trace:\n#0 /tmp/tmpk3korbzl.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk3korbzl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk61zrjvh.php:32\n\
    Stack trace:\n#0 /tmp/tmpk61zrjvh.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpk61zrjvh.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2q0wdof.php:29\n\
    Stack trace:\n#0 /tmp/tmpz2q0wdof.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpz2q0wdof.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi91ycfi5.php:40\n\
    Stack trace:\n#0 /tmp/tmpi91ycfi5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpi91ycfi5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $val) {\n        if ($val != $lst[$key - 1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bhtrr4d.php:30\n\
    Stack trace:\n#0 /tmp/tmp2bhtrr4d.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2bhtrr4d.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpod88l0a8.php:32\n\
    Stack trace:\n#0 /tmp/tmpod88l0a8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpod88l0a8.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rdr4eh3.php:29\n\
    Stack trace:\n#0 /tmp/tmp3rdr4eh3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3rdr4eh3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9b9rbsle.php:30\n\
    Stack trace:\n#0 /tmp/tmp9b9rbsle.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9b9rbsle.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplo9cbq6n.php:33\n\
    Stack trace:\n#0 /tmp/tmplo9cbq6n.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplo9cbq6n.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxqjdzibc.php:31\n\
    Stack trace:\n#0 /tmp/tmpxqjdzibc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxqjdzibc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1mc61gr_.php:30\n\
    Stack trace:\n#0 /tmp/tmp1mc61gr_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1mc61gr_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvyj_x8iu.php:29\n\
    Stack trace:\n#0 /tmp/tmpvyj_x8iu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpvyj_x8iu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm63c7014.php:32\n\
    Stack trace:\n#0 /tmp/tmpm63c7014.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpm63c7014.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1754nvz.php:32\n\
    Stack trace:\n#0 /tmp/tmpw1754nvz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw1754nvz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyb90mxkw.php:31\n\
    Stack trace:\n#0 /tmp/tmpyb90mxkw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyb90mxkw.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cnh2v0p.php:32\n\
    Stack trace:\n#0 /tmp/tmp7cnh2v0p.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7cnh2v0p.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2twkjog3.php:32\n\
    Stack trace:\n#0 /tmp/tmp2twkjog3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2twkjog3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph0upoo9w.php:32\n\
    Stack trace:\n#0 /tmp/tmph0upoo9w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmph0upoo9w.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaw4anbwc.php:32\n\
    Stack trace:\n#0 /tmp/tmpaw4anbwc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpaw4anbwc.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9ffj8qv.php:40\n\
    Stack trace:\n#0 /tmp/tmpc9ffj8qv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpc9ffj8qv.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf7f86mj.php:29\n\
    Stack trace:\n#0 /tmp/tmpyf7f86mj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpyf7f86mj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjlob0j3s.php:32\n\
    Stack trace:\n#0 /tmp/tmpjlob0j3s.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjlob0j3s.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpok_a_476.php:32\n\
    Stack trace:\n#0 /tmp/tmpok_a_476.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpok_a_476.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $number => $count) {\n        if ($count > 1) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58wpyz26.php:32\n\
    Stack trace:\n#0 /tmp/tmp58wpyz26.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp58wpyz26.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphskwb94z.php:32\n\
    Stack trace:\n#0 /tmp/tmphskwb94z.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphskwb94z.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgggpj_5o.php:32\n\
    Stack trace:\n#0 /tmp/tmpgggpj_5o.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpgggpj_5o.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn662rqcf.php:30\n\
    Stack trace:\n#0 /tmp/tmpn662rqcf.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpn662rqcf.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl09mz857.php:32\n\
    Stack trace:\n#0 /tmp/tmpl09mz857.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpl09mz857.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoh7majz4.php:29\n\
    Stack trace:\n#0 /tmp/tmpoh7majz4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpoh7majz4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1m3xkkg.php:29\n\
    Stack trace:\n#0 /tmp/tmpx1m3xkkg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx1m3xkkg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted = true;\n\
    \  $counts = array_count_values($lst);\n  foreach ($counts as $count => $num)\
    \ {\n    if ($num > 1) {\n      $sorted = false;\n      break;\n    }\n  }\n \
    \ return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwizbnzl.php:33\n\
    Stack trace:\n#0 /tmp/tmpdwizbnzl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpdwizbnzl.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7erh_kv.php:32\n\
    Stack trace:\n#0 /tmp/tmpa7erh_kv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpa7erh_kv.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpedrywzhc.php:31\n\
    Stack trace:\n#0 /tmp/tmpedrywzhc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpedrywzhc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $val) {\n        if ($val != $lst[$key-1]) {\n \
    \           $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjvck6_u.php:30\n\
    Stack trace:\n#0 /tmp/tmprjvck6_u.php(45): test()\n#1 {main}\n  thrown in /tmp/tmprjvck6_u.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpazyuhn7z.php:32\n\
    Stack trace:\n#0 /tmp/tmpazyuhn7z.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpazyuhn7z.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $counts = array_count_values($lst);\n    foreach ($counts as $num => $count)\
    \ {\n        if ($count > 1) {\n            $sorted = false;\n            break;\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bhlp6_2.php:33\n\
    Stack trace:\n#0 /tmp/tmp1bhlp6_2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1bhlp6_2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphz8riyfx.php:32\n\
    Stack trace:\n#0 /tmp/tmphz8riyfx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphz8riyfx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogdfmiaz.php:32\n\
    Stack trace:\n#0 /tmp/tmpogdfmiaz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpogdfmiaz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = null;\n    foreach ($lst as $item) {\n        if ($item == $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5mngiz3t.php:34\n\
    Stack trace:\n#0 /tmp/tmp5mngiz3t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5mngiz3t.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3wiusll.php:32\n\
    Stack trace:\n#0 /tmp/tmpj3wiusll.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpj3wiusll.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphm_mcdac.php:33\n\
    Stack trace:\n#0 /tmp/tmphm_mcdac.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphm_mcdac.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpivbfs4ho.php:30\n\
    Stack trace:\n#0 /tmp/tmpivbfs4ho.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpivbfs4ho.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdkbi4jdx.php:30\n\
    Stack trace:\n#0 /tmp/tmpdkbi4jdx.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdkbi4jdx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdsev6_ua.php:32\n\
    Stack trace:\n#0 /tmp/tmpdsev6_ua.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpdsev6_ua.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnhrisz_.php:29\n\
    Stack trace:\n#0 /tmp/tmptnhrisz_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmptnhrisz_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ds3fe2h.php:30\n\
    Stack trace:\n#0 /tmp/tmp9ds3fe2h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9ds3fe2h.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $last = array_pop($lst);\n\
    \  foreach ($lst as $item) {\n    if ($item != $last) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqiurnojc.php:30\n\
    Stack trace:\n#0 /tmp/tmpqiurnojc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqiurnojc.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $val) {\n        if ($val != $lst[$key - 1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv10bkje5.php:29\n\
    Stack trace:\n#0 /tmp/tmpv10bkje5.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpv10bkje5.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi0l2k2x2.php:32\n\
    Stack trace:\n#0 /tmp/tmpi0l2k2x2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpi0l2k2x2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsec522f.php:41\n\
    Stack trace:\n#0 /tmp/tmpbsec522f.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpbsec522f.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5i6rwzr.php:32\n\
    Stack trace:\n#0 /tmp/tmpj5i6rwzr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpj5i6rwzr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tuvinnw.php:29\n\
    Stack trace:\n#0 /tmp/tmp2tuvinnw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp2tuvinnw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5q_pdko.php:32\n\
    Stack trace:\n#0 /tmp/tmpg5q_pdko.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpg5q_pdko.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8tce9oz.php:32\n\
    Stack trace:\n#0 /tmp/tmpz8tce9oz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpz8tce9oz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8kpuukp.php:29\n\
    Stack trace:\n#0 /tmp/tmpb8kpuukp.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpb8kpuukp.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6pv7g886.php:32\n\
    Stack trace:\n#0 /tmp/tmp6pv7g886.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6pv7g886.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplrharw5x.php:32\n\
    Stack trace:\n#0 /tmp/tmplrharw5x.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplrharw5x.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8bwk6it8.php:33\n\
    Stack trace:\n#0 /tmp/tmp8bwk6it8.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8bwk6it8.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpwm3vwl.php:32\n\
    Stack trace:\n#0 /tmp/tmpnpwm3vwl.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnpwm3vwl.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27_4yylv.php:29\n\
    Stack trace:\n#0 /tmp/tmp27_4yylv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27_4yylv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfb1k4h4e.php:29\n\
    Stack trace:\n#0 /tmp/tmpfb1k4h4e.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfb1k4h4e.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0zy7ql3.php:29\n\
    Stack trace:\n#0 /tmp/tmpp0zy7ql3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp0zy7ql3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8_pd3h6.php:32\n\
    Stack trace:\n#0 /tmp/tmpg8_pd3h6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpg8_pd3h6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bef9r2q.php:41\n\
    Stack trace:\n#0 /tmp/tmp3bef9r2q.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3bef9r2q.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldods80_.php:30\n\
    Stack trace:\n#0 /tmp/tmpldods80_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpldods80_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmwr1617.php:32\n\
    Stack trace:\n#0 /tmp/tmpvmwr1617.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvmwr1617.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp43r8d79a.php:29\n\
    Stack trace:\n#0 /tmp/tmp43r8d79a.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp43r8d79a.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefdfmhe3.php:32\n\
    Stack trace:\n#0 /tmp/tmpefdfmhe3.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpefdfmhe3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    foreach ($count as $num => $count) {\n        if ($count > 1) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nwja1uq.php:31\n\
    Stack trace:\n#0 /tmp/tmp0nwja1uq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0nwja1uq.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpg4cc7v.php:32\n\
    Stack trace:\n#0 /tmp/tmprpg4cc7v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprpg4cc7v.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    foreach ($count as $num => $count) {\n        if ($count > 1) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_h093ma.php:31\n\
    Stack trace:\n#0 /tmp/tmpk_h093ma.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpk_h093ma.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bt4op4n.php:32\n\
    Stack trace:\n#0 /tmp/tmp6bt4op4n.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6bt4op4n.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptmpzvnxv.php:32\n\
    Stack trace:\n#0 /tmp/tmptmpzvnxv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmptmpzvnxv.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxz_tmif.php:29\n\
    Stack trace:\n#0 /tmp/tmpjxz_tmif.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpjxz_tmif.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd6ddgsz.php:32\n\
    Stack trace:\n#0 /tmp/tmpfd6ddgsz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfd6ddgsz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e8bjeoz.php:32\n\
    Stack trace:\n#0 /tmp/tmp2e8bjeoz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp2e8bjeoz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $num => $count) {\n        if ($count > 1) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyyjv1_3t.php:32\n\
    Stack trace:\n#0 /tmp/tmpyyjv1_3t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpyyjv1_3t.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] === $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $num => $count) {\n        if ($count > 1) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8zneby3.php:32\n\
    Stack trace:\n#0 /tmp/tmpx8zneby3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpx8zneby3.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $counts = array_count_values($lst);\n    foreach ($counts as $count => $num)\
    \ {\n        if ($num > 1) {\n            $sorted = false;\n            break;\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0f5mvus.php:33\n\
    Stack trace:\n#0 /tmp/tmpt0f5mvus.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpt0f5mvus.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxrl1t6y.php:29\n\
    Stack trace:\n#0 /tmp/tmpfxrl1t6y.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpfxrl1t6y.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplltz_jcf.php:29\n\
    Stack trace:\n#0 /tmp/tmplltz_jcf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplltz_jcf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxv13qsl2.php:32\n\
    Stack trace:\n#0 /tmp/tmpxv13qsl2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxv13qsl2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted = true;\n\
    \  $counts = array_count_values($lst);\n  foreach ($counts as $num => $count)\
    \ {\n    if ($count > 1) {\n      $sorted = false;\n      break;\n    }\n  }\n\
    \  return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88ln0kr4.php:33\n\
    Stack trace:\n#0 /tmp/tmp88ln0kr4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp88ln0kr4.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuiik_6hx.php:31\n\
    Stack trace:\n#0 /tmp/tmpuiik_6hx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpuiik_6hx.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7epz8lpo.php:32\n\
    Stack trace:\n#0 /tmp/tmp7epz8lpo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7epz8lpo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllselx6w.php:32\n\
    Stack trace:\n#0 /tmp/tmpllselx6w.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpllselx6w.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl539nr47.php:32\n\
    Stack trace:\n#0 /tmp/tmpl539nr47.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpl539nr47.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuoj9hz3q.php:32\n\
    Stack trace:\n#0 /tmp/tmpuoj9hz3q.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpuoj9hz3q.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted = true;\n\
    \  $counts = array_count_values($lst);\n  foreach ($counts as $num => $count)\
    \ {\n    if ($count > 1) {\n      $sorted = false;\n      break;\n    }\n  }\n\
    \  return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv221sump.php:33\n\
    Stack trace:\n#0 /tmp/tmpv221sump.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpv221sump.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8misvrjz.php:32\n\
    Stack trace:\n#0 /tmp/tmp8misvrjz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp8misvrjz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinzz3bux.php:32\n\
    Stack trace:\n#0 /tmp/tmpinzz3bux.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpinzz3bux.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpza_pc3hr.php:32\n\
    Stack trace:\n#0 /tmp/tmpza_pc3hr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpza_pc3hr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6sc3zod.php:29\n\
    Stack trace:\n#0 /tmp/tmpv6sc3zod.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpv6sc3zod.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaiei6dvp.php:30\n\
    Stack trace:\n#0 /tmp/tmpaiei6dvp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpaiei6dvp.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $counts = array_count_values($lst);\n\
    \    foreach ($counts as $num => $count) {\n        if ($count > 1) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqturkxx.php:32\n\
    Stack trace:\n#0 /tmp/tmplqturkxx.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplqturkxx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $number => $count) {\n        if ($count > 1) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9s42_1u.php:32\n\
    Stack trace:\n#0 /tmp/tmpq9s42_1u.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpq9s42_1u.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = null;\n    foreach ($lst as $item) {\n        if ($item == $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo781sypa.php:34\n\
    Stack trace:\n#0 /tmp/tmpo781sypa.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpo781sypa.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9wa6bsp1.php:30\n\
    Stack trace:\n#0 /tmp/tmp9wa6bsp1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9wa6bsp1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32xwoduy.php:32\n\
    Stack trace:\n#0 /tmp/tmp32xwoduy.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp32xwoduy.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsnkc1sdy.php:29\n\
    Stack trace:\n#0 /tmp/tmpsnkc1sdy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpsnkc1sdy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjodlteht.php:32\n\
    Stack trace:\n#0 /tmp/tmpjodlteht.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpjodlteht.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiu53wkl7.php:30\n\
    Stack trace:\n#0 /tmp/tmpiu53wkl7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpiu53wkl7.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $len = count($lst);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    for ($j = $i + 1; $j < $len; $j++) {\n\
    \      if ($lst[$i] > $lst[$j]) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoekfkn44.php:39\n\
    Stack trace:\n#0 /tmp/tmpoekfkn44.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpoekfkn44.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item == $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30u1iiy6.php:32\n\
    Stack trace:\n#0 /tmp/tmp30u1iiy6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp30u1iiy6.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql5hzms2.php:32\n\
    Stack trace:\n#0 /tmp/tmpql5hzms2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpql5hzms2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg41rrtr2.php:32\n\
    Stack trace:\n#0 /tmp/tmpg41rrtr2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpg41rrtr2.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphtaxfhqe.php:32\n\
    Stack trace:\n#0 /tmp/tmphtaxfhqe.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphtaxfhqe.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $counts = array_count_values($lst);\n    foreach ($counts as $count => $num)\
    \ {\n        if ($num > 1) {\n            $sorted = false;\n            break;\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph28zo2xj.php:33\n\
    Stack trace:\n#0 /tmp/tmph28zo2xj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmph28zo2xj.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $counts = array_count_values($lst);\n    foreach ($counts as $count => $num)\
    \ {\n        if ($num > 1) {\n            $sorted = false;\n            break;\n\
    \        }\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprs9vke52.php:33\n\
    Stack trace:\n#0 /tmp/tmprs9vke52.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprs9vke52.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc7gn_zw.php:32\n\
    Stack trace:\n#0 /tmp/tmpvc7gn_zw.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvc7gn_zw.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyvt4zmo.php:32\n\
    Stack trace:\n#0 /tmp/tmpeyvt4zmo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpeyvt4zmo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidt7oc65.php:32\n\
    Stack trace:\n#0 /tmp/tmpidt7oc65.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpidt7oc65.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9b9id4_d.php:29\n\
    Stack trace:\n#0 /tmp/tmp9b9id4_d.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9b9id4_d.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    foreach ($count as $num => $count) {\n        if ($count > 1) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymjq5wh9.php:31\n\
    Stack trace:\n#0 /tmp/tmpymjq5wh9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpymjq5wh9.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $number => $count) {\n        if ($count > 1) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplzji4eug.php:32\n\
    Stack trace:\n#0 /tmp/tmplzji4eug.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplzji4eug.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6toj4uy.php:32\n\
    Stack trace:\n#0 /tmp/tmpf6toj4uy.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpf6toj4uy.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hknl7c6.php:41\n\
    Stack trace:\n#0 /tmp/tmp0hknl7c6.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0hknl7c6.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7n16ee7.php:32\n\
    Stack trace:\n#0 /tmp/tmpf7n16ee7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpf7n16ee7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpo5qhuo.php:32\n\
    Stack trace:\n#0 /tmp/tmpnpo5qhuo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnpo5qhuo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    foreach ($count as $number => $count) {\n        if ($count > 1) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx613b2x_.php:31\n\
    Stack trace:\n#0 /tmp/tmpx613b2x_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx613b2x_.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplw46lelr.php:32\n\
    Stack trace:\n#0 /tmp/tmplw46lelr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplw46lelr.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrufs0dq.php:32\n\
    Stack trace:\n#0 /tmp/tmprrufs0dq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprrufs0dq.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $val) {\n        if ($val != $lst[$key - 1]) {\n\
    \            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjpwfrv5h.php:30\n\
    Stack trace:\n#0 /tmp/tmpjpwfrv5h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjpwfrv5h.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpom9ugx.php:32\n\
    Stack trace:\n#0 /tmp/tmpqpom9ugx.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpqpom9ugx.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = null;\n    foreach ($lst as $item) {\n        if ($item == $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpld7nboew.php:34\n\
    Stack trace:\n#0 /tmp/tmpld7nboew.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpld7nboew.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted = true;\n\
    \  $last = array_pop($lst);\n  foreach ($lst as $item) {\n    if ($item != $last)\
    \ {\n      $sorted = false;\n      break;\n    }\n  }\n  return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7yb6u_p.php:32\n\
    Stack trace:\n#0 /tmp/tmpq7yb6u_p.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpq7yb6u_p.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpifchfpcw.php:31\n\
    Stack trace:\n#0 /tmp/tmpifchfpcw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpifchfpcw.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $count = array_count_values($lst);\n\
    \    foreach ($count as $num => $count) {\n        if ($count > 1) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27oypfj4.php:31\n\
    Stack trace:\n#0 /tmp/tmp27oypfj4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp27oypfj4.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ab5hnbe.php:30\n\
    Stack trace:\n#0 /tmp/tmp9ab5hnbe.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9ab5hnbe.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item == $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_rdqnst.php:32\n\
    Stack trace:\n#0 /tmp/tmp0_rdqnst.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0_rdqnst.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcp3zzoj.php:29\n\
    Stack trace:\n#0 /tmp/tmppcp3zzoj.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppcp3zzoj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $key => $val) {\n        if ($val > 1) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxgx0b38z.php:32\n\
    Stack trace:\n#0 /tmp/tmpxgx0b38z.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxgx0b38z.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n            break;\n        }\n \
    \   }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrftxbvo.php:32\n\
    Stack trace:\n#0 /tmp/tmphrftxbvo.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphrftxbvo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = null;\n    foreach ($lst as $item) {\n        if ($item == $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4j8drwxt.php:34\n\
    Stack trace:\n#0 /tmp/tmp4j8drwxt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4j8drwxt.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphj6onh1t.php:29\n\
    Stack trace:\n#0 /tmp/tmphj6onh1t.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphj6onh1t.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7gb0wcj.php:32\n\
    Stack trace:\n#0 /tmp/tmpd7gb0wcj.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpd7gb0wcj.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n  $sorted = true;\n\
    \  $counts = array_count_values($lst);\n  foreach ($counts as $count => $count)\
    \ {\n    if ($count > 1) {\n      $sorted = false;\n      break;\n    }\n  }\n\
    \  return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysccil58.php:31\n\
    Stack trace:\n#0 /tmp/tmpysccil58.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpysccil58.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $last = array_pop($lst);\n    foreach ($lst as $item) {\n        if ($item\
    \ != $last) {\n            $sorted = false;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfom2db43.php:32\n\
    Stack trace:\n#0 /tmp/tmpfom2db43.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpfom2db43.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hlurl89.php:32\n\
    Stack trace:\n#0 /tmp/tmp3hlurl89.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3hlurl89.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $key => $value) {\n        if ($value == 1) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2089k164.php:32\n\
    Stack trace:\n#0 /tmp/tmp2089k164.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2089k164.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    if (count($lst)\
    \ == 1) {\n        return $lst[0] == $lst;\n    }\n    $sorted = array_count_values($lst);\n\
    \    foreach ($sorted as $num => $count) {\n        if ($count > 1) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_db450k7.php:32\n\
    Stack trace:\n#0 /tmp/tmp_db450k7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_db450k7.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4kd7085.php:29\n\
    Stack trace:\n#0 /tmp/tmpj4kd7085.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpj4kd7085.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1nuk_kyv.php:29\n\
    Stack trace:\n#0 /tmp/tmp1nuk_kyv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1nuk_kyv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item != $prev)\
    \ {\n            $sorted = false;\n        }\n        $prev = $item;\n    }\n\
    \    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k6_6w7f.php:32\n\
    Stack trace:\n#0 /tmp/tmp4k6_6w7f.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp4k6_6w7f.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key-1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6yv4d202.php:29\n\
    Stack trace:\n#0 /tmp/tmp6yv4d202.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6yv4d202.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a list of numbers, return whether or not they are sorted\n\
    // in ascending order. If list has more than 1 duplicate of the same\n// number,\
    \ return False. Assume no negative numbers and only integers.\n// Examples\n//\
    \ is_sorted([5]) \u279E True\n// is_sorted([1, 2, 3, 4, 5]) \u279E True\n// is_sorted([1,\
    \ 3, 2, 4, 5]) \u279E False\n// is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n//\
    \ is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279E True\n// is_sorted([1, 3, 2, 4, 5, 6,\
    \ 7]) \u279E False\n// is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n// is_sorted([1,\
    \ 2, 2, 2, 3, 4]) \u279E False\nfunction is_sorted($lst) {\n    $sorted = true;\n\
    \    foreach ($lst as $key => $value) {\n        if ($value != $lst[$key - 1])\
    \ {\n            $sorted = false;\n            break;\n        }\n    }\n    return\
    \ $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmr882tlg.php:30\n\
    Stack trace:\n#0 /tmp/tmpmr882tlg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmr882tlg.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
