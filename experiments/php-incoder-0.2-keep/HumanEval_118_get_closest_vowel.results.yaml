name: HumanEval_118_get_closest_vowel
language: php
results:
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_length\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_max = count($vowels)\
    \ - 1;\n    $vowels_index_min = 0;\n    $vowels_index_current = 0;\n    $vowels_index_next\
    \ = 0;\n    $vowels_index_prev = 0;\n    $vowels_index_current_next = 0;\n   \
    \ $vowels_index_current_prev = 0;\n    $vowels_index_next_prev = 0;\n    $vowels_index_prev_next\
    \ = 0;\n    $vowels_index_current_prev_next = 0;\n    $vowels_index_next_prev_next\
    \ = 0;\n    $vowels_index_prev_prev_next = 0;\n    $vowels_index_current_prev_prev_next\
    \ = 0;\n    $vowels_index_next_prev_prev_next = 0;\n    $vowels_index_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_current_prev_prev_prev_next = 0;\n    $vowels_index_next_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_prev_prev_prev_prev_next = 0;\n    $vowels_index_current_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_next_prev_prev_prev_prev_next = 0;\n    $vowels_index_prev_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_current_prev_prev_prev_prev_prev_next = 0;\n    $vowels_index_next_prev_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_prev_prev_prev_prev_prev_next = 0;\n    $vowels_index_current_prev_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_next_prev_prev_prev_prev_prev_next = 0;\n    $vowels_index_prev_prev_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_current_prev_prev_prev_prev_prev_prev_next = 0;\n  \
    \  $vowels_index_next_prev_prev_prev_prev_prev_prev_next = 0;\n    $vowels_index_prev_prev_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_current_prev_prev_prev_prev_prev_prev_next = 0;\n  \
    \  $vowels_index_next_prev_prev_prev_prev_prev_prev_next = 0;\n    $vowels_index_prev_prev_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_current_prev_prev_prev_prev_prev_prev_next = 0;\n  \
    \  $vowels_index_next_prev_prev_prev_prev_prev_prev_next = 0;\n    $vowels_index_prev_prev_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_current_prev_prev_prev_prev_prev_prev_next = 0;\n  \
    \  $vowels_index_next_prev_prev_prev_prev_prev_prev_next = 0;\n    $vowels_index_prev_prev_prev_prev_prev_prev_next\
    \ = 0;\n    $vowels_index_current_prev_prev_prev_prev_prev_prev_next = 0;\n  \
    \  $vowels_index_next_prev_prev_prev_prev_prev_prev_next = 0;\n    $vowels_index_prev_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfqelbl2h.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_end = strlen($word)\
    \ - 1;\n    $vowels_index_start = strlen($word) - 2;\n    $vowels_index_middle\
    \ = strlen($word) - 3;\n    $vowels_index_middle_2 = strlen($word) - 4;\n    $vowels_index_middle_3\
    \ = strlen($word) - 5;\n    $vowels_index_middle_4 = strlen($word) - 6;\n    $vowels_index_middle_5\
    \ = strlen($word) - 7;\n    $vowels_index_middle_6 = strlen($word) - 8;\n    $vowels_index_middle_7\
    \ = strlen($word) - 9;\n    $vowels_index_middle_8 = strlen($word) - 10;\n   \
    \ $vowels_index_middle_9 = strlen($word) - 11;\n    $vowels_index_middle_10 =\
    \ strlen($word) - 12;\n    $vowels_index_middle_11 = strlen($word) - 13;\n   \
    \ $vowels_index_middle_12 = strlen($word) - 14;\n    $vowels_index_middle_13 =\
    \ strlen($word) - 15;\n    $vowels_index_middle_14 = strlen($word) - 16;\n   \
    \ $vowels_index_middle_15 = strlen($word) - 17;\n    $vowels_index_middle_16 =\
    \ strlen($word) - 18;\n    $vowels_index_middle_17 = strlen($word) - 19;\n   \
    \ $vowels_index_middle_18 = strlen($word) - 20;\n    $vowels_index_middle_19 =\
    \ strlen($word) - 21;\n    $vowels_index_middle_20 = strlen($word) - 22;\n   \
    \ $vowels_index_middle_21 = strlen($word) - 23;\n    $vowels_index_middle_22 =\
    \ strlen($word) - 24;\n    $vowels_index_middle_23 = strlen($word) - 25;\n   \
    \ $vowels_index_middle_24 = strlen($word) - 26;\n    $vowels_index_middle_25 =\
    \ strlen($word) - 27;\n    $vowels_index_middle_26 = strlen($word) - 28;\n   \
    \ $vowels_index_middle_27 = strlen($word) - 29;\n    $vowels_index_middle_28 =\
    \ strlen($word) - 30;\n    $vowels_index_middle_29 = strlen($word) - 31;\n   \
    \ $vowels_index_middle_30 = strlen($word) - 32;\n    $vowels_index_middle_31 =\
    \ strlen($word) - 33;\n    $vowels_index_middle_32 = strlen($\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1h3548w4.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpajhqvci9.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_found\
    \ = 0;\n    $vowels_found2 = $vowels_count - 1;\n    $vowels_found3 = $vowels_count\
    \ - 2;\n    $vowels_found4 = $vowels_count - 3;\n    $vowels_found5 = $vowels_count\
    \ - 4;\n    $vowels_found6 = $vowels_count - 5;\n    $vowels_found7 = $vowels_count\
    \ - 6;\n    $vowels_found8 = $vowels_count - 7;\n    $vowels_found9 = $vowels_count\
    \ - 8;\n    $vowels_found10 = $vowels_count - 9;\n    $vowels_found11 = $vowels_count\
    \ - 10;\n    $vowels_found12 = $vowels_count - 11;\n    $vowels_found13 = $vowels_count\
    \ - 12;\n    $vowels_found14 = $vowels_count - 13;\n    $vowels_found15 = $vowels_count\
    \ - 14;\n    $vowels_found16 = $vowels_count - 15;\n    $vowels_found17 = $vowels_count\
    \ - 16;\n    $vowels_found18 = $vowels_count - 17;\n    $vowels_found19 = $vowels_count\
    \ - 18;\n    $vowels_found20 = $vowels_count - 19;\n    $vowels_found21 = $vowels_count\
    \ - 20;\n    $vowels_found22 = $vowels_count - 21;\n    $vowels_found23 = $vowels_count\
    \ - 22;\n    $vowels_found24 = $vowels_count - 23;\n    $vowels_found25 = $vowels_count\
    \ - 24;\n    $vowels_found26 = $vowels_count - 25;\n    $vowels_found27 = $vowels_count\
    \ - 26;\n    $vowels_found28 = $vowels_count - 27;\n    $vowels_found29 = $vowels_count\
    \ - 28;\n    $vowels_found30 = $vowels_count - 29;\n    $vowels_found31 = $vowels_count\
    \ - 30;\n    $vowels_found32 = $vowels_count - 31;\n    $vowels_found33 = $vowels_count\
    \ - 32;\n    $vowels_found34 = $vowels_count - 33;\n    $vowels_found35 = $vowels_count\
    \ - 34;\n    $vowels_found36 = $vowels_count - 35;\n    $vowels_found37 = $vowels_count\
    \ - 36;\n    $vowels_found38 = $vowels_count - 37;\n    $vowels_found39 = $vowels_count\
    \ - 38;\n    $vowels_found\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqkuk_oer.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count - 1], array_reverse($vowels));\n    return\
    \ $vowels[$vowels_count];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprz9poml7.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0gy_k_dz.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    $vowels_count_from_left = count($word)\
    \ - $vowels_count - 1;\n    $vowels_count_from_middle = count($word) - $vowels_count\
    \ - 2;\n    $vowels_count_from_middle2 = count($word) - $vowels_count - 3;\n \
    \   $vowels_count_from_middle3 = count($word) - $vowels_count - 4;\n    $vowels_count_from_middle4\
    \ = count($word) - $vowels_count - 5;\n    $vowels_count_from_middle5 = count($word)\
    \ - $vowels_count - 6;\n    $vowels_count_from_middle6 = count($word) - $vowels_count\
    \ - 7;\n    $vowels_count_from_middle7 = count($word) - $vowels_count - 8;\n \
    \   $vowels_count_from_middle8 = count($word) - $vowels_count - 9;\n    $vowels_count_from_middle9\
    \ = count($word) - $vowels_count - 10;\n    $vowels_count_from_middle10 = count($word)\
    \ - $vowels_count - 11;\n    $vowels_count_from_middle11 = count($word) - $vowels_count\
    \ - 12;\n    $vowels_count_from_middle12 = count($word) - $vowels_count - 13;\n\
    \    $vowels_count_from_middle13 = count($word) - $vowels_count - 14;\n    $vowels_count_from_middle14\
    \ = count($word) - $vowels_count - 15;\n    $vowels_count_from_middle15 = count($word)\
    \ - $vowels_count - 16;\n    $vowels_count_from_middle16 = count($word) - $vowels_count\
    \ - 17;\n    $vowels_count_from_middle17 = count($word) - $vowels_count - 18;\n\
    \    $vowels_count_from_middle18 = count($word) - $vowels_count - 19;\n    $vowels_count_from_middle19\
    \ = count($word) - $vowels_count - 20;\n    $vowels_count_from_middle20 = count($word)\
    \ - $vowels_count - 21;\n    $vowels_count_from_middle21 = count($word) - $vowels_count\
    \ - 22;\n    $vowels_count_from_middle22 = count($word) - $vowels_count - 23;\n\
    \    $vowels_count_from_middle23 = count($word) - $vowels_count - 24;\n    $vowels_count_from_middle24\
    \ = count($word) - $vowels_count - 25;\n    $vowels_count_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm_7uvp40.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkaoq2k57.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw8__b8re.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_max = count($vowels)\
    \ - 1;\n    $vowels_index_min = 0;\n    $vowels_index_mid = 0;\n    $vowels_index_mid_max\
    \ = $vowels_len - 1;\n    \n    for($i = 0; $i < $vowels_count; $i++) {\n    \
    \    $vowels_index = $i;\n        $vowels_index_mid = $i;\n        $vowels_index_min\
    \ = $i;\n        $vowels_index_max = $i;\n        \n        if($vowels[$i] ==\
    \ $word[$vowels_len - 1]) {\n            $vowels_index_max = $vowels_len - 1;\n\
    \        }\n        \n        if($vowels[$i] == $word[$vowels_len - 2]) {\n  \
    \          $vowels_index_min = $vowels_len - 2;\n        }\n        \n       \
    \ if($vowels[$i] == $word[$vowels_len - 3]) {\n            $vowels_index_mid =\
    \ $vowels_len - 3;\n        }\n        \n        if($vowels[$i] == $word[$vowels_len\
    \ - 4]) {\n            $vowels_index_mid_max = $vowels_len - 4;\n        }\n \
    \   }\n    \n    if($vowels_index_min == $vowels_index_max) {\n        return\
    \ \"\";\n    }\n    \n    if($vowels_index_min == $vowels_index_mid) {\n     \
    \   return $vowels[$vowels_index_min];\n    }\n    \n    if($vowels_index_min\
    \ == $vowels_index_mid_max) {\n        return $vowels[$vowels_index_min];\n  \
    \  }\n    \n    if($vowels_index_max == $vowels_index_mid) {\n        return $vowels[$vowels_index_max];\n\
    \    }\n    \n    if($vowels_index_max == $vowels_index_mid_max) {\n        return\
    \ $vowels[$vowels_index_max];\n    }\n    \n    if($vowels_index_min == $vowels_index_max)\
    \ {\n        return $vowels[$vowels_index_min];\n    }\n    \n    if($vowels_index_min\
    \ == $vowels_index_mid_max) {\n        return $vowels[$vowels_index_min];\n  \
    \  }\n    \n    if($vowels_index_max == $vowels_index_mid_max) {\n        return\
    \ $vowels[$vowels_index_max];\n    }\n    \n    if($vowels_index_min == $vowels_index_mid)\
    \ {\n        return $vowels[$vowels_index_min];\n    }\n    \n    if(\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpysxiw9r0.php on line 82\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc8d2l46_.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo68w8ruf.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcyqnx9l2.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9s4_rbc7.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplbsckh7u.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3a1jlr4m.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = str_word_count($word);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp80r2gpya.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_max = $vowels_count - 1;\n    $vowels_index_min = 0;\n\
    \    $vowels_index_min_index = 0;\n    $vowels_index_max_index = $vowels_count\
    \ - 1;\n    $vowels_index_min_value = $vowels[$vowels_index_min];\n    $vowels_index_max_value\
    \ = $vowels[$vowels_index_max];\n    $vowels_index_min_value = $vowels[$vowels_index_min];\n\
    \    $vowels_index_max_value = $vowels[$vowels_index_max];\n    $vowels_index_min_value\
    \ = $vowels[$vowels_index_min];\n    $vowels_index_max_value = $vowels[$vowels_index_max];\n\
    \    $vowels_index_min_value = $vowels[$vowels_index_min];\n    $vowels_index_max_value\
    \ = $vowels[$vowels_index_max];\n    $vowels_index_min_value = $vowels[$vowels_index_min];\n\
    \    $vowels_index_max_value = $vowels[$vowels_index_max];\n    $vowels_index_min_value\
    \ = $vowels[$vowels_index_min];\n    $vowels_index_max_value = $vowels[$vowels_index_max];\n\
    \    $vowels_index_min_value = $vowels[$vowels_index_min];\n    $vowels_index_max_value\
    \ = $vowels[$vowels_index_max];\n    $vowels_index_min_value = $vowels[$vowels_index_min];\n\
    \    $vowels_index_max_value = $vowels[$vowels_index_max];\n    $vowels_index_min_value\
    \ = $vowels[$vowels_index_min];\n    $vowels_index_max_value = $vowels[$vowels_index_max];\n\
    \    $vowels_index_min_value = $vowels[$vowels_index_min];\n    $vowels_index_max_value\
    \ = $vowels[$vowels_index_max];\n    $vowels_index_min_value = $vowels[$vowels_index_min];\n\
    \    $vowels_index_max_value = $vowels[$vowels_index_max];\n    $vowels_index_min_value\
    \ = $vowels[$vowels_index_min];\n    $vowels_index_max_value = $vowels[$vowels_index_max];\n\
    \    $vowels_index_min_value = $vowels[$vowels_index_min];\n    $vowels_index_max_value\
    \ = $vowels[$vowels_index_max];\n    $vowels_index_min_value = $vowels[$vowels_index_min];\n\
    \    $vowels_index_max_value = $vowels[\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppd3_2qza.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6v0xl103.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($vowels);\n    $vowels_len = min($vowels_len, $vowels_count);\n   \
    \ $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen(\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3ar30av2.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_found\
    \ = 0;\n    $vowels_found2 = false;\n    $vowels_found3 = false;\n    $vowels_found4\
    \ = false;\n    $vowels_found5 = false;\n    $vowels_found6 = false;\n    $vowels_found7\
    \ = false;\n    $vowels_found8 = false;\n    $vowels_found9 = false;\n    $vowels_found10\
    \ = false;\n    $vowels_found11 = false;\n    $vowels_found12 = false;\n    $vowels_found13\
    \ = false;\n    $vowels_found14 = false;\n    $vowels_found15 = false;\n    $vowels_found16\
    \ = false;\n    $vowels_found17 = false;\n    $vowels_found18 = false;\n    $vowels_found19\
    \ = false;\n    $vowels_found20 = false;\n    $vowels_found21 = false;\n    $vowels_found22\
    \ = false;\n    $vowels_found23 = false;\n    $vowels_found24 = false;\n    $vowels_found25\
    \ = false;\n    $vowels_found26 = false;\n    $vowels_found27 = false;\n    $vowels_found28\
    \ = false;\n    $vowels_found29 = false;\n    $vowels_found30 = false;\n    $vowels_found31\
    \ = false;\n    $vowels_found32 = false;\n    $vowels_found33 = false;\n    $vowels_found34\
    \ = false;\n    $vowels_found35 = false;\n    $vowels_found36 = false;\n    $vowels_found37\
    \ = false;\n    $vowels_found38 = false;\n    $vowels_found39 = false;\n    $vowels_found40\
    \ = false;\n    $vowels_found41 = false;\n    $vowels_found42 = false;\n    $vowels_found43\
    \ = false;\n    $vowels_found44 = false;\n    $vowels_found45 = false;\n    $vowels_found46\
    \ = false;\n    $vowels_found47 = false;\n    $vowels_found48 = false;\n    $vowels_found49\
    \ = false;\n    $vowels_found50 = false;\n    $vowels_found51 = false;\n    $vowels_found52\
    \ = false;\n    $vowels_found53 = false;\n    $vowels_found54 = false;\n    $vowels_found55\
    \ = false;\n    $vowels_found56 = false;\n    $vowels_found57 = false;\n    $vowels_found58\
    \ = false;\n    $vowels_found59 = false;\n    $vowels_found60 = false;\n    $vowels_found61\
    \ = false;\n    $vowels_found62 = false;\n    $vowels_found63 = false;\n    $vowels_found64\
    \ = false;\n    $vowels_found65 = false;\n    $vowels_found66 = false;\n    $vowels_found67\
    \ = false;\n    $vowels_found68 = false;\n\nfunction candidate(...$args) {\n \
    \   return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjne7izvn.php on line 104\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgxihc5ne.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    return $vowels[$vowels_count];\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwslz7b_c.php:26\n\
    Stack trace:\n#0 /tmp/tmpwslz7b_c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwslz7b_c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip(\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvzw4ubu0.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprbss2rw0.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    $vowels_index_count_min = 0;\n    $vowels_index_count_min = $vowels_count\
    \ - 1;\n    $vowels_index_count_max = $vowels_count - 1;\n    foreach ($vowels\
    \ as $vowel) {\n        if ($vowel == $word[$vowels_index]) {\n            $vowels_index_count++;\n\
    \        }\n        if ($vowel == $word[$vowels_index_count]) {\n            $vowels_index_count_max\
    \ = $vowels_index_count;\n        }\n        if ($vowel == $word[$vowels_index_count_max])\
    \ {\n            $vowels_index_count_min = $vowels_index_count;\n        }\n \
    \       if ($vowel == $word[$vowels_index_count_min]) {\n            $vowels_index_count_min\
    \ = $vowels_index_count;\n        }\n    }\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        return \"\";\n    }\n    if ($vowels_index_count < $vowels_index_count_min)\
    \ {\n        return \"\";\n    }\n    return $vowels[$vowels_index_count_min];\n\
    }\n</code>\n<|/ a tags=php,string,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb4u4lkvn.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_search($vowels,\
    \ $vowels_count);\n    $vowels_count = array_slice($vowels_count, 1, 1);\n   \
    \ $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_elx2kpg.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count\
    \ = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_count;\n\
    \    $vowels_count = strlen($word) - $vowels_count;\n    $vowels_count = strlen($word)\
    \ - $vowels_count;\n    $vowels_count = strlen($word) - $vowels_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9dw0s02r.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyel28xnv.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm0anhptl.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpup1i7duf.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_array\
    \ = array_flip($vowels);\n    $vowels_array = array_flip($vowels_array);\n   \
    \ $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdvdgxjf2.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjhzw6ep7.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7qo6ds20.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_array\
    \ = array_flip($vowels);\n    $vowels_array = array_flip($vowels_array);\n   \
    \ $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj4esuik8.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count %= $vowels_count;\n    return $vowels[$vowels_count];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,string |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6qo84pvp.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count %= $vowels_count;\n    return $vowels[$vowels_count];\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| a tags=php,string |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphqxvjfht.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    \n    $vowels_index_count_min = 0;\n    \n    foreach ($vowels as\
    \ $vowel) {\n        if ($word == $vowel) {\n            $vowels_index_count++;\n\
    \        }\n    }\n    \n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count_max = $vowels_index_count;\n    }\n    \n   \
    \ if ($vowels_index_count < $vowels_index_count_min) {\n        $vowels_index_count_min\
    \ = $vowels_index_count;\n    }\n    \n    $vowels_index_count_min--;\n    \n\
    \    foreach ($vowels as $vowel) {\n        if ($word == $vowel) {\n         \
    \   $vowels_index++;\n        }\n    }\n    \n    if ($vowels_index > $vowels_index_count_max)\
    \ {\n        $vowels_index_count_max = $vowels_index;\n    }\n    \n    if ($vowels_index\
    \ < $vowels_index_count_min) {\n        $vowels_index_count_min = $vowels_index;\n\
    \    }\n    \n    $vowels_index_count_min++;\n    \n    foreach ($vowels as $vowel)\
    \ {\n        if ($word == $vowel) {\n            $vowels_index++;\n        }\n\
    \    }\n    \n    if ($vowels_index > $vowels_index_count_max) {\n        $vowels_index_count_max\
    \ = $vowels_index;\n    }\n    \n    if ($vowels_index < $vowels_index_count_min)\
    \ {\n        $vowels_index_count_min = $vowels_index;\n    }\n    \n    $vowels_index_count_max--;\n\
    \    \n    foreach ($vowels as $vowel) {\n        if ($word == $vowel) {\n   \
    \         $vowels_index++;\n        }\n    }\n    \n    if ($vowels_index > $vowels_index_count_max)\
    \ {\n        $vowels_index_count_max = $vowels_index;\n    }\n    \n    if ($vowels_index\
    \ < $vowels_index_count_min) {\n        $vowels_index_count_min = $vowels_index;\n\
    \    }\n    \n    $vowels_index_count_max++;\n    \n    foreach ($vowels as $vowel)\
    \ {\n        if ($word == $vowel) {\n            $vowels_index++;\n        }\n\
    \    }\n    \n    if ($vowels_index > $vowels_index_count_max) {\n        $vowels_index_count_max\
    \ = $vowels_index;\n    }\n    \n    if ($\nfunction candidate(...$args) {\n \
    \   return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp0ik7itq.php on line 96\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    $vowels_count_from_right = max($vowels_count_from_right,\
    \ 0);\n    $vowels_count_from_left = count($word) - $vowels_count_from_right;\n\
    \    $vowels_count_from_left = min($vowels_count_from_left, count($word) - 1);\n\
    \    \n    for($i = $vowels_count_from_right; $i < $vowels_count_from_left; $i++)\
    \ {\n        if(in_array($word[$i], $vowels)) {\n            return $word[$i];\n\
    \        }\n    }\n    return \"\";\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmph3qd4ywv.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmph3qd4ywv.php\
    \ on line 17\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmph3qd4ywv.php on line 18\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmph3qd4ywv.php:33\nStack trace:\n#0 /tmp/tmph3qd4ywv.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph3qd4ywv.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqsyeq1tz.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    foreach ($vowels as $vowel) {\n        if (strpos($word, $vowel) !==\
    \ false) {\n            $vowels_index = $vowel;\n            break;\n        }\n\
    \    }\n    $vowels_index_count++;\n    $vowels_index_count_max = $vowels_index_count\
    \ - 1;\n    foreach ($vowels as $vowel) {\n        if (strpos($word, $vowel) !==\
    \ false) {\n            $vowels_index_count++;\n        }\n        if ($vowels_index_count\
    \ > $vowels_index_count_max) {\n            $vowels_index_count_max = $vowels_index_count;\n\
    \        }\n    }\n    return $vowels_index;\n}\n</code>\n<|/ a tags=php,string\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_97ynn9o.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_array\
    \ = array();\n    foreach ($vowels as $vowel) {\n        $vowels_array[] = $vowel;\n\
    \    }\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array =\
    \ array_merge($vowels_array, $vowels_array);\n    $vowels_array = array_unique($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_merge($vowels_array,\
    \ $vowels_array);\n    $vowels_array = array_unique($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_merge($vowels_array, $vowels_array);\n    $vowels_array\
    \ = array_unique($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_merge($vowels_array, $vowels_array);\n    $vowels_array = array_unique($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_merge($vowels_array,\
    \ $vowels_array);\n    $vowels_array = array_unique($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_merge($vowels_array, $vowels_array);\n    $vowels_array\
    \ = array_unique($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_merge($vowels_array, $vowels_array);\n    $vowels_array = array_unique($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_merge($vowels_array,\
    \ $vowels_array);\n    $vowels_array = array_unique($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0q922ke7.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_len = strlen($word);\n\
    \    $vowels_index = 0;\n    $vowels_index2 = $vowels_len - 1;\n    $vowels_index3\
    \ = $vowels_len - 2;\n    $vowels_index4 = $vowels_len - 3;\n    $vowels_index5\
    \ = $vowels_len - 4;\n    $vowels_index6 = $vowels_len - 5;\n    $vowels_index7\
    \ = $vowels_len - 6;\n    $vowels_index8 = $vowels_len - 7;\n    $vowels_index9\
    \ = $vowels_len - 8;\n    $vowels_index10 = $vowels_len - 9;\n    $vowels_index11\
    \ = $vowels_len - 10;\n    $vowels_index12 = $vowels_len - 11;\n    $vowels_index13\
    \ = $vowels_len - 12;\n    $vowels_index14 = $vowels_len - 13;\n    $vowels_index15\
    \ = $vowels_len - 14;\n    $vowels_index16 = $vowels_len - 15;\n    $vowels_index17\
    \ = $vowels_len - 16;\n    $vowels_index18 = $vowels_len - 17;\n    $vowels_index19\
    \ = $vowels_len - 18;\n    $vowels_index20 = $vowels_len - 19;\n    $vowels_index21\
    \ = $vowels_len - 20;\n    $vowels_index22 = $vowels_len - 11;\n    $vowels_index23\
    \ = $vowels_len - 22;\n    $vowels_index24 = $vowels_len - 23;\n    $vowels_index25\
    \ = $vowels_len - 24;\n    $vowels_index26 = $vowels_len - 25;\n    $vowels_index27\
    \ = $vowels_len - 26;\n    $vowels_index28 = $vowels_len - 27;\n    $vowels_index29\
    \ = $vowels_len - 28;\n    $vowels_index30 = $vowels_len - 29;\n    $vowels_index31\
    \ = $vowels_len - 30;\n    $vowels_index32 = $vowels_len - 31;\n    $vowels_index33\
    \ = $vowels_len - 32;\n    $vowels_index34 = $vowels_len - 33;\n    $vowels_index35\
    \ = $vowels_len - 34;\n    $vowels_index36 = $vowels_len - 35;\n    $vowels_index37\
    \ = $vowels_len - 36;\n    $vowels_index38 = $vowels_len - 37;\n    $vowels_index39\
    \ = $vowels_len - 38;\n    $vowels_index40 = $vowels_len - 39;\n    $vowels_index41\
    \ = $vowels_len - 40;\n    $vowels_index42 = $vowels_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6cufnw5i.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = max($vowels_count\
    \ - 1, 0);\n    $vowels_count = min($vowels_count, $word.length - 1);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    return $vowels[$vowels_count];\n\
    }\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Use of undefined constant length - assumed 'length' (this will\
    \ throw an Error in a future version of PHP) in /tmp/tmp28l2ufbp.php on line 16\n\
    \nWarning: A non-numeric value encountered in /tmp/tmp28l2ufbp.php on line 16\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28l2ufbp.php:26\nStack\
    \ trace:\n#0 /tmp/tmp28l2ufbp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp28l2ufbp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_found\
    \ = 0;\n    $vowels_found2 = false;\n    $vowels_found3 = false;\n    $vowels_found4\
    \ = false;\n    $vowels_found5 = false;\n    $vowels_found6 = false;\n    $vowels_found7\
    \ = false;\n    $vowels_found8 = false;\n    $vowels_found9 = false;\n    $vowels_found10\
    \ = false;\n    $vowels_found11 = false;\n    $vowels_found12 = false;\n    $vowels_found13\
    \ = false;\n    $vowels_found14 = false;\n    $vowels_found15 = false;\n    $vowels_found16\
    \ = false;\n    $vowels_found17 = false;\n    $vowels_found18 = false;\n    $vowels_found19\
    \ = false;\n    $vowels_found20 = false;\n    $vowels_found21 = false;\n    $vowels_found22\
    \ = false;\n    $vowels_found23 = false;\n    $vowels_found24 = false;\n    $vowels_found25\
    \ = false;\n    $vowels_found26 = false;\n    $vowels_found27 = false;\n    $vowels_found28\
    \ = false;\n    $vowels_found29 = false;\n    $vowels_found30 = false;\n    $vowels_found31\
    \ = false;\n    $vowels_found32 = false;\n    $vowels_found33 = false;\n    $vowels_found34\
    \ = false;\n    $vowels_found35 = false;\n    $vowels_found36 = false;\n    $vowels_found37\
    \ = false;\n    $vowels_found38 = false;\n    $vowels_found39 = false;\n    $vowels_found40\
    \ = false;\n    $vowels_found41 = false;\n    $vowels_found42 = false;\n    $vowels_found43\
    \ = false;\n    $vowels_found44 = false;\n    $vowels_found45 = false;\n    $vowels_found46\
    \ = false;\n    $vowels_found47 = false;\n    $vowels_found48 = false;\n    $vowels_found49\
    \ = false;\n    $vowels_found50 = false;\n    $vowels_found51 = false;\n    $vowels_found52\
    \ = false;\n    $vowels_found53 = false;\n    $vowels_found54 = false;\n    $vowels_found55\
    \ = false;\n    $vowels_found56 = false;\n    $vowels_found57 = false;\n    $vowels_found58\
    \ = false;\n    $vowels_found59 = false;\n    $vowels_found60 = false;\n    $vowels_found61\
    \ = false;\n    $vowels_found62 = false;\n    $vowels_found63 = false;\n    $vowels_found64\
    \ = false;\n    $vowels_found65 = false;\n    $vowels_found66 = false;\n    $vowels_found67\
    \ = false;\n    $vowels_found68 = false;\n\nfunction candidate(...$args) {\n \
    \   return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvh6wgxq9.php on line 104\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_found = 0;\n\
    \    $vowels_found2 = $vowels_count - 1;\n    $vowels_found3 = $vowels_count -\
    \ 2;\n    $vowels_found4 = $vowels_count - 3;\n    $vowels_found5 = $vowels_count\
    \ - 4;\n    $vowels_found6 = $vowels_count - 5;\n    $vowels_found7 = $vowels_count\
    \ - 6;\n    $vowels_found8 = $vowels_count - 7;\n    $vowels_found9 = $vowels_count\
    \ - 8;\n    $vowels_found10 = $vowels_count - 9;\n    $vowels_found11 = $vowels_count\
    \ - 10;\n    $vowels_found12 = $vowels_count - 11;\n    $vowels_found13 = $vowels_count\
    \ - 12;\n    $vowels_found14 = $vowels_count - 13;\n    $vowels_found15 = $vowels_count\
    \ - 14;\n    $vowels_found16 = $vowels_count - 15;\n    $vowels_found17 = $vowels_count\
    \ - 16;\n    $vowels_found18 = $vowels_count - 17;\n    $vowels_found19 = $vowels_count\
    \ - 18;\n    $vowels_found20 = $vowels_count - 19;\n    $vowels_found21 = $vowels_count\
    \ - 20;\n    $vowels_found22 = $vowels_count - 21;\n    $vowels_found23 = $vowels_count\
    \ - 22;\n    $vowels_found24 = $vowels_count - 23;\n    $vowels_found25 = $vowels_count\
    \ - 24;\n    $vowels_found26 = $vowels_count - 25;\n    $vowels_found27 = $vowels_count\
    \ - 26;\n    $vowels_found28 = $vowels_count - 27;\n    $vowels_found29 = $vowels_count\
    \ - 28;\n    $vowels_found30 = $vowels_count - 29;\n    $vowels_found31 = $vowels_count\
    \ - 30;\n    $vowels_found32 = $vowels_count - 31;\n    $vowels_found33 = $vowels_count\
    \ - 32;\n    $vowels_found34 = $vowels_count - 33;\n    $vowels_found35 = $vowels_count\
    \ - 34;\n    $vowels_found36 = $vowels_count - 35;\n    $vowels_found37 = $vowels_count\
    \ - 36;\n    $vowels_found38 = $vowels_count - 37;\n    $vowels_found39 = $vowels_count\
    \ - 38;\n    $vowels_found40\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm12l9f7_.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - 1;\n    $vowels_count_from_left = count($word) - 2;\n    $vowels_count_from_middle\
    \ = count($word) - 3;\n    $vowels_count_from_left_to_right = count($word) - 4;\n\
    \    $vowels_count_from_right_to_left = count($word) - 5;\n    $vowels_count_from_middle_to_left\
    \ = count($word) - 6;\n    $vowels_count_from_left_to_right_to_middle = count($word)\
    \ - 7;\n    $vowels_count_from_right_to_left_to_middle = count($word) - 8;\n \
    \   $vowels_count_from_middle_to_left_to_right = count($word) - 9;\n    $vowels_count_from_left_to_right_to_middle_to_left\
    \ = count($word) - 10;\n    $vowels_count_from_right_to_left_to_middle_to_left\
    \ = count($word) - 11;\n    $vowels_count_from_middle_to_left_to_right_to_middle\
    \ = count($word) - 12;\n    $vowels_count_from_left_to_right_to_middle_to_left_to_right\
    \ = count($word) - 13;\n    $vowels_count_from_right_to_left_to_middle_to_left_to_right\
    \ = count($word) - 14;\n    $vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = count($word) - 15;\n    $vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left\
    \ = count($word) - 16;\n    $vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = count($word) - 17;\n    $vowels_count_from_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left\
    \ = count($word) - 18;\n    $vowels_count_from_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle\
    \ = count($word) - 19;\n    $vowels_count_from_right_to_left_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_middle_to_left_to_right_to_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmqcp31o_.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw_yp1ig7.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_2 = 0;\n    $vowels_index_count_3\
    \ = 0;\n    $vowels_index_count_4 = 0;\n    $vowels_index_count_5 = 0;\n    $vowels_index_count_6\
    \ = 0;\n    $vowels_index_count_7 = 0;\n    $vowels_index_count_8 = 0;\n    $vowels_index_count_9\
    \ = 0;\n    $vowels_index_count_10 = 0;\n    $vowels_index_count_11 = 0;\n   \
    \ $vowels_index_count_12 = 0;\n    $vowels_index_count_13 = 0;\n    $vowels_index_count_14\
    \ = 0;\n    $vowels_index_count_15 = 0;\n    $vowels_index_count_16 = 0;\n   \
    \ $vowels_index_count_17 = 0;\n    $vowels_index_count_18 = 0;\n    $vowels_index_count_19\
    \ = 0;\n    $vowels_index_count_20 = 0;\n    $vowels_index_count_21 = 0;\n   \
    \ $vowels_index_count_22 = 0;\n    $vowels_index_count_23 = 0;\n    $vowels_index_count_24\
    \ = 0;\n    $vowels_index_count_25 = 0;\n    $vowels_index_count_26 = 0;\n   \
    \ $vowels_index_count_27 = 0;\n    $vowels_index_count_28 = 0;\n    $vowels_index_count_29\
    \ = 0;\n    $vowels_index_count_30 = 0;\n    $vowels_index_count_31 = 0;\n   \
    \ $vowels_index_count_32 = 0;\n    $vowels_index_count_33 = 0;\n    $vowels_index_count_34\
    \ = 0;\n    $vowels_index_count_35 = 0;\n    $vowels_index_count_36 = 0;\n   \
    \ $vowels_index_count_37 = 0;\n    $vowels_index_count_38 = 0;\n    $vowels_index_count_39\
    \ = 0;\n    $vowels_index_count_40 = 0;\n    $vowels_index_count_41 = 0;\n   \
    \ $vowels_index_count_42 = 0;\n    $vowels_index_count_43 = 0;\n    $vowels_index_count_44\
    \ = 0;\n    $vowels_index_count_45 = 0;\n    $vowels_index_count_46 = 0;\n   \
    \ $vowels_index_count_47 = 0;\n    $vowels_index_count_48 = 0;\n    $vowels_index_count_49\
    \ = 0;\n    $vowels_index_count_50 = 0;\n    $vowels_index_count_51 = 0;\n   \
    \ $vowels_index_count_52 = 0;\n    $vowels_index_count_53 = 0;\n    $vowels_index_count_54\
    \ = 0;\n    $vowels_index_count_55 = 0;\n    $vowels_index_count_56 = 0;\n   \
    \ $vowels_index_count_57 = 0;\n    $vowels_index_count_58 = 0;\n    $vowels_index_count_59\
    \ = 0;\n    $vowels_index_count_60 = 0;\n    $vowels_index_count_61 = 0;\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptwnhbg02.php on line 97\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe1ds6zgo.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($vowels);\n    $vowels_len = min($vowels_len, strlen($word));\n   \
    \ $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, \n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkora6jq9.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmsm_3tgy.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, -1);\n    $vowels_count = array_slice($vowels_count, 0, -1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, -1);\n    $vowels_count = array_slice($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfedyw5cu.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg6jjkxk4.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfzh4796g.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4trkud20.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count\
    \ = strlen($word);\n    $vowels_count = strlen($word);\n    $vowels_count = strlen($word);\n\
    \    $vowels_count = strlen($\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppz3963o9.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($vowels);\n    $vowels_len = max($vowels_len, strlen($word));\n   \
    \ $vowels_len = min($vowels_len, strlen($word));\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = min($vowels_len, 1);\n    $vowels_len = max($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0h09e9dg.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_search($vowels_count,\
    \ array_count_values($vowels));\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprtukzojz.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    \n    for($i = 0; $i < strlen($word); $i++) {\n        if($word[$i]\
    \ == $vowels[$vowels_index]) {\n            $vowels_index_count++;\n         \
    \   if($vowels_index_count == $vowels_index_count_max) {\n                $vowels_index++;\n\
    \                $vowels_index_count = 0;\n                $vowels_index_count_max\
    \ = $vowels_count - 1;\n            }\n        }\n    }\n    \n    if($vowels_index_count\
    \ > 0) {\n        return $vowels[$vowels_index];\n    } else {\n        return\
    \ \"\";\n    }\n}\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk50709i.php:41\n\
    Stack trace:\n#0 /tmp/tmpfk50709i.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpfk50709i.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_array = str_split($vowels);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_count = count($vowels_array\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphvqdv5bs.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpam4aclft.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqjgnsjli.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_index = 0;\n\
    \    foreach ($vowels as $vowel) {\n        if (strpos($word, $vowel) !== false)\
    \ {\n            $vowels_index = $vowel;\n            break;\n        }\n    }\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n    $vowels_index--;\n\
    \    $vowels_index++;\n    $vowels_index--;\n    $vowels_index++;\n\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvvoit0d4.php on line 118\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowel\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp14y27d2f.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm4ekxgh5.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1aridpw_.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_max = count($vowels)\
    \ - 1;\n    \n    for($i = 0; $i < $vowels_count; $i++) {\n        $vowels_index\
    \ = $i;\n        $vowels_index_max = $i;\n        for($j = $vowels_len - 1; $j\
    \ >= 0; $j--) {\n            if($word[$j] == $vowels[$vowels_index]) {\n     \
    \           $vowels_index++;\n                if($vowels_index == $vowels_count)\
    \ {\n                    $vowels_index = 0;\n                }\n            }\n\
    \        }\n    }\n    \n    if($vowels_index > $vowels_index_max) {\n       \
    \ return \"\";\n    }\n    \n    return $vowels[$vowels_index];\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4yohv1h.php:44\n\
    Stack trace:\n#0 /tmp/tmpd4yohv1h.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpd4yohv1h.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq5u3yof6.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_count = 0;\n   \
    \ $vowels_index_len = 0;\n    $vowels_index_len_count = 0;\n    $vowels_index_len_count2\
    \ = 0;\n    $vowels_index_len_count3 = 0;\n    $vowels_index_len_count4 = 0;\n\
    \    $vowels_index_len_count5 = 0;\n    $vowels_index_len_count6 = 0;\n    $vowels_index_len_count7\
    \ = 0;\n    $vowels_index_len_count8 = 0;\n    $vowels_index_len_count9 = 0;\n\
    \    $vowels_index_len_count10 = 0;\n    $vowels_index_len_count11 = 0;\n    $vowels_index_len_count12\
    \ = 0;\n    $vowels_index_len_count13 = 0;\n    $vowels_index_len_count14 = 0;\n\
    \    $vowels_index_len_count15 = 0;\n    $vowels_index_len_count16 = 0;\n    $vowels_index_len_count17\
    \ = 0;\n    $vowels_index_len_count18 = 0;\n    $vowels_index_len_count19 = 0;\n\
    \    $vowels_index_len_count20 = 0;\n    $vowels_index_len_count21 = 0;\n    $vowels_index_len_count22\
    \ = 0;\n    $vowels_index_len_count23 = 0;\n    $vowels_index_len_count24 = 0;\n\
    \    $vowels_index_len_count25 = 0;\n    $vowels_index_len_count26 = 0;\n    $vowels_index_len_count27\
    \ = 0;\n    $vowels_index_len_count28 = 0;\n    $vowels_index_len_count29 = 0;\n\
    \    $vowels_index_len_count30 = 0;\n    $vowels_index_len_count31 = 0;\n    $vowels_index_len_count32\
    \ = 0;\n    $vowels_index_len_count33 = 0;\n    $vowels_index_len_count34 = 0;\n\
    \    $vowels_index_len_count35 = 0;\n    $vowels_index_len_count36 = 0;\n    $vowels_index_len_count37\
    \ = 0;\n    $vowels_index_len_count38 = 0;\n    $vowels_index_len_count39 = 0;\n\
    \    $vowels_index_len_count40 = 0;\n    $vowels_index_len_count41 = 0;\n    $vowels_index_len_count42\
    \ = 0;\n    $vowels_index_len_count43 = 0;\n    $vowels_index_len_count44 = 0;\n\
    \    $vowels_index_len_count45 = 0;\n    $vowels_index_len_count46 = 0;\n    $vowels_index_len_count47\
    \ = 0;\n    $vowels_index_len_count48 = 0;\n    $vowels_index_len_count49 = 0;\n\
    \    $vowels_index_len_count50 = 0;\n    $vowels_index_len_count51 = 0;\n    $vowels_index_\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf4opqr67.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphtc4dfci.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count %= $vowels_count;\n  \
    \  return $vowels[$vowels_count];\n}\n\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnrrx58i.php:26\n\
    Stack trace:\n#0 /tmp/tmpqnrrx58i.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqnrrx58i.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3nb2ma5a.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count %= $vowels_count;\n    $vowels_count -= 1;\n    $vowels_count\
    \ += 1;\n    $vowels_count %= $vowels_count;\n    return $vowels[$vowels_count];\n\
    }\n</code>\n<|/ a tags=php,string,arrays,substring |>\n<| c |>\nThis doesn't work\
    \ if the word starts or ends with a vowel.\n<|/ c |>\n<| c |>\nYes, it does. I\
    \ tested it before posting it. It works fine.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if the word starts or ends with a vowel.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if the word starts or ends with a vowel.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if the word starts or ends with a vowel.\n<|/ c |>\n<| a tags=php,string,arrays,substring\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz2a6m5ai.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdhkvc9_w.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    \n    for($i = 0; $i < strlen($word); $i++) {\n        if($word[$i]\
    \ == $vowels[$vowels_index]) {\n            $vowels_index_count++;\n         \
    \   if($vowels_index_count == $vowels_index_count_max) {\n                $vowels_index++;\n\
    \                $vowels_index_count = 0;\n                $vowels_index_count_max\
    \ = $vowels_count - 1;\n            }\n        } else {\n            $vowels_index_count\
    \ = 0;\n            $vowels_index_count_max = $vowels_count - 1;\n        }\n\
    \    }\n    \n    return $vowels[$vowels_index];\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis doesn't work if the word is \"ab\". It returns \"u\" instead\
    \ of \"\".\n<|/ c |>\n<| c |>\nYes, I forgot to mention that in the question.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require the use of a loop\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0xi_q4jv.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_array\
    \ = array();\n    foreach ($vowels as $vowel) {\n        $vowels_array[] = $vowel;\n\
    \    }\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array =\
    \ array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpatltczjm.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp86063cdp.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count);\n    $vowels_count\
    \ = array_slice($vowels_count, -1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, -1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ -1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, -1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, -1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ -1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, -1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, -1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ -1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, -1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, -1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ -1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, -1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, -1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ -1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, -1, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, -1, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ -1, 1);\n    $vowels_count = array_slice($vowels_count, 0, \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_w29kcn7.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0369hj43.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    $vowels_index_count_min = 0;\n    $vowels_index_count_min_index =\
    \ 0;\n    $vowels_index_count_max_index = 0;\n    $vowels_index_count_min_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_max_index = $vowels_count - 1;\n\
    \    $vowels_index_count_min_index = $vowels_count - 1;\n    $vowels_index_count_max_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_min_index = $vowels_count - 1;\n\
    \    $vowels_index_count_max_index = $vowels_count - 1;\n    $vowels_index_count_min_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_max_index = $vowels_count - 1;\n\
    \    $vowels_index_count_min_index = $vowels_count - 1;\n    $vowels_index_count_max_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_min_index = $vowels_count - 1;\n\
    \    $vowels_index_count_max_index = $vowels_count - 1;\n    $vowels_index_count_min_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_max_index = $vowels_count - 1;\n\
    \    $vowels_index_count_min_index = $vowels_count - 1;\n    $vowels_index_count_max_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_min_index = $vowels_count - 1;\n\
    \    $vowels_index_count_max_index = $vowels_count - 1;\n    $vowels_index_count_min_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_max_index = $vowels_count - 1;\n\
    \    $vowels_index_count_min_index = $vowels_count - 1;\n    $vowels_index_count_max_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_min_index = $vowels_count - 1;\n\
    \    $vowels_index_count_max_index = $vowels_count - 1;\n    $vowels_index_count_min_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_max_index = $vowels_count - 1;\n\
    \    $vowels_index_count_min_index = $vowels_count - 1;\n    $vowels_index_count_max_index\
    \ = $vowels_count - 1;\n    $vowels_index_count_min_index = $vowels_count - 1;\n\
    \    $vowels_index_count_max_index = $vowels_count - 1;\n    $vowels_index_count_min_index\
    \ = $vowels_count - 1;\n    $vowels_\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq9n43tqi.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 1, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice(\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4wz1lxa9.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm1fi8gx_.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count_right\
    \ = count($vowels, 1);\n    $vowels_count_left = count($vowels, 0);\n    $vowels_count_left\
    \ = count($vowels, -1);\n    $vowels_count_right = count($vowels, -2);\n    $vowels_count_left\
    \ = count($vowels, -3);\n    $vowels_count_left = count($vowels, -4);\n    $vowels_count_left\
    \ = count($vowels, -5);\n    $vowels_count_left = count($vowels, -6);\n    $vowels_count_left\
    \ = count($vowels, -7);\n    $vowels_count_left = count($vowels, -8);\n    $vowels_count_left\
    \ = count($vowels, -9);\n    $vowels_count_left = count($vowels, -10);\n    $vowels_count_left\
    \ = count($vowels, -11);\n    $vowels_count_left = count($vowels, -12);\n    $vowels_count_left\
    \ = count($vowels, -13);\n    $vowels_count_left = count($vowels, -14);\n    $vowels_count_left\
    \ = count($vowels, -15);\n    $vowels_count_left = count($vowels, -16);\n    $vowels_count_left\
    \ = count($vowels, -17);\n    $vowels_count_left = count($vowels, -18);\n    $vowels_count_left\
    \ = count($vowels, -19);\n    $vowels_count_left = count($vowels, -20);\n    $vowels_count_left\
    \ = count($vowels, -21);\n    $vowels_count_left = count($vowels, -22);\n    $vowels_count_left\
    \ = count($vowels, -23);\n    $vowels_count_left = count($vowels, -24);\n    $vowels_count_left\
    \ = count($vowels, -25);\n    $vowels_count_left = count($vowels, -26);\n    $vowels_count_left\
    \ = count($vowels, -27);\n    $vowels_count_left = count($vowels, -28);\n    $vowels_count_left\
    \ = count($vowels, -29);\n    $vowels_count_left = count($vowels, -30);\n    $vowels_count_left\
    \ = count($vowels, -31);\n    $vowels_count_left = count($vowels, -32);\n    $vowels_count_left\
    \ = count($vowels, -33);\n    $vowels_count_left = count($vowels, -34);\n    $vowels_count_left\
    \ = count($vowels, -35);\n    $vowels_count_left = count($vowels, -36);\n    $vowels_count_left\
    \ = count($vowels, -37);\n    $vowels_count_left = count($vowels, -\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbu1auckd.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpambxzbk6.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7rr5n038.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpojsp6ok4.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    return $vowels[$vowels_count];\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph1652uqh.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8qcmoffn.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    \n    for($i = 0; $i < $vowels_count; $i++)\
    \ {\n        $vowel_position = $vowels_count - $i;\n        if($vowel_position\
    \ >= $vowels_count_from_right) {\n            break;\n        }\n        if($word[$vowel_position]\
    \ === 'a' || $word[$vowel_position] === 'e' || $word[$vowel_position] === 'i'\
    \ || $word[$vowel_position] === 'o' || $word[$vowel_position] === 'u') {\n   \
    \         return $word[$vowel_position];\n        }\n    }\n    return '';\n}\n\
    \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp6i7eeouh.php on line 15\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6i7eeouh.php:34\nStack trace:\n#0 /tmp/tmp6i7eeouh.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6i7eeouh.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgdehx_gw.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp65499gjp.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppqgvldj6.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    \n    for($i = 0; $i < strlen($word); $i++) {\n        $letter = $word[$i];\n\
    \        if(in_array($letter, $vowels)) {\n            $vowels_index = $i;\n \
    \           $vowels_index_count++;\n        }\n        if($vowels_index_count\
    \ > $vowels_index_count_max) {\n            $vowels_index_count_max = $vowels_index_count;\n\
    \        }\n    }\n    \n    $vowels_index_count_min = $vowels_index_count - 1;\n\
    \    for($i = strlen($word); $i > 0; $i--) {\n        $letter = $word[$i];\n \
    \       if(in_array($letter, $vowels)) {\n            $vowels_index = $i;\n  \
    \          $vowels_index_count++;\n        }\n        if($vowels_index_count <\
    \ $vowels_index_count_min) {\n            $vowels_index_count_min = $vowels_index_count;\n\
    \        }\n    }\n    \n    if($vowels_index_count > $vowels_index_count_max)\
    \ {\n        return \"\";\n    }\n    \n    if($vowels_index_count < $vowels_index_count_min)\
    \ {\n        return \"\";\n    }\n    \n    return $vowels[$vowels_index];\n}\n\
    \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqy_o730u.php:58\n\
    Stack trace:\n#0 /tmp/tmpqy_o730u.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpqy_o730u.php\
    \ on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    \n    for($i = 0; $i < strlen($word); $i++) {\n        if($word[$i]\
    \ == $vowels[$vowels_index]) {\n            $vowels_index++;\n            $vowels_index_count++;\n\
    \            if($vowels_index_count == $vowels_index_count_max) {\n          \
    \      $vowels_index = 0;\n                $vowels_index_count = 0;\n        \
    \    }\n        }\n    }\n    return $vowels[$vowels_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcntqtwcn.php:37\n\
    Stack trace:\n#0 /tmp/tmpcntqtwcn.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpcntqtwcn.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3qbf3vov.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_length\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_count = 0;\n   \
    \ $vowels_index_length = 0;\n    \n    for($i = 0; $i < $vowels_length; ++$i)\
    \ {\n        if($word[$i] == $vowels[$vowels_index]) {\n            $vowels_index_count++;\n\
    \            $vowels_index_length++;\n            if($vowels_index_count == $vowels_count)\
    \ {\n                $vowels_index++;\n                $vowels_index_count = 0;\n\
    \                $vowels_index_length = 0;\n            }\n        }\n    }\n\
    \    \n    if($vowels_index_length == $vowels_index_count) {\n        return $vowels[$vowels_index];\n\
    \    }\n    return \"\";\n}\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjgafb35.php:43\n\
    Stack trace:\n#0 /tmp/tmptjgafb35.php(58): test()\n#1 {main}\n  thrown in /tmp/tmptjgafb35.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    $vowels_count_from_right = abs($vowels_count_from_right);\n\
    \    $vowels_count_from_right = max($vowels_count_from_right, 0);\n    $vowels_count_from_right\
    \ = min($vowels_count_from_right, count($word) - 1);\n    $vowels_count_from_right\
    \ = max($vowels_count_from_right, 0);\n    \n    for($i = $vowels_count_from_right;\
    \ $i >= 0; $i--) {\n        if(in_array($word[$i], $vowels)) {\n            return\
    \ $word[$i];\n        }\n    }\n    return \"\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp9ufxn9ic.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp9ufxn9ic.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ufxn9ic.php:34\n\
    Stack trace:\n#0 /tmp/tmp9ufxn9ic.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9ufxn9ic.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp86q7q9bl.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_array = array_flip($vowels);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_\nfunction candidate(...$args) {\n   \
    \ return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsf5t1qx0.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip(\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu7mtwgq4.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5h4dwzo5.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_fli\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp682ebbzu.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbfeyg_ko.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpal4nuwva.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjbnw4ywk.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm8_q8180.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 = $vowels_len -\
    \ 1;\n    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4 = $vowels_len\
    \ - 3;\n    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6 = $vowels_len\
    \ - 5;\n    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8 = $vowels_len\
    \ - 7;\n    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10 = $vowels_len\
    \ - 9;\n    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12 = $vowels_len\
    \ - 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14 = $vowels_len\
    \ - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16 = $vowels_len\
    \ - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18 = $vowels_len\
    \ - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20 = $vowels_len\
    \ - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22 = $vowels_len\
    \ - 11;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24 = $vowels_len\
    \ - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26 = $vowels_len\
    \ - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28 = $vowels_len\
    \ - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30 = $vowels_len\
    \ - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32 = $vowels_len\
    \ - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34 = $vowels_len\
    \ - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36 = $vowels_len\
    \ - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38 = $vowels_len\
    \ - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40 = $vowels_len\
    \ - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42 = $\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqswbt3_r.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv6_f2e7b.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice(\nfunction candidate(...$args) {\n \
    \   return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp17qm0rxl.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcg41slzj.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n  \
    \  $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n   \
    \ $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count\
    \ -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -=\
    \ 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n\
    \    $vowels_count -= 1;\n    $vowels_count -= 1;\n    $vowels_count -= 1;\n \
    \   $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprwgbxiwe.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiq_p5vnq.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt1j9dby7.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_found\
    \ = 0;\n    $vowels_found2 = false;\n    $vowels_found3 = false;\n    $vowels_found4\
    \ = false;\n    $vowels_found5 = false;\n    $vowels_found6 = false;\n    $vowels_found7\
    \ = false;\n    $vowels_found8 = false;\n    $vowels_found9 = false;\n    $vowels_found10\
    \ = false;\n    $vowels_found11 = false;\n    $vowels_found12 = false;\n    $vowels_found13\
    \ = false;\n    $vowels_found14 = false;\n    $vowels_found15 = false;\n    $vowels_found16\
    \ = false;\n    $vowels_found17 = false;\n    $vowels_found18 = false;\n    $vowels_found19\
    \ = false;\n    $vowels_found20 = false;\n    $vowels_found21 = false;\n    $vowels_found22\
    \ = false;\n    $vowels_found23 = false;\n    $vowels_found24 = false;\n    $vowels_found25\
    \ = false;\n    $vowels_found26 = false;\n    $vowels_found27 = false;\n    $vowels_found28\
    \ = false;\n    $vowels_found29 = false;\n    $vowels_found30 = false;\n    $vowels_found31\
    \ = false;\n    $vowels_found32 = false;\n    $vowels_found33 = false;\n    $vowels_found34\
    \ = false;\n    $vowels_found35 = false;\n    $vowels_found36 = false;\n    $vowels_found37\
    \ = false;\n    $vowels_found38 = false;\n    $vowels_found39 = false;\n    $vowels_found40\
    \ = false;\n    $vowels_found41 = false;\n    $vowels_found42 = false;\n    $vowels_found43\
    \ = false;\n    $vowels_found44 = false;\n    $vowels_found45 = false;\n    $vowels_found46\
    \ = false;\n    $vowels_found47 = false;\n    $vowels_found48 = false;\n    $vowels_found49\
    \ = false;\n    $vowels_found50 = false;\n    $vowels_found51 = false;\n    $vowels_found52\
    \ = false;\n    $vowels_found53 = false;\n    $vowels_found54 = false;\n    $vowels_found55\
    \ = false;\n    $vowels_found56 = false;\n    $vowels_found57 = false;\n    $vowels_found58\
    \ = false;\n    $vowels_found59 = false;\n    $vowels_found60 = false;\n    $vowels_found61\
    \ = false;\n    $vowels_found62 = false;\n    $vowels_found63 = false;\n    $vowels_found64\
    \ = false;\n    $vowels_found65 = false;\n    $vowels_found66 = false;\n    $vowels_found67\
    \ = false;\n    $vowels_found68 = false;\n\nfunction candidate(...$args) {\n \
    \   return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwyqleycp.php on line 104\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa0p5224b.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm4ksljka.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count - 1], array_reverse($vowels));\n    return\
    \ $vowels[$vowels_count];\n}\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn267j6t8.php:24\n\
    Stack trace:\n#0 /tmp/tmpn267j6t8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpn267j6t8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_length\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_length = strlen($vowels[$vowels_index]);\n\
    \    $vowels_index_length = $vowels_length - $vowels_index_length;\n    $vowels_index_length\
    \ = $vowels_index_length / 2;\n    $vowels_index_length = $vowels_index_length\
    \ + $vowels_index_length;\n    $vowels_index_length = $vowels_index_length - 1;\n\
    \    $vowels_index_length = $vowels_index_length + 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowels_index_length = $vowels_index_length - 1;\n    $vowels_index_length\
    \ = $vowels_index_length - 1;\n    $vowels_index_length = $vowels_index_length\
    \ - 1;\n    $vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc3b5bnr_.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg_6dg7fy.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9tn_i2vg.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowels_count = array_search($vowels_count, array_count_values($vowels));\n\
    \    $vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1897up1v.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp54m3ma_k.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpht6d989o.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn205ewbt.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_len = strlen($vowels);\n\
    \    $vowels_len = min($vowels_len, $vowels_count);\n    $vowels_pos = strrpos($word,\
    \ $vowels);\n    if ($vowels_pos === false) {\n        return \"\";\n    }\n \
    \   $vowels_pos = $vowels_pos + $vowels_len - 1;\n    $vowels_pos = $vowels_pos\
    \ - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n\
    \    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos\
    \ = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos\
    \ - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n\
    \    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos\
    \ = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos\
    \ - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n\
    \    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos\
    \ = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos\
    \ - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n\
    \    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos\
    \ = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos\
    \ - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n\
    \    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos\
    \ = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos\
    \ - 1;\n    $vowels_pos = $vowels_pos - 1;\n    $vowels_pos = $vowels_pos - 1;\n\
    \    $vowels_pos = $vowels_\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdm96cqk1.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n\
    \    $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count = array_search($\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4capzqkl.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $vowels_count = array_flip($vowels_count);\n\
    \    \n    $vowels_count = array_flip($vowels_count);\n    \n    $vowels_count\
    \ = array_flip($vowels_count);\n    \n    $\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprzcao6vi.php on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjx8ddyb1.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_found\
    \ = 0;\n    $vowels_found_count = 0;\n    $vowels_found_index = 0;\n    $vowels_found_index2\
    \ = 0;\n    $vowels_found_index3 = 0;\n    $vowels_found_index4 = 0;\n    $vowels_found_index5\
    \ = 0;\n    $vowels_found_index6 = 0;\n    $vowels_found_index7 = 0;\n    $vowels_found_index8\
    \ = 0;\n    $vowels_found_index9 = 0;\n    $vowels_found_index10 = 0;\n    $vowels_found_index11\
    \ = 0;\n    $vowels_found_index12 = 0;\n    $vowels_found_index13 = 0;\n    $vowels_found_index14\
    \ = 0;\n    $vowels_found_index15 = 0;\n    $vowels_found_index16 = 0;\n    $vowels_found_index17\
    \ = 0;\n    $vowels_found_index18 = 0;\n    $vowels_found_index19 = 0;\n    $vowels_found_index20\
    \ = 0;\n    $vowels_found_index21 = 0;\n    $vowels_found_index22 = 0;\n    $vowels_found_index23\
    \ = 0;\n    $vowels_found_index24 = 0;\n    $vowels_found_index25 = 0;\n    $vowels_found_index26\
    \ = 0;\n    $vowels_found_index27 = 0;\n    $vowels_found_index28 = 0;\n    $vowels_found_index29\
    \ = 0;\n    $vowels_found_index30 = 0;\n    $vowels_found_index31 = 0;\n    $vowels_found_index32\
    \ = 0;\n    $vowels_found_index33 = 0;\n    $vowels_found_index34 = 0;\n    $vowels_found_index35\
    \ = 0;\n    $vowels_found_index36 = 0;\n    $vowels_found_index37 = 0;\n    $vowels_found_index38\
    \ = 0;\n    $vowels_found_index39 = 0;\n    $vowels_found_index40 = 0;\n    $vowels_found_index41\
    \ = 0;\n    $vowels_found_index42 = 0;\n    $vowels_found_index43 = 0;\n    $vowels_found_index44\
    \ = 0;\n    $vowels_found_index45 = 0;\n    $vowels_found_index46 = 0;\n    $vowels_found_index47\
    \ = 0;\n    $vowels_found_index48 = 0;\n    $vowels_found_index49 = 0;\n    $vowels_found_index50\
    \ = 0;\n    $vowels_found_index51 = 0;\n    $vowels_found_index52 = 0;\n    $vowels_found_index53\
    \ = 0;\n    $vowels_found_index54 = 0;\n    $vowels_found_index55 = 0;\n    $vowels_found_index56\
    \ = 0;\n    $vowels_found_index57 = 0;\n    $vowels_found_index58 = 0;\n    $vowels_found_index59\
    \ = 0;\n    $vowels_found_index60 = 0;\n    $\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw9lvonb7.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppxsw19tp.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse($vowels_count);\n  \
    \  $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_reverse($vowels_count);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_reverse\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6h6xggre.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$word.length - 2], array_reverse($vowels));\n\
    \    $vowels_count += 1;\n    $vowels_count = array_search($word[$word.length\
    \ - 3], array_reverse($vowels));\n    $vowels_count += 1;\n    $vowels_count =\
    \ array_search($word[$word.length - 4], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$word.length - 5], array_reverse($vowels));\n\
    \    $vowels_count += 1;\n    $vowels_count = array_search($word[$word.length\
    \ - 6], array_reverse($vowels));\n    $vowels_count += 1;\n    $vowels_count =\
    \ array_search($word[$word.length - 7], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$word.length - 8], array_reverse($vowels));\n\
    \    $vowels_count += 1;\n    $vowels_count = array_search($word[$word.length\
    \ - 9], array_reverse($vowels));\n    $vowels_count += 1;\n    $vowels_count =\
    \ array_search($word[$word.length - 10], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$word.length - 11], array_reverse($vowels));\n\
    \    $vowels_count += 1;\n    $vowels_count = array_search($word[$word.length\
    \ - 12], array_reverse($vowels));\n    $vowels_count += 1;\n    $vowels_count\
    \ = array_search($word[$word.length - 13], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$word.length - 14], array_reverse($vowels));\n\
    \    $vowels_count += 1;\n    $vowels_count = array_search($word[$word.length\
    \ - 15], array_reverse($vowels));\n    $vowels_count += 1;\n    $vowels_count\
    \ = array_search($word[$word.length - 16], array_reverse($vowels));\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$word.length - 17], array_reverse($vowels));\n\
    \    $vowels_count += 1;\n    $vowels_count = array_search($word[$word.length\
    \ - 18], array_reverse($vowels));\n    $vowels_count += 1;\n    $vowels_count\
    \ = array_search($word[$word.length - 19], array_reverse($vowels));\n    $vowels_count\
    \ += \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzcknmg95.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = strlen($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_last = end($vowels_array);\n\
    \    $vowels_array_first = array_shift($vowels_array);\n    $vowels_array_first\
    \ = strtolower($vowels_array_first);\n    $vowels_array_last = strtolower($vowels_array_last);\n\
    \    $vowels_array_first = str_replace(\" \", \"\", $vowels_array_first);\n  \
    \  $vowels_array_last = str_replace(\" \", \"\", $vowels_array_last);\n    $vowels_array_first\
    \ = str_replace(\",\", \"\", $vowels_array_first);\n    $vowels_array_last = str_replace(\"\
    ,\", \"\", $vowels_array_last);\n    $vowels_array_first = str_replace(\";\",\
    \ \"\", $vowels_array_first);\n    $vowels_array_last = str_replace(\";\", \"\"\
    , $vowels_array_last);\n    $vowels_array_first = str_replace(\"!\", \"\", $vowels_array_first);\n\
    \    $vowels_array_last = str_replace(\"!\", \"\", $vowels_array_last);\n    $vowels_array_first\
    \ = str_replace(\"?\", \"\", $vowels_array_first);\n    $vowels_array_last = str_replace(\"\
    ?\", \"\", $vowels_array_last);\n    $vowels_array_first = str_replace(\"'\",\
    \ \"\", $vowels_array_first);\n    $vowels_array_last = str_replace(\"'\", \"\"\
    , $vowels_array_last);\n    $vowels_array_first = str_replace(\"(\", \"\", $vowels_array_first);\n\
    \    $vowels_array_last = str_replace(\"(\", \"\", $vowels_array_last);\n    $vowels_array_first\
    \ = str_replace(\")\", \"\", $vowels_array_first);\n    $vowels_array_last = str_replace(\"\
    )\", \"\", $vowels_array_last);\n    $vowels_array_first = str_replace(\"[\",\
    \ \"\", $vowels_array_first);\n    $vowels_array_last = str_replace(\"[\", \"\"\
    , $vowels_array_last);\n    $vowels_array_first = str_replace(\"]\", \"\", $vowels_array_first);\n\
    \    $vowels_array_last = str_replace(\"]\", \"\", $vowels_array_last);\n    $vowels_array_first\
    \ = str_replace(\"{\", \"\", $vowels_array_first);\n    $vowels_array_last = str_replace(\"\
    {\", \"\", $vowels_array_last);\n    $vowels_array_first = str_replace(\"}\",\
    \ \"\", $vowels_array_first);\n    $vowels_array_last = str_replace(\"}\", \"\"\
    , $vowels_array_last);\n    $vowels_array_first = str_replace\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6rx2dz23.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfzg59ltx.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdi3bym9m.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7dz5uez3.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count %= $vowels_count;\n    return $vowels[$vowels_count];\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=php,string |>\n<code>\n<?php\n$string = 'yogurt';\n\
    $vowels = array('a', 'e', 'i', 'o', 'u');\n$vowels_count = count($vowels);\n$vowels_count\
    \ = array_search($string[$vowels_count], $vowels);\n$vowels_count += 1;\n$vowels_count\
    \ %= $vowels_count;\necho $vowels[$vowels_count];\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=php,string |>\n<code>\n<?php\n$string = 'yogurt';\n$vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n$vowels_count = count($vowels);\n$vowels_count = array_search($string[$vowels_count],\
    \ $vowels);\n$vowels_count += 1;\n$vowels_count %= $vowels_count;\necho $vowels[$vowels_count];\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe87pt9gh.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn7jw6m3t.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz61qu1e3.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_count = 0;\n    $vowels_index_count_max = $vowels_count\
    \ - 1;\n    foreach ($vowels as $vowel) {\n        if ($word == $vowel) {\n  \
    \          $vowels_index = $vowel;\n            break;\n        }\n    }\n   \
    \ $vowels_index_count++;\n    if ($vowels_index_count > $vowels_index_count_max)\
    \ {\n        $vowels_index_count = $vowels_index_count_max;\n    }\n    $vowels_index_count--;\n\
    \    $vowels_index_count_max = $vowels_index_count + 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_count - 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_count - 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_count - 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_count - 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_count - 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_count - 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_count - 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_count - 1;\n    $vowels_index_count_min\
    \ = $vowels_index_count - 1;\n    $vowels_index_count_min = $vowels_index_count\
    \ - 1;\n    $vowels_index_count_min = $vowels_index_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyfy36ff7.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowels_count = strlen($vowels);\n    $vowels_count = strlen($vowels);\n\
    \    $vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp0_g_bme.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = \nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwzwzaoxu.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_length\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 = $vowels_length\
    \ - 1;\n    $vowels_index3 = $vowels_length - 2;\n    $vowels_index4 = $vowels_length\
    \ - 3;\n    $vowels_index5 = $vowels_length - 4;\n    $vowels_index6 = $vowels_length\
    \ - 5;\n    $vowels_index7 = $vowels_length - 6;\n    $vowels_index8 = $vowels_length\
    \ - 7;\n    $vowels_index9 = $vowels_length - 8;\n    $vowels_index10 = $vowels_length\
    \ - 9;\n    $vowels_index11 = $vowels_length - 10;\n    $vowels_index12 = $vowels_length\
    \ - 11;\n    $vowels_index13 = $vowels_length - 12;\n    $vowels_index14 = $vowels_length\
    \ - 13;\n    $vowels_index15 = $vowels_length - 14;\n    $vowels_index16 = $vowels_length\
    \ - 15;\n    $vowels_index17 = $vowels_length - 16;\n    $vowels_index18 = $vowels_length\
    \ - 17;\n    $vowels_index19 = $vowels_length - 18;\n    $vowels_index20 = $vowels_length\
    \ - 19;\n    $vowels_index21 = $vowels_length - 20;\n    $vowels_index22 = $vowels_length\
    \ - 21;\n    $vowels_index23 = $vowels_length - 22;\n    $vowels_index24 = $vowels_length\
    \ - 23;\n    $vowels_index25 = $vowels_length - 24;\n    $vowels_index26 = $vowels_length\
    \ - 25;\n    $vowels_index27 = $vowels_length - 26;\n    $vowels_index28 = $vowels_length\
    \ - 27;\n    $vowels_index29 = $vowels_length - 28;\n    $vowels_index30 = $vowels_length\
    \ - 29;\n    $vowels_index31 = $vowels_length - 30;\n    $vowels_index32 = $vowels_length\
    \ - 31;\n    $vowels_index33 = $vowels_length - 32;\n    $vowels_index34 = $vowels_length\
    \ - 33;\n    $vowels_index35 = $vowels_length - 34;\n    $vowels_index36 = $vowels_length\
    \ - 35;\n    $vowels_index37 = $vowels_length - 36;\n    $vowels_index38 = $vowels_length\
    \ - 37;\n    $vowels_index39 = $vowels_length - 38;\n    $vowels_index40 = $vowels_length\
    \ - 39;\n    $vowels_index41 = $vowels_length - 40;\n    $vowels_index42 = $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm2quhfk9.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 = $vowels_len -\
    \ 1;\n    $vowels_index3 = $vowels_len - 2;\n    $vowels_index4 = $vowels_len\
    \ - 3;\n    $vowels_index5 = $vowels_len - 4;\n    $vowels_index6 = $vowels_len\
    \ - 5;\n    $vowels_index7 = $vowels_len - 6;\n    $vowels_index8 = $vowels_len\
    \ - 7;\n    $vowels_index9 = $vowels_len - 8;\n    $vowels_index10 = $vowels_len\
    \ - 9;\n    $vowels_index11 = $vowels_len - 10;\n    $vowels_index12 = $vowels_len\
    \ - 11;\n    $vowels_index13 = $vowels_len - 12;\n    $vowels_index14 = $vowels_len\
    \ - 13;\n    $vowels_index15 = $vowels_len - 14;\n    $vowels_index16 = $vowels_len\
    \ - 15;\n    $vowels_index17 = $vowels_len - 16;\n    $vowels_index18 = $vowels_len\
    \ - 17;\n    $vowels_index19 = $vowels_len - 18;\n    $vowels_index20 = $vowels_len\
    \ - 19;\n    $vowels_index21 = $vowels_len - 20;\n    $vowels_index22 = $vowels_len\
    \ - 11;\n    $vowels_index23 = $vowels_len - 22;\n    $vowels_index24 = $vowels_len\
    \ - 23;\n    $vowels_index25 = $vowels_len - 24;\n    $vowels_index26 = $vowels_len\
    \ - 25;\n    $vowels_index27 = $vowels_len - 26;\n    $vowels_index28 = $vowels_len\
    \ - 27;\n    $vowels_index29 = $vowels_len - 28;\n    $vowels_index30 = $vowels_len\
    \ - 29;\n    $vowels_index31 = $vowels_len - 30;\n    $vowels_index32 = $vowels_len\
    \ - 31;\n    $vowels_index33 = $vowels_len - 32;\n    $vowels_index34 = $vowels_len\
    \ - 33;\n    $vowels_index35 = $vowels_len - 34;\n    $vowels_index36 = $vowels_len\
    \ - 35;\n    $vowels_index37 = $vowels_len - 36;\n    $vowels_index38 = $vowels_len\
    \ - 37;\n    $vowels_index39 = $vowels_len - 38;\n    $vowels_index40 = $vowels_len\
    \ - 39;\n    $vowels_index41 = $vowels_len - 40;\n    $vowels_index42 = $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt2c0sr7z.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count %= $vowels_count;\n  \
    \  return $vowels[$vowels_count];\n}\n</code>\n<|/ a tags=php,string |>\n<| c\
    \ |>\nThis doesn't work if the word is \"ab\" because it will return \"a\" instead\
    \ of \"\"\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer\
    \ to handle that case.\n<|/ c |>\n<| a tags=php,string |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptoqncpff.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_1ftvwzj.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_array\
    \ = array_flip($vowels);\n    $vowels_array = array_flip($vowels_array);\n   \
    \ $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($vowels_array);\n\
    \    $vowels_array = array_flip($vowels_array);\n    $vowels_array = array_flip($\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpweeeerwk.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($vowels);\n    $vowels_len = min($vowels_len, strlen($word));\n   \
    \ $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0hlug0nq.php on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd73168y8.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    $vowels_count_from_left = count($word)\
    \ - $vowels_count_from_right;\n    \n    for($i = 0; $i < $vowels_count; $i++)\
    \ {\n        $vowel = $word[$i];\n        if($vowels_count_from_right == 0) {\n\
    \            $vowels_count_from_right = $vowels_count_from_left + 1;\n       \
    \ }\n        if($vowels_count_from_left == 0) {\n            $vowels_count_from_left\
    \ = $vowels_count_from_right + 1;\n        }\n        if($vowels_count_from_right\
    \ == $vowels_count_from_left) {\n            $vowels_count_from_right = $vowels_count_from_left\
    \ + 1;\n        }\n        if($vowels_count_from_right < $vowels_count_from_left)\
    \ {\n            $vowels_count_from_right = $vowels_count_from_left + 1;\n   \
    \     }\n        if($vowels_count_from_left > $vowels_count_from_right) {\n  \
    \          $vowels_count_from_left = $vowels_count_from_right + 1;\n        }\n\
    \        if($vowels_count_from_right == $vowels_count_from_left && $vowel == $vowels[$i])\
    \ {\n            return $vowel;\n        }\n    }\n    return \"\";\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppzd_7rg6.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaq1inueo.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5vtarc2i.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp45o0ujyt.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_length\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index2 = $vowels_length\
    \ - 1;\n    $vowels_index3 = $vowels_length - 2;\n    $vowels_index4 = $vowels_length\
    \ - 3;\n    $vowels_index5 = $vowels_length - 4;\n    $vowels_index6 = $vowels_length\
    \ - 5;\n    $vowels_index7 = $vowels_length - 6;\n    $vowels_index8 = $vowels_length\
    \ - 7;\n    $vowels_index9 = $vowels_length - 8;\n    $vowels_index10 = $vowels_length\
    \ - 9;\n    $vowels_index11 = $vowels_length - 10;\n    $vowels_index12 = $vowels_length\
    \ - 11;\n    $vowels_index13 = $vowels_length - 12;\n    $vowels_index14 = $vowels_length\
    \ - 13;\n    $vowels_index15 = $vowels_length - 14;\n    $vowels_index16 = $vowels_length\
    \ - 15;\n    $vowels_index17 = $vowels_length - 16;\n    $vowels_index18 = $vowels_length\
    \ - 17;\n    $vowels_index19 = $vowels_length - 18;\n    $vowels_index20 = $vowels_length\
    \ - 19;\n    $vowels_index21 = $vowels_length - 20;\n    $vowels_index22 = $vowels_length\
    \ - 21;\n    $vowels_index23 = $vowels_length - 22;\n    $vowels_index24 = $vowels_length\
    \ - 23;\n    $vowels_index25 = $vowels_length - 24;\n    $vowels_index26 = $vowels_length\
    \ - 25;\n    $vowels_index27 = $vowels_length - 26;\n    $vowels_index28 = $vowels_length\
    \ - 27;\n    $vowels_index29 = $vowels_length - 28;\n    $vowels_index30 = $vowels_length\
    \ - 29;\n    $vowels_index31 = $vowels_length - 30;\n    $vowels_index32 = $vowels_length\
    \ - 31;\n    $vowels_index33 = $vowels_length - 32;\n    $vowels_index34 = $vowels_length\
    \ - 33;\n    $vowels_index35 = $vowels_length - 34;\n    $vowels_index36 = $vowels_length\
    \ - 35;\n    $vowels_index37 = $vowels_length - 36;\n    $vowels_index38 = $vowels_length\
    \ - 37;\n    $vowels_index39 = $vowels_length - 38;\n    $vowels_index40 = $vowels_length\
    \ - 39;\n    $vowels_index41 = $vowels_length - 40;\n    $vowels_index42 = $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjkiddq4b.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = count($word) - 1;\n    $vowels_index3 = count($word)\
    \ - 2;\n    $vowels_index4 = count($word) - 3;\n    $vowels_index5 = count($word)\
    \ - 4;\n    $vowels_index6 = count($word) - 5;\n    $vowels_index7 = count($word)\
    \ - 6;\n    $vowels_index8 = count($word) - 7;\n    $vowels_index9 = count($word)\
    \ - 8;\n    $vowels_index10 = count($word) - 9;\n    $vowels_index11 = count($word)\
    \ - 10;\n    $vowels_index12 = count($word) - 11;\n    $vowels_index13 = count($word)\
    \ - 12;\n    $vowels_index14 = count($word) - 13;\n    $vowels_index15 = count($word)\
    \ - 14;\n    $vowels_index16 = count($word) - 15;\n    $vowels_index17 = count($word)\
    \ - 16;\n    $vowels_index18 = count($word) - 17;\n    $vowels_index19 = count($word)\
    \ - 18;\n    $vowels_index20 = count($word) - 19;\n    $vowels_index21 = count($word)\
    \ - 20;\n    $vowels_index22 = count($word) - 21;\n    $vowels_index23 = count($word)\
    \ - 22;\n    $vowels_index24 = count($word) - 23;\n    $vowels_index25 = count($word)\
    \ - 24;\n    $vowels_index26 = count($word) - 25;\n    $vowels_index27 = count($word)\
    \ - 26;\n    $vowels_index28 = count($word) - 27;\n    $vowels_index29 = count($word)\
    \ - 28;\n    $vowels_index30 = count($word) - 29;\n    $vowels_index31 = count($word)\
    \ - 30;\n    $vowels_index32 = count($word) - 31;\n    $vowels_index33 = count($word)\
    \ - 32;\n    $vowels_index34 = count($word) - 33;\n    $vowels_index35 = count($word)\
    \ - 34;\n    $vowels_index36 = count($word) - 35;\n    $vowels_index37 = count($word)\
    \ - 36;\n    $vowels_index38 = count($word) - 37;\n    $vowels_index39 = count($word)\
    \ - 38;\n    $vowels_index40 = count($word) - 39;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl0o2upx3.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfmppmre5.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_array_count = count($vowels_array);\n    $vowels_array_reverse =\
    \ array_reverse($vowels_array);\n    $vowels_array_reverse_count = count($vowels_array_reverse);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count = min($vowels_array_reverse_count);\n\
    \    $vowels_array_reverse_count = max($vowels_array_reverse_count);\n    $vowels_array_reverse_count\
    \ = min($vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjhk95df4.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfk6ym947.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb6hnwvlt.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count_right\
    \ = count($vowels, 1);\n    $vowels_count_left = count($vowels, -1);\n    $vowels_count_both\
    \ = count($vowels, 0, 1);\n    $vowels_count_both_right = count($vowels, 0, -1);\n\
    \    $vowels_count_both_left = count($vowels, 0, -1);\n    $vowels_count_both_both\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_right = count($vowels,\
    \ 0, -1);\n    $vowels_count_both_both_left = count($vowels, 0, -1);\n    $vowels_count_both_both_both\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_both_right = count($vowels,\
    \ 0, -1);\n    $vowels_count_both_both_both_left = count($vowels, 0, -1);\n  \
    \  $vowels_count_both_both_both_both = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_right\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_left = count($vowels,\
    \ 0, -1);\n    $vowels_count_both_both_both_both_both = count($vowels, 0, -1);\n\
    \    $vowels_count_both_both_both_both_both_right = count($vowels, 0, -1);\n \
    \   $vowels_count_both_both_both_both_both_left = count($vowels, 0, -1);\n   \
    \ $vowels_count_both_both_both_both_both_both = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_both_both_right\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_both_both_left\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_both_both_both\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_both_both_both_right\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_both_both_both_left\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_both_both_both_both\
    \ = count($vowels, 0, -1);\n    $vowels_count_both_both_both_both_both_both_both_both_right\
    \ = count($vowels, 0, \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptbk86rqh.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    $vowels_count_from_left = count($word)\
    \ - $vowels_count_from_right;\n    $vowels_count_from_right_to_left = count($word)\
    \ - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_count_from_left - $vowels_count_from_right;\n    $vowels_count_from_right_to_left\
    \ = count($word) - $vowels_count_from_right - $vowels_count_from_left;\n    $vowels_count_from_left_to_right\
    \ = count($word) - $vowels_\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxvyzfgui.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_found\
    \ = 0;\n    $vowels_found2 = false;\n    $vowels_found3 = false;\n    $vowels_found4\
    \ = false;\n    $vowels_found5 = false;\n    $vowels_found6 = false;\n    $vowels_found7\
    \ = false;\n    $vowels_found8 = false;\n    $vowels_found9 = false;\n    $vowels_found10\
    \ = false;\n    $vowels_found11 = false;\n    $vowels_found12 = false;\n    $vowels_found13\
    \ = false;\n    $vowels_found14 = false;\n    $vowels_found15 = false;\n    $vowels_found16\
    \ = false;\n    $vowels_found17 = false;\n    $vowels_found18 = false;\n    $vowels_found19\
    \ = false;\n    $vowels_found20 = false;\n    $vowels_found21 = false;\n    $vowels_found22\
    \ = false;\n    $vowels_found23 = false;\n    $vowels_found24 = false;\n    $vowels_found25\
    \ = false;\n    $vowels_found26 = false;\n    $vowels_found27 = false;\n    $vowels_found28\
    \ = false;\n    $vowels_found29 = false;\n    $vowels_found30 = false;\n    $vowels_found31\
    \ = false;\n    $vowels_found32 = false;\n    $vowels_found33 = false;\n    $vowels_found34\
    \ = false;\n    $vowels_found35 = false;\n    $vowels_found36 = false;\n    $vowels_found37\
    \ = false;\n    $vowels_found38 = false;\n    $vowels_found39 = false;\n    $vowels_found40\
    \ = false;\n    $vowels_found41 = false;\n    $vowels_found42 = false;\n    $vowels_found43\
    \ = false;\n    $vowels_found44 = false;\n    $vowels_found45 = false;\n    $vowels_found46\
    \ = false;\n    $vowels_found47 = false;\n    $vowels_found48 = false;\n    $vowels_found49\
    \ = false;\n    $vowels_found50 = false;\n    $vowels_found51 = false;\n    $vowels_found52\
    \ = false;\n    $vowels_found53 = false;\n    $vowels_found54 = false;\n    $vowels_found55\
    \ = false;\n    $vowels_found56 = false;\n    $vowels_found57 = false;\n    $vowels_found58\
    \ = false;\n    $vowels_found59 = false;\n    $vowels_found60 = false;\n    $vowels_found61\
    \ = false;\n    $vowels_found62 = false;\n    $vowels_found63 = false;\n    $vowels_found64\
    \ = false;\n    $vowels_found65 = false;\n    $vowels_found66 = false;\n    $vowels_found67\
    \ = false;\n    $vowels_found68 = false;\n\nfunction candidate(...$args) {\n \
    \   return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5itfap_2.php on line 104\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp3li_nsk.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg2exaob7.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqjq5nnfn.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($vowels);\n    $vowels_len = min($vowels_len, strlen($word));\n   \
    \ $vowels_len = max($vowels_len, 1);\n    $vowels_len = $vowels_len - 1;\n   \
    \ $vowels_len = min($vowels_len, count($word) - 1);\n    $vowels_len = max($vowels_len,\
    \ 1);\n    $vowels_len = count($word) - $vowels_len;\n    $vowels_len = min($vowels_len,\
    \ count($word) - 1);\n    $vowels_len = max($vowels_len, 1);\n    $vowels_len\
    \ = count($word) - $vowels_len;\n    $vowels_len = min($vowels_len, count($word)\
    \ - 1);\n    $vowels_len = max($vowels_len, 1);\n    $vowels_len = count($word)\
    \ - $vowels_len;\n    $vowels_len = min($vowels_len, count($word) - 1);\n    $vowels_len\
    \ = max($vowels_len, 1);\n    $vowels_len = count($word) - $vowels_len;\n    $vowels_len\
    \ = min($vowels_len, count($word) - 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = count($word) - $vowels_len;\n    $vowels_len = min($vowels_len,\
    \ count($word) - 1);\n    $vowels_len = max($vowels_len, 1);\n    $vowels_len\
    \ = count($word) - $vowels_len;\n    $vowels_len = min($vowels_len, count($word)\
    \ - 1);\n    $vowels_len = max($vowels_len, 1);\n    $vowels_len = count($word)\
    \ - $vowels_len;\n    $vowels_len = min($vowels_len, count($word) - 1);\n    $vowels_len\
    \ = max($vowels_len, 1);\n    $vowels_len = count($word) - $vowels_len;\n    $vowels_len\
    \ = min($vowels_len, count($word) - 1);\n    $vowels_len = max($vowels_len, 1);\n\
    \    $vowels_len = count($word) - $vowels_len;\n    $vowels_len = min($vowels_len,\
    \ count($word) - 1);\n    $vowels_len = max($vowels_len, 1);\n    $vowels_len\
    \ = count($word) - $vowels_len;\n    $vowels_len = min($vowels_len, count($word)\
    \ - 1);\n    $vowels_len = max($vowels_len, 1);\n    $vowels_len = count($word)\
    \ - $vowels_len;\n    $vowels_len = min($vowels_len, count($word\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpac3dfwdc.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    $vowels_count\
    \ = array_search($word[$word.length - 1], array_reverse($vowels));\n    return\
    \ $vowels[$vowels_count];\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph6kc1n2p.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjnjtnm6e.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8t8lcsq3.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_array = array();\n\
    \    for($i = 0; $i < $vowels_count; $i++) {\n        $vowels_array[] = $vowels[$i];\n\
    \    }\n    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfgovkgfa.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = str_word_count($word);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = $vowels_array[0];\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array\
    \ = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, 1);\n    $vowels_array = array_slice($vowels_array, 0, -1);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, 1);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, -1);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, 1);\n    $vowels_array = array_slice($vowels_array, 0, -1);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, 1);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, -1);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, 1);\n    $vowels_array = array_slice($vowels_array, 0, -1);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, 1);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, -1);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_array = array_reverse($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, 1);\n    $vowels_array = array_slice($vowels_array, 0, -1);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, 1);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, -1);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_array = array_reverse($vowels_array);\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpybq66802.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjhgt9_6z.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($word);\n    $vowels_index = 0;\n    $vowels_index_count = 0;\n   \
    \ $vowels_index_len = 0;\n    $vowels_index_len_count = 0;\n    \n    for($i =\
    \ 0; $i < $vowels_count; $i++) {\n        $vowels_index_len_count = 0;\n     \
    \   $vowels_index_len_count = 0;\n        for($j = 0; $j < $vowels_len; $j++)\
    \ {\n            if($word[$j] == $vowels[$i]) {\n                $vowels_index_len_count++;\n\
    \            }\n        }\n        if($vowels_index_len_count >= $vowels_index_len)\
    \ {\n            $vowels_index_len = $vowels_index_len_count;\n            $vowels_index\
    \ = $i;\n        }\n    }\n    \n    if($vowels_index_len > 0) {\n        $vowels_index_len_count\
    \ = 0;\n        for($j = 0; $j < $vowels_len; $j++) {\n            if($word[$j]\
    \ == $vowels[$vowels_index]) {\n                $vowels_index_len_count++;\n \
    \           }\n        }\n        if($vowels_index_len_count >= $vowels_index_len)\
    \ {\n            return $vowels[$vowels_index];\n        }\n    }\n    \n    return\
    \ \"\";\n}\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz75wjrij.php:54\n\
    Stack trace:\n#0 /tmp/tmpz75wjrij.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpz75wjrij.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n\
    \    $vowels_count = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, $vowels_count-1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, $vowel\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaog8ibnn.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    \n    $vowels_count_from_right = min($vowels_count_from_right,\
    \ count($word) - $vowels_count);\n    \n    for($i = 0; $i < $vowels_count; $i++)\
    \ {\n        if($word[$vowels_count_from_right - $i] == $vowels[$i]) {\n     \
    \       return $vowels[$i];\n        }\n    }\n    \n    return \"\";\n}\n\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmp1se7852k.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmp1se7852k.php\
    \ on line 17\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1se7852k.php:33\n\
    Stack trace:\n#0 /tmp/tmp1se7852k.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp1se7852k.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count = array_search($word[$vowels_count], $vowels);\n    $vowels_count\
    \ += 1;\n    $vowels_count = array_search($word[$vowels_count], $vowels);\n  \
    \  $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpma4c4ao7.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    return $vowels[$vowels_count];\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThanks for your answer. Your code works fine for \"yogurt\" but fails\
    \ for \"FULL\". Your code returns \"U\" instead of \"U\" because \"U\" is in the\
    \ middle of the word \"FULL\". My code returns \"U\" because \"U\" is in the middle\
    \ of the word \"FULL\".\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ for your new requirements. I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer. Your code works fine for \"yogurt\" but fails for \"FULL\". Your code\
    \ returns \"U\" instead of \"U\" because \"U\" is in the middle of the word \"\
    FULL\". My code returns \"U\" because \"U\" is in the middle of the word \"FULL\"\
    .\n<|/ c |>\n<| c |>\nI edited my answer to include a solution for your new requirements.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works\
    \ fine for \"yogurt\" but fails for \"FULL\". Your code returns \"U\" instead\
    \ of \"U\" because \"U\" is in the middle of the word \"FULL\". My code returns\
    \ \"U\" because \"U\" is in the middle of the word \"FULL\".\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprpn_pzuk.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = $vowels_index + 1;\n    $vowels_index3 = $vowels_index\
    \ + 2;\n    $vowels_index4 = $vowels_index + 3;\n    $vowels_index5 = $vowels_index\
    \ + 4;\n    $vowels_index6 = $vowels_index + 5;\n    $vowels_index7 = $vowels_index\
    \ + 6;\n    $vowels_index8 = $vowels_index + 7;\n    $vowels_index9 = $vowels_index\
    \ + 8;\n    $vowels_index10 = $vowels_index + 9;\n    $vowels_index11 = $vowels_index\
    \ + 10;\n    $vowels_index12 = $vowels_index + 11;\n    $vowels_index13 = $vowels_index\
    \ + 12;\n    $vowels_index14 = $vowels_index + 13;\n    $vowels_index15 = $vowels_index\
    \ + 14;\n    $vowels_index16 = $vowels_index + 15;\n    $vowels_index17 = $vowels_index\
    \ + 16;\n    $vowels_index18 = $vowels_index + 17;\n    $vowels_index19 = $vowels_index\
    \ + 18;\n    $vowels_index20 = $vowels_index + 19;\n    $vowels_index21 = $vowels_index\
    \ + 20;\n    $vowels_index22 = $vowels_index + 21;\n    $vowels_index23 = $vowels_index\
    \ + 22;\n    $vowels_index24 = $vowels_index + 23;\n    $vowels_index25 = $vowels_index\
    \ + 24;\n    $vowels_index26 = $vowels_index + 25;\n    $vowels_index27 = $vowels_index\
    \ + 26;\n    $vowels_index28 = $vowels_index + 27;\n    $vowels_index29 = $vowels_index\
    \ + 28;\n    $vowels_index30 = $vowels_index + 29;\n    $vowels_index31 = $vowels_index\
    \ + 30;\n    $vowels_index32 = $vowels_index + 31;\n    $vowels_index33 = $vowels_index\
    \ + 32;\n    $vowels_index34 = $vowels_index + 33;\n    $vowels_index35 = $vowels_index\
    \ + 34;\n    $vowels_index36 = $vowels_index + 35;\n    $vowels_index37 = $vowels_index\
    \ + 36;\n    $vowels_index38 = $vowels_index + 37;\n    $vowels_index39 = $vowels_index\
    \ + 38;\n    $vowels_index40 = $vowels_index + 39;\n    $vowels_index41 = $vowels_index\
    \ + 40;\n    $vowels_index42 = $vowels_index + 41;\n    $vowels_index4\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpen9nqdfk.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count -= 1;\n    return $vowels[$vowels_count];\n}\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8axcwhza.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count %= $vowels_count;\n    return $vowels[$vowels_count];\n}\n\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvv_bjjjy.php:26\n\
    Stack trace:\n#0 /tmp/tmpvv_bjjjy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvv_bjjjy.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_fli\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvdxnxpkp.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_sum($vowels_count);\n\
    \    $vowels_count = array_sum($vowels_count);\n    $vowels_count = array_\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp13mnczin.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt_o58p6p.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_max = count($vowels) - 1;\n    $vowels_index_min = count($vowels)\
    \ - 2;\n    \n    $vowels_index_min = $vowels_index_min < 0 ? 0 : $vowels_index_min;\n\
    \    $vowels_index_max = $vowels_index_max > $vowels_count ? $vowels_count : $vowels_index_max;\n\
    \    \n    $vowels_index_min = $vowels_index_min < 0 ? 0 : $vowels_index_min;\n\
    \    $vowels_index_max = $vowels_index_max > $vowels_count ? $vowels_count : $vowels_index_max;\n\
    \    \n    for($i = 0; $i < strlen($word); $i++) {\n        $letter = strtolower($word[$i]);\n\
    \        if(in_array($letter, $vowels)) {\n            $vowels_index = $i;\n \
    \           break;\n        }\n    }\n    \n    if($vowels_index >= $vowels_index_min\
    \ && $vowels_index <= $vowels_index_max) {\n        return $vowels[$vowels_index];\n\
    \    } else {\n        return \"\";\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8x1gqnts.php:45\n\
    Stack trace:\n#0 /tmp/tmp8x1gqnts.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp8x1gqnts.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowels_count = count($vowels);\n    $vowels_array = str_split($vowels);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_reverse($vowels_array);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n    $vowels_array\
    \ = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count = count($vowels_array);\n\
    \    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n    $vowels_count\
    \ = count($vowels_array);\n    $vowels_array = array_slice($vowels_array, 0, $vowels_count);\n\
    \    $vowels_count = count($vowels_array);\n    $vowels_array = array_slice($vowels_array,\
    \ 0, $vowels_count);\n    $\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaflm40vd.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index2 = count($vowels) - 1;\n    $vowels_index3 = 0;\n  \
    \  $vowels_index4 = 0;\n    $vowels_index5 = 0;\n    $vowels_index6 = 0;\n   \
    \ $vowels_index7 = 0;\n    $vowels_index8 = 0;\n    $vowels_index9 = 0;\n    $vowels_index10\
    \ = 0;\n    $vowels_index11 = 0;\n    $vowels_index12 = 0;\n    $vowels_index13\
    \ = 0;\n    $vowels_index14 = 0;\n    $vowels_index15 = 0;\n    $vowels_index16\
    \ = 0;\n    $vowels_index17 = 0;\n    $vowels_index18 = 0;\n    $vowels_index19\
    \ = 0;\n    $vowels_index20 = 0;\n    $vowels_index21 = 0;\n    $vowels_index22\
    \ = 0;\n    $vowels_index23 = 0;\n    $vowels_index24 = 0;\n    $vowels_index25\
    \ = 0;\n    $vowels_index26 = 0;\n    $vowels_index27 = 0;\n    $vowels_index28\
    \ = 0;\n    $vowels_index29 = 0;\n    $vowels_index30 = 0;\n    $vowels_index31\
    \ = 0;\n    $vowels_index32 = 0;\n    $vowels_index33 = 0;\n    $vowels_index34\
    \ = 0;\n    $vowels_index35 = 0;\n    $vowels_index36 = 0;\n    $vowels_index37\
    \ = 0;\n    $vowels_index38 = 0;\n    $vowels_index39 = 0;\n    $vowels_index40\
    \ = 0;\n    $vowels_index41 = 0;\n    $vowels_index42 = 0;\n    $vowels_index43\
    \ = 0;\n    $vowels_index44 = 0;\n    $vowels_index45 = 0;\n    $vowels_index46\
    \ = 0;\n    $vowels_index47 = 0;\n    $vowels_index48 = 0;\n    $vowels_index49\
    \ = 0;\n    $vowels_index50 = 0;\n    $vowels_index51 = 0;\n    $vowels_index52\
    \ = 0;\n    $vowels_index53 = 0;\n    $vowels_index54 = 0;\n    $vowels_index55\
    \ = 0;\n    $vowels_index56 = 0;\n    $vowels_index57 = 0;\n    $vowels_index58\
    \ = 0;\n    $vowels_index59 = 0;\n    $vowels_index60 = 0;\n    $vowels_index61\
    \ = 0;\n    $vowels_index62 = 0;\n    $vowels_index63 = 0;\n    $vowels_index64\
    \ = 0;\n    $vowels_index65 = 0;\n    $vowels_index66 = 0;\n    $vowels_index67\
    \ = 0;\n    $vowels_index68 = 0;\n    $vowels_index69 = 0;\n    $vowels_index\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvn5cc7oy.php on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($word[$vowels_count], $vowels);\n    $vowels_count += 1;\n  \
    \  $vowels_count %= $vowels_count;\n    return $vowels[$vowels_count];\n}\n\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8eyqnrtt.php:26\n\
    Stack trace:\n#0 /tmp/tmp8eyqnrtt.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8eyqnrtt.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_max = count($word) - 1;\n    \n    for($i = 0; $i <\
    \ $vowels_count; $i++) {\n        $vowels_index += $vowels[$i];\n        if($vowels_index\
    \ >= $vowels_index_max) {\n            $vowels_index -= $vowels[$i];\n       \
    \ }\n        if($word[$vowels_index] === \"a\" || $word[$vowels_index] === \"\
    e\" || $word[$vowels_index] === \"i\" || $word[$vowels_index] === \"o\" || $word[$vowels_index]\
    \ === \"u\") {\n            return $word[$vowels_index];\n        }\n    }\n \
    \   return \"\";\n}\n\nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpgxioe767.php on line 16\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 19\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 21\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 19\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 21\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 19\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 21\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 19\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 21\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 19\n\nWarning: A non-numeric value\
    \ encountered in /tmp/tmpgxioe767.php on line 21\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgxioe767.php:35\nStack trace:\n#0 /tmp/tmpgxioe767.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgxioe767.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyy576g0q.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count_from_right\
    \ = count($word) - $vowels_count;\n    $vowels_count_from_right = max($vowels_count_from_right,\
    \ 0);\n    \n    $vowels_count_from_left = count($word) - $vowels_count_from_right;\n\
    \    $vowels_count_from_left = min($vowels_count_from_left, count($word) - 1);\n\
    \    \n    for($i = $vowels_count_from_left; $i <= $vowels_count_from_right; $i++)\
    \ {\n        if(in_array($word[$i], $vowels)) {\n            return $word[$i];\n\
    \        }\n    }\n    return \"\";\n}\n\nfunction candidate(...$args) {\n   \
    \ return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpxcxk4_8k.php on line 15\n\nWarning: count(): Parameter\
    \ must be an array or an object that implements Countable in /tmp/tmpxcxk4_8k.php\
    \ on line 18\n\nWarning: count(): Parameter must be an array or an object that\
    \ implements Countable in /tmp/tmpxcxk4_8k.php on line 19\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxcxk4_8k.php:34\nStack trace:\n#0 /tmp/tmpxcxk4_8k.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxcxk4_8k.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search($word[$vowels_count],\
    \ $vowels);\n    $vowels_count += 1;\n    $vowels_count = array_search\nfunction\
    \ candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptkngr2m4.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    $vowels_index_max = $vowels_count - 1;\n    $vowels_index_min = 0;\n\
    \    $vowels_index_min_index = 0;\n    $vowels_index_max_index = 0;\n    \n  \
    \  for($i = 0; $i < strlen($word); $i++) {\n        if($word[$i] == $vowels[$vowels_index])\
    \ {\n            $vowels_index++;\n            if($vowels_index == $vowels_count)\
    \ {\n                $vowels_index = 0;\n            }\n        } else {\n   \
    \         $vowels_index = 0;\n        }\n    }\n    \n    for($i = 0; $i < strlen($word);\
    \ $i++) {\n        if($word[$i] == $vowels[$vowels_index_min]) {\n           \
    \ $vowels_index_min_index = $i;\n            $vowels_index_min = $vowels[$vowels_index_min_index];\n\
    \        }\n    }\n    \n    for($i = 0; $i < strlen($word); $i++) {\n       \
    \ if($word[$i] == $vowels[$vowels_index_max]) {\n            $vowels_index_max_index\
    \ = $i;\n            $vowels_index_max = $vowels[$vowels_index_max_index];\n \
    \       }\n    }\n    \n    if($vowels_index_min_index > $vowels_index_max_index)\
    \ {\n        return \"\";\n    }\n    \n    if($vowels_index_min_index == $vowels_index_max_index)\
    \ {\n        return $vowels[$vowels_index_min_index];\n    }\n    \n    if($vowels_index_min_index\
    \ < $vowels_index_max_index) {\n        $vowels_index_min_index = $vowels_index_min_index\
    \ + 1;\n        $vowels_index_max_index = $vowels_index_max_index - 1;\n    }\n\
    \    \n    if($vowels_index_min_index > $vowels_index_max_index) {\n        return\
    \ \"\";\n    }\n    \n    if($vowels_index_min_index == $vowels_index_max_index)\
    \ {\n        return $vowels[$vowels_index_min_index];\n    }\n    \n    if($vowels_index_min_index\
    \ < $vowels_index_max_index) {\n        $vowels_index_min_index = $vowels_index_min_index\
    \ + 1;\n        $vowels_index_max_index = $vowels_index_max_index - 1;\n    }\n\
    \    \n    if($vowels_index_min_index > $vowels_index_max_index) {\n        return\
    \ \"\";\n    }\n    \n    if($vowels_index_min_index == $vowels_index_max_index)\
    \ {\n        return $vowels[$vowels_index_min_index];\n\nfunction candidate(...$args)\
    \ {\n    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmjtd36wh.php on line 99\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdat_l7db.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count_right\
    \ = count($vowels, 1);\n    $vowels_count_left = count($vowels, 0);\n    $vowels_count_left\
    \ = count($vowels, -1);\n    $vowels_count_right = count($vowels, -2);\n    $vowels_count_left\
    \ = count($vowels, -3);\n    $vowels_count_left = count($vowels, -4);\n    $vowels_count_right\
    \ = count($vowels, -5);\n    $vowels_count_left = count($vowels, -6);\n    $vowels_count_left\
    \ = count($vowels, -7);\n    $vowels_count_right = count($vowels, -8);\n    $vowels_count_left\
    \ = count($vowels, -9);\n    $vowels_count_left = count($vowels, -10);\n    $vowels_count_right\
    \ = count($vowels, -11);\n    $vowels_count_left = count($vowels, -12);\n    $vowels_count_left\
    \ = count($vowels, -13);\n    $vowels_count_right = count($vowels, -14);\n   \
    \ $vowels_count_left = count($vowels, -15);\n    $vowels_count_left = count($vowels,\
    \ -16);\n    $vowels_count_right = count($vowels, -17);\n    $vowels_count_left\
    \ = count($vowels, -18);\n    $vowels_count_left = count($vowels, -19);\n    $vowels_count_right\
    \ = count($vowels, -20);\n    $vowels_count_left = count($vowels, -21);\n    $vowels_count_left\
    \ = count($vowels, -22);\n    $vowels_count_right = count($vowels, -23);\n   \
    \ $vowels_count_left = count($vowels, -24);\n    $vowels_count_left = count($vowels,\
    \ -25);\n    $vowels_count_right = count($vowels, -26);\n    $vowels_count_left\
    \ = count($vowels, -27);\n    $vowels_count_left = count($vowels, -28);\n    $vowels_count_right\
    \ = count($vowels, -29);\n    $vowels_count_left = count($vowels, -30);\n    $vowels_count_left\
    \ = count($vowels, -31); \n    $vowels_count_right = count($vowels, -32);\n  \
    \  $vowels_count_left = count($vowels, -33);\n    $vowels_count_left = count($vowels,\
    \ -34);\n    $vowels_count_right = count($vowels, -35);\n    $vowels_count_left\
    \ = count($vowels, -36);\n    $vowels_count_left = count($vowels, -37);\n    $vowels_count_right\
    \ = count($vowels, \nfunction candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfgmilfjv.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_index\
    \ = 0;\n    for($i = strlen($word); $i > 0; $i--) {\n        if(in_array($word[$i],\
    \ $vowels)) {\n            $vowels_index = $i;\n            break;\n        }\n\
    \    }\n    if($vowels_index > 0) {\n        $vowels_index--;\n    }\n    $vowels_index\
    \ += 1;\n    $vowels_index = $vowels_index - 1;\n    $vowels_index = $vowels_index\
    \ % $vowels_count;\n    return $vowels[$vowels_index];\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    full\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    easy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    eAsy\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ali\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    bad\") !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgc37ptbv.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_len\
    \ = strlen($vowels);\n    $vowels_len = min($vowels_len, $vowels_count);\n   \
    \ $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen($word));\n\
    \    $vowels_len = max($vowels_len, 1);\n    $vowels_len = min($vowels_len, strlen(\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpogycu5qg.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $vowels_count = count($vowels);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowels_count);\n\
    \    $vowels_count = array_flip($vowels_count);\n    $vowels_count = array_flip($vowel\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpja8dpkh7.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\", \"y\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count =\
    \ count($vowels);\n    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n\
    \    $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n  \
    \  $vowels_count = count($vowels);\n    $vowels_count = count($vowels);\n    $\n\
    function candidate(...$args) {\n    return get_closest_vowel(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\
    \") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !==\
    \ \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\"\
    ) !== \"a\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    most\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ab\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ba\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    quick\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    anime\") !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Asia\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Above\") !== \"o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7y5e_uyp.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a word. Your task is to find the closest vowel\
    \ that stands between \n// two consonants from the right side of the word (case\
    \ sensitive).\n// Vowels in the beginning and ending doesn't count. Return empty\
    \ string if you didn't\n// find any vowel met the above condition. \n// You may\
    \ assume that the given string contains English letter only.\n// Example:\n//\
    \ get_closest_vowel(\"yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==>\
    \ \"U\"\n// get_closest_vowel(\"quick\") ==> \"\"\n// get_closest_vowel(\"ab\"\
    ) ==> \"\"\nfunction get_closest_vowel($word) {\n    $vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n    $vowels_count = count($vowels);\n    $vowels_count\
    \ = array_search($vowels, $vowels_count);\n    $vowels_count = array_reverse($vowels_count);\n\
    \    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($vowels_count, 0, 1);\n    $vowels_count\
    \ = array_slice($vowels_count, 0, 1);\n    $vowels_count = array_slice($vowels_count,\
    \ 0, 1);\n    $vowels_count = array_slice($\nfunction candidate(...$args) {\n\
    \    return get_closest_vowel(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"yogurt\") !== \"u\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"full\") !== \"u\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"easy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"eAsy\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ali\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"bad\") !== \"a\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"most\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ab\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"ba\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"quick\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"anime\") !== \"i\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Asia\") !== \"\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Above\") !== \"o\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx8dd66lb.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
