name: HumanEval_135_can_arrange
language: php
results:
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = 9999;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value > $smallest) {\n      $smallest\
    \ = $value;\n    }\n    if ($value < $largest) {\n      $largest = $value;\n \
    \   }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphe51g4v8.php:28\n\
    Stack trace:\n#0 /tmp/tmphe51g4v8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphe51g4v8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $arr[($key\
    \ - 1)]) {\n            $largest = $key;\n            $largestIndex = $key;\n\
    \        }\n    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jmgpzb5.php:26\n\
    Stack trace:\n#0 /tmp/tmp3jmgpzb5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3jmgpzb5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : $smallest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjbbovdb.php:28\n\
    Stack trace:\n#0 /tmp/tmphjbbovdb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphjbbovdb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $index = 0;\n  \
    \  foreach ($arr as $key => $value) {\n        if ($key <= $index) {\n       \
    \     $largest = $key;\n        }\n        if ($key > $index) {\n            $index\
    \ = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp305zb_fk.php:28\n\
    Stack trace:\n#0 /tmp/tmp305zb_fk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp305zb_fk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value <= $arr[($key\
    \ - 1)]) {\n            $largest = $key;\n            $largestIndex = $value;\n\
    \        }\n    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf45z30i.php:27\n\
    Stack trace:\n#0 /tmp/tmppf45z30i.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppf45z30i.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = PHP_INT_MAX;\n\
    \  foreach ($arr as $key => $value) {\n    if ($largest < $value) {\n      $largest\
    \ = $value;\n    }\n    if ($smallest > $value) {\n      $smallest = $value;\n\
    \    }\n  }\n  return $largest - $smallest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdw06khnu.php:28\n\
    Stack trace:\n#0 /tmp/tmpdw06khnu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdw06khnu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key >= $smallest)\
    \ {\n            if ($key <= $largest) {\n                return $key;\n     \
    \       }\n            $largest = $key;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzk_i77b.php:28\n\
    Stack trace:\n#0 /tmp/tmpkzk_i77b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkzk_i77b.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $largest) {\n\
    \            $largest = $value;\n            $largestIndex = $key;\n        }\n\
    \    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lsxvv3c.php:26\n\
    Stack trace:\n#0 /tmp/tmp8lsxvv3c.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8lsxvv3c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key <= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key >= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if there are duplicate values\
    \ in the array.\n<|/ c |>\n<| c |>\nIt works fine for me. Can you give an example\
    \ where it fails?\n<|/ c |>\n<| c |>\nIt fails when the array is `[1,2,3,4,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]`\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to account for\
    \ duplicates.\n<|/ c |>\n<| c |>\nThis doesn't work if there are duplicate values\
    \ in the array.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$array = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20);\n\
    $largest = array_shift($array);\n$smallest = array_pop($array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array);\n$largest = array_search($largest,\
    \ $array);\n$smallest = array_search($smallest, $array\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjfyuihhi.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = 9999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $smallest) {\n \
    \           $smallest = $value;\n        }\n        if ($value < $largest) {\n\
    \            $largest = $value;\n        }\n    }\n    return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyk52tqw9.php:28\n\
    Stack trace:\n#0 /tmp/tmpyk52tqw9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyk52tqw9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5c8nhxul.php:24\n\
    Stack trace:\n#0 /tmp/tmp5c8nhxul.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5c8nhxul.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $index = 0;\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value > $largest) {\n    \
    \        $largest = $value;\n            $index = $key;\n        }\n    }\n  \
    \  return $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3vbouxq.php:26\n\
    Stack trace:\n#0 /tmp/tmpt3vbouxq.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt3vbouxq.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7hs6ity.php:28\n\
    Stack trace:\n#0 /tmp/tmpn7hs6ity.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn7hs6ity.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0xtubc_.php:24\n\
    Stack trace:\n#0 /tmp/tmpw0xtubc_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpw0xtubc_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwtu8858.php:24\n\
    Stack trace:\n#0 /tmp/tmpvwtu8858.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvwtu8858.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key < $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key > $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr50yldxg.php:28\n\
    Stack trace:\n#0 /tmp/tmpr50yldxg.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpr50yldxg.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? -1 : $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp49c2gsf7.php:28\n\
    Stack trace:\n#0 /tmp/tmp49c2gsf7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp49c2gsf7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? -1 : $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0f3zf78.php:28\n\
    Stack trace:\n#0 /tmp/tmpr0f3zf78.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpr0f3zf78.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9u3fvq5.php:24\n\
    Stack trace:\n#0 /tmp/tmpv9u3fvq5.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv9u3fvq5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $arr[($key\
    \ - 1)]) {\n            $largest = $key;\n            $largestIndex = $key;\n\
    \        }\n    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2stfglo7.php:26\n\
    Stack trace:\n#0 /tmp/tmp2stfglo7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp2stfglo7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jv35k6v.php:24\n\
    Stack trace:\n#0 /tmp/tmp_jv35k6v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_jv35k6v.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvoo3btsh.php:24\n\
    Stack trace:\n#0 /tmp/tmpvoo3btsh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvoo3btsh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7bizd6d.php:24\n\
    Stack trace:\n#0 /tmp/tmpb7bizd6d.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb7bizd6d.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key <= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key >= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtyl46p_.php:28\n\
    Stack trace:\n#0 /tmp/tmprtyl46p_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprtyl46p_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzl6r9ghm.php:24\n\
    Stack trace:\n#0 /tmp/tmpzl6r9ghm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzl6r9ghm.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $largest) {\n\
    \            $largest = $value;\n            $largestIndex = $key;\n        }\n\
    \    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8yyc6gx.php:26\n\
    Stack trace:\n#0 /tmp/tmpt8yyc6gx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt8yyc6gx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68z0vhxi.php:28\n\
    Stack trace:\n#0 /tmp/tmp68z0vhxi.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp68z0vhxi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key <= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key >= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1,2,4,3,5];\n\
    $largest = -1;\n$smallest = count($arr) - 1;\nforeach ($arr as $key => $value)\
    \ {\n    if ($key <= $smallest) {\n        $smallest = $key;\n    }\n    if ($key\
    \ >= $largest) {\n        $largest = $key;\n    }\n}\necho $largest;\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1,2,4,3,5];\n\
    $largest = -1;\n$smallest = count($arr) - 1;\nforeach ($arr as $key => $value)\
    \ {\n    if ($key <= $smallest) {\n        $smallest = $key;\n    }\n    if ($key\
    \ >= $largest) {\n        $largest = $key;\n    }\n}\necho $largest;\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a |>\n<code>\n<?php\n$arr = [1,2,4,3,5];\n$largest\
    \ = -1;\n$smallest = count($arr) - 1;\nforeach ($arr as $key => $value) {\n  \
    \  if ($key <= $smallest) {\n        $smallest = $key;\n    }\n    if ($key >=\
    \ $largest) {\n        $largest = $key;\n    }\n}\necho $largest;\n</code>\n<|/\
    \ a tags=php,arrays dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1,2,4,3,5];\n\
    $largest = -1;\n$smallest = count($arr) - 1;\nforeach ($arr as $key => $value)\
    \ {\n    if ($key <= $smallest) {\n        $smallest = $key;\n    }\n    if ($key\
    \ >= $largest) {\n        $largest = $key;\n    }\n}\necho $largest;\n</code>\n\
    <|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [1,2,4,3,5];\n\
    $largest = -1;\n$smallest = count($arr) - 1;\nforeach ($\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp76y3eb3k.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = 999999999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $smallest) {\n \
    \           $largest = $key;\n        } else if ($value < $smallest) {\n     \
    \       $smallest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp522ydgfh.php:27\n\
    Stack trace:\n#0 /tmp/tmp522ydgfh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp522ydgfh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($value > $smallest)\
    \ {\n            $largest = $key;\n        } else if ($value < $smallest) {\n\
    \            $smallest = $key;\n        }\n    }\n    return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6sx3yun3.php:27\n\
    Stack trace:\n#0 /tmp/tmp6sx3yun3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6sx3yun3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($largest < $value)\
    \ {\n            $largest = $value;\n        } else if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28z38t_e.php:27\n\
    Stack trace:\n#0 /tmp/tmp28z38t_e.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp28z38t_e.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest - $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsw1v7hz.php:28\n\
    Stack trace:\n#0 /tmp/tmpvsw1v7hz.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvsw1v7hz.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key <= $max) {\n            return -1;\n        }\n\
    \        if ($value > $max) {\n            $max = $key;\n        }\n    }\n  \
    \  return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0cvow12f.php:27\n\
    Stack trace:\n#0 /tmp/tmp0cvow12f.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0cvow12f.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  foreach ($arr as $key\
    \ => $value) {\n    if ($key <= $largest) {\n      return -1;\n    }\n    if ($value\
    \ > $largest) {\n      $largest = $key;\n    }\n  }\n  return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdasvch6r.php:27\n\
    Stack trace:\n#0 /tmp/tmpdasvch6r.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdasvch6r.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $arr[($key\
    \ - 1)]) {\n            $largest = $key;\n            $largestIndex = $key;\n\
    \        }\n    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbwsjivf.php:26\n\
    Stack trace:\n#0 /tmp/tmpjbwsjivf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjbwsjivf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = -1;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest > $smallest\
    \ ? $largest : $smallest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5orcf8h.php:28\n\
    Stack trace:\n#0 /tmp/tmpj5orcf8h.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpj5orcf8h.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = -1;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest - $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssti3klj.php:28\n\
    Stack trace:\n#0 /tmp/tmpssti3klj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpssti3klj.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6gae6jhw.php:24\n\
    Stack trace:\n#0 /tmp/tmp6gae6jhw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6gae6jhw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $val) {\n        if ($val > $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyifxvwm7.php:24\n\
    Stack trace:\n#0 /tmp/tmpyifxvwm7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyifxvwm7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key >= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key <= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovv9z3a8.php:28\n\
    Stack trace:\n#0 /tmp/tmpovv9z3a8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpovv9z3a8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp122bx6h_.php:28\n\
    Stack trace:\n#0 /tmp/tmp122bx6h_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp122bx6h_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        } else if ($smallest > $value) {\n    \
    \        $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzyivsrtl.php:27\n\
    Stack trace:\n#0 /tmp/tmpzyivsrtl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpzyivsrtl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest == $smallest\
    \ ? -1 : $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi6dnhhn.php:28\n\
    Stack trace:\n#0 /tmp/tmpmi6dnhhn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmi6dnhhn.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $index = 0;\n  \
    \  foreach ($arr as $value) {\n        if ($value > $largest) {\n            $largest\
    \ = $value;\n            $index = $value;\n        }\n    }\n    return $index;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp7nyem26.php:26\n\
    Stack trace:\n#0 /tmp/tmpp7nyem26.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpp7nyem26.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key && $key <= $largest) {\n    \
    \        $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfp6pv4n.php:24\n\
    Stack trace:\n#0 /tmp/tmpnfp6pv4n.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnfp6pv4n.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key < $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key > $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gz7mec5.php:28\n\
    Stack trace:\n#0 /tmp/tmp8gz7mec5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8gz7mec5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key <= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key >= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcggksod.php:28\n\
    Stack trace:\n#0 /tmp/tmpkcggksod.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkcggksod.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($key > $largest) {\n\
    \            $largest = $key;\n            $largestIndex = $key;\n        } elseif\
    \ ($key < $largest) {\n            $largest = $key;\n        }\n    }\n    return\
    \ $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz554g1y7.php:28\n\
    Stack trace:\n#0 /tmp/tmpz554g1y7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpz554g1y7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r89ic36.php:24\n\
    Stack trace:\n#0 /tmp/tmp1r89ic36.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1r89ic36.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key < $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key > $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfct60ak_.php:28\n\
    Stack trace:\n#0 /tmp/tmpfct60ak_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfct60ak_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = 9999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $smallest) {\n \
    \           $largest = $key;\n        }\n        if ($value < $smallest) {\n \
    \           $smallest = $value;\n        }\n    }\n    return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsld6g4u9.php:28\n\
    Stack trace:\n#0 /tmp/tmpsld6g4u9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpsld6g4u9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2k41rnlk.php:24\n\
    Stack trace:\n#0 /tmp/tmp2k41rnlk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2k41rnlk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $val) {\n        if ($val >= $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnxbr2q5x.php:24\n\
    Stack trace:\n#0 /tmp/tmpnxbr2q5x.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnxbr2q5x.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1p4zs1p.php:24\n\
    Stack trace:\n#0 /tmp/tmp_1p4zs1p.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_1p4zs1p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key <= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key >= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9nlcsbf.php:28\n\
    Stack trace:\n#0 /tmp/tmpn9nlcsbf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn9nlcsbf.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8c95pc2.php:24\n\
    Stack trace:\n#0 /tmp/tmpc8c95pc2.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpc8c95pc2.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ubot0mf.php:24\n\
    Stack trace:\n#0 /tmp/tmp8ubot0mf.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8ubot0mf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp45vab1va.php:24\n\
    Stack trace:\n#0 /tmp/tmp45vab1va.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp45vab1va.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = count($arr)\
    \ - 1;\n  foreach ($arr as $key => $value) {\n    if ($value > $largest) {\n \
    \     $largest = $key;\n    }\n    if ($value < $smallest) {\n      $smallest\
    \ = $key;\n    }\n  }\n  return $largest < $smallest ? $largest : $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg_d47nq2.php:28\n\
    Stack trace:\n#0 /tmp/tmpg_d47nq2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg_d47nq2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpd15j2y.php:24\n\
    Stack trace:\n#0 /tmp/tmpvpd15j2y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpvpd15j2y.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = -1;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest == -1 || $value\
    \ > $largest) {\n            $largest = $key;\n        }\n        if ($smallest\
    \ == -1 || $value < $smallest) {\n            $smallest = $key;\n        }\n \
    \   }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp481dzl07.php:28\n\
    Stack trace:\n#0 /tmp/tmp481dzl07.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp481dzl07.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $maxIndex = 0;\n\
    \    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] >= $max) {\n\
    \            $max = $arr[$i];\n            $maxIndex = $i;\n        }\n    }\n\
    \    return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5e3qn1eh.php:26\n\
    Stack trace:\n#0 /tmp/tmp5e3qn1eh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5e3qn1eh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key <= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key >= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5cj3ols.php:28\n\
    Stack trace:\n#0 /tmp/tmps5cj3ols.php(35): test()\n#1 {main}\n  thrown in /tmp/tmps5cj3ols.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_caj79v9.php:28\n\
    Stack trace:\n#0 /tmp/tmp_caj79v9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_caj79v9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $i = 0;\n    foreach\
    \ ($arr as $val) {\n        if ($val > $largest) {\n            $largest = $i;\n\
    \        }\n        $i++;\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqgv69a3x.php:26\n\
    Stack trace:\n#0 /tmp/tmpqgv69a3x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqgv69a3x.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = PHP_INT_MAX;\n\
    \  foreach ($arr as $key => $value) {\n    if ($largest < $key) {\n      $largest\
    \ = $key;\n    }\n    if ($smallest > $key) {\n      $smallest = $key;\n    }\n\
    \  }\n  return $largest < $smallest ? $largest : $smallest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_18nsnse.php:28\n\
    Stack trace:\n#0 /tmp/tmp_18nsnse.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_18nsnse.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = count($arr)\
    \ - 1;\n  foreach ($arr as $key => $value) {\n    if ($key < $smallest) {\n  \
    \    $largest = $key;\n    } else if ($key > $largest) {\n      $largest = $key;\n\
    \    }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz8sfr0hf.php:27\n\
    Stack trace:\n#0 /tmp/tmpz8sfr0hf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz8sfr0hf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $max = -1;\n  $maxIndex = 0;\n  foreach\
    \ ($arr as $key => $value) {\n    if ($value > $max) {\n      $max = $value;\n\
    \      $maxIndex = $key;\n    }\n  }\n  return $maxIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9a0p4xi.php:26\n\
    Stack trace:\n#0 /tmp/tmph9a0p4xi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph9a0p4xi.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = 999999999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $smallest) {\n \
    \           $largest = $key;\n        }\n        if ($value < $smallest) {\n \
    \           $smallest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6hvu5hb.php:28\n\
    Stack trace:\n#0 /tmp/tmpx6hvu5hb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpx6hvu5hb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmbl2lyeu.php:24\n\
    Stack trace:\n#0 /tmp/tmpmbl2lyeu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmbl2lyeu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $largestIndex = 0;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value > $arr[($key - 1)]) {\n\
    \      $largest = $key;\n      $largestIndex = $key;\n    }\n  }\n  return $largestIndex;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3upcc84b.php:26\n\
    Stack trace:\n#0 /tmp/tmp3upcc84b.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3upcc84b.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($key > $largest) {\n\
    \            $largest = $key;\n            $largestIndex = $key;\n        } elseif\
    \ ($key === $largest) {\n            $largestIndex++;\n        }\n    }\n    return\
    \ $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxwz0akf.php:28\n\
    Stack trace:\n#0 /tmp/tmpfxwz0akf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfxwz0akf.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($key > $largest) {\n\
    \            $largest = $key;\n            $largestIndex = $key;\n        }\n\
    \    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiao17dgk.php:26\n\
    Stack trace:\n#0 /tmp/tmpiao17dgk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiao17dgk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    $maxIndex = 0;\n   \
    \ foreach ($arr as $key => $value) {\n        if ($value > $max) {\n         \
    \   $max = $value;\n            $maxIndex = $key;\n        }\n    }\n    return\
    \ $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayri9y2h.php:26\n\
    Stack trace:\n#0 /tmp/tmpayri9y2h.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpayri9y2h.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $i = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $value;\n            $i = $value;\n        }\n    }\n    return $i;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm2u4y4kg.php:26\n\
    Stack trace:\n#0 /tmp/tmpm2u4y4kg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpm2u4y4kg.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = -1;\n  foreach\
    \ ($arr as $key => $value) {\n    if ($largest < $value) {\n      $largest = $value;\n\
    \    }\n    if ($smallest > $value) {\n      $smallest = $value;\n    }\n  }\n\
    \  return $largest - $smallest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkkoa_7ik.php:28\n\
    Stack trace:\n#0 /tmp/tmpkkoa_7ik.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkkoa_7ik.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjuax5f54.php:24\n\
    Stack trace:\n#0 /tmp/tmpjuax5f54.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjuax5f54.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rnu0_5g.php:28\n\
    Stack trace:\n#0 /tmp/tmp7rnu0_5g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7rnu0_5g.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl81i7w18.php:24\n\
    Stack trace:\n#0 /tmp/tmpl81i7w18.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl81i7w18.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key && $key <= $largest) {\n    \
    \        $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr4ndqop.php:24\n\
    Stack trace:\n#0 /tmp/tmpwr4ndqop.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwr4ndqop.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? -1 : $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp13izbba3.php:28\n\
    Stack trace:\n#0 /tmp/tmp13izbba3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp13izbba3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key >= $smallest)\
    \ {\n            if ($key <= $largest) {\n                $largest = $key;\n \
    \           } else {\n                $largest = $smallest;\n            }\n \
    \       }\n        $smallest--;\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp406v6jsl.php:30\n\
    Stack trace:\n#0 /tmp/tmp406v6jsl.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp406v6jsl.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value <= $arr[($key\
    \ - 1)]) {\n            $largest = $key;\n            $largestIndex = $key;\n\
    \        }\n    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnc8o64g9.php:27\n\
    Stack trace:\n#0 /tmp/tmpnc8o64g9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnc8o64g9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key <= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key >= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyf4hpo2.php:28\n\
    Stack trace:\n#0 /tmp/tmppyf4hpo2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppyf4hpo2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = 9999;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value > $smallest) {\n      $smallest\
    \ = $value;\n    }\n    if ($value < $largest) {\n      $largest = $value;\n \
    \   }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpve57b0uu.php:28\n\
    Stack trace:\n#0 /tmp/tmpve57b0uu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpve57b0uu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8efo09e9.php:28\n\
    Stack trace:\n#0 /tmp/tmp8efo09e9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8efo09e9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = PHP_INT_MAX;\n\
    \  foreach ($arr as $key => $value) {\n    if ($largest < $value) {\n      $largest\
    \ = $value;\n    }\n    if ($smallest > $value) {\n      $smallest = $value;\n\
    \    }\n  }\n  return $largest < $smallest ? $largest : -1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf1zmw5ak.php:28\n\
    Stack trace:\n#0 /tmp/tmpf1zmw5ak.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpf1zmw5ak.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key < $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key > $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn86w8kg7.php:28\n\
    Stack trace:\n#0 /tmp/tmpn86w8kg7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn86w8kg7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        } else if ($largest == $value) {\n    \
    \        $largest = $key;\n        }\n        if ($smallest > $value) {\n    \
    \        $smallest = $value;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwih2tqpz.php:30\n\
    Stack trace:\n#0 /tmp/tmpwih2tqpz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwih2tqpz.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $max) {\n            $max = $key;\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyd_7rlbr.php:24\n\
    Stack trace:\n#0 /tmp/tmpyd_7rlbr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyd_7rlbr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstm5n5gi.php:24\n\
    Stack trace:\n#0 /tmp/tmpstm5n5gi.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpstm5n5gi.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $key) {\n    \
    \        $largest = $key;\n        }\n        if ($smallest > $key) {\n      \
    \      $smallest = $key;\n        }\n    }\n    return $smallest > $largest ?\
    \ $smallest : $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ebpsvq7.php:28\n\
    Stack trace:\n#0 /tmp/tmp7ebpsvq7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7ebpsvq7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp70opstue.php:28\n\
    Stack trace:\n#0 /tmp/tmp70opstue.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp70opstue.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r__33vw.php:24\n\
    Stack trace:\n#0 /tmp/tmp0r__33vw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0r__33vw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = count($arr)\
    \ - 1;\n  foreach ($arr as $key => $value) {\n    if ($largest < $key && $key\
    \ <= $smallest) {\n      $largest = $key;\n    }\n  }\n  return $largest;\n}\n\
    \nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xysd0a5.php:25\n\
    Stack trace:\n#0 /tmp/tmp3xysd0a5.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3xysd0a5.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $prev = $largest;\n\
    \    foreach ($arr as $key => $val) {\n        if ($val > $prev) {\n         \
    \   $largest = $key;\n        } else {\n            $prev = $val;\n        }\n\
    \    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprewq2c5o.php:27\n\
    Stack trace:\n#0 /tmp/tmprewq2c5o.php(34): test()\n#1 {main}\n  thrown in /tmp/tmprewq2c5o.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = PHP_INT_MAX;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value > $smallest) {\n      $largest\
    \ = $key;\n    }\n    if ($value < $smallest) {\n      $smallest = $value;\n \
    \   }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_y3mzw8.php:28\n\
    Stack trace:\n#0 /tmp/tmph_y3mzw8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmph_y3mzw8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest - $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzoy6hvc.php:28\n\
    Stack trace:\n#0 /tmp/tmpkzoy6hvc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkzoy6hvc.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = 999999999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $smallest) {\n \
    \           $smallest = $value;\n            $largest = $key;\n        } elseif\
    \ ($value == $smallest) {\n            $largest = $key;\n        }\n    }\n  \
    \  return $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwwry31e.php:28\n\
    Stack trace:\n#0 /tmp/tmphwwry31e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphwwry31e.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpulfhzz.php:24\n\
    Stack trace:\n#0 /tmp/tmpqpulfhzz.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqpulfhzz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_pkex0f.php:24\n\
    Stack trace:\n#0 /tmp/tmp8_pkex0f.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8_pkex0f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gfvlhjq.php:24\n\
    Stack trace:\n#0 /tmp/tmp5gfvlhjq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5gfvlhjq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $arr[($key\
    \ - 1)]) {\n            $largest = $key;\n            $largestIndex = $key;\n\
    \        }\n    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyaijqszv.php:26\n\
    Stack trace:\n#0 /tmp/tmpyaijqszv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyaijqszv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    $min = $arr[0];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $max) {\n      \
    \      $max = $value;\n        } else if ($value < $min) {\n            $min =\
    \ $value;\n        }\n    }\n    return ($max >= $min) ? $max : -1;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8rr2hhl.php:27\n\
    Stack trace:\n#0 /tmp/tmpp8rr2hhl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpp8rr2hhl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8fiw0w6.php:28\n\
    Stack trace:\n#0 /tmp/tmpr8fiw0w6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpr8fiw0w6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest - $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7kovpkb.php:28\n\
    Stack trace:\n#0 /tmp/tmpn7kovpkb.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn7kovpkb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = 9999;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value > $smallest) {\n      $largest\
    \ = $key;\n    }\n    if ($value < $smallest) {\n      $smallest = $value;\n \
    \   }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ee_blt1.php:28\n\
    Stack trace:\n#0 /tmp/tmp0ee_blt1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0ee_blt1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9a4covvr.php:24\n\
    Stack trace:\n#0 /tmp/tmp9a4covvr.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9a4covvr.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = -1;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest - $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79656i_q.php:28\n\
    Stack trace:\n#0 /tmp/tmp79656i_q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp79656i_q.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key >= $smallest)\
    \ {\n            if ($key <= $largest) {\n                return $key;\n     \
    \       }\n            $largest = $key;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2pc2fpf.php:28\n\
    Stack trace:\n#0 /tmp/tmpi2pc2fpf.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpi2pc2fpf.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yu7ky4e.php:24\n\
    Stack trace:\n#0 /tmp/tmp7yu7ky4e.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7yu7ky4e.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvokk366.php:24\n\
    Stack trace:\n#0 /tmp/tmpmvokk366.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpmvokk366.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $prev = $largest;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $prev) {\n     \
    \       $largest = $key;\n        }\n        $prev = $value;\n    }\n    return\
    \ $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqi2bmjh.php:26\n\
    Stack trace:\n#0 /tmp/tmpiqi2bmjh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiqi2bmjh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value > $max) {\n            $max = $key;\n     \
    \   }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqrkhr94.php:24\n\
    Stack trace:\n#0 /tmp/tmppqrkhr94.php(31): test()\n#1 {main}\n  thrown in /tmp/tmppqrkhr94.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $largest) {\n\
    \            $largest = $value;\n            $largestIndex = $key;\n        }\n\
    \    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2xntwss.php:26\n\
    Stack trace:\n#0 /tmp/tmpl2xntwss.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpl2xntwss.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphz9mfeab.php:24\n\
    Stack trace:\n#0 /tmp/tmphz9mfeab.php(31): test()\n#1 {main}\n  thrown in /tmp/tmphz9mfeab.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($value > $smallest)\
    \ {\n            $largest = $key;\n        }\n        if ($value < $smallest)\
    \ {\n            $smallest = $key;\n        }\n    }\n    return $largest;\n}\n\
    \nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nzn_see.php:28\n\
    Stack trace:\n#0 /tmp/tmp7nzn_see.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7nzn_see.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6s0m9g00.php:24\n\
    Stack trace:\n#0 /tmp/tmp6s0m9g00.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6s0m9g00.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7n2fzeqx.php:24\n\
    Stack trace:\n#0 /tmp/tmp7n2fzeqx.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7n2fzeqx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s5sybap.php:24\n\
    Stack trace:\n#0 /tmp/tmp0s5sybap.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp0s5sybap.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtgle651.php:24\n\
    Stack trace:\n#0 /tmp/tmpqtgle651.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqtgle651.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyygh70im.php:28\n\
    Stack trace:\n#0 /tmp/tmpyygh70im.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyygh70im.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $index = 0;\n  \
    \  foreach ($arr as $key => $value) {\n        if ($key >= $largest) {\n     \
    \       $largest = $key;\n            $index = $key;\n        }\n    }\n    return\
    \ $index;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksz4axvi.php:26\n\
    Stack trace:\n#0 /tmp/tmpksz4axvi.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpksz4axvi.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : $smallest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0s4qucs.php:28\n\
    Stack trace:\n#0 /tmp/tmpz0s4qucs.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpz0s4qucs.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($largest < $key) {\n\
    \            $largest = $key;\n        }\n        if ($smallest > $key) {\n  \
    \          $smallest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnr6rpb12.php:28\n\
    Stack trace:\n#0 /tmp/tmpnr6rpb12.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnr6rpb12.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $index = 0;\n  \
    \  foreach ($arr as $value) {\n        if ($value > $largest) {\n            $largest\
    \ = $value;\n            $index = $value;\n        }\n    }\n    return $index;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v83z15x.php:26\n\
    Stack trace:\n#0 /tmp/tmp3v83z15x.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3v83z15x.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($key <= $largest) {\n\
    \            $largestIndex = $key;\n        }\n        if ($value > $largest)\
    \ {\n            $largest = $value;\n        }\n    }\n    return $largestIndex;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppru0pd79.php:28\n\
    Stack trace:\n#0 /tmp/tmppru0pd79.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppru0pd79.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_w6ey5j.php:24\n\
    Stack trace:\n#0 /tmp/tmph_w6ey5j.php(31): test()\n#1 {main}\n  thrown in /tmp/tmph_w6ey5j.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = PHP_INT_MAX;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value > $smallest) {\n      $largest\
    \ = $key;\n    }\n    if ($value < $smallest) {\n      $smallest = $value;\n \
    \   }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7ax5aaj.php:28\n\
    Stack trace:\n#0 /tmp/tmpo7ax5aaj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpo7ax5aaj.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pb9hsls.php:24\n\
    Stack trace:\n#0 /tmp/tmp4pb9hsls.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4pb9hsls.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest - $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3m7yp919.php:28\n\
    Stack trace:\n#0 /tmp/tmp3m7yp919.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3m7yp919.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $smallest) {\n \
    \           $largest = $key;\n        }\n        if ($value < $smallest) {\n \
    \           $smallest = $value;\n        }\n    }\n    return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgiasrs7t.php:28\n\
    Stack trace:\n#0 /tmp/tmpgiasrs7t.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpgiasrs7t.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key < $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key > $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57gn9g4e.php:28\n\
    Stack trace:\n#0 /tmp/tmp57gn9g4e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp57gn9g4e.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpibceowy4.php:24\n\
    Stack trace:\n#0 /tmp/tmpibceowy4.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpibceowy4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwyaz21aq.php:24\n\
    Stack trace:\n#0 /tmp/tmpwyaz21aq.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwyaz21aq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key >= $smallest)\
    \ {\n            if ($key >= $largest) {\n                $largest = $key;\n \
    \           } else {\n                $largest = $key;\n            }\n      \
    \  }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mbqgbzp.php:29\n\
    Stack trace:\n#0 /tmp/tmp4mbqgbzp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp4mbqgbzp.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wb0a04s.php:24\n\
    Stack trace:\n#0 /tmp/tmp7wb0a04s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7wb0a04s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = 9999;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value > $smallest) {\n      $smallest\
    \ = $value;\n    }\n    if ($value < $largest) {\n      $largest = $value;\n \
    \   }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5uixs_s.php:28\n\
    Stack trace:\n#0 /tmp/tmpn5uixs_s.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn5uixs_s.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $largestIndex = 0;\n\
    \  foreach ($arr as $key => $value) {\n    if ($key > $largest) {\n      $largest\
    \ = $key;\n      $largestIndex = $key;\n    }\n  }\n  return $largestIndex;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2ifcmcd.php:26\n\
    Stack trace:\n#0 /tmp/tmpp2ifcmcd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpp2ifcmcd.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : $smallest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobihmmvk.php:28\n\
    Stack trace:\n#0 /tmp/tmpobihmmvk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpobihmmvk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($key > $largest) {\n\
    \            $largest = $key;\n            $largestIndex = $key;\n        } elseif\
    \ ($key === $largest) {\n            $largestIndex = $key;\n        }\n    }\n\
    \    return $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvul7w0tu.php:28\n\
    Stack trace:\n#0 /tmp/tmpvul7w0tu.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvul7w0tu.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssyxh0hy.php:24\n\
    Stack trace:\n#0 /tmp/tmpssyxh0hy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpssyxh0hy.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr9aw95zs.php:24\n\
    Stack trace:\n#0 /tmp/tmpr9aw95zs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpr9aw95zs.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $arr[$largestIndex])\
    \ {\n            $largest = $key;\n            $largestIndex = $key;\n       \
    \ }\n    }\n    return $largestIndex;\n}\nfunction candidate(...$args) {\n   \
    \ return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu27ip4zl.php:25\n\
    Stack trace:\n#0 /tmp/tmpu27ip4zl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu27ip4zl.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        } else if ($largest == $value) {\n    \
    \        $largest = $key;\n        }\n        if ($smallest > $value) {\n    \
    \        $smallest = $value;\n        } else if ($smallest == $value) {\n    \
    \        $smallest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5of6gc0u.php:32\n\
    Stack trace:\n#0 /tmp/tmp5of6gc0u.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5of6gc0u.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwt03wjt.php:24\n\
    Stack trace:\n#0 /tmp/tmplwt03wjt.php(31): test()\n#1 {main}\n  thrown in /tmp/tmplwt03wjt.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = $arr[0];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $max) {\n            $max = $key;\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksblyleu.php:24\n\
    Stack trace:\n#0 /tmp/tmpksblyleu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpksblyleu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    $maxIndex = 0;\n   \
    \ foreach ($arr as $key => $value) {\n        if ($key > $max) {\n           \
    \ $max = $key;\n            $maxIndex = $key;\n        } elseif ($key === $max)\
    \ {\n            $maxIndex++;\n        }\n    }\n    return $maxIndex;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2h3ni50a.php:28\n\
    Stack trace:\n#0 /tmp/tmp2h3ni50a.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2h3ni50a.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $largest) {\n\
    \            $largest = $value;\n            $largestIndex = $key;\n        }\n\
    \    }\n    return $largestIndex;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojluhzok.php:26\n\
    Stack trace:\n#0 /tmp/tmpojluhzok.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpojluhzok.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = -1;\n  foreach\
    \ ($arr as $key => $value) {\n    if ($largest == -1 || $value > $largest) {\n\
    \      $largest = $key;\n    }\n    if ($smallest == -1 || $value < $smallest)\
    \ {\n      $smallest = $key;\n    }\n  }\n  return $largest;\n}\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfh1vjyd.php:27\n\
    Stack trace:\n#0 /tmp/tmpcfh1vjyd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpcfh1vjyd.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg73umo2w.php:24\n\
    Stack trace:\n#0 /tmp/tmpg73umo2w.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpg73umo2w.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvc_q3j0.php:24\n\
    Stack trace:\n#0 /tmp/tmpuvc_q3j0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpuvc_q3j0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps1qm4e1y.php:24\n\
    Stack trace:\n#0 /tmp/tmps1qm4e1y.php(31): test()\n#1 {main}\n  thrown in /tmp/tmps1qm4e1y.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest - $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7qwasbt.php:28\n\
    Stack trace:\n#0 /tmp/tmpi7qwasbt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpi7qwasbt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr11ihks.php:24\n\
    Stack trace:\n#0 /tmp/tmpyr11ihks.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpyr11ihks.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($largest < $key &&\
    \ $key <= $smallest) {\n            $largest = $key;\n        }\n        if ($smallest\
    \ > $key && $key <= $largest) {\n            $smallest = $key;\n        }\n  \
    \  }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphm7xloxh.php:28\n\
    Stack trace:\n#0 /tmp/tmphm7xloxh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphm7xloxh.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = 99999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest - $smallest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2gqqutlx.php:28\n\
    Stack trace:\n#0 /tmp/tmp2gqqutlx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2gqqutlx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjjl_c3m8.php:24\n\
    Stack trace:\n#0 /tmp/tmpjjl_c3m8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpjjl_c3m8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ftj5c9o.php:24\n\
    Stack trace:\n#0 /tmp/tmp9ftj5c9o.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9ftj5c9o.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = -1;\n  foreach\
    \ ($arr as $key => $value) {\n    if ($largest < $value) {\n      $largest = $value;\n\
    \    }\n    if ($smallest > $value) {\n      $smallest = $value;\n    }\n  }\n\
    \  return $largest - $smallest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5bwfemqi.php:28\n\
    Stack trace:\n#0 /tmp/tmp5bwfemqi.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5bwfemqi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl52bb4ai.php:24\n\
    Stack trace:\n#0 /tmp/tmpl52bb4ai.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpl52bb4ai.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwe5lcogp.php:28\n\
    Stack trace:\n#0 /tmp/tmpwe5lcogp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwe5lcogp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  $smallest = 9999;\n\
    \  foreach ($arr as $key => $value) {\n    if ($value > $smallest) {\n      $smallest\
    \ = $value;\n    }\n    if ($value < $largest) {\n      $largest = $value;\n \
    \   }\n  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4i20e4ax.php:28\n\
    Stack trace:\n#0 /tmp/tmp4i20e4ax.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4i20e4ax.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $val) {\n        if ($val >= $smallest) {\n    \
    \        $largest = $key;\n        }\n        if ($val < $smallest) {\n      \
    \      $smallest = $val;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5puwpr6.php:28\n\
    Stack trace:\n#0 /tmp/tmpq5puwpr6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpq5puwpr6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain how this works?\n<|/ c |>\n<| c |>\nI added some explanation.\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [1,2,4,3,5];\n$largest = -1;\n$smallest = PHP_INT_MAX;\nforeach\
    \ ($arr as $key => $value) {\n    if ($largest < $value) {\n        $largest =\
    \ $value;\n    }\n    if ($smallest > $value) {\n        $smallest = $value;\n\
    \    }\n}\necho $largest;\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain how this works?\n<|/ c |>\n<| c |>\n\
    I added some explanation.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [1,2,4,3,5];\n\
    $largest = -1;\n$smallest = PHP_INT_MAX;\nforeach ($arr as $key => $value) {\n\
    \    if ($largest < $value) {\n        $largest = $value;\n    }\n    if ($smallest\
    \ > $value) {\n        $smallest = $value;\n    }\n}\necho $largest;\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThanks for your answer. Can you please explain\
    \ how this works?\n<|/ c |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$arr = [1,2,4,3,5];\n$largest = -1;\n$smallest\
    \ = PHP_INT_MAX;\nforeach ($arr as $key => $value) {\n    if ($largest < $value)\
    \ {\n        $largest = $value;\n    }\n    if ($smallest > $value) {\n      \
    \  $smallest = $value;\n    }\n}\necho $largest;\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmryppq4i.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9yqjsm62.php:24\n\
    Stack trace:\n#0 /tmp/tmp9yqjsm62.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9yqjsm62.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqddm81b8.php:24\n\
    Stack trace:\n#0 /tmp/tmpqddm81b8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqddm81b8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkhga039.php:24\n\
    Stack trace:\n#0 /tmp/tmpwkhga039.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpwkhga039.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ypemsjs.php:24\n\
    Stack trace:\n#0 /tmp/tmp3ypemsjs.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3ypemsjs.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $arr[$largestIndex])\
    \ {\n            $largest = $key;\n            $largestIndex = $key;\n       \
    \ }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpygmwcu4q.php:26\n\
    Stack trace:\n#0 /tmp/tmpygmwcu4q.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpygmwcu4q.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $i = 0;\n    foreach\
    \ ($arr as $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $value;\n            $i = $value;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiq516ola.php:26\n\
    Stack trace:\n#0 /tmp/tmpiq516ola.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpiq516ola.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($key != $largestIndex)\
    \ {\n            $largest = $key;\n            $largestIndex = $key;\n       \
    \ }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpre6gakkh.php:26\n\
    Stack trace:\n#0 /tmp/tmpre6gakkh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpre6gakkh.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n  $largest = -1;\n  foreach ($arr as $key\
    \ => $value) {\n    if ($value > $largest) {\n      $largest = $key;\n    }\n\
    \  }\n  return $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnv6rs38s.php:24\n\
    Stack trace:\n#0 /tmp/tmpnv6rs38s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnv6rs38s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    $maxIndex = 0;\n   \
    \ foreach ($arr as $key => $value) {\n        if ($value > $max) {\n         \
    \   $max = $value;\n            $maxIndex = $key;\n        }\n    }\n    return\
    \ $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjtb2u3g.php:26\n\
    Stack trace:\n#0 /tmp/tmpnjtb2u3g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnjtb2u3g.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bbxc7a3.php:28\n\
    Stack trace:\n#0 /tmp/tmp_bbxc7a3.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp_bbxc7a3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = 9999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value < $smallest) {\n \
    \           $smallest = $value;\n        }\n        if ($value > $largest) {\n\
    \            $largest = $value;\n        }\n    }\n    return $largest;\n}\n\n\
    function candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdy0tklgk.php:28\n\
    Stack trace:\n#0 /tmp/tmpdy0tklgk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdy0tklgk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? -1 : $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6p9_9iw9.php:28\n\
    Stack trace:\n#0 /tmp/tmp6p9_9iw9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp6p9_9iw9.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value > $largest) {\n            $largest =\
    \ $key;\n        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnvronzf7.php:24\n\
    Stack trace:\n#0 /tmp/tmpnvronzf7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnvronzf7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8w4jflg.php:24\n\
    Stack trace:\n#0 /tmp/tmpp8w4jflg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpp8w4jflg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        } else if ($smallest > $value) {\n    \
    \        $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6z6cn0mn.php:27\n\
    Stack trace:\n#0 /tmp/tmp6z6cn0mn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6z6cn0mn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zkgqigh.php:24\n\
    Stack trace:\n#0 /tmp/tmp5zkgqigh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp5zkgqigh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7xsjcfu.php:24\n\
    Stack trace:\n#0 /tmp/tmpi7xsjcfu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpi7xsjcfu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        } else if ($smallest > $value) {\n    \
    \        $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? -1 : $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10mfpp1g.php:27\n\
    Stack trace:\n#0 /tmp/tmp10mfpp1g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp10mfpp1g.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key <= $smallest)\
    \ {\n            $smallest = $key;\n        }\n        if ($key >= $largest) {\n\
    \            $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fboq1a7.php:28\n\
    Stack trace:\n#0 /tmp/tmp9fboq1a7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp9fboq1a7.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($largest < $key || $value > $largest) {\n   \
    \         $largest = $key;\n        }\n    }\n    return $largest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return can_arrange(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !== -1) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 4, 2, 5, 6, 7, 8, 9, 10)) !== 2)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 8, 5,\
    \ 7, 3)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdu02l0gy.php:24\n\
    Stack trace:\n#0 /tmp/tmpdu02l0gy.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpdu02l0gy.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpijkh73kp.php:24\n\
    Stack trace:\n#0 /tmp/tmpijkh73kp.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpijkh73kp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $largestIndex =\
    \ 0;\n    foreach ($arr as $key => $value) {\n        if ($value > $arr[($key\
    \ - 1)]) {\n            $largest = $key;\n            $largestIndex = $key;\n\
    \        }\n    }\n    return $largestIndex;\n}\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try it with `[1,2,4,3,5]`.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case to the answer.\n<|/ c |>\n<| c |>\nIt\
    \ doesn't work. Try it with `[1,2,4,3,5]`.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I added the test case to the answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the test case to the answer.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcsqftfr8.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($key >= $smallest)\
    \ {\n            if ($key <= $largest) {\n                return $key;\n     \
    \       }\n            $largest = $key;\n        }\n    }\n    return $largest;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptebvh9bo.php:28\n\
    Stack trace:\n#0 /tmp/tmptebvh9bo.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptebvh9bo.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($largest < $key &&\
    \ $key <= $smallest) {\n            $largest = $key;\n        }\n        if ($largest\
    \ == $key && $value != $largest) {\n            $largest = -1;\n        }\n  \
    \  }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4orjbsxa.php:28\n\
    Stack trace:\n#0 /tmp/tmp4orjbsxa.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4orjbsxa.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = 9999;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value > $smallest) {\n \
    \           $smallest = $value;\n            $largest = $key;\n        }\n   \
    \ }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsq0qjs8u.php:26\n\
    Stack trace:\n#0 /tmp/tmpsq0qjs8u.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsq0qjs8u.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key > $max) {\n            $max = $key;\n       \
    \ }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8q_jdgu.php:24\n\
    Stack trace:\n#0 /tmp/tmp_8q_jdgu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_8q_jdgu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $index = 0;\n  \
    \  foreach ($arr as $value) {\n        if ($value > $largest) {\n            $largest\
    \ = $value;\n            $index = $value;\n        }\n    }\n    return $index;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8klzqsse.php:26\n\
    Stack trace:\n#0 /tmp/tmp8klzqsse.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp8klzqsse.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = count($arr)\
    \ - 1;\n    foreach ($arr as $key => $value) {\n        if ($largest < $key &&\
    \ $key <= $smallest) {\n            $largest = $key;\n        }\n        if ($smallest\
    \ > $key && $key <= $largest) {\n            $smallest = $key;\n        }\n  \
    \  }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmyufyrd6.php:28\n\
    Stack trace:\n#0 /tmp/tmpmyufyrd6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpmyufyrd6.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $max = -1;\n    foreach ($arr as $key\
    \ => $val) {\n        if ($val >= $max) {\n            $max = $key;\n        }\n\
    \    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63n3dqun.php:24\n\
    Stack trace:\n#0 /tmp/tmp63n3dqun.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp63n3dqun.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbe5pwel.php:24\n\
    Stack trace:\n#0 /tmp/tmpkbe5pwel.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpkbe5pwel.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxge9taej.php:24\n\
    Stack trace:\n#0 /tmp/tmpxge9taej.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxge9taej.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $smallest = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($largest < $value) {\n  \
    \          $largest = $value;\n        }\n        if ($smallest > $value) {\n\
    \            $smallest = $value;\n        }\n    }\n    return $largest < $smallest\
    \ ? $largest : -1;\n}\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5))\
    \ !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpky3foti_.php:28\n\
    Stack trace:\n#0 /tmp/tmpky3foti_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpky3foti_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $maxIndex = 0;\n    $maxValue = -1;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value >= $maxValue) {\n\
    \            $maxIndex = $key;\n            $maxValue = $value;\n        }\n \
    \   }\n    return $maxIndex;\n}\n\nfunction candidate(...$args) {\n    return\
    \ can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67q0aasv.php:26\n\
    Stack trace:\n#0 /tmp/tmp67q0aasv.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp67q0aasv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    foreach ($arr as\
    \ $key => $value) {\n        if ($key > $largest) {\n            $largest = $key;\n\
    \        }\n    }\n    return $largest;\n}\n\nfunction candidate(...$args) {\n\
    \    return can_arrange(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 4, 3, 5)) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 4, 5)) !== -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfoq32ij.php:24\n\
    Stack trace:\n#0 /tmp/tmpqfoq32ij.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqfoq32ij.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function which returns the largest index of an element\
    \ which\n// is not greater than or equal to the element immediately preceding\
    \ it. If\n// no such element exists then return -1. The given array will not contain\n\
    // duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5]) = 3\n// can_arrange([1,2,3])\
    \ = -1\nfunction can_arrange($arr) {\n    $largest = -1;\n    $index = 0;\n  \
    \  foreach ($arr as $value) {\n        if ($value > $largest) {\n            $largest\
    \ = $value;\n            $index = $value;\n        }\n    }\n    return $index;\n\
    }\n\nfunction candidate(...$args) {\n    return can_arrange(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 4, 3, 5)) !== 3) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 4, 5)) !==\
    \ -1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 4,\
    \ 2, 5, 6, 7, 8, 9, 10)) !== 2) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(4, 8, 5, 7, 3)) !== 4) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array()) !== -1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwg9ve606.php:26\n\
    Stack trace:\n#0 /tmp/tmpwg9ve606.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwg9ve606.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
