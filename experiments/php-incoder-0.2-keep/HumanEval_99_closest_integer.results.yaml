name: HumanEval_99_closest_integer
language: php
results:
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ + 1 : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptajscq02.php:29\n\
    Stack trace:\n#0 /tmp/tmptajscq02.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptajscq02.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is zero,\
    \ return zero\n  if ($value == 0) {\n    return 0;\n  }\n  // If the value is\
    \ negative, return negative one\n  if ($value < 0) {\n    return -1;\n  }\n  //\
    \ If the value is positive, return positive one\n  if ($value > 0) {\n    return\
    \ 1;\n  }\n  // If the value is equidistant from two integers, round it away from\
    \ zero\n  if ($value % 1 == 0) {\n    return round($value);\n  }\n  // Otherwise,\
    \ return the closest integer\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzxpfecj.php:42\n\
    Stack trace:\n#0 /tmp/tmphzxpfecj.php(49): test()\n#1 {main}\n  thrown in /tmp/tmphzxpfecj.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigzv6bub.php:28\n\
    Stack trace:\n#0 /tmp/tmpigzv6bub.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpigzv6bub.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprzufmyvd.php:29\n\
    Stack trace:\n#0 /tmp/tmprzufmyvd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprzufmyvd.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is an integer, return it.\n  if (is_int($value)) {\n    return $value;\n\
    \  }\n\n  // If the given value is a float, convert it to a string and strip the\n\
    \  // decimal part.\n  $value = strval($value);\n  $value = preg_replace('/\\\
    ./', '', $value);\n\n  // If the given value is a string, split the string into\
    \ an array of\n  // integers and round the integers away from zero.\n  if (is_string($value))\
    \ {\n    $value = preg_split('/(?<!^)(?!$)/', $value);\n    foreach ($value as\
    \ $key => $value) {\n      $value[$key] = round($value, 2);\n    }\n    return\
    \ implode('', $value);\n  }\n\n  // If the given value is not an integer, return\
    \ null.\n  return null;\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI used the answer\
    \ from and modified it a little bit to make it more flexible and to allow for\
    \ negative numbers. \n<code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd15eo1um.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuun3_s0c.php:29\n\
    Stack trace:\n#0 /tmp/tmpuun3_s0c.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuun3_s0c.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n    $closest_integer =\
    \ ($value % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n    return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyvnx410.php:28\n\
    Stack trace:\n#0 /tmp/tmpxyvnx410.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpxyvnx410.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  while ($closest_integer - $value >= 1) {\n\
    \    $closest_integer = ($closest_integer - $value) + $value;\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_s0io71.php:30\n\
    Stack trace:\n#0 /tmp/tmp2_s0io71.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2_s0io71.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_l0s679.php:30\n\
    Stack trace:\n#0 /tmp/tmp4_l0s679.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4_l0s679.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer == 0 ? 1\
    \ : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer == 0 ? 1 : $closest_integer;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs = abs($closestDistance);\n\
    \  foreach ($values as $v) {\n    $distance = $v - $value;\n    if ($closestDistance\
    \ === null || $distance < $closestDistanceAbs) {\n      $closest = $v;\n     \
    \ $closestDistance = $distance;\n    }\n  }\n  return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpow4v2xnz.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpow4v2xnz.php:34\n\
    Stack trace:\n#0 /tmp/tmpow4v2xnz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpow4v2xnz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is a string, turn it into a float.\n  $value = floatval($value);\n\n\
    \  // If the given number is negative, make it positive.\n  if ($value < 0) {\n\
    \    $value *= -1;\n  }\n\n  // If the given number is equidistant from two integers,\
    \ round it away\n  // from zero.\n  if ($value == round($value)) {\n    return\
    \ round($value);\n  }\n\n  // If the given number is equidistant from two integers,\
    \ round it away\n  // from zero.\n  $difference = abs($value - round($value));\n\
    \  if ($difference == 1) {\n    return round($value);\n  }\n\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  $difference\
    \ = abs($value - round($value));\n  if ($difference == 2) {\n    return round($value);\n\
    \  }\n\n  // If the given number is equidistant from two integers, round it away\n\
    \  // from zero.\n  $difference = abs($value - round($value));\n  if ($difference\
    \ == 3) {\n    return round($value);\n  }\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $difference = abs($value\
    \ - round($value));\n  if ($difference == 4) {\n    return round($value);\n  }\n\
    \n  // If the given number is equidistant from two integers, round it away\n \
    \ // from zero.\n  $difference = abs($value - round($value));\n  if ($difference\
    \ == 5) {\n    return round($value);\n  }\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $difference = abs($value\
    \ - round($value));\n  if ($difference == 6) {\n    return round($value);\n  }\n\
    \n  // If the given number is equidistant from two integers, round it away\n \
    \ // from zero.\n  $difference = abs($value - round($value));\n  if ($difference\
    \ == 7) {\n    return round($value);\n  }\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $difference = abs($value\
    \ - round($value));\n  if ($difference == 8) {\n    return round($value);\n  }\n\
    \n  // If the given number is equidistant from two integers, round it away\n \
    \ // from zero.\n  $difference = abs($value - round($value));\n  if ($difference\
    \ == 9) {\n    return round($value);\n  }\n\n  // If the given number is equidistant\
    \ from two integers, round it away\n  // from zero.\n  $difference = \nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj15dlgd8.php on line 96\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ljrq_wq.php:29\n\
    Stack trace:\n#0 /tmp/tmp1ljrq_wq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1ljrq_wq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9uz_0l8.php:29\n\
    Stack trace:\n#0 /tmp/tmpz9uz_0l8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpz9uz_0l8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  while ($closest_integer < 1) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  while ($closest_integer > 9) {\n    $closest_integer\
    \ = $closest_integer / 10;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo79anaxv.php:33\n\
    Stack trace:\n#0 /tmp/tmpo79anaxv.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpo79anaxv.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is not an integer, return null.\n  if (!is_numeric($value)) {\n    return\
    \ null;\n  }\n\n  // If the given number is negative, return null.\n  if ($value\
    \ < 0) {\n    return null;\n  }\n\n  // If the given number is equidistant from\
    \ two integers, round it away\n  // from zero.\n  $difference = abs($value - $value);\n\
    \  if ($difference < 2) {\n    return $value;\n  }\n\n  // If the given number\
    \ is equidistant from two integers, round it away\n  // from zero.\n  return ceil($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe5n6leyq.php:42\n\
    Stack trace:\n#0 /tmp/tmpe5n6leyq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpe5n6leyq.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach (range(1, $value) as $i) {\n    if ($i\
    \ % 2 == 0) {\n      $closest_integer = $i;\n    }\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1urrqi3g.php:32\n\
    Stack trace:\n#0 /tmp/tmp1urrqi3g.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1urrqi3g.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value % 1 == 0) {\n    return\
    \ round($value);\n  }\n  // If the value is equidistant from two integers, round\
    \ it toward the nearest integer\n  return round($value, 0, PHP_ROUND_HALF_UP);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_2x10dc.php:31\n\
    Stack trace:\n#0 /tmp/tmpk_2x10dc.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpk_2x10dc.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqlgex_3e.php:29\n\
    Stack trace:\n#0 /tmp/tmpqlgex_3e.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqlgex_3e.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpmnre3q.php:29\n\
    Stack trace:\n#0 /tmp/tmpvpmnre3q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpvpmnre3q.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it down\n  $value = floatval($value);\n  $value\
    \ = round($value, 0);\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  if ($value == $value + 1) {\n    $value = $value - 1;\n\
    \  }\n  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplrsj2kuv.php:31\n\
    Stack trace:\n#0 /tmp/tmplrsj2kuv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplrsj2kuv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjx1ezyy9.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnc8n64ht.php:29\n\
    Stack trace:\n#0 /tmp/tmpnc8n64ht.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpnc8n64ht.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8woeav3g.php:29\n\
    Stack trace:\n#0 /tmp/tmp8woeav3g.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8woeav3g.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value/abs($value));\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd261ye24.php:24\n\
    Stack trace:\n#0 /tmp/tmpd261ye24.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpd261ye24.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  while ($closest_integer != 0) {\n    $closest_integer\
    \ = ($closest_integer < $value ? $closest_integer + 1 : $closest_integer - 1);\n\
    \  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  while ($closest_integer - $value >= 1) {\n \
    \   $closest_integer--;\n    $value = $closest_integer;\n    $closest_integer\
    \ = ($value <= $closest_integer) ? $value : $closest_integer;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0f_krozo.php:33\n\
    Stack trace:\n#0 /tmp/tmp0f_krozo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0f_krozo.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjiq6dwn7.php:29\n\
    Stack trace:\n#0 /tmp/tmpjiq6dwn7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpjiq6dwn7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvucblrj.php:29\n\
    Stack trace:\n#0 /tmp/tmpdvucblrj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdvucblrj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbb6u68gi.php:30\n\
    Stack trace:\n#0 /tmp/tmpbb6u68gi.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbb6u68gi.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ia0gley.php:28\n\
    Stack trace:\n#0 /tmp/tmp7ia0gley.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp7ia0gley.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it to a whole number\n  $value = floatval($value);\n\
    \  $value = round($value);\n\n  // If the value is equidistant from two integers,\
    \ round it away from zero\n  if ($value == $value + 1) {\n    return $value;\n\
    \  }\n\n  // If the value is equidistant from three integers, round it away from\
    \ zero\n  if ($value == $value + 2) {\n    return $value;\n  }\n\n  // If the\
    \ value is equidistant from four integers, round it away from zero\n  if ($value\
    \ == $value + 3) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from five integers, round it away from zero\n  if ($value == $value + 4) {\n\
    \    return $value;\n  }\n\n  // If the value is equidistant from six integers,\
    \ round it away from zero\n  if ($value == $value + 5) {\n    return $value;\n\
    \  }\n\n  // If the value is equidistant from seven integers, round it away from\
    \ zero\n  if ($value == $value + 6) {\n    return $value;\n  }\n\n  // If the\
    \ value is equidistant from eight integers, round it away from zero\n  if ($value\
    \ == $value + 7) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from nine integers, round it away from zero\n  if ($value == $value + 8) {\n\
    \    return $value;\n  }\n\n  // If the value is equidistant from ten integers,\
    \ round it away from zero\n  if ($value == $value + 9) {\n    return $value;\n\
    \  }\n\n  // If the value is equidistant from eleven integers, round it away from\
    \ zero\n  if ($value == $value + 10) {\n    return $value;\n  }\n\n  // If the\
    \ value is equidistant from twelve integers, round it away from zero\n  if ($value\
    \ == $value + 11) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from thirteen integers, round it away from zero\n  if ($value == $value + 12)\
    \ {\n    return $value;\n  }\n\n  // If the value is equidistant from fourteen\
    \ integers, round it away from zero\n  if ($value == $value + 13) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from fifteen integers, round\
    \ it away from zero\n  if ($value == $value + 14) {\n    return $value;\n  }\n\
    \n  // If the value is equidistant from sixteen integers, round it away from zero\n\
    \  if ($value == $value + 15) {\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwf757o1n.php on line 104\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ < $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ > $value) ? $value : $closest_integer;\n    return $closest_integer;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ucxazi9.php:29\n\
    Stack trace:\n#0 /tmp/tmp7ucxazi9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7ucxazi9.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqc6y3bp4.php:29\n\
    Stack trace:\n#0 /tmp/tmpqc6y3bp4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqc6y3bp4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxkh19pvl.php:30\n\
    Stack trace:\n#0 /tmp/tmpxkh19pvl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxkh19pvl.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it down\n  $value = floatval($value);\n  $value\
    \ = round($value, 0);\n\n  // If the value is equidistant from two integers, round\
    \ it away from zero.\n  if ($value == $value + 1) {\n    return $value;\n  }\n\
    \n  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value - 1) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == $value\
    \ + 2) {\n    return $value;\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == $value - 2) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from two integers, round it\
    \ away from zero.\n  if ($value == $value + 3) {\n    return $value;\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value - 3) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == $value\
    \ + 4) {\n    return $value;\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == $value - 4) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from two integers, round it\
    \ away from zero.\n  if ($value == $value + 5) {\n    return $value;\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value - 5) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == $value\
    \ + 6) {\n    return $value;\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == $value - 6) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from two integers, round it\
    \ away from zero.\n  if ($value == $value + 7) {\n    return $value;\n  }\n\n\
    \  // If the value is equidistant from two integers, round it away from zero.\n\
    \  if ($value == $value - 7) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from two integers, round it away from zero.\n  if ($value == $value\
    \ + 8) {\n    return $value;\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == \nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0suc1xvu.php on line 97\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpp97d7z.php:30\n\
    Stack trace:\n#0 /tmp/tmpnpp97d7z.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnpp97d7z.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpktntold_.php:29\n\
    Stack trace:\n#0 /tmp/tmpktntold_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpktntold_.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value)\
    \ == $value ? $value : round($value - $value % 1, 0);\n}\n</code>\n<|/ a tags=php,rounding\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwv2innlm.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = round($value, 0);\n    if ($closest == $value)\
    \ {\n        return $value;\n    }\n    $difference = abs($value - $closest);\n\
    \    if ($difference < $value * 0.1) {\n        return $closest;\n    }\n    return\
    \ $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohwvn2rp.php:33\n\
    Stack trace:\n#0 /tmp/tmpohwvn2rp.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpohwvn2rp.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == floor($value)) {\n    return floor($value);\n  }\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == ceil($value)) {\n    return ceil($value);\n  }\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value)) {\n    return round($value);\n  }\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ ($value == round($value, 2)) {\n    return round($value, 2);\n  }\n  // If the\
    \ given number is equidistant from two integers, round it away\n  // from zero.\n\
    \  if ($value == round($value, 3)) {\n    return round($value, 3);\n  }\n  //\
    \ If the given number is equidistant from two integers, round it away\n  // from\
    \ zero.\n  if ($value == round($value, 4)) {\n    return round($value, 4);\n \
    \ }\n  // If the given number is equidistant from two integers, round it away\n\
    \  // from zero.\n  if ($value == round($value, 5)) {\n    return round($value,\
    \ 5);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 6)) {\n    return round($value,\
    \ 6);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 7)) {\n    return round($value,\
    \ 7);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 8)) {\n    return round($value,\
    \ 8);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 9)) {\n    return round($value,\
    \ 9);\n  }\n  // If the given number is equidistant from two integers, round it\
    \ away\n  // from zero.\n  if ($value == round($value, 10)) {\n    return round($value,\
    \ 10);\n  }\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == round($value, 11)) {\n    return round($value,\
    \ 11);\n  }\n  // If the given number is equidistant from two integers, round\
    \ it away\n  // from zero.\n  if ($value == \nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmper0z9czi.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuolkklpy.php:30\n\
    Stack trace:\n#0 /tmp/tmpuolkklpy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuolkklpy.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpmr_5_k.php:30\n\
    Stack trace:\n#0 /tmp/tmpvpmr_5_k.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvpmr_5_k.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_l8b5kst.php:27\n\
    Stack trace:\n#0 /tmp/tmp_l8b5kst.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_l8b5kst.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach ($GLOBALS['db']->field_types as $field_type\
    \ => $field_type_info) {\n    if ($field_type_info['integer_type'] == 'auto')\
    \ {\n      if ($field_type_info['length'] == 'tiny') {\n        $closest_integer\
    \ = $value;\n      }\n      elseif ($field_type_info['length'] == 'small') {\n\
    \        $closest_integer = $value;\n      }\n      elseif ($field_type_info['length']\
    \ == 'medium') {\n        $closest_integer = $value;\n      }\n      elseif ($field_type_info['length']\
    \ == 'big') {\n        $closest_integer = $value;\n      }\n    }\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmp7z4nqgbp.php\
    \ on line 18\n\nWarning: Invalid argument supplied for foreach() in /tmp/tmp7z4nqgbp.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7z4nqgbp.php:43\n\
    Stack trace:\n#0 /tmp/tmp7z4nqgbp.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp7z4nqgbp.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer < $value) ? $value\
    \ : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwx87fr3m.php:29\n\
    Stack trace:\n#0 /tmp/tmpwx87fr3m.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwx87fr3m.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf85g68v0.php:30\n\
    Stack trace:\n#0 /tmp/tmpf85g68v0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpf85g68v0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4m7fqp3.php:28\n\
    Stack trace:\n#0 /tmp/tmpe4m7fqp3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpe4m7fqp3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is a string, convert it to a float.\n  $value = floatval($value);\n  //\
    \ If the given value is negative, make it positive.\n  if ($value < 0) {\n   \
    \ $value = abs($value);\n  }\n  // If the given value is equidistant from two\
    \ integers, round it away from zero.\n  if ($value == round($value)) {\n    return\
    \ round($value);\n  }\n  // If the given value is equidistant from two integers,\
    \ round it toward the nearest integer.\n  if ($value == floor($value)) {\n   \
    \ return floor($value);\n  }\n  // If the given value is equidistant from two\
    \ integers, round it toward the nearest integer.\n  if ($value == ceil($value))\
    \ {\n    return ceil($value);\n  }\n  // If the given value is equidistant from\
    \ two integers, round it toward the nearest integer.\n  if ($value == round($value,\
    \ 2)) {\n    return round($value, 2);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == floor($value,\
    \ 2)) {\n    return floor($value, 2);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == ceil($value,\
    \ 2)) {\n    return ceil($value, 2);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == round($value,\
    \ 3)) {\n    return round($value, 3);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == floor($value,\
    \ 3)) {\n    return floor($value, 3);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == ceil($value,\
    \ 3)) {\n    return ceil($value, 3);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == round($value,\
    \ 4)) {\n    return round($value, 4);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == floor($value,\
    \ 4)) {\n    return floor($value, 4);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == ceil($value,\
    \ 4)) {\n    return ceil($value, 4);\n  }\n  // If the given value is equidistant\
    \ from two integers, round it toward the nearest integer.\n  if ($value == round($value,\
    \ 5)) {\n    return round($value, 5);\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp91u5rdr5.php on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56n9b1gk.php:29\n\
    Stack trace:\n#0 /tmp/tmp56n9b1gk.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp56n9b1gk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7nx4qk1v.php:29\n\
    Stack trace:\n#0 /tmp/tmp7nx4qk1v.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7nx4qk1v.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6v5qnpdi.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value - 1) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value + 1) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyhd7cjg.php:30\n\
    Stack trace:\n#0 /tmp/tmppyhd7cjg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppyhd7cjg.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest = null;\n    $closestDistance = null;\n    $closestDistanceAbs\
    \ = abs($closestDistance);\n    foreach ($values as $v) {\n        $distance =\
    \ $v - $value;\n        if ($closestDistance === null || $distance < $closestDistance)\
    \ {\n            $closest = $v;\n            $closestDistance = $distance;\n \
    \       }\n    }\n    return $closest;\n}\n\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpcdhpam_2.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdhpam_2.php:35\n\
    Stack trace:\n#0 /tmp/tmpcdhpam_2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcdhpam_2.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppfhtooz4.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqllldmri.php:30\n\
    Stack trace:\n#0 /tmp/tmpqllldmri.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqllldmri.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqrvhu40.php:30\n\
    Stack trace:\n#0 /tmp/tmpaqrvhu40.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpaqrvhu40.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cjuozqp.php:29\n\
    Stack trace:\n#0 /tmp/tmp4cjuozqp.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp4cjuozqp.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $closest_integer : $closest_integer + 1;\n    return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoy7jlvbe.php:27\n\
    Stack trace:\n#0 /tmp/tmpoy7jlvbe.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoy7jlvbe.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it down\n  $value = floatval($value);\n  $value\
    \ = round($value, 0);\n\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  if ($value == $value + 1) {\n    return $value;\n  }\n\n\
    \  // If the value is equidistant from three integers, round it away from zero\n\
    \  if ($value == $value + 2) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from four integers, round it away from zero\n  if ($value == $value\
    \ + 3) {\n    return $value;\n  }\n\n  // If the value is equidistant from five\
    \ integers, round it away from zero\n  if ($value == $value + 4) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from six integers, round it\
    \ away from zero\n  if ($value == $value + 5) {\n    return $value;\n  }\n\n \
    \ // If the value is equidistant from seven integers, round it away from zero\n\
    \  if ($value == $value + 6) {\n    return $value;\n  }\n\n  // If the value is\
    \ equidistant from eight integers, round it away from zero\n  if ($value == $value\
    \ + 7) {\n    return $value;\n  }\n\n  // If the value is equidistant from nine\
    \ integers, round it away from zero\n  if ($value == $value + 8) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from ten integers, round it\
    \ away from zero\n  if ($value == $value + 9) {\n    return $value;\n  }\n\n \
    \ // If the value is equidistant from eleven integers, round it away from zero\n\
    \  if ($value == $value + 10) {\n    return $value;\n  }\n\n  // If the value\
    \ is equidistant from twelve integers, round it away from zero\n  if ($value ==\
    \ $value + 11) {\n    return $value;\n  }\n\n  // If the value is equidistant\
    \ from thirteen integers, round it away from zero\n  if ($value == $value + 12)\
    \ {\n    return $value;\n  }\n\n  // If the value is equidistant from fourteen\
    \ integers, round it away from zero\n  if ($value == $value + 13) {\n    return\
    \ $value;\n  }\n\n  // If the value is equidistant from fifteen integers, round\
    \ it away from zero\n  if ($value == $value + 14) {\n    return $value;\n  }\n\
    \n  // If the value is equidistant from sixteen integers, round it away from zero\n\
    \  if ($value == $value + 15) {\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe0agz8zk.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = null;\n    $diff = null;\n    $diffAbs = null;\n\
    \    $diffAbsMax = null;\n    $diffAbsMaxAbs = null;\n    $diffAbsMaxAbsMin =\
    \ null;\n    $diffAbsMaxAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMax = null;\n\
    \    $diffAbsMaxAbsMinAbsMaxAbs = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMin = null;\n\
    \    $diffAbsMaxAbsMinAbsMaxAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMax\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbs = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbs = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMax\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbs = null;\n  \
    \  $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMin = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbs\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMax = null;\n\
    \    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbs = null;\n\
    \    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMin = null;\n\
    \    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMax =\
    \ null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMin\
    \ = null;\n    $diffAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAbsMinAbsMaxAb\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5yibgr_a.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3ojxweo.php:24\n\
    Stack trace:\n#0 /tmp/tmpk3ojxweo.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpk3ojxweo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gvstann.php:30\n\
    Stack trace:\n#0 /tmp/tmp3gvstann.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3gvstann.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wcl3mzj.php:28\n\
    Stack trace:\n#0 /tmp/tmp3wcl3mzj.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp3wcl3mzj.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcpja8oky.php:29\n\
    Stack trace:\n#0 /tmp/tmpcpja8oky.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcpja8oky.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmm5p1ti8.php:27\n\
    Stack trace:\n#0 /tmp/tmpmm5p1ti8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmm5p1ti8.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is negative,\
    \ return 0\n  if ($value < 0) {\n    return 0;\n  }\n  // If the value is zero,\
    \ return it\n  if ($value == 0) {\n    return $value;\n  }\n  // If the value\
    \ is positive, return the floor of the value\n  if ($value > 0) {\n    return\
    \ floor($value);\n  }\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  $difference = abs($value - $value);\n  if ($difference\
    \ < 0.5) {\n    return $value;\n  }\n  return $value - ($difference - 0.5);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu05zkp4e.php:42\n\
    Stack trace:\n#0 /tmp/tmpu05zkp4e.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpu05zkp4e.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ - $closest_integer) < $value ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjqrz27w.php:28\n\
    Stack trace:\n#0 /tmp/tmppjqrz27w.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppjqrz27w.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value == round($value)) {\n\
    \    return round($value);\n  }\n\n  // If the value is equidistant from two integers,\
    \ round it away from zero\n  if ($value == floor($value)) {\n    return floor($value);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it away from\
    \ zero\n  if ($value == ceil($value)) {\n    return ceil($value);\n  }\n\n  //\
    \ If the value is equidistant from two integers, round it away from zero\n  if\
    \ ($value == round($value, 2)) {\n    return round($value, 2);\n  }\n\n  // If\
    \ the value is equidistant from two integers, round it away from zero\n  if ($value\
    \ == floor($value, 2)) {\n    return floor($value, 2);\n  }\n\n  // If the value\
    \ is equidistant from two integers, round it away from zero\n  if ($value == ceil($value,\
    \ 2)) {\n    return ceil($value, 2);\n  }\n\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value == round($value, 3))\
    \ {\n    return round($value, 3);\n  }\n\n  // If the value is equidistant from\
    \ two integers, round it away from zero\n  if ($value == floor($value, 3)) {\n\
    \    return floor($value, 3);\n  }\n\n  // If the value is equidistant from two\
    \ integers, round it away from zero\n  if ($value == ceil($value, 3)) {\n    return\
    \ ceil($value, 3);\n  }\n\n  // If the value is equidistant from two integers,\
    \ round it away from zero\n  if ($value == round($value, 4)) {\n    return round($value,\
    \ 4);\n  }\n\n  // If the value is equidistant from two integers, round it away\
    \ from zero\n  if ($value == floor($value, 4)) {\n    return floor($value, 4);\n\
    \  }\n\n  // If the value is equidistant from two integers, round it away from\
    \ zero\n  if ($value == ceil($value, 4)) {\n    return ceil($value, 4);\n  }\n\
    \n  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == round($value, 5)) {\n    return round($value, 5);\n  }\n\n  //\
    \ If the value is equidistant from two integers, round it away from zero\n  if\
    \ ($value == floor($value, 5)) {\n    return floor($value, 5);\n  }\n\n  // If\
    \ the value is equidistant from two integers, round it away from zero\n  if ($value\
    \ == ceil($value, 5)) {\n    return ceil\nfunction candidate(...$args) {\n   \
    \ return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm6o98e5d.php on line 92\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n\n  // If the value is negative,\
    \ return negative infinity\n  if ($value < 0) {\n    return PHP_INT_MAX;\n  }\n\
    \n  // If the value is zero, return zero\n  if ($value == 0) {\n    return 0;\n\
    \  }\n\n  // If the value is positive, return the next integer after it\n  if\
    \ ($value > 0) {\n    return ceil($value);\n  }\n\n  // If the value is negative,\
    \ return the previous integer before it\n  return floor($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3leyykn.php:43\n\
    Stack trace:\n#0 /tmp/tmpn3leyykn.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpn3leyykn.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer == 0 ? 1\
    \ : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer == 0 ? 1 : $closest_integer;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $value\
    \ % $closest_integer;\n    if ($closest_integer == 0) {\n        $closest_integer\
    \ = 1;\n    }\n    return $closest_integer;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$numbers = array(\"10\", \"15.3\", \"14.5\", \"\
    -12.5\", \"0\", \"10\", \"-10\", \"10\", \"-10\", \"-10\", \"-10\", \"-10\", \"\
    -10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\"\
    , \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"-10\", \"\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9bjpof97.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  while ($closest_integer % 2 == 0) {\n    $closest_integer\
    \ = ($closest_integer + 1);\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0iw7xfq.php:30\n\
    Stack trace:\n#0 /tmp/tmpy0iw7xfq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpy0iw7xfq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpse8msend.php:30\n\
    Stack trace:\n#0 /tmp/tmpse8msend.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpse8msend.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp06xlzcud.php:30\n\
    Stack trace:\n#0 /tmp/tmp06xlzcud.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp06xlzcud.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4nq54b8u.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmply_vcz6p.php:30\n\
    Stack trace:\n#0 /tmp/tmply_vcz6p.php(37): test()\n#1 {main}\n  thrown in /tmp/tmply_vcz6p.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is zero,\
    \ return zero\n  if ($value == 0) {\n    return 0;\n  }\n  // If the value is\
    \ negative, return negative of the closest integer\n  if ($value < 0) {\n    return\
    \ -closest_integer(abs($value));\n  }\n  // If the value is positive, return positive\
    \ of the closest integer\n  if ($value > 0) {\n    return closest_integer($value);\n\
    \  }\n  // If the value is equidistant from two integers, round it away from zero\n\
    \  if ($value == round($value)) {\n    return round($value);\n  }\n  // Otherwise,\
    \ return the closest integer\n  return $value;\n}\n</code>\n<|/ a tags=php,rounding\
    \ |>\n<| a dscore=3 |>\n<code>\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4gxoice7.php on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0otv6up3.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph5w_0hd5.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ $closest_integer : $closest_integer + 1;\n  return $closest_integer;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vmv3hby.php:28\n\
    Stack trace:\n#0 /tmp/tmp7vmv3hby.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7vmv3hby.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer++;\n\
    \  }\n  return $closest_integer;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt8tshl7.php:31\n\
    Stack trace:\n#0 /tmp/tmpxt8tshl7.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxt8tshl7.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tdrjmij.php:30\n\
    Stack trace:\n#0 /tmp/tmp9tdrjmij.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9tdrjmij.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ / $value, 0);\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9t40cpx7.php:24\n\
    Stack trace:\n#0 /tmp/tmp9t40cpx7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp9t40cpx7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7ez329i.php:27\n\
    Stack trace:\n#0 /tmp/tmpq7ez329i.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpq7ez329i.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48cle6o5.php:29\n\
    Stack trace:\n#0 /tmp/tmp48cle6o5.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp48cle6o5.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach ($values as $v) {\n   \
    \ $diff = $v - $value;\n    if ($closestDiff === null || $diff < $closestDiff)\
    \ {\n      $closest = $v;\n      $closestDiff = $diff;\n    }\n  }\n  return $closest;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpyc_0ji7n.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyc_0ji7n.php:34\n\
    Stack trace:\n#0 /tmp/tmpyc_0ji7n.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpyc_0ji7n.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  while ($closest_integer - $value >= 1) {\n\
    \    $closest_integer = ($closest_integer - $value) + $value;\n  }\n  return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd3fdarvx.php:30\n\
    Stack trace:\n#0 /tmp/tmpd3fdarvx.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpd3fdarvx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0gyogsq.php:30\n\
    Stack trace:\n#0 /tmp/tmpk0gyogsq.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk0gyogsq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  while ($closest_integer % 2 == 0) {\n    $closest_integer\
    \ = ($closest_integer + 1);\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoo6szuwb.php:30\n\
    Stack trace:\n#0 /tmp/tmpoo6szuwb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpoo6szuwb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ + 1 : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7tm30kfq.php:29\n\
    Stack trace:\n#0 /tmp/tmp7tm30kfq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7tm30kfq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = $value;\n  $closestDiff = abs($value - $closest);\n  foreach (range(1,\
    \ $closestDiff) as $i) {\n    $closestDiff = abs($value - $closest);\n    $closest\
    \ = $value - ($closestDiff / $i);\n  }\n  return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: Division by zero in /tmp/tmpcwg0qmsv.php on line 21\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpcwg0qmsv.php:30\nStack trace:\n\
    #0 /tmp/tmpcwg0qmsv.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpcwg0qmsv.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpibn48ypk.php:30\n\
    Stack trace:\n#0 /tmp/tmpibn48ypk.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpibn48ypk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7qihd6x.php:28\n\
    Stack trace:\n#0 /tmp/tmp_7qihd6x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_7qihd6x.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp64lz8z32.php:28\n\
    Stack trace:\n#0 /tmp/tmp64lz8z32.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp64lz8z32.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf_yqn7o2.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdqjk0bb.php:23\n\
    Stack trace:\n#0 /tmp/tmpwdqjk0bb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpwdqjk0bb.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_7wd68q.php:32\n\
    Stack trace:\n#0 /tmp/tmp2_7wd68q.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2_7wd68q.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value/abs($value));\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nzftf19.php:24\n\
    Stack trace:\n#0 /tmp/tmp4nzftf19.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4nzftf19.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn47jffqs.php:28\n\
    Stack trace:\n#0 /tmp/tmpn47jffqs.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn47jffqs.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuv5gf9h3.php:30\n\
    Stack trace:\n#0 /tmp/tmpuv5gf9h3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpuv5gf9h3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is an integer, return it.\n  if (is_int($value)) {\n    return $value;\n\
    \  }\n\n  // If the given value is a float, convert it to a string and strip the\n\
    \  // decimal point from the string.\n  $value = strval($value);\n  $value = preg_replace('/\\\
    ./', '', $value);\n\n  // If the given value is a string, split the string into\
    \ an array of\n  // strings representing each of the numbers in the given string.\n\
    \  $values = explode('.', $value);\n\n  // If the given value has more than one\
    \ number, return the number that\n  // is closest to zero.\n  if (count($values)\
    \ > 1) {\n    $differences = array();\n    foreach ($values as $value) {\n   \
    \   $differences[] = abs($value - 0);\n    }\n    $differences = array_sum($differences);\n\
    \    $differences = $differences / count($values);\n    $differences = round($differences);\n\
    \    return $values[0];\n  }\n\n  // If the given value has only one number, return\
    \ the number that\n  // is closest to zero.\n  return abs($value - 0);\n}\n</code>\n\
    <|/ a tags=php,math |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9bo9mfq8.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ number is equidistant from two integers, round it away\n  // from zero.\n  if\
    \ (abs($value - round($value)) < abs($value - round($value + 1))) {\n    return\
    \ round($value);\n  }\n  return round($value + 1);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpii0dhr2_.php:28\n\
    Stack trace:\n#0 /tmp/tmpii0dhr2_.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpii0dhr2_.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpal_17i95.php:26\n\
    Stack trace:\n#0 /tmp/tmpal_17i95.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpal_17i95.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2vypvr7.php:29\n\
    Stack trace:\n#0 /tmp/tmpn2vypvr7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn2vypvr7.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceSqr = null;\n\
    \  foreach ($GLOBALS['db']->fetchAll(\"SELECT `id`, `distance` FROM `{$GLOBALS['db']->prefix}numbers`\
    \ WHERE `number` = '{$value}'\") as $row) {\n    if ($closestDistance === null\
    \ || $closestDistance > $row['distance']) {\n      $closestDistance = $row['distance'];\n\
    \      $closest = $row['id'];\n    }\n    $closestDistanceSqr = $closestDistance\
    \ * $closestDistance;\n  }\n  return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function fetchAll() on\
    \ null in /tmp/tmpl0r4qjxb.php:20\nStack trace:\n#0 /tmp/tmpl0r4qjxb.php(30):\
    \ closest_integer(10)\n#1 /tmp/tmpl0r4qjxb.php(34): candidate('10')\n#2 /tmp/tmpl0r4qjxb.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpl0r4qjxb.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqov_ae24.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest = null;\n    $closestDiff = null;\n    foreach ($values\
    \ as $v) {\n        $diff = $v - $value;\n        if ($closestDiff === null ||\
    \ $diff < $closestDiff) {\n            $closestDiff = $diff;\n            $closest\
    \ = $v;\n        }\n    }\n    return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpiyijryxr.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiyijryxr.php:33\n\
    Stack trace:\n#0 /tmp/tmpiyijryxr.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpiyijryxr.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdr9zo5n2.php:30\n\
    Stack trace:\n#0 /tmp/tmpdr9zo5n2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdr9zo5n2.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ejipdf5.php:23\n\
    Stack trace:\n#0 /tmp/tmp2ejipdf5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2ejipdf5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value/abs($value));\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxst4xwmh.php:24\n\
    Stack trace:\n#0 /tmp/tmpxst4xwmh.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpxst4xwmh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez484dx1.php:23\n\
    Stack trace:\n#0 /tmp/tmpez484dx1.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpez484dx1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? $value\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value - 1) ?\
    \ $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtstw42r.php:30\n\
    Stack trace:\n#0 /tmp/tmpwtstw42r.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpwtstw42r.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is negative,\
    \ add 1 to it\n  if ($value < 0) {\n    $value++;\n  }\n  // If the value is greater\
    \ than zero, divide it by two\n  if ($value > 1) {\n    $value = $value / 2;\n\
    \  }\n  // If the value is less than zero, subtract 1 from it\n  if ($value <\
    \ 0) {\n    $value--;\n  }\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbk0vj57.php:38\n\
    Stack trace:\n#0 /tmp/tmpnbk0vj57.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnbk0vj57.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc80mye__.php:29\n\
    Stack trace:\n#0 /tmp/tmpc80mye__.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpc80mye__.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value - 1) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value + 1) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7kchykol.php:30\n\
    Stack trace:\n#0 /tmp/tmp7kchykol.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7kchykol.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is a string, convert it to a float.\n  if (is_string($value)) {\n    $value\
    \ = floatval($value);\n  }\n\n  // If the given value is an integer, return it.\n\
    \  if (is_int($value)) {\n    return $value;\n  }\n\n  // If the given value is\
    \ a float, return it.\n  if (is_float($value)) {\n    return floor($value);\n\
    \  }\n\n  // If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return floor($value);\n  }\n\n  //\
    \ If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return floor($value);\n  }\n\n  //\
    \ If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return floor($value);\n  }\n\n  //\
    \ If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return floor($value);\n  }\n\n  //\
    \ If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return floor($value);\n  }\n\n  //\
    \ If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return floor($value);\n  }\n\n  //\
    \ If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return floor($value);\n  }\n\n  //\
    \ If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float($value)) {\n    return floor($value);\n  }\n\n  //\
    \ If the given value is a string, parse it as a float.\n  if (is_string($value))\
    \ {\n    $value = floatval($value);\n  }\n\n  // If the given value is a float,\
    \ return it.\n  if (is_float(\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6knx006h.php on line 118\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbhu80s4.php:29\n\
    Stack trace:\n#0 /tmp/tmpdbhu80s4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdbhu80s4.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ <= $closest_integer) ? $value : $closest_integer;\n    $closest_integer = ($value\
    \ >= $closest_integer) ? $value : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sfgbewd.php:29\n\
    Stack trace:\n#0 /tmp/tmp5sfgbewd.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp5sfgbewd.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value % 1 == 0) {\n    $value\
    \ = round($value, 0);\n  }\n  return $value;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy50726bb.php:30\n\
    Stack trace:\n#0 /tmp/tmpy50726bb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpy50726bb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float.\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero.\n  if ($value == round($value))\
    \ {\n    return round($value);\n  }\n  // If the value is equidistant from two\
    \ integers, round it toward the integer.\n  if ($value == round($value, 0)) {\n\
    \    return round($value, 0);\n  }\n  // If the value is equidistant from two\
    \ integers, round it to the nearest integer.\n  if ($value == round($value, 1))\
    \ {\n    return round($value, 1);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 2)) {\n    return round($value, 2);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 3)) {\n    return round($value, 3);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 4)) {\n    return round($value, 4);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 5)) {\n    return round($value, 5);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 6)) {\n    return round($value, 6);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 7)) {\n    return round($value, 7);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 8)) {\n    return round($value, 8);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 9)) {\n    return round($value, 9);\n  }\n  // If the value is equidistant from\
    \ two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 10)) {\n    return round($value, 10);\n  }\n  // If the value is equidistant\
    \ from two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 11)) {\n    return round($value, 11);\n  }\n  // If the value is equidistant\
    \ from two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 12)) {\n    return round($value, 12);\n  }\n  // If the value is equidistant\
    \ from two integers, round it to the nearest integer.\n  if ($value == round($value,\
    \ 13)) {\n    return round($value, 13);\n  }\n  // If the value is \nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7oqiimyu.php on line 91\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer++;\n\
    \    if ($closest_integer == $value) {\n      return $closest_integer;\n    }\n\
    \  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6b0ym8_h.php:35\n\
    Stack trace:\n#0 /tmp/tmp6b0ym8_h.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6b0ym8_h.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskryvq4i.php:24\n\
    Stack trace:\n#0 /tmp/tmpskryvq4i.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpskryvq4i.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ - 1 : $closest_integer;\n  $closest_integer = ($value % 2 == 0) ? $closest_integer\
    \ + 1 : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0r51bqw5.php:28\n\
    Stack trace:\n#0 /tmp/tmp0r51bqw5.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0r51bqw5.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = $closest_integer\
    \ < $value ? $value : $closest_integer;\n    $closest_integer = $closest_integer\
    \ < $value ? $closest_integer : $value;\n    return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcq7o0nk1.php:29\n\
    Stack trace:\n#0 /tmp/tmpcq7o0nk1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcq7o0nk1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprktregim.php:29\n\
    Stack trace:\n#0 /tmp/tmprktregim.php(35): test()\n#1 {main}\n  thrown in /tmp/tmprktregim.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvj_vue1c.php:30\n\
    Stack trace:\n#0 /tmp/tmpvj_vue1c.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvj_vue1c.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if (abs($value\
    \ - round($value)) < abs($value - round($value + 1))) {\n    return round($value);\n\
    \  }\n  return round($value + 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfevx_el.php:28\n\
    Stack trace:\n#0 /tmp/tmpcfevx_el.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpcfevx_el.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.000001 ? $value : floor($value);\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgq7p9of.php:28\n\
    Stack trace:\n#0 /tmp/tmpdgq7p9of.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdgq7p9of.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach (array_reverse(range(0,\
    \ $value)) as $i) {\n    $diff = $value - $i;\n    if ($closestDiff === null ||\
    \ $diff < $closestDiff) {\n      $closestDiff = $diff;\n      $closest = $i;\n\
    \    }\n  }\n  return $closest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsyclp8f4.php:34\n\
    Stack trace:\n#0 /tmp/tmpsyclp8f4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpsyclp8f4.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  while ($closest_integer - $value >= 1) {\n\
    \    $closest_integer = ($closest_integer - $value) + $value;\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpneq_cq6k.php:31\n\
    Stack trace:\n#0 /tmp/tmpneq_cq6k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpneq_cq6k.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9neivii.php:28\n\
    Stack trace:\n#0 /tmp/tmpg9neivii.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpg9neivii.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach (range(1, $value) as $i) {\n    $closest_integer\
    \ = $i;\n    if (abs($value - $i) < abs($value - $closest_integer)) {\n      $closest_integer\
    \ = $i;\n    }\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61ecpj1h.php:33\n\
    Stack trace:\n#0 /tmp/tmp61ecpj1h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp61ecpj1h.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthyn8bsl.php:30\n\
    Stack trace:\n#0 /tmp/tmpthyn8bsl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpthyn8bsl.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyjrqq1d.php:29\n\
    Stack trace:\n#0 /tmp/tmpuyjrqq1d.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpuyjrqq1d.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe4b1i0nj.php:29\n\
    Stack trace:\n#0 /tmp/tmpe4b1i0nj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpe4b1i0nj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyd9_pu_b.php:29\n\
    Stack trace:\n#0 /tmp/tmpyd9_pu_b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpyd9_pu_b.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $closest_integer + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxq7x9ia0.php:30\n\
    Stack trace:\n#0 /tmp/tmpxq7x9ia0.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxq7x9ia0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp512lkezy.php:29\n\
    Stack trace:\n#0 /tmp/tmp512lkezy.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp512lkezy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1xmp3nok.php:29\n\
    Stack trace:\n#0 /tmp/tmp1xmp3nok.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp1xmp3nok.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer =\
    \ ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer ==\
    \ $value) ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0\
    \ : $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 :\
    \ $closest_integer;\n  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n\
    \  $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n \
    \ $closest_integer = ($closest_integer == $value) ? 0 : $closest_integer;\n  $closest_integer\
    \ = ($closest_\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph126tlmf.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > 0 ? $closest_integer\
    \ : 0;\n  return $closest_integer;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpossb8qvk.php:28\n\
    Stack trace:\n#0 /tmp/tmpossb8qvk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpossb8qvk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value % 2\
    \ == 0) {\n    $value = round($value / 2);\n  }\n\n  // If the number is equidistant\
    \ from three integers, round it away from zero.\n  if ($value % 3 == 0) {\n  \
    \  $value = round($value / 3);\n  }\n\n  return $value;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7t7qsvgm.php:33\n\
    Stack trace:\n#0 /tmp/tmp7t7qsvgm.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7t7qsvgm.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value\
    \ ? $value : $closest_integer);\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw98u9o0a.php:28\n\
    Stack trace:\n#0 /tmp/tmpw98u9o0a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw98u9o0a.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer < $value && $closest_integer\
    \ > 0) {\n    $closest_integer = ($closest_integer + $value) / 2;\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcn013uv6.php:29\n\
    Stack trace:\n#0 /tmp/tmpcn013uv6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcn013uv6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff < 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y693bjv.php:29\n\
    Stack trace:\n#0 /tmp/tmp2y693bjv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2y693bjv.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = ($closest_integer + 1) < $value ? $closest_integer + 1 : 0;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkit9nwxb.php:30\n\
    Stack trace:\n#0 /tmp/tmpkit9nwxb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkit9nwxb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer < $value)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($closest_integer > $value)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38d7phjn.php:28\n\
    Stack trace:\n#0 /tmp/tmp38d7phjn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp38d7phjn.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ floatval($value);\n    $closest = round($value, 0);\n    if ($closest == $value)\
    \ {\n        return $value;\n    }\n    $difference = $value - $closest;\n   \
    \ if ($difference < 0) {\n        return $closest;\n    }\n    return $closest\
    \ + 1;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzh_j30_.php:32\n\
    Stack trace:\n#0 /tmp/tmphzh_j30_.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphzh_j30_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusnygdw0.php:29\n\
    Stack trace:\n#0 /tmp/tmpusnygdw0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpusnygdw0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($value\
    \ % 2 == 0) ? $closest_integer - 1 : $closest_integer;\n    $closest_integer =\
    \ ($value % 2 == 0) ? $closest_integer + 1 : $closest_integer;\n    return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfxevvqpq.php:29\n\
    Stack trace:\n#0 /tmp/tmpfxevvqpq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpfxevvqpq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it to the nearest integer.\n  $value = floatval($value);\n\
    \  $value = round($value);\n\n  // If the value is equidistant from two integers,\
    \ round it away from zero.\n  if ($value == $value + 1) {\n    $value = $value\
    \ - 1;\n  }\n\n  return $value;\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfbao1mf.php:33\n\
    Stack trace:\n#0 /tmp/tmplfbao1mf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmplfbao1mf.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy0epdjxo.php:23\n\
    Stack trace:\n#0 /tmp/tmpy0epdjxo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpy0epdjxo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach ($integers as $integer)\
    \ {\n    $diff = $value - $integer;\n    if ($diff < $closestDiff) {\n      $closestDiff\
    \ = $diff;\n      $closest = $integer;\n    }\n  }\n  return $closest;\n}\n\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmpkvqqnej7.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkvqqnej7.php:34\n\
    Stack trace:\n#0 /tmp/tmpkvqqnej7.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpkvqqnej7.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphiygpi9h.php:29\n\
    Stack trace:\n#0 /tmp/tmphiygpi9h.php(35): test()\n#1 {main}\n  thrown in /tmp/tmphiygpi9h.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDiff = null;\n  foreach ($integers as $integer)\
    \ {\n    $diff = $value - $integer;\n    if ($diff < $closestDiff) {\n      $closestDiff\
    \ = $diff;\n      $closest = $integer;\n    }\n  }\n  return $closest;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI like this solution, but I wonder how it compares to other\
    \ solutions posted here?\n<|/ c |>\n<| c |>\nI like it too, but I wonder how it\
    \ compares to other solutions posted here?\n<|/ c |>\n<| c |>\nI like it too,\
    \ but I wonder how it compares to other solutions posted here?\n<|/ c |>\n<| c\
    \ |>\nI like it too, but I wonder how it compares to other solutions posted here?\n\
    <|/ c |>\n<| c |>\nI like it too, but I wonder how it compares to other solutions\
    \ posted here?\n<|/ c |>\n<| a tags=php,math,algorithm |>\n<code>\n<?php\n$numbers\
    \ = array(\n    1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n\
    \    6 => 6,\n    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 =>\
    \ 11,\n    12 => 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n\
    \    17 => 17,\n    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n \
    \   22 => 22,\n    23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n  \
    \  27 => 27,\n    28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n   \
    \ 32 => 32,\n    33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37\
    \ => 37,\n    38 => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 =>\
    \ 42,\n    43 => 43,\n    44 => 44,\n    45 => 45,\n    46 => 46,\n    47 => 47,\n\
    \    48 => 48,\n    49 => 49,\n    50 => 50,\n    51 => 5\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptxh41bgc.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = $closest_integer + 1;\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value\
    \ ? $value : $closest_integer);\n  while ($closest_integer == $value && $closest_integer\
    \ > 0) {\n    $closest_integer -= 1;\n  }\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7mopyr01.php:30\n\
    Stack trace:\n#0 /tmp/tmp7mopyr01.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7mopyr01.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = floatval($value);\n\
    \  $diff = $value - floor($value);\n  if ($diff > 0) {\n    return floor($value);\n\
    \  }\n  return ceil($value);\n}\n\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppb8fv6cg.php:29\n\
    Stack trace:\n#0 /tmp/tmppb8fv6cg.php(36): test()\n#1 {main}\n  thrown in /tmp/tmppb8fv6cg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the given\
    \ value is a string, parse it to a float.\n  $value = floatval($value);\n  //\
    \ If the given value is a float, return it.\n  if ($value == $value) {\n    return\
    \ $value;\n  }\n  // If the given value is a string, parse it to a float.\n  $value\
    \ = floatval($value);\n  // If the given value is a float, return it.\n  if ($value\
    \ == $value) {\n    return $value;\n  }\n  // If the given value is a string,\
    \ parse it to a float.\n  $value = floatval($value);\n  // If the given value\
    \ is a float, return it.\n  if ($value == $value) {\n    return $value;\n  }\n\
    \  // If the given value is a string, parse it to a float.\n  $value = floatval($value);\n\
    \  // If the given value is a float, return it.\n  if ($value == $value) {\n \
    \   return $value;\n  }\n  // If the given value is a string, parse it to a float.\n\
    \  $value = floatval($value);\n  // If the given value is a float, return it.\n\
    \  if ($value == $value) {\n    return $value;\n  }\n  // If the given value is\
    \ a string, parse it to a float.\n  $value = floatval($value);\n  // If the given\
    \ value is a float, return it.\n  if ($value == $value) {\n    return $value;\n\
    \  }\n  // If the given value is a string, parse it to a float.\n  $value = floatval($value);\n\
    \  // If the given value is a float, return it.\n  if ($value == $value) {\n \
    \   return $value;\n  }\n  // If the given value is a string, parse it to a float.\n\
    \  $value = floatval($value);\n  // If the given value is a float, return it.\n\
    \  if ($value == $value) {\n    return $value;\n  }\n  // If the given value is\
    \ a string, parse it to a float.\n  $value = floatval($value);\n  // If the given\
    \ value is a float, return it.\n  if ($value == $value) {\n    return $value;\n\
    \  }\n  // If the given value is a string, parse it to a float.\n  $value = floatval($value);\n\
    \  // If the given value is a float, return it.\n  if ($value == $value) {\n \
    \   return $value;\n  }\n  // If the given value is a string, parse it to a float.\n\
    \  $value = floatval($value);\n  // If the given value is a float, return it.\n\
    \  if ($value == $value) {\n    return $value;\n  }\n  // If the given value is\
    \ a string, parse it to a float.\n  $value = floatval($value);\n  // If the given\
    \ value is a float, return it.\n  if ($value == $value) {\n    return $value;\n\
    \  }\n  // If the given value is a string, parse it to a float.\n  $value = floatval($value);\n\
    \  // If the given value is a float, return it.\n  if ($value == $\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpamv0j6lf.php on line 92\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptl15hanj.php:29\n\
    Stack trace:\n#0 /tmp/tmptl15hanj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmptl15hanj.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest = null;\n  $closestDistance = null;\n  $closestDistanceAbs = abs($closestDistance);\n\
    \  foreach ($values as $v) {\n    $distance = $v - $value;\n    if ($closestDistance\
    \ === null || $distance < $closestDistanceAbs) {\n      $closest = $v;\n     \
    \ $closestDistance = $distance;\n    }\n  }\n  return $closest;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nWarning: Invalid argument supplied for foreach() in /tmp/tmptruxgmjo.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptruxgmjo.php:34\n\
    Stack trace:\n#0 /tmp/tmptruxgmjo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptruxgmjo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == $value)\
    \ ? 0 : $closest_integer;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = ($closest_integer + 1);\n  }\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvcfsm_ov.php:29\n\
    Stack trace:\n#0 /tmp/tmpvcfsm_ov.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpvcfsm_ov.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float\n  $value = floatval($value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if ($value % 1 == 0) {\n    return\
    \ round($value);\n  }\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  else {\n    return round($value, 0);\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ycrdrrs.php:33\n\
    Stack trace:\n#0 /tmp/tmp3ycrdrrs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3ycrdrrs.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wmps0t9.php:27\n\
    Stack trace:\n#0 /tmp/tmp6wmps0t9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp6wmps0t9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer > $value\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95___th8.php:29\n\
    Stack trace:\n#0 /tmp/tmp95___th8.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp95___th8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $closest_integer : round($closest_integer - $closest_integer);\n\
    \    return $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1aowgty3.php:27\n\
    Stack trace:\n#0 /tmp/tmp1aowgty3.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1aowgty3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // If the number\
    \ is equidistant from two integers, round it away from zero.\n  if ($value ==\
    \ floor($value)) {\n    return $value;\n  }\n\n  // If the number is equidistant\
    \ from three integers, round it away from zero.\n  if ($value == floor($value\
    \ / 3)) {\n    return $value * 3;\n  }\n\n  // If the number is equidistant from\
    \ four integers, round it away from zero.\n  if ($value == floor($value / 4))\
    \ {\n    return $value * 4;\n  }\n\n  // If the number is equidistant from five\
    \ integers, round it away from zero.\n  if ($value == floor($value / 5)) {\n \
    \   return $value * 5;\n  }\n\n  // If the number is equidistant from six integers,\
    \ round it away from zero.\n  if ($value == floor($value / 6)) {\n    return $value\
    \ * 6;\n  }\n\n  // If the number is equidistant from seven integers, round it\
    \ away from zero.\n  if ($value == floor($value / 7)) {\n    return $value * 7;\n\
    \  }\n\n  // If the number is equidistant from eight integers, round it away from\
    \ zero.\n  if ($value == floor($value / 8)) {\n    return $value * 8;\n  }\n\n\
    \  // If the number is equidistant from nine integers, round it away from zero.\n\
    \  if ($value == floor($value / 9)) {\n    return $value * 9;\n  }\n\n  // If\
    \ the number is equidistant from ten integers, round it away from zero.\n  if\
    \ ($value == floor($value / 10)) {\n    return $value * 10;\n  }\n\n  // If the\
    \ number is equidistant from eleven integers, round it away from zero.\n  if ($value\
    \ == floor($value / 11)) {\n    return $value * 11;\n  }\n\n  // If the number\
    \ is equidistant from twelve integers, round it away from zero.\n  if ($value\
    \ == floor($value / 12)) {\n    return $value * 12;\n  }\n\n  // If the number\
    \ is equidistant from thirteen integers, round it away from zero.\n  if ($value\
    \ == floor($value / 13)) {\n    return $value * 13;\n  }\n\n  // If the number\
    \ is equidistant from fourteen integers, round it away from zero.\n  if ($value\
    \ == floor($value / 14)) {\n    return $value * 14;\n  }\n\n  // If the number\
    \ is equidistant from fifteen integers, round it away from zero.\n  if ($value\
    \ == floor($value / 15)) {\n    return $value * 15;\n  }\n\n  // If the number\
    \ is equidistant from sixteen integers, round it away from zero.\n  if ($value\
    \ == floor($\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj4vpwz6l.php on line 88\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvmbhpef.php:30\n\
    Stack trace:\n#0 /tmp/tmphvmbhpef.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphvmbhpef.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ the value to a float and round it down\n  $value = floatval($value);\n  $value\
    \ = round($value, 0);\n\n  // If the value is equidistant from two integers, round\
    \ it away from zero\n  if ($value == intval($value)) {\n    $value = intval($value);\n\
    \  }\n\n  return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpajm7hzhh.php:29\n\
    Stack trace:\n#0 /tmp/tmpajm7hzhh.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpajm7hzhh.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer == $value) {\n    $closest_integer\
    \ = $value + 1;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoezi2oso.php:29\n\
    Stack trace:\n#0 /tmp/tmpoezi2oso.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpoezi2oso.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - floor($value)) <\
    \ 0.0 ? floor($value) : ceil($value);\n  return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpapm5qgic.php:26\n\
    Stack trace:\n#0 /tmp/tmpapm5qgic.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpapm5qgic.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < $value) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mbskx0b.php:29\n\
    Stack trace:\n#0 /tmp/tmp0mbskx0b.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp0mbskx0b.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value - $closest_integer)\
    \ < 0.5 ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjr03eddp.php:27\n\
    Stack trace:\n#0 /tmp/tmpjr03eddp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpjr03eddp.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value\
    \ / $value, 0) * $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_8gsbao.php:24\n\
    Stack trace:\n#0 /tmp/tmpz_8gsbao.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpz_8gsbao.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach (range(1, $value) as $i) {\n    if (abs($value\
    \ - $i) < $closest_integer) {\n      $closest_integer = $i;\n    }\n  }\n  return\
    \ $closest_integer;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xkbr_2t.php:31\n\
    Stack trace:\n#0 /tmp/tmp8xkbr_2t.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8xkbr_2t.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8r8ei98y.php:29\n\
    Stack trace:\n#0 /tmp/tmp8r8ei98y.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8r8ei98y.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($value <= $closest_integer)\
    \ ? $value : $closest_integer;\n  $closest_integer = ($value >= $closest_integer)\
    \ ? $value : $closest_integer;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy81zshxb.php:28\n\
    Stack trace:\n#0 /tmp/tmpy81zshxb.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpy81zshxb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  // Convert\
    \ $value to a float.\n  $value = floatval($value);\n\n  // If the value is negative,\
    \ return $value - $closest_integer($value).\n  if ($value < 0) {\n    return $value\
    \ - closest_integer($value);\n  }\n\n  // If the value is zero, return zero.\n\
    \  if ($value == 0) {\n    return 0;\n  }\n\n  // If the value is positive, return\
    \ $closest_integer($value).\n  return closest_integer($value);\n}\n\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp4828v6g2.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_nan73nk.php:24\n\
    Stack trace:\n#0 /tmp/tmp_nan73nk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_nan73nk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n1c1e_x.php:28\n\
    Stack trace:\n#0 /tmp/tmp1n1c1e_x.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp1n1c1e_x.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach ($GLOBALS['db']->field_types as $field_type\
    \ => $field_type_meta) {\n    if ($field_type_meta->is_numeric) {\n      $field_type_meta->is_numeric\
    \ = 1;\n      $field_type_meta->is_integer = 1;\n      $field_type_meta->is_float\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment = 0;\n      $field_type_meta->is_unsigned\
    \ = 1;\n      $field_type_meta->is_zero = 0;\n      $field_type_meta->is_signed\
    \ = 1;\n      $field_type_meta->is_null = 0;\n      $field_type_meta->is_auto_increment\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment = 0;\n      $field_type_meta->is_unsigned\
    \ = 1;\n      $field_type_meta->is_zero = 0;\n      $field_type_meta->is_signed\
    \ = 1;\n      $field_type_meta->is_null = 0;\n      $field_type_meta->is_auto_increment\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment = 0;\n      $field_type_meta->is_unsigned\
    \ = 1;\n      $field_type_meta->is_zero = 0;\n      $field_type_meta->is_signed\
    \ = 1;\n      $field_type_meta->is_null = 0;\n      $field_type_meta->is_auto_increment\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment = 0;\n      $field_type_meta->is_unsigned\
    \ = 1;\n      $field_type_meta->is_zero = 0;\n      $field_type_meta->is_signed\
    \ = 1;\n      $field_type_meta->is_null = 0;\n      $field_type_meta->is_auto_increment\
    \ = 0;\n      $field_type_meta->is_unsigned = 1;\n      $field_type_meta->is_zero\
    \ = 0;\n      $field_type_meta->is_signed = 1;\n      $field_type_meta->is_null\
    \ = 0;\n      $field_type_meta->is_auto_increment\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3e5tzu7g.php on line 68\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer < $value) ? $value\
    \ : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkf72z08a.php:29\n\
    Stack trace:\n#0 /tmp/tmpkf72z08a.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpkf72z08a.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = ($closest_integer == 0) ?\
    \ 0 : $closest_integer;\n  $closest_integer = ($closest_integer < $value) ? $value\
    \ : $closest_integer;\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplayurhxn.php:29\n\
    Stack trace:\n#0 /tmp/tmplayurhxn.php(35): test()\n#1 {main}\n  thrown in /tmp/tmplayurhxn.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer < $value\
    \ ? $value : $closest_integer;\n  $closest_integer = $closest_integer < $value\
    \ ? $closest_integer : $value;\n  return $closest_integer;\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10k5oq7b.php:28\n\
    Stack trace:\n#0 /tmp/tmp10k5oq7b.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp10k5oq7b.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  while ($closest_integer > 0 && $closest_integer\
    \ < PHP_INT_MAX) {\n    $closest_integer = floor($closest_integer);\n  }\n  return\
    \ $closest_integer;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  return round($value);\n\
    }\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps36lqv_l.php:23\n\
    Stack trace:\n#0 /tmp/tmps36lqv_l.php(30): test()\n#1 {main}\n  thrown in /tmp/tmps36lqv_l.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? 0 : $closest_integer;\n    $closest_integer = ($closest_\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0osyt1j4.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  foreach ($GLOBALS['db']->fetchAll(\"SELECT `id`\
    \ FROM `{$GLOBALS['db']->prefix}numbers` WHERE `number` = '{$value}'\") as $row)\
    \ {\n    $distance = $value - $row['number'];\n    if ($distance < $closest_integer)\
    \ {\n      $closest_integer = $distance;\n    }\n  }\n  return $closest_integer;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to a member function fetchAll() on\
    \ null in /tmp/tmp6ndrbqqv.php:18\nStack trace:\n#0 /tmp/tmp6ndrbqqv.php(28):\
    \ closest_integer(10)\n#1 /tmp/tmp6ndrbqqv.php(32): candidate('10')\n#2 /tmp/tmp6ndrbqqv.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6ndrbqqv.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n  $value = abs($value);\n\
    \  $closest_integer = $value;\n  $closest_integer = $closest_integer == 0 ? 1\
    \ : $closest_integer;\n  while ($closest_integer < $value) {\n    $closest_integer\
    \ = $closest_integer * 10;\n  }\n  return $closest_integer;\n}\n\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7jela_m_.php:31\n\
    Stack trace:\n#0 /tmp/tmp7jela_m_.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7jela_m_.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Create a function that takes a value (string) representing a\
    \ number\n// and returns the closest integer to it. If the number is equidistant\n\
    // from two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer($value) {\n    $value =\
    \ abs($value);\n    $closest_integer = $value;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value : $closest_integer;\n    $closest_integer = ($closest_integer\
    \ == $value) ? $value \nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqpkvff5d.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
