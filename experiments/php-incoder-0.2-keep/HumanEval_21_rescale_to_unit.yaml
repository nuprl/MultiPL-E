name: HumanEval_21_rescale_to_unit
language: php
prompt: "<?php\n// Given list of numbers (of at least two elements), apply a linear\
  \ transform to that list,\n// such that the smallest number will become 0 and the\
  \ largest will become 1\n// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0,\
  \ 0.25, 0.5, 0.75, 1.0]\nfunction rescale_to_unit($numbers) {\n"
tests: "function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
  \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
  \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
  \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  $min = min($numbers);\n  $max = max($numbers);\n  $scale = ($max\
    \ - $min);\n  return array_map(function ($num) use ($scale) {\n    return $num\
    \ / $scale;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't seem\
    \ to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])` returns `[0.0, 0.25, 0.5,\
    \ 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`.\n<|/ c |>\n<| c |>\nIt\
    \ works, I tested it before posting it.  What are you using it for?\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I must have made a mistake when I first\
    \ tried it.\n<|/ c |>\n<| c |>\nI tested it again and it works. I must have made\
    \ a mistake when I first tried it.\n<|/ c |>\n<| c |>\nI tested it again and it\
    \ works. I must have made a mistake when I first tried it.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = ($max\
    \ - $min);\n  return array_map(function ($number) {\n    return $number / $scale;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't seem\
    \ to work when $numbers is an empty array. `array_map` returns an empty array\
    \ when no callback is given.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself\
    \ and see for yourself. It returns an empty array when no callback is given.\n\
    <|/ c |>\n<| c |>\nI tested it myself and you're right. My mistake. Sorry.\n<|/\
    \ c |>\n<| a dscore=3 |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number - $min;\n  }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) {\n        return $number / $max - $min;\n    }, $numbers);\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. Your solution works perfectly for my use\
    \ case. However I accepted the other answer because it was more concise and also\
    \ because it was more efficient.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a PHP function\
    \ that does this for you:\n<code>", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    return array_map(function ($number) {\n        return $number / $max - $min;\n\
    \    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number - $min;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function ($number) {\n    return\
    \ $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math\
    \ |>\n<code>", "    $min = min($numbers);\n    $max = max($numbers);\n    return\
    \ array_map(function ($num) use ($min, $max) {\n        return $num - $min;\n\
    \    }, array_values($numbers));\n}\n", "    $min = min($numbers);\n    $max =\
    \ max($numbers);\n    $scale = ($max - $min);\n    return array_map(function ($number)\
    \ {\n        return $number / $scale;\n    }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = array();\n    foreach ($numbers as $n)\
    \ {\n        $range[] = $n - $min;\n    }\n    return $range;\n}\n", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    return array_map(function ($num) use ($min, $max)\
    \ {\n        return $num - $min;\n    }, array_values($numbers));\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    return array_map(function ($num)\
    \ use ($min, $max) {\n        return $num - $min / ($max - $min);\n    }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $n) {\n        $range[] = $n - $min;\n    }\n    $range[]\
    \ = $max - $min;\n    return $range;\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = [\n    0 => [\n        'id' => 1,\n        'name' => 'John',\n\
    \        'age' => 30,\n    ],\n    1 => [\n        'id' => 2,\n        'name'\
    \ => 'Jane',\n        'age' => 28,\n    ],\n    2 => [\n        'id' => 3,\n \
    \       'name' => 'Jack',\n        'age' => 29,\n    ],\n    3 => [\n        'id'\
    \ => 4,\n        'name' => 'Jill',\n        'age' => 32,\n    ],\n];\n\n$array2\
    \ = [];\nforeach ($array as $key => $value) {\n    $array2[$key] = $value['age'];\n\
    }\n\n$array2 = array_map(function ($value) {\n    return $value / count($array);\n\
    }, $array2);\n\nprint_r($array2);\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$array = [\n    0 => [\n        'id' => 1,\n        'name' => 'John',\n\
    \        'age' => 30,\n    ],\n    1 => [\n        'id' => 2,\n        'name'\
    \ => 'Jane',\n        'age' => 28,\n    ],\n    2 => [\n        'id' => 3,\n \
    \       'name' => 'Jack',\n        'age' => 29,\n    ],\n    3 => [\n        'id'\
    \ => 4,\n        'name' => 'Jill',\n        'age' => 32,\n    ],\n];\n\n$array2\
    \ = [];\nforeach ($array as $key => $value) {\n    $array2[$key] = $value['age'];\n\
    }\n\n$array2 = array_map(function ($value) {\n    return $value / count($array);\n\
    }, $array2);\n\nprint_r($array2);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$array = [\n    0 => [\n        'id' => 1,\n        'name' => 'John',\n\
    \        'age' => 30,\n    ],\n    1 => [\n        'id' => 2,\n        'name'\
    \ => 'Jane',\n        'age' => 28,\n    ],\n    2 => [\n        'id' => 3,\n \
    \       'name' => 'Jack',\n        'age' => 29,\n    ],\n    3 => [\n        'id'\
    \ => 4,\n        'name' => 'Jill',\n        '", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n \
    \   $range[] = $number - $min;\n  }\n  return $range;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=5 |>\n<| c\
    \ |>\nThis doesn't seem to work when you have negative numbers. e.g. `[-1.0, -2.0,\
    \ -3.0, -4.0, -5.0]` becomes `[-1.0, -0.5, -0.25, -0.125, -0.0625]` instead of\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem to work\
    \ when you have negative numbers. e.g. `[-1.0, -2.0, -3.0, -4.0, -5.0]` becomes\
    \ `[-1.0, -0.5, -0.25, -0.125, -0.0625]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work when you have negative numbers. e.g.\
    \ `[-1.0, -2.0, -3.0, -4.0, -5.0]` becomes `[-1.0, -0.5, -0.25, -0.125, -0.0625]`\
    \ instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem\
    \ to work when you have negative numbers. e.g. `[-1.0, -2.0, -3.0, -4.0, -5.0]`\
    \ becomes `[-1.0, -0.5, -0.25, -0.125, -0.0625]` instead of `[0.0, 0.25, 0.5,\
    \ 0.75, 1.0]`\n<|/ c |>\n<| c |>\nThis doesn't seem to work when you have negative\
    \ numbers. e.g. `[-1.0, -2.0, -3.0, -4.0, -5.0]` becomes `[-1.0, -0.5, -0.25,\
    \ -0.125, -0.0625]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| a |>\n\
    <code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range =\
    \ array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range[] = 1;\n  return array_map(function ($number) {\n    return $number\
    \ / $range[count($range) - 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't work if the array contains negative numbers. I added\
    \ a version that works with negative numbers. https://gist.github.com/anonymous/7a89e3edc99b1bc60d77\n\
    <|/ c |>\n<| a tags=php,math |>\nThis should work:\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| a dscore=2 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min\
    \ = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| a dscore=2 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min\
    \ = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| a tags=php,arrays,math |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min\
    \ = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| a dscore=1 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min\
    \ = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| a |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n\
    $max = max($numbers);\n$numbers = array_map(function($num) use ($min, $max) {\n\
    \    return $num - $min;\n}, $numbers);", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    return array_map(function ($num) use ($min, $max) {\n\
    \        return $num - $min;\n    }, array_values($numbers));\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=php,math |>\nI believe this should work:\n<code>",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThis doesn't work if the array is empty or contains\
    \ only one element. `array_map` will throw an error.\n<|/ c |>\n<| c |>\nI added\
    \ a check for empty arrays and one element arrays. I tested it and it works fine.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the array contains negative numbers. `array_map`\
    \ will throw an error.\n<|/ c |>\n<| c |>\nI added a check for negative numbers.\
    \ I tested it and it works fine.\n<|/ c |>\n<| c |>\nThis doesn't work if the\
    \ array contains negative numbers. `array_map` will throw an error.\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = ($max - $min) / (count($numbers) - 1);\n  return array_map(function\
    \ ($number) use ($scale) {\n    return $number * $scale;\n  }, $numbers);\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[] = 1;\n\
    \  return array_map(function($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function($x) { return $x *\
    \ $scale; }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = 1 / ($max - $min);\n  return array_map(function ($number) {\n    return $number\
    \ * $scale;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number - $min;\n  }, $numbers);\n}\n", "    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min) / (count($numbers)\
    \ - 1);\n    return array_map(function ($num) use ($scale) {\n        return $num\
    \ * $scale;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function($n) use ($min, $max) {\n    return $n / $max - $min\
    \ + $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($number) {\n    return $number - $min;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  $range = array();\n  foreach ($numbers as $number) {\n \
    \   $range[] = $number - $min;\n  }\n  return array_map(function($number) { return\
    \ $number / $range; }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = 1 / ($max - $min);\n  return array_map(function($number) {\n    return\
    \ $number * $scale;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThanks for your\
    \ answer. I am not familiar with array_map and array_filter. Could you please\
    \ explain how they work?\n<|/ c |>\n<| c |>\nThe `array_map` function applies\
    \ the given function to the array elements and returns the new array. The `array_filter`\
    \ function removes all the elements that return `true` from the given array. I've\
    \ added some comments to the code in the answer.\n<|/ c |>\n<| c |>\nThanks for\
    \ your explanation. I am still not able to understand how this works. Could you\
    \ please explain how this works?\n<|/ c |>\n<| c |>\nI've added some comments\
    \ to the code in the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your\
    \ explanation. I am still not able to understand how this works. Could you please\
    \ explain how this works?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = array(\n\
    \    array(\n        'id' => 1,\n        'name' => 'John',\n        'age' => 25,\n\
    \        'sex' => 'male',\n        'city' => 'New York'\n    ),\n    array(\n\
    \        'id' => 2,\n        'name' => 'Jane',\n        'age' => 26,\n       \
    \ 'sex' => 'female',\n        'city' => 'London'\n    ),\n    array(\n       \
    \ 'id' => 3,\n        'name' => 'Jack',\n        'age' => 27,\n        'sex' =>\
    \ 'male',\n        'city' => 'Paris'\n    ),\n    array(\n        'id' => 4,\n\
    \        'name' => 'Jill',\n        'age' => 28,\n        'sex' => 'female',\n\
    \        'city' => 'London'\n    ),\n    array(\n        'id' => 5,\n        'name'\
    \ => 'Jack',\n        'age' => 29,\n        'sex' => 'male',\n        'city' =>\
    \ 'Paris'\n    ),\n    array(\n        'id' => 6,\n        'name' => 'Jill',\n\
    \        'age' => 30,\n        'sex' => 'female',\n        'city' => 'London'\n\
    \    ),\n    array(\n        'id' => 7,\n        'name' => 'Jack',\n        'age'\
    \ => 31,\n        'sex' => 'male',\n        'city' => 'Paris'\n    ),\n    array(\n\
    \        'id' => 8,\n        'name' => 'Jill',\n        '", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = ($max - $min);\n  return array_map(function\
    \ ($number) { return $number / $scale; }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    return array_map(function ($num) use ($min, $max)\
    \ {\n        return $num - $min;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number - $min;\n  }, $numbers);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ seem to work if the array has negative numbers. I get the following error `Warning:\
    \ array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/test/test.php\
    \ on line 13`\n<|/ c |>\n<| c |>\nIt does work, if you have negative numbers.\
    \ Try it out with [this code](https://3v4l.org/8q6Mf).\n<|/ c |>\n<| c |>\nI see\
    \ it works in your example, but when I try it on my own array I get the error\
    \ `Warning: array_map(): Argument #2 should be an array in /Applications/MAMP/htdocs/test/test.php\
    \ on line 13`\n<|/ c |>\n<| c |>\nThen your array is not numerically indexed and\
    \ has some non-numeric values. Try `var_dump($numbers);` right before the `array_map`\
    \ call and see what it contains.\n<|/ c |>\n<| c |>\nIt returns `array(6) { [0]=>\
    \ float(0) [1]=> float(0) [2]=> float(0) [3]=> float(0) [4]=> float(0) [5]=> float(0)\
    \ }`\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(\n    array(\n\
    \        0 => 1,\n        1 => 2,\n        2 => 3,\n        3 => 4,\n        4\
    \ => 5,\n        5 => 6,\n        6 => 7,\n        7 => 8,\n        8 => 9,\n\
    \        9 => 10,\n        10 => 11,\n        11 => 12,\n        12 => 13,\n \
    \       13 => 14,\n        14 => 15,\n        15 => 16,\n        16 => 17,\n \
    \       17 => 18,\n        18 => 19,\n        19 => 20,\n        20 => 21,\n \
    \       21 => 22,\n        22 => 23,\n        23 => 24,\n        24 => 25,\n \
    \       25 => 26,\n        26 => 27,\n        27 => 28,\n        28 => 29,\n \
    \       29 => 30,\n        30 => 31,\n        31 => 32,\n        32 => 33,\n \
    \       33 => 34,\n        34 => 35,\n        35 => 36,\n        36 => 37,\n \
    \       37 => 38,\n        38 => 39,\n        39 => 40,\n        40 => 41,\n \
    \       41 => 42,\n        42 => ", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function($x) {\n    return $x - $min;\n  }, $numbers);\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs',\
    \ $range);\n  $range[] = 1;\n  $range = array_map('sqrt', $range);\n  $range =\
    \ array_map('round', $range);\n  return array_map(function ($number) {\n    return\
    \ $number / $range;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $number) {\n        $range[]\
    \ = $number - $min;\n    }\n    return $range;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| c |>\nThanks so much! This works perfectly! I really appreciate it!\n\
    <|/ c |>\n<| c |>\nI added a version that doesn't require `array_map`\n<|/ c |>\n\
    <| c |>\nI added a version that doesn't require `array_map`\n<|/ c |>\n<| c |>\n\
    I added a version that doesn't require `array_map`\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = [1, 2, 3, 4, 5];\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    }, $numbers);\n</code>\n<|/ a tags=php,arrays,math |>\n<| a tags=php,arrays,math\
    \ |>\n<code>\n$numbers = [1, 2, 3, 4, 5];\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    }, $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n$numbers = [1, 2,\
    \ 3, 4, 5];\n$min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n</code>\n\
    <|/ a dscore=2 tags=php,arrays,math |>\n<| a dscore=2 |>\n<code>\n$numbers = [1,\
    \ 2, 3, 4, 5];\n$min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n</code>\n\
    <|/ a tags=php,arrays,math |>\n<| a tags=php,arrays,math |>\n<code>\n$numbers\
    \ = [1, 2, 3, 4, 5];\n$min = min($numbers);\n$max = max($numbers);\n$numbers =\
    \ array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n\
    </code>\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1.0\
    \ / ($max - $min);\n  return array_map(function($number) { return $number * $scale;\
    \ }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / $max - $min;\n    return array_map(function ($number) {\n  \
    \      return $number * $scale;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n\
    <| c |>\nI like your solution, but I need a solution that doesn't require a loop.\
    \ Thanks though!\n<|/ c |>\n<| c |>\n: I added a solution without loops.\n<|/\
    \ c |>\n<| c |>\n: I added a solution without loops.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution without loops.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    $range[]\
    \ = $max - $min;\n    return $range;\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function ($number)\
    \ { return $number * $scale; }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=php,math |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number - $min;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = array(\n    array(1,2,3,4,5),\n    array(6,7,8,9,10),\n    array(11,12,13,14,15),\n\
    \    array(16,17,18,19,20),\n    array(21,22,23,24,25),\n    array(26,27,28,29,30),\n\
    \    array(31,32,33,34,35),\n    array(36,37,38,39,40),\n    array(41,42,43,44,45),\n\
    \    array(46,47,48,49,50),\n    array(51,52,53,54,55),\n    array(56,57,58,59,60),\n\
    \    array(61,62,63,64,65),\n    array(66,67,68,69,70),\n    array(71,72,73,74,75),\n\
    \    array(76,77,78,79,80),\n    array(81,82,83,84,85),\n    array(86,87,88,89,90),\n\
    \    array(91,92,93,94,95),\n    array(96,97,98,99,100),\n    array(101,102,103,104,105),\n\
    \    array(106,107,108,109,110),\n    array(111,112,113,114,115),\n    array(116,117,118,119,120),\n\
    \    array(121,122,123,124,125),\n    array(126,127,128,129,130),\n    array(131,132,133,134,135),\n\
    \    array(136,137,138,139,140),\n    array(141,142,143,144,145),\n    array(146,147,148,149,150),\n\
    \    array(151,152,153,154,155),\n    array(156,157,158,159,160),\n    array(161,162,163,164,165),\n\
    \    array(166,167,168,169,170),\n    array(171,172,173,174,175),\n    array(176,177,178,179,180),\n\
    \    array(181,182,183,184,185),\n    array(18", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function ($num) use ($min, $max) {\n  \
    \  return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,math\
    \ |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$min = min($numbers);\n$max = max($numbers);\n\n$numbers = array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=php,math |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    \n$min = min($numbers);\n$max = max($numbers);\n\n$numbers = array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n}, $numbers);\n\nprint_r($numbers);\n\
    </code>\n<|/ a dscore=2 |>\n<|", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = ($max - $min);\n  return array_map(function ($number) {\n    return $number\
    \ / $scale;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this\
    \ solution, but I believe it can be simplified to `return array_map(function ($number)\
    \ { return $number / $scale; }, $numbers);`\n<|/ c |>\n<| c |>\nYes, that is a\
    \ better solution. I'll update my answer.\n<|/ c |>\n<| c |>\nI like your solution\
    \ as well. I've updated my answer with your suggestion.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n\n$numbers = array(\n    array(\n\
    \        'id' => 1,\n        'name' => 'one',\n        'price' => 100\n    ),\n\
    \    array(\n        'id' => 2,\n        'name' => 'two',\n        'price' =>\
    \ 200\n    ),\n    array(\n        'id' => 3,\n        'name' => 'three',\n  \
    \      'price' => 300\n    ),\n    array(\n        'id' => 4,\n        'name'\
    \ => 'four',\n        'price' => 400\n    ),\n    array(\n        'id' => 5,\n\
    \        'name' => 'five',\n        'price' => 500\n    ),\n    array(\n     \
    \   'id' => 6,\n        'name' => 'six',\n        'price' => 600\n    ),\n   \
    \ array(\n        'id' => 7,\n        'name' => 'seven',\n        'price' => 700\n\
    \    ),\n    array(\n        'id' => 8,\n        'name' => 'eight',\n        'price'\
    \ => 800\n    ),\n    array(\n        'id' => 9,\n        'name' => 'nine',\n\
    \        'price' => 900\n    ),\n    array(\n        'id' => 10,\n        'name'\
    \ => 'ten',\n        'price' => 1000\n    ),\n    array(\n        'id' => 11,\n\
    \        'name' => 'eleven',\n        'price' => 1100\n    ),\n    array(\n  \
    \      'id' => 12,\n        'name' => 'twelve',\n        'price' => 1200\n   \
    \ ),\n    array(\n        'id' => 13,\n        'name' => 'thirteen',\n       \
    \ 'price' => 1300\n    ),\n    array(\n        'id' => 14,\n        'name' =>\
    \ 'fourteen',\n        'price' => 1400\n    ),\n    array(\n        'id' => 15,\n\
    \        'name' => 'fifteen',\n        'price' => 1500\n    ),\n    array(\n \
    \       'id' => 16,\n        'name' => 'sixteen',\n        'price' => 1600\n \
    \   ),\n    array(\n        'id' => 17,\n        'name' => 'seventeen',\n    \
    \    'price' => 1700\n    ),\n    array(\n        'id' => 18,\n        'name'\
    \ => 'eighteen',\n        'price' => 1800\n    ),\n    array(\n        'id' =>\
    \ 19,\n        'name' => 'nineteen',\n        'price' => 1900\n    ),\n    array(\n\
    \        'id' => 20,\n        'name' => 'twenty',\n        'price' => 2000\n \
    \   ),\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", " \
    \   $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math |>\n<code>\n<?php", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `array_map` doesn't seem to accept a\
    \ callback that returns an array of numbers. `array_map` seems to only accept\
    \ a callback that returns one number.\n<|/ c |>\n<| c |>\n: It does, but you need\
    \ to use an anonymous function instead. I've updated my answer.\n<|/ c |>\n<|\
    \ c |>\n: I didn't know that `array_map` only accepted one argument. Thanks for\
    \ pointing that out.\n<|/ c |>\n<| c |>\n: I added a version that doesn't use\
    \ anonymous functions. It's not as elegant as yours, but it does work.\n<|/ c\
    \ |>\n<| c |>\n: I added a version that doesn't use anonymous functions, but it\
    \ does work.\n<|/ c |>\n<| a |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function($number){\n\
    \    return $number/$max-$min;\n}, $numbers);\nprint_r($numbers);", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  return array_map(function ($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs',\
    \ $range);\n  $range = array_sum($range);\n  return array_map(function($number)\
    \ {\n    return $number / $range;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math,arrays |>\n\
    <| c |>\nI like your solution, however it fails for negative numbers. I added\
    \ a solution that handles negative numbers and also handles arrays of different\
    \ lengths.\n<|/ c |>\n<| c |>\nI added a solution that handles negative numbers\
    \ and also handles arrays of different lengths.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $array2 = [];\nforeach ($array as $key => $value) {\n    $array2[$key] = $value\
    \ / $max - $min;\n}\n</code>\n<|/ a tags=php,math,arrays |>\n<| a dscore=1 |>\n\
    <code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $array2 = [];\nforeach ($array as $key => $value) {\n    $array2[$key] = $value\
    \ / $max - $min;\n}\n</code>\n<|/ a tags=php,math,arrays |>\n<| a tags=php,math,arrays\
    \ |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $array2 = [];\nforeach ($array as $key => $value) {\n    $array2[$key] = $value\
    \ / $max - $min;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math,arrays |>\n\
    <code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $array2 = [];\nforeach ($array as $key => $value) {\n    $array2[$key] = $value\
    \ / $max - $min;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math,arrays |>\n\
    <code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $array2 = [];\nforeach ($array as $key => $value) {\n    $array2[$key] = $value\
    \ / $max - $min;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[] = $max\
    \ - $min;\n  return array_map(function ($number) { return $number / $range; },\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$numbers = array(\n    array(\n        0 => 1,\n        1 => 2,\n     \
    \   2 => 3,\n        3 => 4,\n        4 => 5,\n        5 => 6,\n        6 => 7,\n\
    \        7 => 8,\n        8 => 9,\n        9 => 10,\n        10 => 11,\n     \
    \   11 => 12,\n        12 => 13,\n        13 => 14,\n        14 => 15,\n     \
    \   15 => 16,\n        16 => 17,\n        17 => 18,\n        18 => 19,\n     \
    \   19 => 20,\n        20 => 21,\n        21 => 22,\n        22 => 23,\n     \
    \   23 => 24,\n        24 => 25,\n        25 => 26,\n        26 => 27,\n     \
    \   27 => 28,\n        28 => 29,\n        29 => 30,\n        30 => 31,\n     \
    \   31 => 32,\n        32 => 33,\n        33 => 34,\n        34 => 35,\n     \
    \   35 => 36,\n        36 => 37,\n        37 => 38,\n        38 => 39,\n     \
    \   39 => 40,\n        40 => 41,\n        41 => 42,\n        42 => 43,\n     \
    \   43 => 44,\n        44 => 45,\n        45 => 46,\n        46 => 47,\n     \
    \   47 => 48,\n        48 => 49,\n        49 => 50,\n        50 => 51,\n     \
    \   51 => 52,\n        52 => 53,\n        53 => 54,\n        54 => 55,\n     \
    \   55 => 56,\n        56 => 57,\n        57 => 58,\n        58 => 59,\n     \
    \   59 => 60,\n        60 => 61,\n        61 => 62,\n        62 => 63,\n     \
    \   63 => 64,\n        64 => 65,\n        65 => 66,\n        66 => 67,\n     \
    \   67 => 68,\n        68 => 69,\n        69 => 70,\n        70 => 71,\n     \
    \   71 ", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale =\
    \ 1 / $max - $min;\n    return array_map(function ($number) use ($scale) {\n \
    \       return $number * $scale;\n    }, $numbers);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nI needed a solution that would allow me to scale a range\
    \ of numbers from 0 to 1 to a range of 0 to 255. \nI used the solution from and\
    \ modified it a little to allow for negative numbers. \n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    if ($min == $max) {\n        return $numbers;\n\
    \    }\n    $scale = 1 / ($max - $min);\n    return array_map(function ($number)\
    \ use ($scale) {\n        return $number * $scale;\n    }, $numbers);\n}\n", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return $range;\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = ($max - $min)\
    \ / count($numbers);\n  return array_map(function ($num) use ($scale) {\n    return\
    \ $num * $scale;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ seem to work. `array_map` doesn't seem to accept a callback that returns a value.\n\
    <|/ c |>\n<| c |>\n: It does. Try it yourself.\n<|/ c |>\n<| c |>\nAh, I see now.\
    \ Thanks for pointing that out. My bad.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    }, $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    }, $numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    }, $numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n\
    $numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    }, $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    }, $numbers);\n</code>\n<|/ a tags=php,arrays |>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = ($max - $min) / count($numbers);\n  \
    \  return array_map(function ($number) use ($scale) {\n        return $number\
    \ / $scale;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n  },\
    \ $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI like this solution, however it\
    \ fails for negative numbers. I added a solution that works for negative numbers\
    \ as well.\n<|/ c |>\n<| a tags=php,math |>\nI came up with this solution:\n<code>",
  "    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($num) use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  return array_map(function ($number) {\n    return $number / $range[count($range)\
    \ - 1];\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI like\
    \ this solution, but I ended up using something slightly different because I needed\
    \ the smallest number to be 0 and largest to be 1.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\n<?php", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale =\
    \ 1 / $max - $min;\n  return array_map(function ($number) {\n    return $number\
    \ * $scale;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = ($max - $min);\n  return array_map(function ($number) {\n    return\
    \ $number / $scale;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ a tags=php,arrays |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$scale = ($max - $min);\n$numbers\
    \ = array_map(function($number){\n    return $number/$scale;\n}, $numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $scale = ($max - $min);\n$numbers = array_map(function($number){\n    return $number/$scale;\n\
    }, $numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a dscore=2\
    \ |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n\
    $max = max($numbers);\n$scale = ($max - $min);\n$numbers = array_map(function($number){\n\
    \    return $number/$scale;\n}, $numbers);\nprint_r($numbers);\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$scale = ($max - $min);\n$numbers\
    \ = array_map(function($number){\n    return $number/$scale;\n}, $numbers);\n\
    print_r($numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max = max($numbers);\n\
    $scale = ($max - $min);\n$numbers = array_map(function($number){\n    return $number/$scale;\n\
    }, $numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in the\
    \ array. For example, `[-1.0, -2.0, -3.0, -4.0, -5.0]` becomes `[-0.5, -0.75,\
    \ -0.9, -1.0, -1.25]` instead of `[-0.5, -0.75, -0.9, -1.0, -1.0]`.\n<|/ c |>\n\
    <| c |>\nI added a version that works with negative numbers. I didn't test it\
    \ thoroughly, so there might be some edge cases that I didn't think of.\n<|/ c\
    \ |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in the\
    \ array. For example, `[-1.0, -2.0, -3.0, -4.0, -5.0]` becomes `[-0.5, -0.75,\
    \ -0.9, -1.0, -1.25]` instead of `[-0.5, -0.75, -0.9, -1.0, -1.0]`.\n<|/ c |>\n\
    <| c |>\nI added a version that works with negative numbers. I didn't test it\
    \ thoroughly, so there might be some edge cases that I didn't think of.\n<|/ c\
    \ |>\n<| a dscore=1 |>\n<code>", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    return array_map(function ($number) {\n        return $number / $max - $min;\n\
    \    }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    if ($min == $max) {\n        return $numbers;\n    }\n    $scale = 1 / ($max\
    \ - $min);\n    return array_map(function ($num) use ($scale) {\n        return\
    \ $num * $scale;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max =\
    \ max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis\
    \ doesn't seem to work when there are negative numbers in the array\n<|/ c |>\n\
    <| c |>\nIt works fine for me. Can you give an example where it doesn't work?\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me when there are negative numbers in the\
    \ array. Try it yourself with $numbers = [-10, -20, -30, -40, -50];\n<|/ c |>\n\
    <| c |>\nI see what you mean. I've updated my answer to account for negative numbers.\n\
    <|/ c |>\n<| c |>\nThis doesn't seem to work when there are negative numbers in\
    \ the array\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $min = min($numbers);\n \
    \ $max = max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $range = array();\n  foreach ($numbers as $number) {\n    $range[] = $number\
    \ - $min;\n  }\n  return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for the answer!\
    \ I used the second solution and it works great!\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$numbers = array(\n    array(\n        'id' => 1,\n        'name'\
    \ => 'test1',\n        'price' => 1,\n        'quantity' => 1,\n        'total'\
    \ => 1,\n        'subtotal' => 1,\n        'discount' => 0,\n        'tax' =>\
    \ 0,\n        'total' => 1,\n        'subtotal' => 1,\n        'discount' => 0,\n\
    \        'tax' => 0,\n        'total' => 1,\n        'subtotal' => 1,\n      \
    \  'discount' => 0,\n        'tax' => 0,\n        'total' => 1,\n        'subtotal'\
    \ => 1,\n        'discount' => 0,\n        'tax' => 0,\n        'total' => 1,\n\
    \        'subtotal' => 1,\n        'discount' => 0,\n        'tax' => 0,\n   \
    \     'total' => 1,\n        'subtotal' => 1,\n        'discount' => 0,\n    \
    \    'tax' => 0,\n        'total' => 1,\n        'subtotal' => 1,\n        'discount'\
    \ => 0,\n        'tax' => 0,\n        'total' => 1,\n        'subtotal' => 1,\n\
    \        'discount' => 0,\n        'tax' => 0,\n        'total' => 1,\n      \
    \  'subtotal' => 1,\n        'discount' => 0,\n        'tax' => 0,\n        'total'\
    \ => 1,\n        'subtotal' => 1,\n        'discount' => 0,\n        'tax' =>\
    \ 0,\n        'total' => 1,\n        'subtotal' => 1,\n        'discount' => 0,\n\
    \        'tax' => 0,\n        'total' => 1,\n        'subtotal' => 1,\n      \
    \  'discount' => 0,\n        'tax' => 0,\n        'total' => 1,\n        'subtotal'\
    \ => 1,\n        'discount' => 0,\n        'tax' => 0,\n        'total' => 1,\n\
    \        'subtotal' => 1,\n        'discount' => 0,\n        'tax' => 0,\n   \
    \     'total' => 1,\n        'subtotal' => 1,\n        'discount' => 0,\n    \
    \    'tax' => 0,\n        'total' => 1,\n        'subtotal' => 1,\n        'discount'\
    \ => 0,\n        'tax' => 0,\n        'total' => 1,\n        'subtotal' => 1,\n\
    \        'discount' => 0,\n        'tax' => 0,\n        'total' => 1,\n      \
    \  'subtotal' => 1,\n        'discount' => 0,\n        'tax' => 0,\n        'total'\
    \ => 1,\n        'subtotal' => 1,\n        'discount' => 0,\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n\
    <| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])`\
    \ returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. What do you mean by \"doesn't seem\
    \ to work\"? It returns `[0.0, 0.25, 0.5, 0.75, 1.0]` as expected.\n<|/ c |>\n\
    <| c |>\nI mean it returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25,\
    \ 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nI tested it again and it works now. I've\
    \ updated my answer to reflect this.\n<|/ c |>\n<| c |>\nI tested it again and\
    \ it works now. I've updated my answer to reflect this.\n<|/ c |>\n<| a tags=php,math\
    \ |>\nI wrote a function that will do what you want:\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function ($num) use ($min, $max) {\n  \
    \  return $num - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThanks\
    \ for your answer. I've tried it and it works perfectly for my needs. I appreciate\
    \ your help.\n<|/ c |>\n<| c |>\nNo problem. Glad I could help.\n<|/ c |>\n<|\
    \ a tags=php,math |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach($numbers\
    \ as $number){\n    $range[] = $number - $min;\n}\n$range = array_map('round',$range);\n\
    $range = array_filter($range);\n$range = array_values($range);\nprint_r($range);\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer. I've tried it and\
    \ it works perfectly for my needs. I appreciate your help.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n\
    $max = max($numbers);\n$range = array();\nforeach($numbers as $number){\n    $range[]\
    \ = $number - $min;\n}\n$range = array_map('round',$range);\n$range = array_filter($range);\n\
    $range = array_values($range);\nprint_r($range);\n</code>\n<|/ a tags=php,math\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach($numbers\
    \ as $number){\n    $range[] = $number - $min;\n}\n$range = array_map('round',$range);\n\
    $range = array_filter($range);\n$range = array_values($range);\nprint_r($range);\n\
    </code>\n<|/ a tags=php,math |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $min = min($numbers);\n$max = max($numbers);\n$range = array();\nforeach($numbers\
    \ as $number){\n    $range[] = $number ", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $scale = 1.0;\n    if ($min == $max) {\n        return\
    \ $numbers;\n    }\n    if ($min == 0) {\n        $scale = 0.0;\n    }\n    if\
    \ ($max == 1) {\n        $scale = 1.0;\n    }\n    $numbers = array_map(function\
    \ ($num) use ($scale) {\n        return $num / $scale;\n    }, $numbers);\n  \
    \  return $numbers;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = array();\n    foreach ($numbers as $n) {\n        $range[] = $n\
    \ - $min;\n    }\n    $range[] = $max - $min;\n    return $range;\n}\n", "   \
    \ $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n  \
    \  foreach ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n\
    \    $range[] = 1;\n    return $range;\n}\n", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = array();\n    foreach ($numbers as $number)\
    \ {\n        $range[] = $number - $min;\n    }\n    $range[] = 1;\n    return\
    \ array_map(function ($number) {\n        return $number / $range[0];\n    },\
    \ $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = 1.0 / ($max - $min);\n  return array_map(function($number) {\n    return $number\
    \ * $scale;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = ($max - $min);\n    return array_map(function ($number) {\n    \
    \    return $number / $scale;\n    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n$array = [\n    0 => [\n        'id' => 1,\n \
    \       'name' => 'test',\n        'price' => 1,\n        'quantity' => 1,\n \
    \       'total' => 1,\n    ],\n    1 => [\n        'id' => 2,\n        'name'\
    \ => 'test2',\n        'price' => 2,\n        'quantity' => 1,\n        'total'\
    \ => 2,\n    ],\n    2 => [\n        'id' => 3,\n        'name' => 'test3',\n\
    \        'price' => 3,\n        'quantity' => 1,\n        'total' => 3,\n    ],\n\
    \    3 => [\n        'id' => 4,\n        'name' => 'test4',\n        'price' =>\
    \ 4,\n        'quantity' => 1,\n        'total' => 4,\n    ],\n    4 => [\n  \
    \      'id' => 5,\n        'name' => 'test5',\n        'price' => 5,\n       \
    \ 'quantity' => 1,\n        'total' => 5,\n    ],\n];\n\n$result = [];\nforeach\
    \ ($array as $item) {\n    $result[$item['id']] = $item;\n}\n\n$result[$result['id']]['total']\
    \ = array_sum($result['total']);\n\n$result = array_values($result);\n\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| a dscore=0 |>\n<code>\n$array = [\n    0\
    \ => [\n        'id' => 1,\n        'name' => 'test',\n        'price' => 1,\n\
    \        'quantity' => 1,\n        'total' => 1,\n    ],\n    1 => [\n       \
    \ 'id' => 2,\n        'name' => 'test2',\n        'price' => 2,\n        'quantity'\
    \ => 1,\n        'total' => 2,\n    ],\n    2 => [\n        'id' => 3,\n     \
    \   'name' => 'test3',\n        'price' => 3,\n        'quantity' => 1,\n    \
    \    'total' => 3,\n    ],\n    3 => [\n        'id' => 4,\n        'name' =>\
    \ 'test4',\n        'price' => 4,\n        'quantity' => 1,\n        'total' =>\
    \ 4,\n    ],\n    4 => [\n        'id' => 5,\n        'name' => 'test5',\n   \
    \     'price' => 5,\n        'quantity' => 1,\n        'total' => 5,\n    ],\n\
    ];\n\n$result = [];\nforeach ($array as $item) {\n    $result[$item['id']] = $item;\n\
    }\n\n$result[$result['id']]['total'] = array_", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    if ($min == $max) {\n        return $numbers;\n\
    \    }\n    $scale = 1 / ($max - $min);\n    return array_map(function ($value)\
    \ use ($scale) {\n        return $value * $scale;\n    }, $numbers);\n}\n", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach\
    \ ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range = array_map('abs',\
    \ $range);\n  $range = $range[0];\n  return array_map(function ($number) {\n \
    \   return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$numbers = array(\n    array(\n        0 => 1,\n        1\
    \ => 2,\n        2 => 3,\n        3 => 4,\n        4 => 5,\n        5 => 6,\n\
    \        6 => 7,\n        7 => 8,\n        8 => 9,\n        9 => 10,\n       \
    \ 10 => 11,\n        11 => 12,\n        12 => 13,\n        13 => 14,\n       \
    \ 14 => 15,\n        15 => 16,\n        16 => 17,\n        17 => 18,\n       \
    \ 18 => 19,\n        19 => 20,\n        20 => 21,\n        21 => 22,\n       \
    \ 22 => 23,\n        23 => 24,\n        24 => 25,\n        25 => 26,\n       \
    \ 26 => 27,\n        27 => 28,\n        28 => 29,\n        29 => 30,\n       \
    \ 30 => 31,\n        31 => 32,\n        32 => 33,\n        33 => 34,\n       \
    \ 34 => 35,\n        35 => 36,\n        36 => 37,\n        37 => 38,\n       \
    \ 38 => 39,\n        39 => 40,\n        40 => 41,\n        41 => 42,\n       \
    \ 42 => 43,\n        43 => 44,\n        44 => 45,\n        45 => 46,\n       \
    \ 46 => 47,\n        47 => 48,\n        48 => 49,\n        49 => 50,\n       \
    \ 50 => 51,\n        51 => 52,\n        52 => 53,\n        53 => 54,\n       \
    \ 54 => 55,\n        55 => 56,\n        56 => 57,\n        57 => 58,\n       \
    \ 58 => 59,\n        59 => 60,\n        60 => 61,\n        61 => 62,\n       \
    \ 62 => 63,\n        63 => 64,\n        64 => 65,\n        65 => 66,\n       \
    \ 66 => 67,\n        67 => 68,\n        68 => 69,\n        69 => 70,\n       \
    \ 70 => ", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = 1 /\
    \ $max - $min;\n    return array_map(function ($number) use ($scale) {\n     \
    \   return $number * $scale;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThanks\
    \ for your answer. Your solution is very good, but I cannot use it because I need\
    \ the result to be a float array (as I mentioned in the question). So I cannot\
    \ use array_map with floats. I need a solution that can handle floats and ints.\n\
    <|/ c |>\n<| c |>\n: I added a solution that uses `array_map` with floats.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Your solution is very good, but I cannot\
    \ use it because I need the result to be a float array (as I mentioned in the\
    \ question). So I cannot use array_map with floats. I need a solution that can\
    \ handle floats and ints.\n<|/ c |>\n<| c |>\n: I added a solution that uses `array_map`\
    \ with floats.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution is very\
    \ good, but I cannot use it because I need the result to be a float array (as\
    \ I mentioned in the question). So I cannot use array_map with floats. I need\
    \ a solution that can handle floats and ints.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1\
    \ / ($max - $min);\n  return array_map(function($number) { return $number * $scale;\
    \ }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range[] = 1;\n  return $range;\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scale = 1 / ($max - $min);\n    return array_map(function ($num) use ($scale)\
    \ {\n        return $num * $scale;\n    }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $scale = 1 / ($max - $min);\n    return array_map(function\
    \ ($number) use ($scale) {\n        return $number * $scale;\n    }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n\
    }\n</code>\n<|/ a tags=php,math,arrays |>\n<| c |>\nThis doesn't seem to work.\
    \ `array_map` doesn't seem to accept a callback with two arguments. I got this\
    \ error: `Warning: array_map() expects parameter 1 to be a valid callback, function\
    \ 'rescale_to_unit' not found or invalid function name`\n<|/ c |>\n<| c |>\n:\
    \ It does work, see the example I added.\n<|/ c |>\n<| c |>\n: It does work, see\
    \ the example I added.\n<|/ c |>\n<| c |>\n: It does work, see the example I added.\n\
    <|/ c |>\n<| c |>\n: It does work, see the example I added.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\n$numbers = array(\n    array(\n        'name' => 'John',\n\
    \        'age' => 25,\n        'height' => 1.8,\n        'weight' => 70\n    ),\n\
    \    array(\n        'name' => 'Jane',\n        'age' => 25,\n        'height'\
    \ => 1.8,\n        'weight' => 70\n    ),\n    array(\n        'name' => 'Jack',\n\
    \        'age' => 25,\n        'height' => 1.8,\n        'weight' => 70\n    )\n\
    );\n\n$min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n}, $numbers);\n\nprint_r($numbers);\n\
    </code>\n<|/ a tags=php,math,arrays |>\n<| c |>\nThis doesn't seem to work. `array_map`\
    \ doesn't seem to accept a callback with two arguments. I got this error: `Warning:\
    \ array_map() expects parameter 1 to be a valid callback, function 'rescale_to_unit'\
    \ not found or invalid function name`\n<|/ c |>\n<| c |>\n: It does work, see\
    \ the example I added.\n<|/ c |>\n<| c |>\n: It does work, see the example I added.\n\
    <|/ c |>\n<| a tags=php,math,arrays |>\n<code>\n$numbers = array(\n    array(\n\
    \        'name' => 'John',\n        'age' => 25,\n        'height' => 1.8,\n \
    \       'weight' => 70\n    ),\n    array(\n        'name' => 'Jane',\n      \
    \  'age' => 25,\n        'height' => 1.", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $range = array();\n    foreach ($numbers as $number) {\n\
    \        $range[] = $number - $min;\n    }\n    return $range;\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $scale = ($max - $min) / count($numbers);\n\
    \  return array_map(function ($number) { return $number * $scale; }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function ($number) {\n    return $number / $range[$number];\n  },\
    \ $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  return array_map(function ($number) {\n    return $number / $range;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  $range[]\
    \ = 1;\n  $range[] = $max - $min;\n  return array_map(function ($number) {\n \
    \   return $number / $range;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,math\
    \ |>\n<| c |>\nThis doesn't seem to work. `rescale_to_unit([1.0, 2.0, 3.0, 4.0,\
    \ 5.0])` returns `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.4 and it works. I updated\
    \ the answer to include a link to the PHP manual page that describes the function.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it works. I updated the answer\
    \ to include a link to the PHP manual page that describes the function.\n<|/ c\
    \ |>\n<| c |>\nI tested it on PHP 5.5.9 and it works. I updated the answer to\
    \ include a link to the PHP manual page that describes the function.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.6.4 and it works. I updated the answer to include\
    \ a link to the PHP manual page that describes the function.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    $range[]\
    \ = 1;\n    return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = array();\n\
    \    foreach ($numbers as $number) {\n        $range[] = $number - $min;\n   \
    \ }\n    return array_map(function ($number) {\n        return $number / $range[$number];\n\
    \    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis does not\
    \ work if you have negative numbers in the array\n<|/ c |>\n<| c |>\nThis does\
    \ not work if you have negative numbers in the array\n<|/ c |>\n<| c |>\nThis\
    \ does not work if you have negative numbers in the array\n<|/ c |>\n<| c |>\n\
    This does not work if you have negative numbers in the array\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  return array_map(function($number)\
    \ {\n    return $number / $range[$number];\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't seem to work. `array_map` returns an array with one\
    \ element for each element in the original array. `array_map` doesn't seem to\
    \ take an optional second argument to specify the output array size.\n<|/ c |>\n\
    <| c |>\nAh, I see. I was thinking `array_map` would return an array with one\
    \ element for each element in the original array. Thanks for pointing that out.\n\
    <|/ c |>\n<| c |>\nI added a version that does what you're looking for. Let me\
    \ know if that works for you.\n<|/ c |>\n<| c |>\nI added a version that does\
    \ what you're looking for. Let me know if that works for you.\n<|/ c |>\n<| c\
    \ |>\nI added a version that does what you're looking for. Let me know if that\
    \ works for you.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$numbers = [1, 2,\
    \ 3, 4, 5];\n$numbers = array_map(function($number) {\n    return $number / 2;\n\
    }, $numbers);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work.\
    \ `array_map` returns an array with one element for each element in the original\
    \ array. `array_map` doesn't seem to take an optional second argument to specify\
    \ the output array size.\n<|/ c |>\n<| c |>\nI added a version that does what\
    \ you're looking for. Let me know if that works for you.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n$numbers = [1, 2, 3, 4, 5];\n$numbers = array_map(function($number)\
    \ {\n    return $number / 2;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't seem to work. `array_map` returns an array with one element\
    \ for each element in the original array. `array_map` doesn't seem to take an\
    \ optional second argument to specify the output array size.\n<|/ c |>\n<| c |>\n\
    I added a version that does what you're looking for. Let me know if that works\
    \ for you.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n$numbers = [1, 2, 3, 4, 5];\n\
    $numbers = array_map(function($number) {\n    return $number / ", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays,math\
    \ |>\n<| c |>\nI like this solution, but I believe it would be better to divide\
    \ by `$max - $min` instead of `$max - $min+1`\n<|/ c |>\n<| c |>\n: I believe\
    \ that would give the same result, but I believe that `array_map` will do that\
    \ for you. I'll update the answer with your suggestion.\n<|/ c |>\n<| c |>\nYes,\
    \ it does. I didn't know that `array_map` would do that for you. Thanks!\n<|/\
    \ c |>\n<| a tags=php,arrays,math |>\n<code>\n$numbers = array(\n    1,\n    2,\n\
    \    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n  \
    \  12,\n    13,\n    14,\n    15,\n    16,\n    17,\n    18,\n    19,\n    20,\n\
    \    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n    27,\n    28,\n    29,\n\
    \    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n    36,\n    37,\n    38,\n\
    \    39,\n    40\n);\n\n$min = min($numbers);\n$max = max($numbers);\n\n$numbers\
    \ = array_map(function ($number) {\n    return $number / $max - $min;\n}, $numbers);\n\
    \nprint_r($numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$numbers\
    \ = array(\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n \
    \   9,\n    10,\n    11,\n    12,\n    13,\n    14,\n    15,\n    16,\n    17,\n\
    \    18,\n    19,\n    20,\n    21,\n    22,\n    23,\n    24,\n    25,\n    26,\n\
    \    27,\n    28,\n    29,\n    30,\n    31,\n    32,\n    33,\n    34,\n    35,\n\
    \    36,\n    37,\n    38,\n    39,\n    40\n);\n\n$min = min($numbers);\n$max\
    \ = max($numbers);\n\n$number", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range = array_map('sqrt', $range);\n  $range[] = 1.0;\n  return array_map(function($number)\
    \ { return $number / $range; }, $numbers);\n}\n", "  $min = min($numbers);\n \
    \ $max = max($numbers);\n  return array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    return array_map(function ($number) {\n        return\
    \ $number / $max - $min;\n    }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't seem to work. `array_map` returns a new array and\
    \ doesn't modify the original array. Try `var_dump($numbers);` after `array_map`\
    \ and you'll see that `$numbers` hasn't changed.\n<|/ c |>\n<| c |>\nYes, you're\
    \ right. I've updated the answer. Thanks!\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max =\
    \ max($numbers);\n$numbers = array_map(function($number){\n    return $number\
    \ / $max - $min;\n}, $numbers);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max =\
    \ max($numbers);\n$numbers = array_map(function($number){\n    return $number\
    \ / $max - $min;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n\
    $max = max($numbers);\n$numbers = array_map(function($number){\n    return $number\
    \ / $max - $min;\n}, $numbers);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max =\
    \ max($numbers);\n$numbers = array_map(function($number){\n    return $number\
    \ / $max - $min;\n}, $numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| a |>\n\
    <code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max =\
    \ max($numbers);\n$numbers = array_map(function($number){\n    return $number\
    \ / $max - $min;\n}, $numbers);\n</code>\n<|/ a dscore=1 tags=php,arrays |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function($number) {\n    return $number\
    \ / $max - $min;\n  }, $numbers);\n}\n", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $range = array();\n    foreach ($numbers as $number) {\n\
    \        $range[] = $number - $min;\n    }\n    return $range;\n}\n", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = array();\n    foreach\
    \ ($numbers as $number) {\n        $range[] = $number - $min;\n    }\n    return\
    \ array_map(function ($number) {\n        return $number / $range[$number];\n\
    \    }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,math |>\n<code>\n\
    <?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n$max =\
    \ max($numbers);\n$range = array();\n$range[] = $min;\n$range[] = $max;\n$range[]\
    \ = $max;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n\
    $range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[]\
    \ = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n\
    $range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[]\
    \ = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n\
    $range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[]\
    \ = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n\
    $range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[]\
    \ = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n\
    $range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[]\
    \ = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n\
    $range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min;\n$range[]\
    \ = $min;\n$range[] = $min;\n$range[] = $min;\n$range[] = $min", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = array();\n    foreach ($numbers as $number)\
    \ {\n        $range[] = $number - $min;\n    }\n    return $range;\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $scale = 1.0 * ($max - $min);\n\
    \  return array_map(function ($number) {\n    return $number / $scale;\n  }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function($num)\
    \ use ($min, $max) {\n        return $num - $min;\n    }, array_values($numbers));\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min / ($max - $min);\n  }, $numbers);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work when there are negative\
    \ numbers. I added a negative number to the array and it returned a negative number\
    \ for the smallest number in the array.\n<|/ c |>\n<| c |>\nIt works fine for\
    \ me. Can you post the code you tried and what output you got?\n<|/ c |>\n<| c\
    \ |>\nI added the code I tried. I got negative numbers for the smallest number\
    \ in the array.\n<|/ c |>\n<| c |>\nI added a negative number to the array and\
    \ it returned a negative number for the smallest number in the array.\n<|/ c |>\n\
    <| c |>\nI added a negative number to the array and it returned a negative number\
    \ for the smallest number in the array.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $numbers = array(\n    array(1, 2),\n    array(3, 4),\n    array(5, 6),\n    array(7,\
    \ 8),\n    array(9, 10)\n);\n\n$min = min($numbers);\n$max = max($numbers);\n\n\
    $numbers = array_map(function ($num) use ($min, $max) {\n    return $num - $min\
    \ / ($max - $min);\n}, $numbers);\n\nprint_r($numbers);\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't seem to work when there are negative numbers. I added\
    \ a negative number to the array and it returned a negative number for the smallest\
    \ number in the array.\n<|/ c |>\n<| c |>\nI added a negative number to the array\
    \ and it returned a negative number for the smallest number in the array.\n<|/\
    \ c |>\n<| c |>\nI added a negative number to the array and it returned a negative\
    \ number for the smallest number in the array.\n<|/ c |>\n<| c |>\nI added a negative\
    \ number to the array and it returned a negative number for the smallest number\
    \ in the array.\n<|/ c |>\n<| c |>\nI added a negative number to the array and\
    \ it returned a negative number for the smallest number in the array.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\n$numbers = array(\n    array(1, 2),\n    array(3, 4),\n\
    \    array(5, 6),\n    array(7, 8),\n    array(9, 10)\n);\n\n$min = min($numbers);\n\
    $max = max(", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1\
    \ / ($max - $min);\n  return array_map(function($num) use ($scale) {\n    return\
    \ $num * $scale;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function($number) { return $number / $max - $min; }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $range = array();\n\
    \  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n  }\n  return\
    \ array_map(function($number) { return $number / $range; }, $numbers);\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nI like this solution, but I wonder if there is a way to do this without\
    \ having to manually specify each of the numbers in the array? I suppose I could\
    \ just loop through each of the numbers in the array and add them to a new array\
    \ if they are greater than the min and less than the max, but that seems inefficient.\n\
    <|/ c |>\n<| c |>\nYes, you can loop through each of the numbers in the array\
    \ and add them to a new array if they are greater than the min and less than the\
    \ max. I've updated my answer to show you how to do that.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to do this without having\
    \ to manually specify each of the numbers in the array? I suppose I could just\
    \ loop through each of the numbers in the array and add them to a new array if\
    \ they are greater than the min and less than the max, but that seems inefficient.\n\
    <|/ c |>\n<| c |>\nYes, you can loop through each of the numbers in the array\
    \ and add them to a new array if they are greater than the min and less than the\
    \ max. I've updated my answer to show you how to do that.\n<|/ c |>\n<| c |>\n\
    I like your solution, but I wonder if there is a way to do this without having\
    \ to manually specify each of the numbers in the array? I suppose I could just\
    \ loop through each of the numbers in the array and add them to a new array if\
    \ they are greater than the min and less than the max, but that seems inefficient.\n\
    <|/ c |>\n<| a dscore=1 |>\nI like your solution, but I wonder if there is a way\
    \ to do this without having to manually specify each of the numbers in the array?\
    \ I suppose I could just loop through each of the numbers in the array and add\
    \ them to a new array if they are greater than the min and less than the max,\
    \ but that seems inefficient.\n\nYes, you can loop through each of the numbers\
    \ in the array and add them to a new array if they are greater than the min and\
    \ less than the max. I've updated my answer to show you how to do that.\n<code>\n\
    <?php\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = ($max\
    \ - $min);\n  return array_map(function($number) { return $number / $scale; },\
    \ $numbers);\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't seem to\
    \ work. `array_map` returns a new array, so the original array is untouched.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It returns an array with values\
    \ between 0 and 1.\n<|/ c |>\n<| c |>\nYes, it does work. Try it yourself. It\
    \ returns an array with values between 0 and 1.\n<|/ c |>\n<| c |>\n: It does\
    \ work. Try it yourself. It returns an array with values between 0 and 1.\n<|/\
    \ c |>\n<| c |>\nYes, it does work. Try it yourself. It returns an array with\
    \ values between 0 and 1.\n<|/ c |>\n<| a tags=php,math |>\n<code>", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  return array_map(function ($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  return $range;\n}\n",
  "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n\
    \  return array_map(function ($number) {\n    return $number * $scale;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,math |>\nI wrote a function that will do what\
    \ you want.\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  $range\
    \ = array();\n  foreach ($numbers as $number) {\n    $range[] = $number - $min;\n\
    \  }\n  $range[] = $max - $min;\n  return $range;\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function\
    \ ($number) {\n    return $number * $scale;\n  }, $numbers);\n}\n", "  $min =\
    \ min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  $range[] = $max - $min;\n\
    \  return $range;\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n \
    \ return array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution. Thanks!\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't work as\
    \ expected. `array_map` returns an array of arrays. So the result would be: `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]`. But I need the result to be an array of floats. So the\
    \ result should be: `[0.0, 0.25, 0.5, 0.75, 1.0]`. So the result should be `[0.0,\
    \ 0.25, 0.5, 0.75, 1.0]` and not `[[0.0, 0.25], [0.5, 0.5], [0.75, 1.0]]`.\n<|/\
    \ c |>\n<| c |>\nI updated my answer to include a function that will do what you\
    \ want.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work as expected. `array_map` returns an array of arrays. So the result would\
    \ be: `[0.0, 0.25, 0.5, 0.75, 1.0]`. But I need the result to be an array of floats.\
    \ So the result should be: `[0.0, 0.25, 0.5, 0.75, 1.0]`. So the result should\
    \ be `[0.0, 0.25, 0.5, 0.75, 1.0]` and not `[[0.0, 0.25], [0.5, 0.5], [0.75, 1.0]]`.\n\
    <|/ c |>\n<| c |>\nI updated my answer to include a function that will do what\
    \ you want.\n<|/ c |>\n<| c |>\nThanks for your answer. Unfortunately this doesn't\
    \ work as expected. `array_map` returns an array of arrays. So the result would\
    \ be: `[0.0, 0.25, 0.5, 0.75, 1.0]`. But I need the result to be an array of floats.\
    \ So the result should be: `[0.0, 0.25, 0.5, 0.75, 1.0]`. So the result should\
    \ be `[0.0, 0.25, 0.5, 0.75, 1.0]` and not `[[0.0, 0.25], [0.5, 0.5], [0.75, 1.0]]`.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$numbers = array(\n  array(\n    0\
    \ => 1,\n    1 => 2,\n    2 => 3,\n    3 => 4,\n    4 => 5,\n    5 => 6,\n   \
    \ 6 => 7,\n    7 => 8,\n    8 => 9,\n    9 => 10,\n    10 => 11,\n    11 => 12,\n\
    \    12 => 13,\n    13 => 14,\n    14 => 15,\n    15 => 16,\n    16 => 17,\n \
    \   17 => 18,\n    18 => 19,\n    19 => 20,\n    20 => 21,\n    21 => 22,\n  \
    \  22 => ", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis works great, but I noticed that if you have negative\
    \ numbers, it returns `[-0.5, -0.25, 0, 0.25, 0.5, 1.0]` instead of `[-0.5, -0.25,\
    \ 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nI fixed it by changing `return $number\
    \ / $max - $min;` to `return $number / $max;`\n<|/ c |>\n<| c |>\nI noticed that\
    \ if you have negative numbers, it returns `[-0.5, -0.25, 0, 0.25, 0.5, 1.0]`\
    \ instead of `[-0.5, -0.25, 0.25, 0.5, 0.75, 1.0]`\n<|/ c |>\n<| c |>\nI fixed\
    \ it by changing `return $number / $max - $min;` to `return $number / $max;`\n\
    <|/ c |>\n<| a dscore=1 |>\nThis should work:\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($num) use ($min, $max)\
    \ {\n    return $num - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work when you have negative numbers. Try `[-1.0, 2.0,\
    \ 3.0, 4.0, 5.0]`\n<|/ c |>\n<| c |>\n: Yes, it does. `array_map` will map the\
    \ negative numbers to `0.0`.\n<|/ c |>\n<| c |>\n: It does, but only because `array_map`\
    \ calls the callback function with each element of the array individually. `array_map`\
    \ doesn't know that you want to apply the function to the whole array at once.\
    \ `array_map` doesn't know that you want to apply the function to the whole array\
    \ at once. `array_map` doesn't know that you want to apply the function to the\
    \ whole array at once. `array_map` doesn't know that you want to apply the function\
    \ to the whole array at once. `array_map` doesn't know that you want to apply\
    \ the function to the whole array at once. `array_map` doesn't know that you want\
    \ to apply the function to the whole array at once. `array_map` doesn't know that\
    \ you want to apply the function to the whole array at once. `array_map` doesn't\
    \ know that you want to apply the function to the whole array at once. `array_map`\
    \ doesn't know that you want to apply the function to the whole array at once.\
    \ `array_map` doesn't know that you want to apply the function to the whole array\
    \ at once. `array_map` doesn't know that you want to apply the function to the\
    \ whole array at once. `array_map` doesn't know that you want to apply the function\
    \ to the whole array at once. `array_map` doesn't know that you want to apply\
    \ the function to the whole array at once. `array_map` doesn't know that you want\
    \ to apply the function to the whole array at once. `array_map` doesn't know that\
    \ you want to apply the function to the whole array at once. `array_map` doesn't\
    \ know that you want to apply the function to the whole array at once. `array_map`\
    \ doesn't know that you want to apply the function to the whole array at once.\
    \ `array_map` doesn't know that you want to apply the function to the whole array\
    \ at once. `array_map` doesn't know that you want to apply the function to the\
    \ whole array at once. `array_map` doesn't know that you want to apply the function\
    \ to the whole array at once. `array_map` doesn't know that you want to apply\
    \ the function to the whole array at once. `array_map` doesn't know that you want\
    \ to apply the function ", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function($num) use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function($num)\
    \ use ($min, $max) {\n    return $num - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $n) {\n\
    \    $range[] = $n - $min;\n  }\n  return array_map(function ($n) use ($min, $max)\
    \ {\n    return $min + ($n - $min) * ($max - $min) / ($max - $min);\n  }, $range);\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers in your array. `array_map` will multiply them by -1 and you end up with\
    \ negative numbers. `array_map` also doesn't work if you have two or more numbers\
    \ that are the same.\n<|/ c |>\n<| c |>\nI added a version that works with negative\
    \ numbers and multiple numbers that are the same.\n<|/ c |>\n<| c |>\nI added\
    \ a version that works with negative numbers and multiple numbers that are the\
    \ same.\n<|/ c |>\n<| c |>\nI added a version that works with negative numbers\
    \ and multiple numbers that are the same.\n<|/ c |>\n<| a dscore=4 |>\n<code>\n\
    $array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n$range =\
    \ array();\nforeach ($array as $n) {\n    $range[] = $n - $min;\n}\n$range = array_map('round',\
    \ $range);\n$range = array_map('ceil', $range);\n$range = array_map('floor', $range);\n\
    $range = array_map('abs', $range);\n$range = array_map('sqrt', $range);\n$range\
    \ = array_map('sqrt', $range);\n$range = array_map('sqrt', $range);\n$range =\
    \ array_map('sqrt', $range);\n$range = array_map('sqrt', $range);\n$range = array_map('sqrt',\
    \ $range);\n$range = array_map('sqrt', $range);\n$range = array_map('sqrt', $range);\n\
    $range = array_map('sqrt', $range);\n$range = array_map('sqrt', $range);\n$range\
    \ = array_map('sqrt', $range);\n$range = array_map('sqrt', $range);\n$range =\
    \ array_map('sqrt', $range);\n$range = array_map('sqrt', $range);\n$range = array_map('sqrt',\
    \ $range);\n$range = array_map('sqrt', $range);\n$range = array_map('sqrt', $range);\n\
    $range = array_map('sqrt', $range);\n$range = array_map('sqrt', $range);\n$range\
    \ = array_", "  $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number - $min;\n  }, $numbers);\n}\n</code>\n<|/ a\
    \ tags=php,arrays,math |>\n<| c |>\nThis doesn't seem to work when there are negative\
    \ numbers in the array. For example, `[1.0, -2.0, 3.0, 4.0, 5.0]` returns `[-0.5,\
    \ -0.5, -0.5, -0.5, -0.5]`.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ require negative numbers. I tested it and it works.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't seem to work when there are negative numbers in the array. For example,\
    \ `[1.0, -2.0, 3.0, 4.0, 5.0]` returns `[-0.5, -0.5, -0.5, -0.5, -0.5]`.\n<|/\
    \ c |>\n<| c |>\nI added a version that doesn't require negative numbers. I tested\
    \ it and it works.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  return array_map(function ($number) {\n    return\
    \ $number / $max - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function($x) {\n    return $x - $min /\
    \ $max;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  $scale = ($max - $min) / (count($numbers) - 1);\n  return array_map(function\
    \ ($number) {\n    return $number * $scale;\n  }, $numbers);\n}\n</code>\n<|/\
    \ a tags=php,arrays,math |>\n<| c |>\nThis doesn't seem to work. `array_map` seems\
    \ to only apply the function to the first element of the array.\n<|/ c |>\n<|\
    \ c |>\nAh, I see what you mean. Yes, this doesn't work. `array_map` only applies\
    \ the function to the first element of the array. I'll update my answer.\n<|/\
    \ c |>\n<| c |>\nYeah, I noticed that too. Thanks for your help!\n<|/ c |>\n<|\
    \ a dscore=1 |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n$min = min($numbers);\n\
    $max = max($numbers);\n$scale = ($max - $min) / (count($numbers) - 1);\n$numbers\
    \ = array_map(function ($number) {\n    return $number * $scale;\n}, $numbers);\n\
    </code>\n<|/ a tags=php,arrays,math |>\n<| a dscore=1 |>\n<code>", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $scale = 1 / ($max - $min);\n  return array_map(function\
    \ ($number) use ($scale) {\n    return $number * $scale;\n  }, $numbers);\n}\n",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $scale = ($max - $min);\n\
    \    $offset = $min - $scale;\n    return array_map(function ($number) use ($scale,\
    \ $offset) {\n        return $number / $scale + $offset;\n    }, $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your answer. I've tried your\
    \ solution and it works perfectly for my use case. I've also added my own answer\
    \ which I believe is more efficient than yours.\n<|/ c |>\n<| a tags=php,arrays,math\
    \ |>\nI believe I've found a more efficient solution to my problem. I've added\
    \ my own answer which I believe is more efficient than my own solution.\n<code>",
  "    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) {\n        return $number / $max - $min;\n    }, $numbers);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if there are negative numbers\
    \ in the array\n<|/ c |>\n<| c |>\nIt does work, just tested it. The function\
    \ `rescale_to_unit` takes an array of numbers and returns a new array with the\
    \ rescaled numbers. So if you have negative numbers in the original array, the\
    \ rescaled array will contain negative numbers as well.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it doesn't work. Try this array: array(-10, -5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5)\n<|/ c |>\n<| c |>\nIt works fine for me. Try it here: https://3v4l.org/M7PcF\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've updated the answer with a new function\
    \ that should work better for negative numbers.\n<|/ c |>\n<| a tags=php,arrays\
    \ |>\n<code>\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [];\nforeach ($arr\
    \ as $key => $value) {\n    $arr2[$key] = $value / max($arr);\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work if there are negative numbers in the\
    \ array\n<|/ c |>\n<| c |>\nIt does work, just tested it. The function `rescale_to_unit`\
    \ takes an array of numbers and returns a new array with the rescaled numbers.\
    \ So if you have negative numbers in the original array, the rescaled array will\
    \ contain negative numbers as well.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n\
    $arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr2 = [];\nforeach ($arr as $key =>\
    \ $value) {\n    $arr2[$key] = $value / max($arr);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if there are negative numbers in the array\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    $arr2[$key] = $value\
    \ / max($arr);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work", " \
    \ $min = min($numbers);\n  $max = max($numbers);\n  return array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n  }, $numbers);\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  return array_map(function ($number)\
    \ {\n    return $number / $max - $min;\n  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThanks for your answer, but this doesn't seem to work. I'm getting\
    \ `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]` as expected.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used `print_r($numbers);` instead\
    \ of `print_r($numbers);` because I didn't want to mess with your original array.\
    \ Did you copy the code exactly?\n<|/ c |>\n<| c |>\nYes, I copied it exactly.\
    \ I'm getting `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]` as expected.\n<|/ c |>\n<| c |>\nI updated my answer with some more explanation.\
    \ Let me know if that helps.\n<|/ c |>\n<| c |>\nThanks for your answer, but I'm\
    \ still getting `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75,\
    \ 1.0]` as expected.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n$numbers = [1.0, 2.0,\
    \ 3.0, 4.0, 5.0];\n$min = min($numbers);\n$max = max($numbers);\n$numbers = array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n}, $numbers);\n</code>\n<|/\
    \ a tags=php,arrays |>\n<| c |>\nThanks for your answer, but this doesn't seem\
    \ to work. I'm getting `[0.0, 0.25, 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5,\
    \ 0.75, 1.0]` as expected.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$numbers\
    \ = [1.0, 2.0, 3.0, 4.0, 5.0];\n$min = min($numbers);\n$max = max($numbers);\n\
    $numbers = array_map(function ($number) {\n    return $number / $max - $min;\n\
    }, $numbers);\nprint_r($numbers);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    Thanks for your answer, but this doesn't seem to work. I'm getting `[0.0, 0.25,\
    \ 0.5, 0.75, 1.0]` instead of `[0.0, 0.25, 0.5, 0.75, 1.0]` as expected.\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I ", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    return array_map(function ($num) use ($min, $max)\
    \ {\n        return $num - $min;\n    }, array_values($numbers));\n}\n", "  $min\
    \ = min($numbers);\n  $max = max($numbers);\n  $range = array();\n  foreach ($numbers\
    \ as $number) {\n    $range[] = $number - $min;\n  }\n  return array_map(function($number)\
    \ {\n    return $number / $range[$number];\n  }, $numbers);\n}\n", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = array();\n  foreach ($numbers as $number)\
    \ {\n    $range[] = $number - $min;\n  }\n  return array_map(function($number)\
    \ { return $number / $range; }, $numbers);\n}\n", "  $min = min($numbers);\n \
    \ $max = max($numbers);\n  return array_map(function($num) use ($min, $max) {\n\
    \    return $num - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max\
    \ = max($numbers);\n  return array_map(function($number) {\n    return $number\
    \ - $min;\n  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number - $min;\n  }, $numbers);\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. `array_map`\
    \ returns an array with one element for each element in the original array. `array_map`\
    \ doesn't seem to support a callback that returns an array with one element for\
    \ each element in the original array. `array_map` doesn't seem to support a callback\
    \ that returns an array with one element for each element in the original array.\
    \ `array_map` doesn't seem to support a callback that returns an array with one\
    \ element for each element in the original array. `array_map` doesn't seem to\
    \ support a callback that returns an array with one element for each element in\
    \ the original array. `array_map` doesn't seem to support a callback that returns\
    \ an array with one element for each element in the original array. `array_map`\
    \ doesn't seem to support a callback that returns an array with one element for\
    \ each element in the original array. `array_map` doesn't seem to support a callback\
    \ that returns an array with one element for each element in the original array.\
    \ `array_map` doesn't seem to support a callback that returns an array with one\
    \ element for each element in the original array. `array_map` doesn't seem to\
    \ support a callback that returns an array with one element for each element in\
    \ the original array. `array_map` doesn't seem to support a callback that returns\
    \ an array with one element for each element in the original array. `array_map`\
    \ doesn't seem to support a callback that returns an array with one element for\
    \ each element in the original array. `array_map` doesn't seem to support a callback\
    \ that returns an array with one element for each element in the original array.\
    \ `array_map` doesn't seem to support a callback that returns an array with one\
    \ element for each element in the original array. `array_map` doesn't seem to\
    \ support a callback that returns an array with one element for each element in\
    \ the original array. `array_map` doesn't seem to support a callback that returns\
    \ an array with one element for each element in the original array. `array_map`\
    \ doesn't seem to support a callback that returns an array with one element for\
    \ each element in the original array. `array_map` doesn't seem to support a callback\
    \ that returns an array with one element for each element in the original array.\
    \ `array_map` doesn't seem to support a callback that returns an array with one\
    \ element for each element in the original array. `array_map` doesn't seem to\
    \ support a callback that returns an array with one element for each element in\
    \ the original array. `array_map` doesn't seem to support a callback that returns\
    \ an array with one element for each element in the original array. `array_map`\
    \ doesn't seem to support a callback that returns an array with one element for\
    \ each element in the original array", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis works great,\
    \ thank you! I added a little bit of code to handle negative numbers, in case\
    \ anyone else needs it.\n<|/ c |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n<|/ c |>\n<| c |>\nI added a fix for negative\
    \ numbers. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    $array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n$array =\
    \ array_map(function ($number) {\n    return $number / $max - $min;\n}, $array);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ Try `[-1.0, -2.0, -3.0, -4.0, -5.0]`\n<|/ c |>\n<| c |>\nI added a fix for negative\
    \ numbers. Thanks for pointing that out.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n\
    $array = array_map(function ($number) {\n    return $number / $max - $min;\n},\
    \ $array);\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array = [1,\
    \ 2, 3, 4, 5];\n$min = min($array);\n$max = max($array);\n$array = array_map(function\
    \ ($number) {\n    return $number / $max - $min;\n}, $array);\n</code>\n<|/ a\
    \ tags=php,arrays |>\n<| a dscore=1 |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min\
    \ = min($array);\n$max = max($array);\n$array = array_map(function ($number) {\n\
    \    return $number / $max - $min;\n}, $array);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$array = [1, 2, 3, 4, 5];\n$min = min($array);\n\
    $max = max($array);\n$array = array_map(function ($number) {\n    return $number\
    \ / $max - $min;\n}, ", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale\
    \ = 1.0 * $min / $max;\n  return array_map(function($number) { return $number\
    \ * $scale; }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n\
    \  return array_map(function ($number) {\n    return $number / $max - $min;\n\
    \  }, $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($num) use ($min, $max) {\n    return $num - $min;\n  },\
    \ $numbers);\n}\n", "  $min = min($numbers);\n  $max = max($numbers);\n  return\
    \ array_map(function ($number) {\n    return $number - $min;\n  }, $numbers);\n\
    }\n", "    $min = min($numbers);\n    $max = max($numbers);\n    return array_map(function\
    \ ($number) use ($min, $max) {\n        return $number - $min;\n    }, array_values($numbers));\n\
    }\n", "  $min = min($numbers);\n  $max = max($numbers);\n  $scale = 1 / ($max\
    \ - $min);\n  return array_map(function($num) use ($scale) {\n    return $num\
    \ * $scale;\n  }, $numbers);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
