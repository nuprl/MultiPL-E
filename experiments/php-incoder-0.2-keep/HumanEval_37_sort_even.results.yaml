name: HumanEval_37_sort_even
language: php
results:
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, array_reverse($odd));\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpy_d_vf.php:20\n\
    Stack trace:\n#0 /tmp/tmprpy_d_vf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprpy_d_vf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2, count($l));\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr\
    \ = [\n    1 => [\n        'id' => 1,\n        'name' => 'John',\n        'age'\
    \ => 25,\n    ],\n    2 => [\n        'id' => 2,\n        'name' => 'Jane',\n\
    \        'age' => 22,\n    ],\n    3 => [\n        'id' => 3,\n        'name'\
    \ => 'Jack',\n        'age' => 23,\n    ],\n    4 => [\n        'id' => 4,\n \
    \       'name' => 'Jill',\n        'age' => 24,\n    ],\n    5 => [\n        'id'\
    \ => 5,\n        'name' => 'Jack',\n        'age' => 24,\n    ],\n    6 => [\n\
    \        'id' => 6,\n        'name' => 'Jill',\n        'age' => 24,\n    ],\n\
    ];\n\n$arr1 = [];\n$arr2 = [];\nforeach ($arr as $key => $value) {\n    if ($key\
    \ % 2 == 0) {\n        $arr1[$key] = $value;\n    } else {\n        $arr2[$key]\
    \ = $value;\n    }\n}\n\n$arr1 = array_values($arr1);\n$arr2 = array_values($arr2);\n\
    \n$arr1 = array_merge($arr1, $arr2);\n$arr1 = array_unique($arr1);\n\n$arr1 =\
    \ array_values($arr1);\n$arr2 = array_values($arr2);\n\n$arr1 = array_merge($arr1,\
    \ $arr2);\n$arr1 = array_unique($arr1);\n\n$arr1 = array_values($arr1);\n$arr2\
    \ = array_values($arr2);\n\n$arr1 = array_merge($arr1, $arr2);\n$arr1 = array_unique($arr1);\n\
    \n$arr1 = array_values($arr1);\n$arr2 = array_values($arr2);\n\n$arr1 = array_merge($arr1,\
    \ $arr2);\n$arr1 = array_unique($arr1);\n\n$arr1 = array_values($arr1);\n$arr2\
    \ = array_values($arr2);\n\n$arr1 = array_merge($arr1, $arr2);\n$arr1 = array_unique($arr1);\n\
    \n$arr1 = array_values($arr1);\n$arr2 = array_values($arr2);\n\n$arr1 = array_merge($arr1,\
    \ $arr2);\n$arr1 = array_unique($arr1);\n\n$arr\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpswj1vr1q.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  return array_merge($even, array_reverse($even));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2b_zq100.php:19\n\
    Stack trace:\n#0 /tmp/tmp2b_zq100.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2b_zq100.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n \
    \ return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbrshwem.php:20\n\
    Stack trace:\n#0 /tmp/tmpqbrshwem.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqbrshwem.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_oaiw6zr.php:20\n\
    Stack trace:\n#0 /tmp/tmp_oaiw6zr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_oaiw6zr.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($v) { return $v & 1; });\n\
    \  return array_merge($even, array_reverse($even));\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_rcsy7r.php:18\n\
    Stack trace:\n#0 /tmp/tmp0_rcsy7r.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp0_rcsy7r.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9sho539y.php:23\n\
    Stack trace:\n#0 /tmp/tmp9sho539y.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9sho539y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfcfei85y.php:27\n\
    Stack trace:\n#0 /tmp/tmpfcfei85y.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfcfei85y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odds = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($evens, $odds);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6n5xrzpz.php:20\n\
    Stack trace:\n#0 /tmp/tmp6n5xrzpz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6n5xrzpz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $evens = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  $evens = array_map(function($e) { return $e; }, $evens);\n  return\
    \ array_merge($evens, $l);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2tdx_u23.php:20\n\
    Stack trace:\n#0 /tmp/tmp2tdx_u23.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2tdx_u23.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  sort($even);\n  sort($odd);\n  return array_merge($even,\
    \ $odd);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't\
    \ work if the array has duplicate values. For example `sort_even([5, 6, 3, 6,\
    \ 5, 4])` returns `[3, 6, 5, 4]`\n<|/ c |>\n<| c |>\nI didn't realize that `array_slice`\
    \ would return a new array. Thanks for pointing that out. I've updated my answer.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if the array has duplicate values. For example\
    \ `sort_even([5, 6, 3, 6, 5, 4])` returns `[3, 6, 5, 4]`\n<|/ c |>\n<| c |>\n\
    I updated my answer again. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmporlnqns3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  return array_merge($even, array_reverse($even));\n}\n</code>\n<|/\
    \ a tags=php,sorting |>\n<| c |>\nThis doesn't work for me. `array_merge` doesn't\
    \ preserve the original order of the elements.\n<|/ c |>\n<| c |>\n: I tested\
    \ it and it works. I added an example to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ a more general solution that preserves the original order of the elements.\n\
    <|/ c |>\n<| c |>\n: I added a more general solution that preserves the original\
    \ order of the elements.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n$array = array(\n\
    \    array('id' => 1, 'name' => 'A'),\n    array('id' => 2, 'name' => 'B'),\n\
    \    array('id' => 3, 'name' => 'C'),\n    array('id' => 4, 'name' => 'D'),\n\
    \    array('id' => 5, 'name' => 'E'),\n    array('id' => 6, 'name' => 'F'),\n\
    \    array('id' => 7, 'name' => 'G'),\n    array('id' => 8, 'name' => 'H'),\n\
    \    array('id' => 9, 'name' => 'I'),\n    array('id' => 10, 'name' => 'J'),\n\
    \    array('id' => 11, 'name' => 'K'),\n    array('id' => 12, 'name' => 'L'),\n\
    \    array('id' => 13, 'name' => 'M'),\n    array('id' => 14, 'name' => 'N'),\n\
    \    array('id' => 15, 'name' => 'O'),\n    array('id' => 16, 'name' => 'P'),\n\
    \    array('id' => 17, 'name' => 'Q'),\n    array('id' => 18, 'name' => 'R'),\n\
    \    array('id' => 19, 'name' => 'S'),\n    array('id' => 20, 'name' => 'T'),\n\
    \    array('id' => 21, 'name' => 'U'),\n    array('id' => 22, 'name' => 'V'),\n\
    \    array('id' => 23, 'name' => 'W'),\n    array('id' => 24, 'name' => 'X'),\n\
    \    array('id' => 25, 'name' => 'Y'),\n    array('id' => 26, 'name' => 'Z'),\n\
    );\n\n$array = array_map(function($a){\n    return $a['name'];\n}, $array);\n\n\
    $array = array_unique($array);\n\n$array = array_values($array);\n\nsort($array);\n\
    \n$array = array_slice($\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwioy0q8i.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7g0jznxa.php:20\n\
    Stack trace:\n#0 /tmp/tmp7g0jznxa.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7g0jznxa.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8v6r0dh.php:22\n\
    Stack trace:\n#0 /tmp/tmpd8v6r0dh.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpd8v6r0dh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($i) { return $i % 2 ==\
    \ 0; });\n  $odd = array_filter($l, function($i) { return $i % 2 == 1; });\n \
    \ return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnn1eozfg.php:19\n\
    Stack trace:\n#0 /tmp/tmpnn1eozfg.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpnn1eozfg.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($i) { return $i % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($i) { return $i % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1f08ruit.php:19\n\
    Stack trace:\n#0 /tmp/tmp1f08ruit.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp1f08ruit.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    sort($even);\n    return array_merge($even, $l);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ojmj0zy.php:20\n\
    Stack trace:\n#0 /tmp/tmp4ojmj0zy.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4ojmj0zy.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd63ur05m.php:20\n\
    Stack trace:\n#0 /tmp/tmpd63ur05m.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpd63ur05m.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    return array_merge($even, array_reverse($odd));\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprfqsv15j.php:20\n\
    Stack trace:\n#0 /tmp/tmprfqsv15j.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprfqsv15j.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. `sort_even([5, 6, 3, 4])` returns `[3, 6, 5, 4]` instead of `[5, 6, 3,\
    \ 4]`.\n<|/ c |>\n<| c |>\nAh, I see what you mean. I've updated my answer.\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplvm55bck.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnq2yvwoq.php:20\n\
    Stack trace:\n#0 /tmp/tmpnq2yvwoq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnq2yvwoq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, $odd);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0bjdtfvy.php:20\n\
    Stack trace:\n#0 /tmp/tmp0bjdtfvy.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0bjdtfvy.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<|\
    \ c |>\nThis doesn't work. Try `sort_even([5, 6, 3, 4])`\n<|/ c |>\n<| c |>\n\
    It works. Try it yourself. It sorts [5, 6, 3, 4] into [3, 6, 5, 4].\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try `sort_even([5, 6, 3, 4])`\n<|/ c |>\n<| c |>\nIt\
    \ works. Try it yourself. It sorts [5, 6, 3, 4] into [3, 6, 5, 4].\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try `sort_even([5, 6, 3, 4])`\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>\n$array = array(5, 6, 3, 4);\n$array = array_chunk($array, 2);\n\
    $array = array_map(function($a){return $a[1];}, $array);\n$array = array_combine(array_keys($array),\
    \ $array);\nsort($array);\n$array = array_values($array);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a dscore=2 |>\n<code>\n$array = array(5, 6, 3, 4);\n$array = array_chunk($array,\
    \ 2);\n$array = array_map(function($a){return $a[1];}, $array);\n$array = array_combine(array_keys($array),\
    \ $array);\nsort($array);\n$array = array_values($array);\n</code>\n<|/ a tags=php,sorting,arrays\
    \ |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array = array(5, 6, 3, 4);\n$array\
    \ = array_chunk($array, 2);\n$array = array_map(function($a){return $a[1];}, $array);\n\
    $array = array_combine(array_keys($array), $array);\nsort($array);\n$array = array_values($array);\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=php,sorting,arrays |>\n<code>\n$array =\
    \ array(5, 6, 3, 4);\n$array = array_chunk($array, 2);\n$array = array_map(function($a){return\
    \ $a[1];}, $array);\n$array = array_combine(array_\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_p469pta.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2, count($l));\n  return array_merge($even, $odd);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6yudl81.php:20\n\
    Stack trace:\n#0 /tmp/tmpy6yudl81.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpy6yudl81.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = $l;\n  for ($i = 0; $i < count($l2); $i += 2) {\n \
    \   $l2[$i] = $l2[$i];\n  }\n  return $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmv33lk36.php:23\n\
    Stack trace:\n#0 /tmp/tmpmv33lk36.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmv33lk36.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9xcvok1.php:27\n\
    Stack trace:\n#0 /tmp/tmpv9xcvok1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpv9xcvok1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_fill(0, count($l), 0);\n    $evens = array_combine(array_keys($l),\
    \ $evens);\n    asort($evens);\n    $evens = array_values($evens);\n    return\
    \ $evens;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1syea8v.php:22\n\
    Stack trace:\n#0 /tmp/tmpl1syea8v.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpl1syea8v.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array();\n  $odd = array();\n  foreach ($l as $k\
    \ => $v) {\n    if ($k % 2 == 0) {\n      $even[$k] = $v;\n    } else {\n    \
    \  $odd[$k] = $v;\n    }\n  }\n  return array_merge($even, $odd);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bxid6le.php:27\n\
    Stack trace:\n#0 /tmp/tmp9bxid6le.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9bxid6le.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhg4uns2.php:23\n\
    Stack trace:\n#0 /tmp/tmpwhg4uns2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpwhg4uns2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    sort($even);\n\
    \    return array_merge($even, $l);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbwh2nq5.php:19\n\
    Stack trace:\n#0 /tmp/tmpxbwh2nq5.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpxbwh2nq5.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $v) {\n        if ($i % 2 == 0) {\n            $even[$i] = $v;\n     \
    \   }\n    }\n    return array_merge(array_slice($l, $even[0]), array_slice($l,\
    \ $even[1], count($l) - $even[1]));\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkox97vd1.php:24\n\
    Stack trace:\n#0 /tmp/tmpkox97vd1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkox97vd1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfa5hbfa5.php:20\n\
    Stack trace:\n#0 /tmp/tmpfa5hbfa5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfa5hbfa5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptygfkrco.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  sort($even);\n  sort($odd);\n  return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4luixap.php:22\n\
    Stack trace:\n#0 /tmp/tmpw4luixap.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpw4luixap.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_fill(0, count($l), 0);\n    foreach ($l\
    \ as $i => $v) {\n        if ($i % 2 == 0) {\n            $evens[$i] = $v;\n \
    \       }\n    }\n    return array_merge(array_slice($evens, 0, count($l) / 2),\
    \ $l);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqml3jssp.php:24\n\
    Stack trace:\n#0 /tmp/tmpqml3jssp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpqml3jssp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $value) {\n        $even[$i] = $value;\n    }\n    array_multisort($even,\
    \ SORT_ASC, $l);\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8wsj0ua.php:24\n\
    Stack trace:\n#0 /tmp/tmps8wsj0ua.php(28): test()\n#1 {main}\n  thrown in /tmp/tmps8wsj0ua.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_45wktl.php:19\n\
    Stack trace:\n#0 /tmp/tmp2_45wktl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2_45wktl.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcre0gtw.php:23\n\
    Stack trace:\n#0 /tmp/tmpmcre0gtw.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmcre0gtw.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $v) {\n        $even[$i] = $i;\n    }\n    array_multisort($even, SORT_ASC,\
    \ $l);\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyblryrku.php:24\n\
    Stack trace:\n#0 /tmp/tmpyblryrku.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyblryrku.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfstb0r3i.php:20\n\
    Stack trace:\n#0 /tmp/tmpfstb0r3i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfstb0r3i.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = array();\n  for ($i = 0; $i < count($l); $i += 2) {\n\
    \    $l2[$i] = $l[$i];\n  }\n  asort($l2);\n  return $l2;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsp994hh_.php:22\n\
    Stack trace:\n#0 /tmp/tmpsp994hh_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpsp994hh_.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxyb7c54.php:22\n\
    Stack trace:\n#0 /tmp/tmptxyb7c54.php(26): test()\n#1 {main}\n  thrown in /tmp/tmptxyb7c54.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = array();\n  for ($i = 0; $i < count($l); $i += 2) {\n\
    \    $l2[$i] = $l[$i];\n  }\n  asort($l2);\n  return $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjpyyuey.php:23\n\
    Stack trace:\n#0 /tmp/tmptjpyyuey.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptjpyyuey.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fznya86.php:27\n\
    Stack trace:\n#0 /tmp/tmp3fznya86.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3fznya86.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $evens = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  sort($evens);\n  return array_merge($evens, $l);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgksbz37m.php:20\n\
    Stack trace:\n#0 /tmp/tmpgksbz37m.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgksbz37m.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnizty2w.php:23\n\
    Stack trace:\n#0 /tmp/tmpcnizty2w.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcnizty2w.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, array_reverse($odd));\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppepm3c28.php:19\n\
    Stack trace:\n#0 /tmp/tmppepm3c28.php(24): test()\n#1 {main}\n  thrown in /tmp/tmppepm3c28.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, array_reverse($odd));\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3685xca.php:19\n\
    Stack trace:\n#0 /tmp/tmp_3685xca.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_3685xca.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cwfo317.php:20\n\
    Stack trace:\n#0 /tmp/tmp4cwfo317.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp4cwfo317.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8mfax9p.php:20\n\
    Stack trace:\n#0 /tmp/tmpx8mfax9p.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpx8mfax9p.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_fill(0, count($l), 0);\n  $odd = array_fill(0,\
    \ count($l), 0);\n  foreach ($l as $i => $value) {\n    if ($i % 2 == 0) {\n \
    \     $even[$i] = $value;\n    } else {\n      $odd[$i] = $value;\n    }\n  }\n\
    \  return array_merge($odd, $even);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [\n    'a' => 1,\n    'b' => 2,\n\
    \    'c' => 3,\n    'd' => 4,\n    'e' => 5,\n    'f' => 6,\n    'g' => 7,\n];\n\
    $arr2 = [];\n$arr3 = [];\nforeach ($arr as $key => $value) {\n    if ($key % 2\
    \ == 0) {\n        $arr2[$key] = $value;\n    } else {\n        $arr3[$key] =\
    \ $value;\n    }\n}\n$arr3 = array_merge($arr2, $arr3);\nprint_r($arr3);\n</code>\n\
    <|/ a tags=php,arrays,sorting |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [\n\
    \    'a' => 1,\n    'b' => 2,\n    'c' => 3,\n    'd' => 4,\n    'e' => 5,\n \
    \   'f' => 6,\n    'g' => 7,\n];\n$arr2 = [];\n$arr3 = [];\nforeach ($arr as $key\
    \ => $value) {\n    if ($key % 2 == 0) {\n        $arr2[$key] = $value;\n    }\
    \ else {\n        $arr3[$key] = $value;\n    }\n}\n$arr3 = array_merge($arr2,\
    \ $arr3);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n$arr = [\n    'a' => 1,\n    'b' => 2,\n    'c' => 3,\n \
    \   'd' => 4,\n    'e' => 5,\n    'f' => 6,\n    'g' => 7,\n];\n$arr2 = [];\n\
    $arr3 = [];\nforeach ($arr as $key => $value) {\n    if ($key % 2 == 0) {\n  \
    \      $arr2[$key] = $value;\n    } else {\n        $arr3[$key] = $value;\n  \
    \  }\n}\n$arr3 = array_merge($arr2, $arr3);\nprint_r($arr3);\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tag\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzqw7ip17.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  sort($even);\n  sort($odd);\n  return array_merge($even,\
    \ $odd);\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if the list\
    \ has duplicate values. For example, `sort_even([1, 1, 2, 3])` returns `[1, 1,\
    \ 2, 3]`.\n<|/ c |>\n<| c |>\nI added a version that doesn't have that problem.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdn429smv.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7cbapmmk.php:20\n\
    Stack trace:\n#0 /tmp/tmp7cbapmmk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7cbapmmk.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $val) {\n        $even[$i] = $i;\n    }\n    array_multisort($even, SORT_DESC,\
    \ $l);\n    return $l;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ Can you please explain me the code a little bit? I mean the function sort_even.\n\
    <|/ c |>\n<| c |>\nI added some comments to the code. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks a lot. Can you please explain me the code a little bit more? I\
    \ mean the function sort_even.\n<|/ c |>\n<| c |>\nI added some comments to the\
    \ code. Hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\");\n$new_array = array();\n\
    $new_array2 = array();\n$new_array3 = array();\n$new_array4 = array();\n$new_array5\
    \ = array();\n$new_array6 = array();\n$new_array7 = array();\n$new_array8 = array();\n\
    $new_array9 = array();\n$new_array10 = array();\n$new_array11 = array();\n$new_array12\
    \ = array();\n$new_array13 = array();\n$new_array14 = array();\n$new_array15 =\
    \ array();\n$new_array16 = array();\n$new_array17 = array();\n$new_array18 = array();\n\
    $new_array19 = array();\n$new_array20 = array();\n$new_array21 = array();\n$new_array22\
    \ = array();\n$new_array23 = array();\n$new_array24 = array();\n$new_array25 =\
    \ array();\n$new_array26 = array();\n$new_array27 = array();\n$new_array28 = array();\n\
    $new_array29 = array();\n$new_array30 = array();\n$new_array31 = array();\n$new_array32\
    \ = array();\n$new_array33 = array();\n$new_array34 = array();\n$new_array35 =\
    \ array();\n$new_array36 = array();\n$new_array37 = array();\n$new_array38 = array();\n\
    $new_array39 = array();\n$new_array40 = array();\n$\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp82r_6nkj.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = [];\n  for ($i = 0; $i < count($l); $i += 2) {\n  \
    \  $l2[$i] = $l[$i];\n  }\n  asort($l2);\n  for ($i = 0; $i < count($l); $i +=\
    \ 2) {\n    $l2[$i] = $l[$i];\n  }\n  return $l2;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8ed3hzt.php:25\n\
    Stack trace:\n#0 /tmp/tmpt8ed3hzt.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpt8ed3hzt.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpev7j8tio.php:27\n\
    Stack trace:\n#0 /tmp/tmpev7j8tio.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpev7j8tio.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if the array has odd number of elements. Try `sort_even([1,2,3,4,5,6,7,8,9])`\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It sorts even and odd numbers,\
    \ leaving even numbers in the even indices and odd numbers in the odd indices.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It sorts even and odd numbers,\
    \ leaving even numbers in the even indices and odd numbers in the odd indices.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It sorts even and odd numbers,\
    \ leaving even numbers in the even indices and odd numbers in the odd indices.\n\
    <|/ c |>\n<| c |>\n: It does work. Try it yourself. It sorts even and odd numbers,\
    \ leaving even numbers in the even indices and odd numbers in the odd indices.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgkld2qzl.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l)/2);\n  sort($even);\n\
    \  return array_merge($even, $l);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprw0n8weh.php:20\n\
    Stack trace:\n#0 /tmp/tmprw0n8weh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprw0n8weh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($i) { return $i % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($i) { return $i % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7tudi5p.php:19\n\
    Stack trace:\n#0 /tmp/tmpn7tudi5p.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpn7tudi5p.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumnpys3z.php:26\n\
    Stack trace:\n#0 /tmp/tmpumnpys3z.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpumnpys3z.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n \
    \ return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bdhp3bh.php:20\n\
    Stack trace:\n#0 /tmp/tmp2bdhp3bh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2bdhp3bh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($v) { return $v & 1; });\n\
    \  $odd = array_filter($l, function($v) { return $v & 2; });\n  return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbk53yw6g.php:20\n\
    Stack trace:\n#0 /tmp/tmpbk53yw6g.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbk53yw6g.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for the answer. I'm sorry I didn't make it clear enough in my question.\
    \ I want to sort the list by its values but only if the values are even. So in\
    \ the example I gave in the question, `sort_even([5, 6, 3, 4])` should return\
    \ `[3, 6, 5, 4]` because `3` is even, `6` is even, `5` is even, and `4` is even.\n\
    <|/ c |>\n<| c |>\nI updated my answer to reflect your clarification.\n<|/ c |>\n\
    <| c |>\nThanks for the answer. I'm sorry I didn't make it clear enough in my\
    \ question. I want to sort the list by its values but only if the values are even.\
    \ So in the example I gave in the question, `sort_even([5, 6, 3, 4])` should return\
    \ `[3, 6, 5, 4]` because `3` is even, `6` is even, `5` is even, and `4` is even.\n\
    <|/ c |>\n<| c |>\nI updated my answer to reflect your clarification.\n<|/ c |>\n\
    <| c |>\nThanks for the answer. I'm sorry I didn't make it clear enough in my\
    \ question. I want to sort the list by its values but only if the values are even.\
    \ So in the example I gave in the question, `sort_even([5, 6, 3, 4])` should return\
    \ `[3, 6, 5, 4]` because `3` is even, `6` is even, `5` is even, and `4` is even.\n\
    <|/ c |>\n<| a tags=php,arrays,sorting |>\n<code>\n<?php\n$arr = [5, 6, 3, 4];\n\
    $even = array_filter($arr, function($e) { return $e % 2 == 0; });\n$odd = array_filter($arr,\
    \ function($e) { return $e % 2 == 1; });\n$result = array_merge($even, $odd);\n\
    print_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer.\
    \ I'm sorry I didn't make it clear enough in my question. I want to sort the list\
    \ by its values but only if the values are even. So in the example I gave in the\
    \ question, `sort_even([5, 6, 3, 4])` should return `[3, 6, 5, 4]` because `3`\
    \ is \nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphvy9yo_9.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $value) {\n        if ($i % 2 == 0) {\n            $even[$i] = $value;\n\
    \        }\n    }\n    return $even;\n}\n\nfunction candidate(...$args) {\n  \
    \  return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lw2vd99.php:24\n\
    Stack trace:\n#0 /tmp/tmp0lw2vd99.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0lw2vd99.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  sort($even);\n  return $even;\n}\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ |>\n<code>\n<?php\n$arr = array(1,2,3,4,5,6,7,8,9,10);\n$arr1 = array();\n$arr2\
    \ = array();\n$arr3 = array();\n$arr4 = array();\n$arr5 = array();\n$arr6 = array();\n\
    $arr7 = array();\n$arr8 = array();\n$arr9 = array();\n$arr10 = array();\n$arr11\
    \ = array();\n$arr12 = array();\n$arr13 = array();\n$arr14 = array();\n$arr15\
    \ = array();\n$arr16 = array();\n$arr17 = array();\n$arr18 = array();\n$arr19\
    \ = array();\n$arr20 = array();\n$arr21 = array();\n$arr22 = array();\n$arr23\
    \ = array();\n$arr24 = array();\n$arr25 = array();\n$arr26 = array();\n$arr27\
    \ = array();\n$arr28 = array();\n$arr29 = array();\n$arr30 = array();\n$arr31\
    \ = array();\n$arr32 = array();\n$arr33 = array();\n$arr34 = array();\n$arr35\
    \ = array();\n$arr36 = array();\n$arr37 = array();\n$arr38 = array();\n$arr39\
    \ = array();\n$arr40 = array();\n$arr41 = array();\n$arr42 = array();\n$arr43\
    \ = array();\n$arr44 = array();\n$arr45 = array();\n$arr46 = array();\n$arr47\
    \ = array();\n$arr48 = array();\n$arr49 = array();\n$arr50 = array();\n$arr51\
    \ = array();\n$arr52 = array();\n$arr53 = array();\n$arr54 = array();\n$arr55\
    \ = array();\n$arr56 = array();\n$arr57 = array();\n$arr58 = array();\n$arr59\
    \ = array();\n$arr60 = array();\n$arr61 = array();\n$arr62 = array();\n$arr63\
    \ = array();\n$arr64 = array();\n$arr65 = array();\n$arr66 = array();\n$\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmv43t0qa.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmhqi68ms.php:27\n\
    Stack trace:\n#0 /tmp/tmpmhqi68ms.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmhqi68ms.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $value) {\n        if ($i % 2 == 0)\
    \ {\n            $even[$i] = $value;\n        } else {\n            $odd[$i] =\
    \ $value;\n        }\n    }\n    return array_merge($odd, $even);\n}\n</code>\n\
    <|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work. Try it with `sort_even([5,\
    \ 6, 3, 4])`\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to\
    \ fix the bug.\n<|/ c |>\n<| c |>\nI added a version that works with associative\
    \ arrays as well.\n<|/ c |>\n<| c |>\nThis doesn't work. Try it with `sort_even([5,\
    \ 6, 3, 4])`\n<|/ c |>\n<| c |>\nI added a version that works with associative\
    \ arrays as well.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3idbp1sb.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n\
    \            $evens[$i] = $v;\n        } else {\n            $odd[$i] = $v;\n\
    \        }\n    }\n    return array_merge($odd, $evens);\n}\n</code>\n<|/ a tags=php,arrays,sorting\
    \ |>\n<| c |>\nThis doesn't seem to work. `sort_even([1,2,3])` returns `[2,1,3]`\
    \ instead of `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. The function returns `[1,2,3]` when given `[1,2,3]`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. The function returns `[1,2,3]` when\
    \ given `[1,2,3]`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting\
    \ it. The function returns `[1,2,3]` when given `[1,2,3]`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I tested it before posting it. The function returns `[1,2,3]` when\
    \ given `[1,2,3]`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = [\n  \
    \  1 => 1,\n    2 => 2,\n    3 => 3,\n    4 => 4,\n    5 => 5,\n    6 => 6,\n\
    \    7 => 7,\n    8 => 8,\n    9 => 9,\n    10 => 10,\n    11 => 11,\n    12 =>\
    \ 12,\n    13 => 13,\n    14 => 14,\n    15 => 15,\n    16 => 16,\n    17 => 17,\n\
    \    18 => 18,\n    19 => 19,\n    20 => 20,\n    21 => 21,\n    22 => 22,\n \
    \   23 => 23,\n    24 => 24,\n    25 => 25,\n    26 => 26,\n    27 => 27,\n  \
    \  28 => 28,\n    29 => 29,\n    30 => 30,\n    31 => 31,\n    32 => 32,\n   \
    \ 33 => 33,\n    34 => 34,\n    35 => 35,\n    36 => 36,\n    37 => 37,\n    38\
    \ => 38,\n    39 => 39,\n    40 => 40,\n    41 => 41,\n    42 => 42,\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa3gfe6zf.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array();\n  $odd = array();\n  foreach ($l as $i\
    \ => $e) {\n    if ($i % 2 == 0) {\n      $even[$i] = $e;\n    } else {\n    \
    \  $odd[$i] = $e;\n    }\n  }\n  array_multisort($even, $odd, $l);\n  return $l;\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpkpw24hmh.php\
    \ on line 19\n\nWarning: array_multisort(): Array sizes are inconsistent in /tmp/tmpkpw24hmh.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpw24hmh.php:29\n\
    Stack trace:\n#0 /tmp/tmpkpw24hmh.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpkpw24hmh.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $i => $v) {\n        if ($i % 2 == 0) {\n            $even[$i] = $v;\n  \
    \      } else {\n            $odd[$i] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't\
    \ work. `sort_even([5, 6, 3, 4])` returns `[3, 6, 5, 4]` instead of `[5, 6, 3,\
    \ 4]`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks for pointing it out.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work. `sort_even([5, 6, 3, 4])` returns `[3, 6,\
    \ 5, 4]` instead of `[5, 6, 3, 4]`.\n<|/ c |>\n<| c |>\n: I fixed the bug. Thanks\
    \ for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work. `sort_even([5, 6,\
    \ 3, 4])` returns `[3, 6, 5, 4]` instead of `[5, 6, 3, 4]`.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\n<code>\n$array = array(\n    array('name' => 'John', 'age' => 20, 'city'\
    \ => 'New York'),\n    array('name' => 'Jane', 'age' => 21, 'city' => 'New York'),\n\
    \    array('name' => 'Jack', 'age' => 22, 'city' => 'New York'),\n    array('name'\
    \ => 'Jill', 'age' => 23, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 22, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 23,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age' => 22, 'city' => 'New\
    \ York'),\n    array('name' => 'Jill', 'age' => 23, 'city' => 'New York'),\n \
    \   array('name' => 'Jack', 'age' => 22, 'city' => 'New York'),\n    array('name'\
    \ => 'Jill', 'age' => 23, 'city' => 'New York'),\n    array('name' => 'Jack',\
    \ 'age' => 22, 'city' => 'New York'),\n    array('name' => 'Jill', 'age' => 23,\
    \ 'city' => 'New York'),\n    array('name' => 'Jack', 'age' => 22, 'city' => 'New\
    \ York'),\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfq0j1wr4.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n\
    \            $even[$i] = $v;\n        } else {\n            $odd[$i] = $v;\n \
    \       }\n    }\n    return array_merge(array_slice($even, 0, count($l) / 2),\
    \ $odd, array_slice($even, count($l) / 2));\n}\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| c |>\nThis doesn't work if the array has duplicate values.\n<|/ c |>\n\
    <| c |>\n: It does work. Try it yourself. It doesn't matter if there are duplicate\
    \ values, the function still works.\n<|/ c |>\n<| c |>\n: It does work. Try it\
    \ yourself. It doesn't matter if there are duplicate values, the function still\
    \ works.\n<|/ c |>\n<| c |>\n: It does work. Try it yourself. It doesn't matter\
    \ if there are duplicate values, the function still works.\n<|/ c |>\n<| c |>\n\
    : It does work. Try it yourself. It doesn't matter if there are duplicate values,\
    \ the function still works.\n<|/ c |>\n<| a |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiowu7pot.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, array_reverse($odd));\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,sorting |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgwr4s69z.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rjyq3dn.php:27\n\
    Stack trace:\n#0 /tmp/tmp8rjyq3dn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8rjyq3dn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, array_reverse($odd));\n\
    }\n</code>\n<|/ a tags=arrays,php,sorting |>\n<| c |>\nThis doesn't work. `sort_even([5,\
    \ 6, 3, 4])` returns `[3, 6, 5, 4]`.\n<|/ c |>\n<| c |>\n: Yes, it does. I tested\
    \ it before posting. I even tested it before posting my answer. `sort_even([5,\
    \ 6, 3, 4])` returns `[3, 6, 5, 4]`.\n<|/ c |>\n<| c |>\n: I tested it before\
    \ posting my answer. `sort_even([5, 6, 3, 4])` returns `[3, 6, 5, 4]`.\n<|/ c\
    \ |>\n<| c |>\n: I tested it before posting my answer. `sort_even([5, 6, 3, 4])`\
    \ returns `[3, 6, 5, 4]`.\n<|/ c |>\n<| c |>\n: I tested it before posting my\
    \ answer. `sort_even([5, 6, 3, 4])` returns `[3, 6, 5, 4]`.\n<|/ c |>\n<| a tags=arrays,php,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp16idxmqv.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $e) {\n        $even[$i] = $e;\n  \
    \      $odd[$i] = $l[$i];\n    }\n    array_multisort($even, $odd, $l);\n    return\
    \ $l;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecglw7s5.php:26\n\
    Stack trace:\n#0 /tmp/tmpecglw7s5.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpecglw7s5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $e) {\n        if ($i % 2 == 0) {\n\
    \            $even[$i] = $e;\n        } else {\n            $odd[$i] = $e;\n \
    \       }\n    }\n    return array_merge($odd, $even);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx_vj5vy.php:27\n\
    Stack trace:\n#0 /tmp/tmpzx_vj5vy.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpzx_vj5vy.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrndsv49.php:20\n\
    Stack trace:\n#0 /tmp/tmpcrndsv49.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcrndsv49.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n \
    \ return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkdktsss.php:19\n\
    Stack trace:\n#0 /tmp/tmpmkdktsss.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmkdktsss.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `[5, 6, 3, 1]`.\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it with `[5, 6, 3, 1]`.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it with\
    \ `[5, 6, 3, 1]`.\n<|/ c |>\n<| c |>\nIt does work. Try it with `[5, 6, 3, 1]`.\n\
    <|/ c |>\n<| c |>\nIt does work. Try it with `[5, 6, 3, 1]`.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprivgbtnb.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($i) { return $i % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($i) { return $i % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb42wmjdr.php:20\n\
    Stack trace:\n#0 /tmp/tmpb42wmjdr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpb42wmjdr.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($i) { return $i % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($i) { return $i % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0clane_.php:20\n\
    Stack trace:\n#0 /tmp/tmpt0clane_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpt0clane_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $v) {\n        $even[$i] |= $v & 1;\n    }\n    return array_merge(array_flip($l),\
    \ $even);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplh841km5.php:22\n\
    Stack trace:\n#0 /tmp/tmplh841km5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmplh841km5.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk53u05v6.php:23\n\
    Stack trace:\n#0 /tmp/tmpk53u05v6.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpk53u05v6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_4b_d6t.php:23\n\
    Stack trace:\n#0 /tmp/tmpa_4b_d6t.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa_4b_d6t.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ckrf1nd.php:27\n\
    Stack trace:\n#0 /tmp/tmp7ckrf1nd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp7ckrf1nd.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  return array_merge($even, sort_even($even), $odd);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  sort($even);\n  sort($odd);\n  return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bphlu4r.php:22\n\
    Stack trace:\n#0 /tmp/tmp3bphlu4r.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3bphlu4r.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll5x784j.php:20\n\
    Stack trace:\n#0 /tmp/tmpll5x784j.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpll5x784j.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, $odd);\n}\n\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfcc_5ijk.php:21\n\
    Stack trace:\n#0 /tmp/tmpfcc_5ijk.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpfcc_5ijk.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6lvz_x9.php:26\n\
    Stack trace:\n#0 /tmp/tmpf6lvz_x9.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpf6lvz_x9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_fill(0, count($l), 0);\n  foreach ($l as $key\
    \ => $value) {\n    $even[$key] = $value;\n  }\n  array_multisort($even, SORT_DESC,\
    \ $l);\n  return $l;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. Unfortunately this doesn't work for me. I've added the output I get\
    \ to my original post.\n<|/ c |>\n<| c |>\nThe output you posted is exactly what\
    \ I get when I run your code. Are you sure you copied the code correctly? The\
    \ output you posted is exactly what I get when I run your code. Are you sure you\
    \ copied the code correctly? The output you posted is exactly what I get when\
    \ I run your code. Are you sure you copied the code correctly? The output you\
    \ posted is exactly what I get when I run your code. Are you sure you copied the\
    \ code correctly? The output you posted is exactly what I get when I run your\
    \ code. Are you sure you copied the code correctly? The output you posted is exactly\
    \ what I get when I run your code. Are you sure you copied the code correctly?\
    \ The output you posted is exactly what I get when I run your code. Are you sure\
    \ you copied the code correctly? The output you posted is exactly what I get when\
    \ I run your code. Are you sure you copied the code correctly? The output you\
    \ posted is exactly what I get when I run your code. Are you sure you copied the\
    \ code correctly? The output you posted is exactly what I get when I run your\
    \ code. Are you sure you copied the code correctly? The output you posted is exactly\
    \ what I get when I run your code. Are you sure you copied the code correctly?\
    \ The output you posted is exactly what I get when I run your code. Are you sure\
    \ you copied the code correctly? The output you posted is exactly what I get when\
    \ I run your code. Are you sure you copied the code correctly? The output you\
    \ posted is exactly what I get when I run your code. Are you sure you copied the\
    \ code correctly? The output you posted is exactly what I get when I run your\
    \ code. Are you sure you copied the code correctly? The output you posted is exactly\
    \ what I get when I run your code. Are you sure you copied the code correctly?\
    \ The output you posted is exactly what I get when I run your code. Are you sure\
    \ you copied the code correctly? The output you posted is exactly what I get when\
    \ I run your code. Are you sure you copied the code correctly? The output you\
    \ posted is exactly what I get when I run your code. Are you sure you copie\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk4stoi6g.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $v) {\n        if ($i % 2 == 0) {\n            $even[$i] = $v;\n     \
    \   }\n    }\n    return array_merge(array_slice($even, 0, count($l) / 2), array_slice($l,\
    \ count($l) / 2));\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nI like\
    \ this solution, but I wonder if there is a way to do it without using array_merge.\n\
    <|/ c |>\n<| c |>\n: I added a version without array_merge.\n<|/ c |>\n<| c |>\n\
    : I added a version without array_merge.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$array = array(\n    array('name' => 'John', 'age' => 25),\n   \
    \ array('name' => 'Jane', 'age' => 22),\n    array('name' => 'Jack', 'age' =>\
    \ 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name' => 'Jack',\
    \ 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name' =>\
    \ 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n    array('name' => 'Jill', 'age' => 25),\n    array('name'\
    \ => 'Jack', 'age' => 25),\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2f2yfi8v.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt27d4yh6.php:20\n\
    Stack trace:\n#0 /tmp/tmpt27d4yh6.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpt27d4yh6.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfw78iy10.php:27\n\
    Stack trace:\n#0 /tmp/tmpfw78iy10.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfw78iy10.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $i => $e) {\n        if ($i % 2 == 0) {\n            $even[$i] = $e;\n  \
    \      } else {\n            $odd[$i] = $e;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you have duplicate\
    \ elements in the input array. E.g. `sort_even([1,2,2,3])` returns `[1,2,3]` instead\
    \ of `[1,2,2,3]`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplgd5oj_q.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $v) {\n        $even[$i] |= 1 << ($i % 2);\n    }\n    return array_merge(array_slice($l,\
    \ $even[0]), array_slice($l, $even[1], count($l) - $even[1]));\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThis doesn't seem to work. `sort_even([5, 6, 3, 4])`\
    \ returns `[3, 6, 5, 4]`.\n<|/ c |>\n<| c |>\n: It works fine for me. Are you\
    \ sure you copied the code correctly?\n<|/ c |>\n<| c |>\n: I added a test case\
    \ to my answer.\n<|/ c |>\n<| c |>\n: I added a test case to my answer.\n<|/ c\
    \ |>\n<| a tags=sorting,php,arrays |>\n<code>\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsvh7b1zt.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10lt41bh.php:20\n\
    Stack trace:\n#0 /tmp/tmp10lt41bh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp10lt41bh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmy0uiwux.php:19\n\
    Stack trace:\n#0 /tmp/tmpmy0uiwux.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmy0uiwux.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = array();\n  for ($i = 0; $i < count($l); $i += 2) {\n\
    \    $l2[$i] = $l[$i];\n  }\n  sort($l2);\n  return $l2;\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnyztmj1.php:22\n\
    Stack trace:\n#0 /tmp/tmpcnyztmj1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcnyztmj1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n$arr = array(\n    array('name' => 'John', 'age' => '20'),\n   \
    \ array('name' => 'Jane', 'age' => '30'),\n    array('name' => 'Jack', 'age' =>\
    \ '40'),\n    array('name' => 'Jill', 'age' => '50'),\n    array('name' => 'Jack',\
    \ 'age' => '40'),\n    array('name' => 'Jill', 'age' => '50'),\n    array('name'\
    \ => 'Jack', 'age' => '40'),\n    array('name' => 'Jill', 'age' => '50'),\n  \
    \  array('name' => 'Jack', 'age' => '40'),\n    array('name' => 'Jill', 'age'\
    \ => '50'),\n    array('name' => 'Jack', 'age' => '40'),\n    array('name' =>\
    \ 'Jill', 'age' => '50'),\n    array('name' => 'Jack', 'age' => '40'),\n    array('name'\
    \ => 'Jill', 'age' => '50'),\n    array('name' => 'Jack', 'age' => '40'),\n  \
    \  array('name' => 'Jill', 'age' => '50'),\n    array('name' => 'Jack', 'age'\
    \ => '40'),\n    array('name' => 'Jill', 'age' => '50'),\n    array('name' =>\
    \ 'Jack', 'age' => '40'),\n    array('name' => 'Jill', 'age' => '50'),\n    array('name'\
    \ => 'Jack', 'age' => '40'),\n    array('name' => 'Jill', 'age' => '50'),\n  \
    \  array('name' => 'Jack', 'age' => '40'),\n    array('name' => 'Jill', 'age'\
    \ => '50'),\n    array('name' => 'Jack', 'age' => '40'),\n    array('name' =>\
    \ 'Jill', 'age' => '50'),\n    array('name' => 'Jack', 'age' => '40'),\n    array('name'\
    \ => 'Jill', 'age' => '50'),\n    array('name' => 'Jack', 'age' => '40'),\n  \
    \  array('name' => 'Jill', 'age' => '50'),\n    array('name' => 'Jack', 'age'\
    \ => '40'),\n    array('name' => 'Jill', 'age' => '50'),\n    array('name' =>\
    \ 'Jack', 'age' => '40'),\n    array('name' => 'Jill', 'age' => '\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcltlv3gu.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_fill(0, count($l), 0);\n  $odd = array_fill(0,\
    \ count($l), 0);\n  foreach ($l as $i => $v) {\n    if ($i % 2 == 0) {\n     \
    \ $even[$i] = $v;\n    } else {\n      $odd[$i] = $v;\n    }\n  }\n  return array_merge($odd,\
    \ $even);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi8cmjhtm.php:27\n\
    Stack trace:\n#0 /tmp/tmpi8cmjhtm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpi8cmjhtm.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnns850j8.php:22\n\
    Stack trace:\n#0 /tmp/tmpnns850j8.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpnns850j8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_filter($l, function($e) { return $e % 2\
    \ == 0; });\n    $evens = array_values($evens);\n    sort($evens);\n    return\
    \ array_merge($evens, $l);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c\
    \ |>\nThis doesn't work if the array has duplicate values.\n<|/ c |>\n<| c |>\n\
    : It doesn't work if the array has duplicate values.\n<|/ c |>\n<| c |>\n: It\
    \ doesn't work if the array has duplicate values.\n<|/ c |>\n<| c |>\n: It doesn't\
    \ work if the array has duplicate values.\n<|/ c |>\n<| c |>\n: It doesn't work\
    \ if the array has duplicate values.\n<|/ c |>\n<| a tags=php,arrays,sorting |>\n\
    <code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplqgu1vv9.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $e) {\n        $even[$i] = $e;\n    }\n    array_multisort($even, SORT_ASC,\
    \ $l);\n    return $l;\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<| c |>\n\
    This doesn't work if you have duplicate values in the array. For example, `sort_even([5,\
    \ 6, 3, 6, 5, 4])` returns `[3, 6, 5, 4]`.\n<|/ c |>\n<| c |>\n: That's a good\
    \ point. I added a version that doesn't have that problem.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxyy6g_4c.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  sort($even);\n  sort($odd);\n  return array_merge($even,\
    \ $odd);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpywj9iuky.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    sort($even);\n\
    \    return array_merge($even, $l);\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6y6d52ah.php:20\n\
    Stack trace:\n#0 /tmp/tmp6y6d52ah.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6y6d52ah.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpocqi8pzx.php:27\n\
    Stack trace:\n#0 /tmp/tmpocqi8pzx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpocqi8pzx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdi00u1h9.php:27\n\
    Stack trace:\n#0 /tmp/tmpdi00u1h9.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdi00u1h9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $v) {\n        if ($i % 2 == 0) {\n            $even[$i] = $v;\n     \
    \   }\n    }\n    return $even;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphosy2_g1.php:24\n\
    Stack trace:\n#0 /tmp/tmphosy2_g1.php(29): test()\n#1 {main}\n  thrown in /tmp/tmphosy2_g1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnmy6nyy2.php:20\n\
    Stack trace:\n#0 /tmp/tmpnmy6nyy2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpnmy6nyy2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2, count($l));\n    return array_merge($even, $odd);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxyji9db.php:20\n\
    Stack trace:\n#0 /tmp/tmpcxyji9db.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcxyji9db.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jf847xw.php:26\n\
    Stack trace:\n#0 /tmp/tmp8jf847xw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp8jf847xw.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = [];\n  for ($i = 0; $i < count($l); $i += 2) {\n  \
    \  $l2[$i] = $l[$i];\n  }\n  sort($l2);\n  return $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_oylpcn.php:23\n\
    Stack trace:\n#0 /tmp/tmp2_oylpcn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2_oylpcn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l)/2);\n  $odd = array_slice($l,\
    \ count($l)/2);\n  return array_merge($even, array_reverse($odd));\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv4_480s1.php:19\n\
    Stack trace:\n#0 /tmp/tmpv4_480s1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpv4_480s1.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvn2ejmwm.php:20\n\
    Stack trace:\n#0 /tmp/tmpvn2ejmwm.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvn2ejmwm.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3e9oviq.php:23\n\
    Stack trace:\n#0 /tmp/tmpl3e9oviq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpl3e9oviq.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($i) { return $i % 2 ==\
    \ 0; });\n  $odd = array_filter($l, function($i) { return $i % 2 == 1; });\n \
    \ return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01vp6g33.php:20\n\
    Stack trace:\n#0 /tmp/tmp01vp6g33.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp01vp6g33.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, $odd);\n}\n\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx__5cln5.php:21\n\
    Stack trace:\n#0 /tmp/tmpx__5cln5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpx__5cln5.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglyk3qq3.php:27\n\
    Stack trace:\n#0 /tmp/tmpglyk3qq3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpglyk3qq3.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2, count($l));\n    return array_merge($even, sort_even($odd));\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $i => $e) {\n        if ($i % 2 == 0) {\n            $even[$i] = $e;\n  \
    \      } else {\n            $odd[$i] = $e;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2a53oxe.php:26\n\
    Stack trace:\n#0 /tmp/tmpv2a53oxe.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv2a53oxe.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array();\n  $odd = array();\n  foreach ($l as $i\
    \ => $e) {\n    if ($i % 2 == 0) {\n      $even[$i] = $e;\n    } else {\n    \
    \  $odd[$i] = $e;\n    }\n  }\n  return array_merge($even, $odd);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_4haujr.php:27\n\
    Stack trace:\n#0 /tmp/tmpi_4haujr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpi_4haujr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $i => $e) {\n        if ($i % 2 == 0) {\n            $even[$i] = $e;\n  \
    \      } else {\n            $odd[$i] = $e;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv97128fj.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l)/2);\n  $odd = array_slice($l,\
    \ count($l)/2);\n  return array_merge($even, array_reverse($odd));\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjvecinp.php:19\n\
    Stack trace:\n#0 /tmp/tmpmjvecinp.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpmjvecinp.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = [];\n  for ($i = 0; $i < count($l); $i += 2) {\n  \
    \  $l2[] = $l[$i];\n  }\n  return $l2;\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiriclbsc.php:22\n\
    Stack trace:\n#0 /tmp/tmpiriclbsc.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpiriclbsc.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n\
    \            $even[$i] = $v;\n        } else {\n            $odd[$i] = $v;\n \
    \       }\n    }\n    return array_merge($odd, $even);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoli4x0q7.php:27\n\
    Stack trace:\n#0 /tmp/tmpoli4x0q7.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpoli4x0q7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8kjmfkdw.php:27\n\
    Stack trace:\n#0 /tmp/tmp8kjmfkdw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8kjmfkdw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  sort($even);\n\
    \  return array_merge($even, array_slice($l, count($l) / 2));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbcqr4tke.php:21\n\
    Stack trace:\n#0 /tmp/tmpbcqr4tke.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbcqr4tke.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqiiqb82d.php:26\n\
    Stack trace:\n#0 /tmp/tmpqiiqb82d.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpqiiqb82d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $k => $v) {\n        $even[$k] = $v;\n  \
    \      $odd[$k] = $l[$k];\n    }\n    array_multisort($even, $odd, $l);\n    return\
    \ $l;\n}\n</code>\n<|/ a tags=php,sorting,arrays |>\n<| c |>\nThis doesn't work\
    \ if you have duplicate values in the array. E.g. `[1,1,2,3]` will sort as `[1,2,3]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have duplicate values in the array.\
    \ E.g. `[1,1,2,3]` will sort as `[1,2,3]`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have duplicate values in the array. E.g. `[1,1,2,3]` will sort as `[1,2,3]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have duplicate values in the array.\
    \ E.g. `[1,1,2,3]` will sort as `[1,2,3]`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if you have duplicate values in the array. E.g. `[1,1,2,3]` will sort as `[1,2,3]`.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq4fpsunl.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_filter($l, function($e) { return $e % 2\
    \ == 0; });\n    $odds = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($odds, $evens);\n}\n\nfunction candidate(...$args) {\n\
    \    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbi02b0i.php:20\n\
    Stack trace:\n#0 /tmp/tmpsbi02b0i.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpsbi02b0i.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    sort($even);\n\
    \    return array_merge($even, $l);\n}\n\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25t3sn94.php:20\n\
    Stack trace:\n#0 /tmp/tmp25t3sn94.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp25t3sn94.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, array_reverse($odd));\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhftyrdx.php:20\n\
    Stack trace:\n#0 /tmp/tmpkhftyrdx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpkhftyrdx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, $odd);\n}\n\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7sdba599.php:21\n\
    Stack trace:\n#0 /tmp/tmp7sdba599.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7sdba599.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n\
    \            $even[$i] = $v;\n        } else {\n            $odd[$i] = $v;\n \
    \       }\n    }\n    return array_merge($odd, $even);\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf8c3tyq_.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l)/2);\n  sort($even);\n\
    \  return array_merge($l, $even);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpypwgdwmx.php:19\n\
    Stack trace:\n#0 /tmp/tmpypwgdwmx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpypwgdwmx.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ahrqc6m.php:20\n\
    Stack trace:\n#0 /tmp/tmp2ahrqc6m.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp2ahrqc6m.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_fill(0, count($l), 0);\n  foreach ($l as $i\
    \ => $value) {\n    $even[$i] |= 1 << ($value & 1);\n  }\n  return array_merge(array_keys($l),\
    \ $l);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8iry6xpr.php:21\n\
    Stack trace:\n#0 /tmp/tmp8iry6xpr.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8iry6xpr.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_filter($l, function ($e) { return $e % 2\
    \ == 0; });\n    $evens = array_values($evens);\n    return array_merge($evens,\
    \ $l);\n}\n</code>\n<|/ a tags=php,arrays,sorting |>\n<| c |>\nThis doesn't work\
    \ if the array has duplicate values.\n<|/ c |>\n<| c |>\nIt does work if you use\
    \ array_unique() on the array before you call this function.\n<|/ c |>\n<| c |>\n\
    It doesn't work if you use array_unique() on the array before you call this function.\
    \ Try it yourself.\n<|/ c |>\n<| c |>\nIt does work if you use array_unique()\
    \ on the array before you call this function.\n<|/ c |>\n<| c |>\nIt does work\
    \ if you use array_unique() on the array before you call this function.\n<|/ c\
    \ |>\n<| a tags=php,arrays,sorting |>\n<code>\n$array = array(\n    array(\n \
    \       'id' => 1,\n        'name' => 'John',\n        'age' => 25,\n        'city'\
    \ => 'New York'\n    ),\n    array(\n        'id' => 2,\n        'name' => 'Jane',\n\
    \        'age' => 25,\n        'city' => 'New York'\n    ),\n    array(\n    \
    \    'id' => 3,\n        'name' => 'Jack',\n        'age' => 25,\n        'city'\
    \ => 'New York'\n    ),\n    array(\n        'id' => 4,\n        'name' => 'Jill',\n\
    \        'age' => 25,\n        'city' => 'New York'\n    ),\n    array(\n    \
    \    'id' => 5,\n        'name' => 'Jack',\n        'age' => 25,\n        'city'\
    \ => 'New York'\n    ),\n    array(\n        'id' => 6,\n        'name' => 'Jill',\n\
    \        'age' => 25,\n        'city' => 'New York'\n    ),\n    array(\n    \
    \    'id' => 7,\n        'name' => 'Jack',\n        'age' => 25,\n        'city'\
    \ => 'New York'\n    ),\n    array(\n        'id' => 8,\n        'name' => 'Jill',\n\
    \        'age' => 25,\n        'city' => 'New York'\n    ),\n    array(\n    \
    \    'id' => 9,\n        'name' => 'Jack',\n        'age' => 25,\n        'city'\
    \ => 'New York'\n    ),\n    array(\n        'id' => 10,\n        'name' => 'Jill',\n\
    \        'age' => 25,\n        'city' => 'New York'\n    ),\n    array(\n    \
    \    '\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp36k3k83.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_filter($l, function($e) { return $e % 2\
    \ == 0; });\n    $odds = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($evens, $odds);\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>\n$array = array(\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"\
    i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"\
    v\",\"w\",\"x\",\"y\",\"z\");\n$array = array_unique($array);\n$array = array_values($array);\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_merge($array,array_slice($array,count($array)));\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_values($array);\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_merge($array,array_slice($array,count($array)));\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_values($array);\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_merge($array,array_slice($array,count($array)));\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_values($array);\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_merge($array,array_slice($array,count($array)));\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_values($array);\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_merge($array,array_slice($array,count($array)));\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_values($array);\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_merge($array,array_slice($array,count($array)));\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_values($array);\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_merge($array,array_slice($array,count($array)));\n\
    $array = array_slice($array,0,count($array)-1);\n$array = array_values($array);\n\
    $array = array_slice($array,0,count($array)-1);\n$\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpay22sxiu.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjqxgj8p.php:27\n\
    Stack trace:\n#0 /tmp/tmpfjqxgj8p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfjqxgj8p.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $v) {\n        if ($i % 2 == 0) {\n            $even[$i] = $v;\n     \
    \   }\n    }\n    return $even;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2mgym39.php:24\n\
    Stack trace:\n#0 /tmp/tmpg2mgym39.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpg2mgym39.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    I didn't downvote, but I suspect it's because this answer doesn't actually answer\
    \ the question. OP asked how to sort a list by an arbitrary criteria, not just\
    \ by an even or odd index. Your answer doesn't do that.\n<|/ c |>\n<| c |>\nI\
    \ agree with you. I just wanted to show that you can sort by any criteria you\
    \ want.\n<|/ c |>\n<| c |>\nI didn't downvote, but I suspect it's because this\
    \ answer doesn't actually answer the question. OP asked how to sort a list by\
    \ an arbitrary criteria, not just by an even or odd index. Your answer doesn't\
    \ do that.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show that you\
    \ can sort by any criteria you want.\n<|/ c |>\n<| c |>\nI agree with you. I just\
    \ wanted to show that you can sort by any criteria you want.\n<|/ c |>\n<| a tags=php,sorting,arrays\
    \ |>\nYou can sort an array by any criteria you want.\n<code>\n$array = array(\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\");\n$criteria = array(\"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\"\
    , \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\");\nusort($array,\
    \ function($a, $b) use ($criteria) {\n    return strcmp($a[$criteria[0]], $b[$criteria[0]]);\n\
    });\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI didn't downvote, but I suspect it's\
    \ because this answer doesn't actually answer the question. OP asked how to sort\
    \ a list by an arbitrary criteria, not just by an even or odd index. Your answer\
    \ doesn't do that.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show\
    \ that you can sort by any criteria you want.\n<|/ c |>\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp35kxyp2s.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, $odd);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkz0v8szx.php:20\n\
    Stack trace:\n#0 /tmp/tmpkz0v8szx.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpkz0v8szx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n\
    \            $even[$i] = $v;\n        } else {\n            $odd[$i] = $v;\n \
    \       }\n    }\n    return array_merge($odd, $even);\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=1 |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array\
    \ = array_merge($array, array_chunk($array, 2));\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThis doesn't preserve the original order\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_merge($array,\
    \ array_chunk($array, 2));\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n\
    <code>\n$array = array('a', 'b', 'c', 'd', 'e');\n$array = array_merge($array,\
    \ array_chunk($array, 2));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    $array = array('a', 'b', 'c', 'd', 'e');\n$array = array_merge($array, array_chunk($array,\
    \ 2));\n</code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array('a', 'b', 'c', 'd', 'e');\n$array = array_merge($array, array_chunk($array,\
    \ 2));\n</code>\n<|/ a dscore=1 |>\n<| a tags=arrays,php |>\n<code>\n$array =\
    \ array('a', 'b', 'c', 'd', 'e');\n$array = array_merge($array, array_chunk($array,\
    \ 2));\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('a',\
    \ 'b', 'c', 'd', 'e');\n$array = array_merge($array, array_chunk($array, 2));\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array('a',\
    \ 'b', 'c', 'd', 'e');\n$array = array_merge($array, array_chunk($array, 2));\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n$array = array('a', 'b',\
    \ 'c', 'd', 'e');\n$array = array_merge($array, array_chunk($array, 2));\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array('a',\
    \ '\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3idpm9ij.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppv19tuz.php:22\n\
    Stack trace:\n#0 /tmp/tmpppv19tuz.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpppv19tuz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  return array_merge($even, array_reverse($even));\n}\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvb373gbw.php:18\n\
    Stack trace:\n#0 /tmp/tmpvb373gbw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvb373gbw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcxkfr_s1.php:27\n\
    Stack trace:\n#0 /tmp/tmpcxkfr_s1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcxkfr_s1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  sort($even);\n  sort($odd);\n  return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ssq1cob.php:22\n\
    Stack trace:\n#0 /tmp/tmp7ssq1cob.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7ssq1cob.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiztn9z9b.php:27\n\
    Stack trace:\n#0 /tmp/tmpiztn9z9b.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpiztn9z9b.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_fill(0, count($l), 0);\n  foreach ($l as $i\
    \ => $v) {\n    if ($i % 2 == 0) {\n      $even[$i] = $v;\n    }\n  }\n  ksort($even);\n\
    \  return $even;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilvqzpdn.php:25\n\
    Stack trace:\n#0 /tmp/tmpilvqzpdn.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpilvqzpdn.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($i) { return $i % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($i) { return $i % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. `sort_even([5, 6, 3, 4])` returns `[5, 6, 3, 4]` instead of\
    \ `[3, 6, 5, 4]`.\n<|/ c |>\n<| c |>\nYes, I see that now. I've edited my answer\
    \ to fix it.\n<|/ c |>\n<| c |>\nThis still doesn't work. `sort_even([5, 6, 3,\
    \ 4])` returns `[5, 6, 3, 4]` instead of `[3, 6, 5, 4]`.\n<|/ c |>\n<| c |>\n\
    I see that now. I've edited my answer to fix it.\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpazcifh98.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $i => $e) {\n        if ($i % 2 == 0) {\n            $even[$i] = $e;\n  \
    \      } else {\n            $odd[$i] = $e;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxghnrcbr.php:27\n\
    Stack trace:\n#0 /tmp/tmpxghnrcbr.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpxghnrcbr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9cpw9ay.php:20\n\
    Stack trace:\n#0 /tmp/tmpa9cpw9ay.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpa9cpw9ay.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array();\n  $odd = array();\n  foreach ($l as $k\
    \ => $v) {\n    if ($k % 2 == 0) {\n      $even[$k] = $v;\n    } else {\n    \
    \  $odd[$k] = $v;\n    }\n  }\n  return array_merge($even, $odd);\n}\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dr8hl00.php:26\n\
    Stack trace:\n#0 /tmp/tmp4dr8hl00.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4dr8hl00.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_filter($l, function($e) { return $e % 2\
    \ == 0; });\n    $evens = array_intersect_key($l, array_flip($evens));\n    return\
    \ array_merge($evens, $l);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmapyx6gp.php:20\n\
    Stack trace:\n#0 /tmp/tmpmapyx6gp.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpmapyx6gp.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array\
    \ = array(1, 2, 3, 4, 5);\n$even = array_filter($array, function($value){\n  \
    \  return $value % 2 == 0;\n});\n$odd = array_filter($array, function($value){\n\
    \    return $value % 2 != 0;\n});\n$result = array_merge($even, $odd);\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1, 2, 3, 4,\
    \ 5);\n$even = array_filter($array, function($value){\n    return $value % 2 ==\
    \ 0;\n});\n$odd = array_filter($array, function($value){\n    return $value %\
    \ 2 != 0;\n});\n$result = array_merge($even, $odd);\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\n$array = array(1, 2, 3, 4, 5);\n$even = array_filter($array,\
    \ function($value){\n    return $value % 2 == 0;\n});\n$odd = array_filter($array,\
    \ function($value){\n    return $value % 2 != 0;\n});\n$result = array_merge($even,\
    \ $odd);\n</code>\n<|/ a tags=arrays,php |>\n<| a dscore=0 |>\n<code>\n$array\
    \ = array(1, 2, 3, 4, 5);\n$even = array_filter($array, function($value){\n  \
    \  return $value % 2 == 0;\n});\n$odd = array_filter($array, function($value){\n\
    \    return $value % 2 != 0;\n});\n$result = array_merge($even, $odd);\n</code>\n\
    <|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1, 2,\
    \ 3, 4, 5);\n$even = array_filter($array, function($value){\n    return $value\
    \ % 2 == 0;\n});\n$odd = array_filter($array, function($value){\n    return $value\
    \ % 2 != 0;\n});\n$result = array_merge($even, $odd);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1,\
    \ 2, 3, 4, 5);\n$even = array_filter\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2w4d28jj.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, $odd);\n}\n\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9nu6bcn.php:21\n\
    Stack trace:\n#0 /tmp/tmpa9nu6bcn.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpa9nu6bcn.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work if you have duplicate values in the array. For example, `sort_even([1,2,2,3,3])`\
    \ returns `[1,2,2,3,3]`\n<|/ c |>\n<| c |>\n: Yes, it does. I tested it before\
    \ posting it. I will add an example to my answer.\n<|/ c |>\n<| c |>\n: I added\
    \ an example to my answer. Does that help?\n<|/ c |>\n<| c |>\n: I added an example\
    \ to my answer. Does that help?\n<|/ c |>\n<| c |>\n: I added an example to my\
    \ answer. Does that help?\n<|/ c |>\n<| a dscore=3 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $even = array_filter($array, function($e) { return $e % 2 == 0; });\n$odd = array_filter($array,\
    \ function($e) { return $e % 2 == 1; });\n$result = array_merge($even, $odd);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a tags=arrays,php |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $even = array_filter($array, function($e) { return $e % 2 == 0; });\n$odd = array_filter($array,\
    \ function($e) { return $e % 2 == 1; });\n$result = array_merge($even, $odd);\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $even = array_filter($array, function($e) { return $e % 2 == 0; });\n$odd = array_filter($array,\
    \ function($e) { return $e % 2 == 1; });\n$result = array_merge($even, $odd);\n\
    </code>\n<|/ a tags=arrays,php |>\n<| a dscore=1 |>\n<code>\n$array = array(1,2,3,4,5,6,7,8,9,10);\n\
    $even = array_filter($array, function($e) { return $e % 2 == 0; });\n$odd = array_filter($array,\
    \ function($e) { return $e % 2 == 1; });\n$result = array_merge($even, $odd);\n\
    </code>\n<|/ a tags=arrays,php |>\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa99buvtj.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, sort_even($odd));\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 262144 bytes) in /tmp/tmp1a04lpr9.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<|\
    \ c |>\nThis doesn't work if the array has duplicates. For example, `sort_even([1,1,2,3,3])`\
    \ returns `[1,1,2,3,3]`.\n<|/ c |>\n<| c |>\n: Yes, it does. I added a comment\
    \ to the question to clarify that my function doesn't work if there are duplicates.\n\
    <|/ c |>\n<| c |>\nI see what you mean. My bad.\n<|/ c |>\n<| a tags=sorting,php,arrays\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb9g1ikwh.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $l2 = $l;\n  foreach ($l2 as $k => $v) {\n    if ($k % 2\
    \ == 0) {\n      $l2[$k] = $v;\n    }\n  }\n  return $l2;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb23nznsw.php:25\n\
    Stack trace:\n#0 /tmp/tmpb23nznsw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpb23nznsw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2, count($l));\n    return array_merge($even, $odd);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzmsg68fl.php:21\n\
    Stack trace:\n#0 /tmp/tmpzmsg68fl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpzmsg68fl.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1d_gf5l0.php:20\n\
    Stack trace:\n#0 /tmp/tmp1d_gf5l0.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp1d_gf5l0.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91qdepa2.php:20\n\
    Stack trace:\n#0 /tmp/tmp91qdepa2.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp91qdepa2.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjlim7rng.php:19\n\
    Stack trace:\n#0 /tmp/tmpjlim7rng.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpjlim7rng.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $evens = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n  return array_merge($evens, array_fill(0, count($evens), $evens[0]));\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfl1ec5ei.php:19\n\
    Stack trace:\n#0 /tmp/tmpfl1ec5ei.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfl1ec5ei.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($i) { return $i % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($i) { return $i % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp911pe6uu.php:19\n\
    Stack trace:\n#0 /tmp/tmp911pe6uu.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp911pe6uu.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipoykj_o.php:23\n\
    Stack trace:\n#0 /tmp/tmpipoykj_o.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpipoykj_o.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $key => $value) {\n        if ($key % 2 ==\
    \ 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    return array_merge($odd, $even);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsioey6vw.php:27\n\
    Stack trace:\n#0 /tmp/tmpsioey6vw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsioey6vw.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $value) {\n        if ($i % 2 == 0) {\n            $even[$i] .= $value;\n\
    \        } else {\n            $even[$i] .= $value;\n            $even[$i] .=\
    \ $value;\n        }\n    }\n    return $even;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkhjzviyg.php:27\n\
    Stack trace:\n#0 /tmp/tmpkhjzviyg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkhjzviyg.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    sort($even);\n    return array_merge($even, $l);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9qhp0r_.php:20\n\
    Stack trace:\n#0 /tmp/tmpl9qhp0r_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpl9qhp0r_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odds = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($odds, $evens);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work. Try it with `sort_even([5, 6, 3, 4])`.\n<|/ c |>\n<| c |>\n: It does work.\
    \ Try it with `sort_even([5, 6, 3, 4])`.\n<|/ c |>\n<| c |>\n: It does work. Try\
    \ it with `sort_even([5, 6, 3, 4])`.\n<|/ c |>\n<| c |>\n: It does work. Try it\
    \ with `sort_even([5, 6, 3, 4])`.\n<|/ c |>\n<| c |>\n: It does work. Try it with\
    \ `sort_even([5, 6, 3, 4])`.\n<|/ c |>\n<| a tags=php,sorting,arrays |>\n<code>\n\
    function candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcc35spio.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqq071nnx.php:20\n\
    Stack trace:\n#0 /tmp/tmpqq071nnx.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqq071nnx.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($even, $odd);\n}\n</code>\n<|/ a tags=sorting,php,arrays |>\n<|\
    \ c |>\nI like this solution, but I wonder if there is a way to do it without\
    \ using array_filter?\n<|/ c |>\n<| c |>\n: No, there isn't. `array_filter` has\
    \ to iterate over the entire array and check each element to see if it should\
    \ be kept. Since you're only interested in keeping even elements, you can just\
    \ iterate over them and keep those that are even.\n<|/ c |>\n<| c |>\n: I added\
    \ a solution that doesn't use `array_filter`.\n<|/ c |>\n<| c |>\n: I added a\
    \ solution that doesn't use `array_filter`.\n<|/ c |>\n<| c |>\n: I added a solution\
    \ that doesn't use `array_filter`.\n<|/ c |>\n<| a tags=sorting,php,arrays |>\n\
    <code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_ypqq_yf.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, array_reverse($odd));\n\
    }\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvwelpi_7.php:20\n\
    Stack trace:\n#0 /tmp/tmpvwelpi_7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvwelpi_7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    return array_merge($even, array_reverse($odd));\n\
    }\nfunction candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23,\
    \ 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbsozwbl3.php:19\n\
    Stack trace:\n#0 /tmp/tmpbsozwbl3.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpbsozwbl3.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2, count($l));\n    return array_merge($even, $odd);\n}\n\nfunction\
    \ candidate(...$args) {\n    return sort_even(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10))\
    \ !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1snqlh3.php:21\n\
    Stack trace:\n#0 /tmp/tmpq1snqlh3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpq1snqlh3.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb43ghhyy.php:23\n\
    Stack trace:\n#0 /tmp/tmpb43ghhyy.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpb43ghhyy.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    sort($even);\n\
    \    return array_merge($even, $l);\n}\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_2oyiyn.php:19\n\
    Stack trace:\n#0 /tmp/tmpz_2oyiyn.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpz_2oyiyn.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zv70t9p.php:23\n\
    Stack trace:\n#0 /tmp/tmp2zv70t9p.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2zv70t9p.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l)/2);\n    $odd = array_slice($l,\
    \ count($l)/2);\n    sort($even);\n    sort($odd);\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8grlddhf.php:22\n\
    Stack trace:\n#0 /tmp/tmp8grlddhf.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp8grlddhf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9kw_cia.php:19\n\
    Stack trace:\n#0 /tmp/tmps9kw_cia.php(24): test()\n#1 {main}\n  thrown in /tmp/tmps9kw_cia.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c |>\n\
    This doesn't work. `sort_even([5, 6, 3, 4])` returns `[3, 6, 5, 4]`\n<|/ c |>\n\
    <| c |>\n: I tested it and it works. I even tested it on [the PHP demo page](http://3v4l.org/Yq3lU).\
    \ What PHP version are you using?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10\
    \ and PHP 5.4.3. What PHP version are you using?\n<|/ c |>\n<| c |>\n: I tested\
    \ it on PHP 5.3.10 and PHP 5.4.3. What PHP version are you using?\n<|/ c |>\n\
    <| c |>\n: I tested it on PHP 5.3.10 and PHP 5.4.3. What PHP version are you using?\n\
    <|/ c |>\n<| a tags=php,sorting |>\n<code>\nfunction candidate(...$args) {\n \
    \   return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm69khcxo.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgjd0iwn.php:23\n\
    Stack trace:\n#0 /tmp/tmphgjd0iwn.php(27): test()\n#1 {main}\n  thrown in /tmp/tmphgjd0iwn.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $v) {\n        if ($i % 2 == 0) {\n\
    \            $even[$i] = $v;\n        } else {\n            $odd[$i] = $v;\n \
    \       }\n    }\n    return array_merge($odd, $even);\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't seem to work. `sort_even([1,2,3])` returns `[1,1,2,3]` instead\
    \ of `[1,2,3]`.\n<|/ c |>\n<| c |>\n: I fixed the bug, thanks. I forgot that `array_merge`\
    \ doesn't preserve keys.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv4whemei.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpid3bspr0.php:27\n\
    Stack trace:\n#0 /tmp/tmpid3bspr0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpid3bspr0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    $odd = array_fill(0,\
    \ count($l), 0);\n    foreach ($l as $i => $value) {\n        if ($i % 2 == 0)\
    \ {\n            $even[$i] = $value;\n        } else {\n            $odd[$i] =\
    \ $value;\n        }\n    }\n    return array_merge($odd, $even);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks for the answer. I'm sorry I didn't specify\
    \ this in my question, but I do need to preserve the original order of the elements.\
    \ I edited my question to reflect this.\n<|/ c |>\n<| a tags=php,arrays,sorting\
    \ |>\n<code>\n<?php\n$arr = [\n    0 => 'a',\n    1 => 'b',\n    2 => 'c',\n \
    \   3 => 'd',\n    4 => 'e',\n    5 => 'f',\n    6 => 'g',\n    7 => 'h',\n  \
    \  8 => 'i',\n    9 => 'j',\n    10 => 'k',\n    11 => 'l',\n    12 => 'm',\n\
    \    13 => 'n',\n    14 => 'o',\n    15 => 'p',\n    16 => 'q',\n    17 => 'r',\n\
    \    18 => 's',\n    19 => 't',\n    20 => 'u',\n    21 => 'v',\n    22 => 'w',\n\
    \    23 => 'x',\n    24 => 'y',\n    25 => 'z',\n];\n\n$arr2 = [];\n$arr3 = [];\n\
    $arr4 = [];\n$arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9 = [];\n\
    $arr10 = [];\n$arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n$arr15 =\
    \ [];\n$arr16 = [];\n$arr17 = [];\n$arr18 = [];\n$arr19 = [];\n$arr20 = [];\n\
    $arr21 = [];\n$arr22 = [];\n$arr23 = [];\n$arr24 = [];\n$arr25 = [];\n\nforeach\
    \ ($arr as $key => $value) {\n    if ($key % 2 == 0) {\n        $arr2[$key] =\
    \ $value;\n    } else {\n        $arr3[$key] = $value;\n    }\n}\n\nforeach ($arr2\
    \ as $key => $value) {\n    if ($key % 2 == 0) {\n        $arr4[$key] = $value;\n\
    \    } else {\n        $arr5[$key] = $value;\n    }\n}\n\nforeach ($arr3 as $key\
    \ => $value) {\n    if ($key % 2 == 0) {\n        $arr6\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb7f31q4n.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $key => $value) {\n        if ($key % 2 == 0) {\n            $even[$key]\
    \ = $value;\n        } else {\n            $odd[$key] = $value;\n        }\n \
    \   }\n    return array_merge($even, $odd);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpti495yrz.php:27\n\
    Stack trace:\n#0 /tmp/tmpti495yrz.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpti495yrz.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_filter($l, function($v) { return $v & 1;\
    \ });\n    $odd = array_filter($l, function($v) { return $v & 2; });\n    return\
    \ array_merge($evens, $odd);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv393xsu4.php:20\n\
    Stack trace:\n#0 /tmp/tmpv393xsu4.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpv393xsu4.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5gibxc_.php:26\n\
    Stack trace:\n#0 /tmp/tmpz5gibxc_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpz5gibxc_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  $even = array_merge($even, array_reverse($odd));\n  return\
    \ $even;\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqvaunmyq.php:20\n\
    Stack trace:\n#0 /tmp/tmpqvaunmyq.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqvaunmyq.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l)/2);\n  sort($even);\n\
    \  return array_merge($even, $l);\n}\n</code>\n<|/ a tags=php,sorting |>\n<| c\
    \ |>\nThis doesn't work. Try it with `[5, 6, 3, 1]`.\n<|/ c |>\n<| c |>\n: It\
    \ works fine for me. Try it with `[5, 6, 3, 1]`.\n<|/ c |>\n<| c |>\n: It works\
    \ fine for me too. Try it with `[5, 6, 3, 1]`.\n<|/ c |>\n<| c |>\n: It works\
    \ fine for me too. Try it with `[5, 6, 3, 1]`.\n<|/ c |>\n<| c |>\n: It works\
    \ fine for me too. Try it with `[5, 6, 3, 1]`.\n<|/ c |>\n<| a tags=php,sorting\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp86t9esyr.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $even = array_slice($l, 0, count($l) / 2);\n  $odd = array_slice($l,\
    \ count($l) / 2);\n  return array_merge($even, array_reverse($odd));\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=sorting,php,arrays |>\n<code>\n$array = array(\"\
    a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"\
    n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\");\n\
    $array = array_unique($array);\n$array = array_values($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_flip($array);\n$array = array_flip($array);\n\
    $array = array_flip($array);\n$array = array_fli\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2_oowgp7.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_slice($l, 0, count($l) / 2);\n    $odd =\
    \ array_slice($l, count($l) / 2);\n    sort($even);\n    sort($odd);\n    return\
    \ array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogn1ctki.php:22\n\
    Stack trace:\n#0 /tmp/tmpogn1ctki.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpogn1ctki.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_fill(0, count($l), 0);\n    foreach ($l as\
    \ $i => $e) {\n        $even[$i] |= 1 << ($i % 2);\n    }\n    return array_merge(array_flip($l),\
    \ $even);\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpleq6tnno.php:22\n\
    Stack trace:\n#0 /tmp/tmpleq6tnno.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpleq6tnno.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n  $evens = array_fill(0, count($l), 0);\n  foreach ($l as $i\
    \ => $e) {\n    if ($i % 2 == 0) {\n      $evens[$i] += $e;\n    }\n  }\n  ksort($evens);\n\
    \  return array_intersect_key($l, array_flip($evens));\n}\n\nfunction candidate(...$args)\
    \ {\n    return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphmk1wuah.php:25\n\
    Stack trace:\n#0 /tmp/tmphmk1wuah.php(30): test()\n#1 {main}\n  thrown in /tmp/tmphmk1wuah.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array();\n    $odd = array();\n    foreach ($l\
    \ as $k => $v) {\n        if ($k % 2 == 0) {\n            $even[$k] = $v;\n  \
    \      } else {\n            $odd[$k] = $v;\n        }\n    }\n    return array_merge($even,\
    \ $odd);\n}\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7gkdow8b.php:26\n\
    Stack trace:\n#0 /tmp/tmp7gkdow8b.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp7gkdow8b.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $evens = array_fill(0, count($l), 0);\n    foreach ($l\
    \ as $k => $v) {\n        $evens[$k] = $k;\n    }\n    array_multisort($evens,\
    \ $l);\n    return $l;\n}\n\nfunction candidate(...$args) {\n    return sort_even(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3)) !== array(1, 2,\
    \ 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5, 2, -3, 3, 5, 0, 9, 1,\
    \ 123)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ffzo4ik.php:24\n\
    Stack trace:\n#0 /tmp/tmp0ffzo4ik.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0ffzo4ik.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// This function takes a list l and returns a list l' such that\n\
    // l' is identical to l in the odd indicies, while its values at the even indicies\
    \ are equal\n// to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunction\
    \ sort_even($l) {\n    $even = array_filter($l, function($e) { return $e % 2 ==\
    \ 0; });\n    $odd = array_filter($l, function($e) { return $e % 2 == 1; });\n\
    \    return array_merge($even, $odd);\n}\nfunction candidate(...$args) {\n   \
    \ return sort_even(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3)) !== array(1, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)) !== array(-10, 3, -5,\
    \ 2, -3, 3, 5, 0, 9, 1, 123)) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(array(5, 8, -12, 4, 23, 2, 3, 11, 12, -10)) !== array(-12, 8,\
    \ 3, 4, 5, 2, 12, 11, 23, -10)) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxf7xcpad.php:19\n\
    Stack trace:\n#0 /tmp/tmpxf7xcpad.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpxf7xcpad.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
