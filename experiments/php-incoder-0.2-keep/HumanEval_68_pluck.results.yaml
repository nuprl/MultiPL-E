name: HumanEval_68_pluck
language: php
results:
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n\
    \    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n$arr2 = [1,\
    \ 2, 3];\n$arr3 = [];\n$arr4 = [5, 0, 3, 0, 4, 2];\n$arr5 = [0, 2, 5, 6, 4, 3];\n\
    $arr6 = [0, 2, 5, 6, 4, 3, 1];\n$arr7 = [0, 2, 5, 6, 4, 3, 1];\n$arr8 = [0, 2,\
    \ 5, 6, 4, 3, 1];\n$arr9 = [0, 2, 5, 6, 4, 3, 1];\n$arr10 = [0, 2, 5, 6, 4, 3,\
    \ 1];\n$arr11 = [0, 2, 5, 6, 4, 3, 1];\n$arr12 = [0, 2, 5, 6, 4, 3, 1];\n$arr13\
    \ = [0, 2, 5, 6, 4, 3, 1];\n$arr14 = [0, 2, 5, 6, 4, 3, 1];\n$arr15 = [0, 2, 5,\
    \ 6, 4, 3, 1];\n$arr16 = [0, 2, 5, 6, 4, 3, 1];\n$arr17 = [0, 2, 5, 6, 4, 3, 1];\n\
    $arr18 = [0, 2, 5, 6, 4, 3, 1];\n$arr19 = [0, 2, 5, 6, 4, 3, 1];\n$arr20 = [0,\
    \ 2, 5, 6, 4, 3, 1];\n$arr21 = [0, 2, 5, 6, 4, 3, 1];\n$arr22 = [0, 2, 5, 6, 4,\
    \ 3, 1];\n$arr23 = [0, 2, 5, 6, 4, 3, 1];\n$arr24 = [0, 2, 5, 6, 4, 3, 1];\n$arr25\
    \ = [0, 2, 5, 6, 4, 3, 1];\n$arr26 = [0, 2, 5, 6, 4, 3, 1];\n$arr27 = [0, 2, 5,\
    \ 6, 4, 3, 1];\n$arr28 = [0, 2, 5, 6, 4, 3, 1];\n$arr29 = [0, 2, 5, 6, 4, 3, 1];\n\
    $arr30 = [0, 2, 5, 6, 4, 3, 1];\n$arr31 = [0, 2, 5, 6, 4, 3, 1];\n$arr32 = [0,\
    \ 2, 5, 6, 4, 3, 1];\n$arr33 = [0, 2, 5, 6, 4, 3, 1];\n$arr34 = [0, 2, 5, 6, 4,\
    \ 3, 1];\n$arr35 = [0, 2, 5, 6, 4, 3, 1];\n$arr36 = [0, 2, 5, 6, 4, 3, 1];\n$arr37\
    \ = [0, 2, 5, 6, 4, 3, 1];\n$arr38 = [0, 2, 5, 6, 4, 3, 1];\n$arr39 = [0, 2, 5,\
    \ 6, 4, 3, 1];\n$\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvonh23vs.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min = null;\n    $minIndex = null;\n    foreach ($arr as $key => $value)\
    \ {\n        if ($min === null || $value < $min) {\n            $min = $value;\n\
    \            $minIndex = $key;\n        }\n    }\n    $result[] = $min;\n    $result[]\
    \ = $minIndex;\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbez6lrdm.php:48\n\
    Stack trace:\n#0 /tmp/tmpbez6lrdm.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpbez6lrdm.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n    \
    \    return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[] = $value;\n        } else {\n            $result[]\
    \ = [$value, $key];\n        }\n    }\n    if (count($even) == 0) {\n        return\
    \ [];\n    }\n    $min = array_shift($even);\n    foreach ($even as $key => $value)\
    \ {\n        if ($value < $min) {\n            $min = $value;\n            $result[$key]\
    \ = $value;\n        }\n    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result\
    \ = pluck($arr);\nvar_dump($result);\n</code>\n<|/ a tags=php,arrays |>\n<| c\
    \ |>\nThis doesn't work if there are multiple nodes with the same smallest even\
    \ value.\n<|/ c |>\n<| c |>\nYes, you are right. I fixed my answer. Thanks for\
    \ pointing out.\n<|/ c |>\n<| c |>\nI added a solution that works with multiple\
    \ nodes with the same smallest even value.\n<|/ c |>\n<| a tags=php,arrays |>\n\
    <code>\n<?php\n$arr = [4,2,3];\n$even = array_filter($arr, function($v){\n   \
    \ return $v % 2 == 0;\n});\n$even = array_keys($even);\n$even = array_values($even);\n\
    $even = array_unique($even);\n$even = array_flip($even);\n$even = array_search($arr,\
    \ $even);\n$even = array_flip($even);\n$even = array_search($arr, $even);\n$even\
    \ = array_flip($even);\n$even = array_search($arr, $even);\n$even = array_flip($even);\n\
    $even = array_search($arr, $even);\n$even = array_flip($even);\n$even = array_search($arr,\
    \ $even);\n$even = array_flip($even);\n$even = array_search($arr, $even);\n$even\
    \ = array_flip($even);\n$even = array_search($arr, $even);\n$even = array_flip($even);\n\
    $even = array_search($arr, $even);\n$even = array_flip($even);\n$even = array_search($arr,\
    \ $even);\n$even = array_flip($even);\n$even = array_search($arr, $even);\n$even\
    \ = array_flip($even);\n$even = array_search($arr, $even);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpffpoc32o.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n   \
    \         $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3iodhfzm.php:42\n\
    Stack trace:\n#0 /tmp/tmp3iodhfzm.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp3iodhfzm.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0) return [];\n    $min = min($evens);\n    return\
    \ array_intersect_key($arr, function($v) use ($min){\n        return $v === $min\
    \ ? $v : $min;\n    });\n}\n\n$arr = [4,2,3];\n$arr2 = [1,2];\n$arr3 = [1,2,3];\n\
    $arr4 = [];\n$arr5 = [5,0,3,0,4,2];\n$arr6 = [5,0,3,0,4,2,1,2];\n$arr7 = [5,0,3,0,4,2,1,2];\n\
    $arr8 = [5,0,3,0,4,2,1,2];\n$arr9 = [5,0,3,0,4,2,1,2];\n$arr10 = [5,0,3,0,4,2,1,2];\n\
    $arr11 = [5,0,3,0,4,2,1,2];\n$arr12 = [5,0,3,0,4,2,1,2];\n$arr13 = [5,0,3,0,4,2,1,2];\n\
    $arr14 = [5,0,3,0,4,2,1,2];\n$arr15 = [5,0,3,0,4,2,1,2];\n$arr16 = [5,0,3,0,4,2,1,2];\n\
    $arr17 = [5,0,3,0,4,2,1,2];\n$arr18 = [5,0,3,0,4,2,1,2];\n$arr19 = [5,0,3,0,4,2,1,2];\n\
    $arr20 = [5,0,3,0,4,2,1,2];\n$arr21 = [5,0,3,0,4,2,1,2];\n$arr22 = [5,0,3,0,4,2,1,2];\n\
    $arr23 = [5,0,3,0,4,2,1,2];\n$arr24 = [5,0,3,0,4,2,1,2];\n$arr25 = [5,0,3,0,4,2,1,2];\n\
    $arr26 = [5,0,3,0,4,2,1,2];\n$arr27 = [5,0,3,0,4,2,1,2];\n$arr28 = [5,0,3,0,4,2,1,2];\n\
    $arr29 = [5,0,3,0,4,2,1,2];\n$arr30 = [5,0,3,0,4,2,1,2];\n$arr31 = [5,0,3,0,4,2,1,2];\n\
    $arr32 = [5,0,3,0,4,2,1,2];\n$arr33 = [5,0,3,0,4,2,1,2];\n$arr34 = [5,0,3,0,4,2,1,2];\n\
    $arr35 = [5,0,3,0,4,2,1,2];\n$arr36 = [5,0,3,0,4,2,1,2];\n$arr37 = [5,0,3,0,4,2,1,2];\n\
    $arr38 = [5,0,3,0,\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpep7i_1sv.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[] = $value;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $result[$min] = array_search($min, $even);\n\
    \    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [3] => 2\n    [2] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4wo2d03x.php:53\nStack trace:\n#0 /tmp/tmp4wo2d03x.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4wo2d03x.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_reduce($evens, function($min, $v){\n\
    \        return $v < $min ? $v : $min;\n    });\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => \n    [1] => \n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0ynp1yxg.php:51\nStack trace:\n#0 /tmp/tmp0ynp1yxg.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0ynp1yxg.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($num) { return $num % 2 === 0; });\n    if (count($evens) === 0) return\
    \ [];\n    $min = min($evens);\n    $index = array_search($min, $evens);\n   \
    \ return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsxj3tzka.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v & 1;});\n    if(count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpc3x37lq4.php:45\nStack trace:\n#0 /tmp/tmpc3x37lq4.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc3x37lq4.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    $even = array_filter($even);\n    $odd = array_filter($odd);\n\
    \    if (count($even) > 0) {\n        return $even;\n    }\n    if (count($odd)\
    \ > 0) {\n        return $odd;\n    }\n    return [];\n}\n\n$arr = [4, 2, 3];\n\
    $result = pluck($arr);\nvar_dump($result);\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpanotpxv3.php:56\nStack trace:\n#0 /tmp/tmpanotpxv3.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpanotpxv3.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 === 0; });\n    if (count($evens) === 0) return\
    \ [];\n    $minIndex = array_search(min($evens), $evens);\n    return [ $minIndex,\
    \ array_search($minIndex, $evens) ];\n}\n\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4wnevsn.php:39\n\
    Stack trace:\n#0 /tmp/tmpk4wnevsn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpk4wnevsn.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === 0){\n   \
    \     return [];\n    }\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){\n        return $v === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === 0){\n   \
    \     return [];\n    }\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){\n        return $v === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === 0){\n   \
    \     return [];\n    }\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){\n        return $v === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === 0){\n   \
    \     return [];\n    }\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){\n        return $v === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){\n        return $v === 0;\n \
    \   });\n    $evens = array_keys($evens);\n    if (count($evens) === \nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5bzbk6gn.php on line 105\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v%2==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v!==0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v!==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v!==0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v!==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v!==0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v!==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v!==0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v!==0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v!==0;\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoedzb2nv.php on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even values\n    $evens = array_keys($evens);\
    \ // get keys\n    $evens = array_flip($evens); // flip keys to get values\n \
    \   return array_intersect_key($arr, array_flip($evens)); // get intersection\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkz_2beia.php:39\n\
    Stack trace:\n#0 /tmp/tmpkz_2beia.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpkz_2beia.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    if (count($result)\
    \ == 0) {\n        return [];\n    }\n    $result[] = [min($result), array_search(min($result),\
    \ $result)];\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n    [2] => Array\n        (\n            [0]\
    \ => Array\n                (\n                    [0] => 2\n                \
    \    [1] => 1\n                )\n\n            [1] => 1\n        )\n\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpx3o4qpw5.php:49\nStack trace:\n\
    #0 /tmp/tmpx3o4qpw5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpx3o4qpw5.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [ $even, $index ];\n}\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0p9tjte.php:43\n\
    Stack trace:\n#0 /tmp/tmpe0p9tjte.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpe0p9tjte.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v & 1;});\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = array_reduce($evens, function($min, $v){return $min >\
    \ $v ? $min : $v;});\n    $index = array_search($min, $evens);\n    return [$min,\
    \ $index];\n}\n\n$arr = [4,2,3];\n$arr2 = [1,2,3];\n$arr3 = [0,5,0,3,0,4,2];\n\
    $arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n\nvar_dump(pluck($arr));\nvar_dump(pluck($arr2));\n\
    var_dump(pluck($arr3));\nvar_dump(pluck($arr4));\nvar_dump(pluck($arr5));\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=arrays,php,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $arr2 = [1,2,3];\n$arr3 = [0,5,0,3,0,4,2];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0,\
    \ 4, 2];\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpt9kmpuin.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_reduce($evens, function($min, $v){\n\
    \        return $min < $v ? $min : $v;\n    });\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_uy717b.php:45\n\
    Stack trace:\n#0 /tmp/tmp4_uy717b.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4_uy717b.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpo4wnm9tv.php:47\nStack trace:\n#0 /tmp/tmpo4wnm9tv.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo4wnm9tv.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = array_shift($even);\n    $index = array_shift($index);\n  \
    \  foreach ($even as $key => $value) {\n        if ($value < $min) {\n       \
    \     $min = $value;\n            $index = array_shift($index);\n        }\n \
    \   }\n    $result[] = [$min, $index];\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: array_shift() expects parameter 1 to be array, int given in\
    \ /tmp/tmpwj8vaift.php on line 45\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwj8vaift.php:56\nStack trace:\n#0 /tmp/tmpwj8vaift.php(66): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwj8vaift.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\nvar_dump($result);\n</code>\n<|/ a tags=php,arrays\
    \ |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr,\
    \ function($v){\n    return $v & 1;\n});\n$result = array_keys($result);\n$min\
    \ = min($result);\n$index = array_search($min, $result);\necho $min;\necho $index;\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nPlease add some explanation to your\
    \ answer such that others can learn from it\n<|/ c |>\n<| a |>\n<code>\n<?php\n\
    $arr = [4,2,3];\n$result = array_filter($arr, function($v){\n    return $v & 1;\n\
    });\n$result = array_keys($result);\n$min = min($result);\n$index = array_search($min,\
    \ $result);\necho $min;\necho $index;\n</code>\n<|/ a tags=php,arrays dscore=0\
    \ |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr,\
    \ function($v){\n    return $v & 1;\n});\n$result = array_keys($result);\n$min\
    \ = min($result);\n$index = array_search($min, $result);\necho $min;\necho $index;\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $result = array_filter($arr, function($v){\n    return $v & 1;\n});\n$result =\
    \ array_keys($result);\n$min = min($result);\n$index = array_search($min, $result);\n\
    echo $min;\necho $index;\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n<?php\n\
    $arr = [4,2,3];\n$result = array_filter($arr, function($v){\n    return $v & 1;\n\
    });\n$result = array_keys($result);\n$min = min($result);\n$index = array_search($min,\
    \ $result);\necho $min;\necho $index;\n</code>\n<|/ a tags=php,\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb640edh8.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $even = min($evens);\n    $index = array_search($even, $arr);\n    return\
    \ [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\"\
    ;\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 2\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpwzbzf8we.php:45\nStack trace:\n#0 /tmp/tmpwzbzf8we.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwzbzf8we.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 == 0;\n    });\n    if(count($evens) ==\
    \ 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 2\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpaijjjtbi.php:49\nStack trace:\n#0 /tmp/tmpaijjjtbi.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaijjjtbi.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) return [];\n    $min = array_reduce($evens, function($min, $num) {\n\
    \        return $min < $num ? $num : $min;\n    });\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc7ew9tkg.php:44\n\
    Stack trace:\n#0 /tmp/tmpc7ew9tkg.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpc7ew9tkg.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    $evens = array_keys($evens);\n\
    \    return $evens ? $evens[0] : [];\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2ye54mf.php:39\n\
    Stack trace:\n#0 /tmp/tmpi2ye54mf.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpi2ye54mf.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if(count($evens) ===\
    \ 0){\n        return [];\n    }\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $min = $evens[0];\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $min_index];\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsntn9rnr.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9km87hab.php:39\n\
    Stack trace:\n#0 /tmp/tmp9km87hab.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9km87hab.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0)\
    \ return [];\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3jb2ojiq.php:45\nStack trace:\n#0 /tmp/tmp3jb2ojiq.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3jb2ojiq.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = array_reduce($evens, function($min, $v) { return $min < $v ? $min\
    \ : $v; });\n    $index = array_search($min, $evens);\n    return [ $min, $index\
    \ ];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon5s0jmb.php:39\n\
    Stack trace:\n#0 /tmp/tmpon5s0jmb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpon5s0jmb.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyx5x6zyf.php:44\n\
    Stack trace:\n#0 /tmp/tmpyx5x6zyf.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpyx5x6zyf.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9d5yez_6.php:40\n\
    Stack trace:\n#0 /tmp/tmp9d5yez_6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp9d5yez_6.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n</code>\n<|/ a tags=php,arrays |>\n<|\
    \ c |>\nThis doesn't work if there are multiple nodes with the same smallest even\
    \ value.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify that\
    \ case.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$arr1\
    \ = [1,2,3];\n$arr2 = [];\n$arr3 = [];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n\
    $arr6 = [5, 0, 3, 0, 4, 2, 1];\n$arr7 = [5, 0, 3, 0, 4, 2, 1];\n$arr8 = [5, 0,\
    \ 3, 0, 4, 2, 1];\n$arr9 = [5, 0, 3, 0, 4, 2, 1];\n$arr10 = [5, 0, 3, 0, 4, 2,\
    \ 1];\n$arr11 = [5, 0, 3, 0, 4, 2, 1];\n$arr12 = [5, 0, 3, 0, 4, 2, 1];\n$arr13\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr14 = [5, 0, 3, 0, 4, 2, 1];\n$arr15 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr16 = [5, 0, 3, 0, 4, 2, 1];\n$arr17 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr18 = [5, 0, 3, 0, 4, 2, 1];\n$arr19 = [5, 0, 3, 0, 4, 2, 1];\n$arr20 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr21 = [5, 0, 3, 0, 4, 2, 1];\n$arr22 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr23 = [5, 0, 3, 0, 4, 2, 1];\n$arr24 = [5, 0, 3, 0, 4, 2, 1];\n$arr25\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr26 = [5, 0, 3, 0, 4, 2, 1];\n$arr27 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr28 = [5, 0, 3, 0, 4, 2, 1];\n$arr29 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr30 = [5, 0, 3, 0, 4, 2, 1];\n$arr31 = [5, 0, 3, 0, 4, 2, 1];\n$arr32 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr33 = [5, 0, 3, 0, 4, 2, 1];\n$arr34 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr35 = [5, 0, 3, 0, 4, 2, 1];\n$arr36 = [5, 0, 3, 0, 4, 2, 1];\n$arr37\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr38 = [5, 0, 3, 0, 4, 2, 1];\n$arr39 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7brkbszr.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $even = min($evens);\n    return array_filter($arr, function($v) use ($even)\
    \ { return $v & $even; });\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis\
    \ doesn't work if there are multiple nodes with the same smallest even value.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question to clarify what I'm looking\
    \ for.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify what I'm\
    \ looking for.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ what I'm looking for.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify what I'm looking for.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $arr = [4,2,3];\n$evens = array_filter($arr, function($v) { return $v & 1; });\n\
    $even = min($evens);\n$result = array_filter($arr, function($v) use ($even) {\
    \ return $v & $even; });\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n\
    <| c |>\nThis doesn't work if there are multiple nodes with the same smallest\
    \ even value.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ what I'm looking for.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $evens = array_filter($arr, function($v) { return $v & 1; });\n$even = min($evens);\n\
    $result = array_filter($arr, function($v) use ($even) { return $v & $even; });\n\
    print_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work\
    \ if there are multiple nodes with the same smallest even value.\n<|/ c |>\n<|\
    \ a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n$even = min($evens);\n$result = array_filter($arr,\
    \ function($v) use ($even) { return $v & $even; });\nprint_r($result);\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work if \nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo26d3x0u.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 == 0;});\n    if (count($evens) == 0) {\n       \
    \ return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n    return\
    \ [ $minIndex, array_search(min($evens), $evens) ];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgi_b1a6.php:40\n\
    Stack trace:\n#0 /tmp/tmptgi_b1a6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptgi_b1a6.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc097w14.php:39\n\
    Stack trace:\n#0 /tmp/tmpvc097w14.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpvc097w14.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpd70i1efz.php:45\nStack trace:\n#0 /tmp/tmpd70i1efz.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd70i1efz.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    $even_index = [];\n    $odd_index = [];\n    $even_smallest_value\
    \ = [];\n    $odd_smallest_value = [];\n    $smallest_value = [];\n    $smallest_index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $even_index[] = $key;\n      \
    \      $even_smallest_value[] = $value;\n            $smallest_value[] = $value;\n\
    \            $smallest_index[] = $key;\n        } else {\n            $odd[] =\
    \ $value;\n            $odd_index[] = $key;\n            $odd_smallest_value[]\
    \ = $value;\n            $smallest_value[] = $value;\n            $smallest_index[]\
    \ = $key;\n        }\n    }\n    $smallest_value = array_slice($smallest_value,\
    \ 0, 1);\n    $smallest_index = array_slice($smallest_index, 0, 1);\n    if (count($even)\
    \ == 0) {\n        return [];\n    }\n    $smallest_value = min($even_smallest_value);\n\
    \    $smallest_index = min($even_index);\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $smallest_value = $even[$smallest_index];\n\
    \    $smallest_index = $even_index[$smallest_index];\n    $\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp10k_v8lm.php on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n    \
    \    return [];\n    }\n    $min = array_reduce($evens, function($min, $n) { return\
    \ $min < $n ? $min : $n; });\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2snih1d.php:42\n\
    Stack trace:\n#0 /tmp/tmpn2snih1d.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpn2snih1d.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    $index = [];\n    $smallest = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[$key] = $value;\n\
    \        } else {\n            $odd[$key] = $value;\n        }\n    }\n    foreach\
    \ ($even as $key => $value) {\n        if ($smallest[$value] == null) {\n    \
    \        $smallest[$value] = $value;\n            $index[$value] = $key;\n   \
    \     }\n    }\n    foreach ($odd as $key => $value) {\n        if ($smallest[$value]\
    \ == null) {\n            $smallest[$value] = $value;\n            $index[$value]\
    \ = $key;\n        }\n    }\n    return $smallest;\n}\n\n$arr = [4, 2, 3];\n$arr2\
    \ = [1, 2, 3];\n$arr3 = [];\n$arr4 = [5, 0, 3, 0, 4, 2];\n$arr5 = [4, 2, 3];\n\
    $arr6 = [4, 2, 3];\n$arr7 = [4, 2, 3];\n$arr8 = [4, 2, 3];\n$arr9 = [4, 2, 3];\n\
    $arr10 = [4, 2, 3];\n$arr11 = [4, 2, 3];\n$arr12 = [4, 2, 3];\n$arr13 = [4, 2,\
    \ 3];\n$arr14 = [4, 2, 3];\n$arr15 = [4, 2, 3];\n$arr16 = [4, 2, 3];\n$arr17 =\
    \ [4, 2, 3];\n$arr18 = [4, 2, 3];\n$arr19 = [4, 2, 3];\n$arr20 = [4, 2, 3];\n\
    $arr21 = [4, 2, 3];\n$arr22 = [4, 2, 3];\n$arr23 = [4, 2, 3];\n$arr24 = [4, 2,\
    \ 3];\n$arr25 = [4, 2, 3];\n$arr26 = [4, 2, 3];\n$arr27 = [4, 2, 3];\n$arr28 =\
    \ [4, 2, 3];\n$arr29 = [4, 2, 3];\n$arr30 = [4, 2, 3];\n$arr31 = [4, 2, 3];\n\
    $arr32 = [4, 2, 3];\n$arr33 = [4, 2, 3];\n$arr34 = [4, 2, 3];\n$arr35 = [4, 2,\
    \ 3];\n$arr36 = [4, 2, 3];\n$arr37 = [4, 2, 3];\n$arr38 = [4, 2, 3];\n$arr39 =\
    \ [4, 2, 3];\n$arr40 = [4, 2, 3];\n$arr41 = [4, 2, 3];\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3a92t4ye.php:100\n\
    Stack trace:\n#0 /tmp/tmp3a92t4ye.php(110): test()\n#1 {main}\n  thrown in /tmp/tmp3a92t4ye.php\
    \ on line 100\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28rykvgo.php:40\n\
    Stack trace:\n#0 /tmp/tmp28rykvgo.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp28rykvgo.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) {\n        return\
    \ [];\n    }\n    $even = min($evens);\n    return array_filter($arr, function($v)\
    \ use ($even) { return $v === $even; });\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\
    $arr = [1, 2, 3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2,\
    \ 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, \nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptfogvkjv.php on line 91\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n\
    \    return [$evens[$minIndex], $minIndex];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1s4nv0k.php:42\n\
    Stack trace:\n#0 /tmp/tmpt1s4nv0k.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpt1s4nv0k.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuj1590ev.php:39\n\
    Stack trace:\n#0 /tmp/tmpuj1590ev.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpuj1590ev.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v & 1;});\n    if (count($evens) === 0){return [];}\n \
    \   $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65xuwhw6.php:39\n\
    Stack trace:\n#0 /tmp/tmp65xuwhw6.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp65xuwhw6.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\n$arr = [1,2,3];\n\
    $result = pluck($arr);\nprint_r($result);\n\n$arr = [];\n$result = pluck($arr);\n\
    print_r($result);\n\n$arr = [5, 0, 3, 0, 4, 2];\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\nArray\n(\n    [0] => Array\n        (\n\
    \            [0] => 2\n            [1] => 1\n        )\n\n)\nArray\n(\n)\nArray\n\
    (\n    [0] => Array\n        (\n            [0] => 0\n            [1] => 1\n \
    \       )\n\n    [1] => Array\n        (\n            [0] => 0\n            [1]\
    \ => 3\n        )\n\n    [2] => Array\n        (\n            [0] => 4\n     \
    \       [1] => 4\n        )\n\n    [3] => Array\n        (\n            [0] =>\
    \ 2\n            [1] => 5\n        )\n\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpi8snb8no.php:57\nStack trace:\n#0 /tmp/tmpi8snb8no.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi8snb8no.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\"\
    ;\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 2\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp44g2s42d.php:45\nStack trace:\n#0 /tmp/tmp44g2s42d.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp44g2s42d.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [ $evens[$minIndex], $minIndex ];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy02owa0u.php:43\n\
    Stack trace:\n#0 /tmp/tmpy02owa0u.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpy02owa0u.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = $value;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycw8z4h9.php:41\n\
    Stack trace:\n#0 /tmp/tmpycw8z4h9.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpycw8z4h9.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $smallest_value = min($even);\n    $smallest_index\
    \ = array_search($smallest_value, $even);\n    if (count($even) == 0) {\n    \
    \    return [];\n    }\n    $smallest_value = min($odd);\n    $smallest_index\
    \ = array_search($smallest_value, $odd);\n    return [$smallest_value, $smallest_index];\n\
    }\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nI like this solution,\
    \ but I believe it can be optimized a bit. For example, you can just return the\
    \ smallest value from the even array and from the odd array and compare them.\
    \ No need to search the array twice.\n<|/ c |>\n<| c |>\nYes, you are right. I've\
    \ edited my answer to reflect your suggestion.\n<|/ c |>\n<| c |>\nI believe this\
    \ solution is O(n^2) because of the nested loops.\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. I've edited my answer to reflect your suggestion.\n<|/ c |>\n<| a\
    \ dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n$arr1 = [1,2,3];\n$arr2 = [1,2,3];\n\
    $arr3 = [1,2,3];\n$arr4 = [1,2,3];\n$arr5 = [1,2,3];\n$arr6 = [1,2,3];\n$arr7\
    \ = [1,2,3];\n$arr8 = [1,2,3];\n$arr9 = [1,2,3];\n$arr10 = [1,2,3];\n$arr11 =\
    \ [1,2,3];\n$arr12 = [1,2,3];\n$arr13 = [1,2,3];\n$arr14 = [1,2,3];\n$arr15 =\
    \ [1,2,3];\n$arr16 = [1,2,3];\n$arr17 = [1,2,3];\n$arr18 = [1,2,3];\n$arr19 =\
    \ [1,2,3];\n$arr20 = [1,2,3];\n$arr21 = [1,2,3];\n$arr22 = [1,2,3];\n$arr23 =\
    \ [1,2,3];\n$arr24 = [1,2,3];\n$arr25 = [1,2,3];\n$arr26 = [1,2,3];\n$arr27 =\
    \ [1,2,3];\n$arr28 = [1,2,3];\n$arr29 = [1,2,3];\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy37jpvyz.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $even = min($evens);\n    $index =\
    \ array_search($even, $arr);\n    return [ $even, $index ];\n}\n</code>\n<|/ a\
    \ tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't work if there are multiple\
    \ nodes with the same smallest even value.\n<|/ c |>\n<| c |>\nYes, I know. That's\
    \ why I said \"If multiple nodes with the same smallest even value are found return\
    \ the node that has smallest index.\" I didn't want to complicate the answer too\
    \ much. I'll edit my answer to make it more clear.\n<|/ c |>\n<| c |>\nI added\
    \ an example to my answer.\n<|/ c |>\n<| c |>\nThanks for your answer. Your solution\
    \ is very elegant. I am still trying to understand how it works. I understand\
    \ that array_filter will filter out all even numbers and then min will return\
    \ the smallest one. I am not able to understand how array_search will return the\
    \ index of the smallest even number. Can you please explain how array_search works?\n\
    <|/ c |>\n<| c |>\n`array_search` returns the index of the first element in the\
    \ array that matches the search value. So if the search value is `2`, it will\
    \ return `0` because `2` is the first element in the array that has even value.\
    \ If there are multiple elements in the array that match the search value, it\
    \ will return the index of the first element that matches the search value.\n\
    <|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $arr2 = [1,5,3,7,8,9,10,11,12,13,14,15,16,17,18,19,20];\n$arr3 = [];\n$arr4 =\
    \ [];\n$arr5 = [];\n$arr6 = [];\n$arr7 = [];\n$arr8 = [];\n$arr9 = [];\n$arr10\
    \ = [];\n$arr11 = [];\n$arr12 = [];\n$arr13 = [];\n$arr14 = [];\n$arr15 = [];\n\
    $arr16 = [];\n$arr17 = [];\n$arr18 = [];\n$arr19 = [];\n$arr20 = [];\n$arr21 =\
    \ [];\n$arr22 = [];\n$arr23 = [];\n$arr24 = [];\n$arr25 = [];\n$arr26 = [];\n\
    $arr27 = [];\n$arr28 = [];\n$arr29 = [];\n$arr30 = [];\n$arr31 = [];\n$arr32 =\
    \ [];\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwk_5y0aw.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    $even = array_filter($even);\n    $odd = array_filter($odd);\n\
    \    $even = array_keys($even);\n    $odd = array_keys($odd);\n    $even = array_values($even);\n\
    \    $odd = array_values($odd);\n    $even = array_unique($even);\n    $odd =\
    \ array_unique($odd);\n    $even = array_values($even);\n    $odd = array_values($odd);\n\
    \    $even = array_unique($even);\n    $odd = array_unique($odd);\n    $even =\
    \ array_values($even);\n    $odd = array_values($odd);\n    $even = array_unique($even);\n\
    \    $odd = array_unique($odd);\n    $even = array_values($even);\n    $odd =\
    \ array_values($odd);\n    $even = array_unique($even);\n    $odd = array_unique($odd);\n\
    \    $even = array_values($even);\n    $odd = array_values($odd);\n    $even =\
    \ array_unique($even);\n    $odd = array_unique($odd);\n    $even = array_values($even);\n\
    \    $odd = array_values($odd);\n    $even = array_unique($even);\n    $odd =\
    \ array_unique($odd);\n    $even = array_values($even);\n    $odd = array_values($odd);\n\
    \    $even = array_unique($even);\n    $odd = array_unique($odd);\n    $even =\
    \ array_values($even);\n    $odd = array_values($odd);\n    $even = array_unique($even);\n\
    \    $odd = array_unique($odd);\n    $even = array_values($even);\n    $odd =\
    \ array_values($odd);\n    $even = array_unique($even);\n    $odd = array_unique($odd);\n\
    \    $even = array_values($even);\n    $odd = array_values($odd);\n    $even =\
    \ array_unique($even);\n    $odd = array_unique($odd);\n    $even = array_values($even);\n\
    \    $odd = array_values($odd);\n    $even = array_unique($even);\n    $odd =\
    \ array_unique($odd);\n    $even = array_values($even);\n    $odd = array_values($odd);\n\
    \    $even = array_unique($even);\n    $odd = array_unique($odd);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkqk_54q_.php on line 104\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $smallest = null;\n    $smallest_index = null;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($smallest === null || $value < $smallest) {\n    \
    \        $smallest = $value;\n            $smallest_index = $key;\n        }\n\
    \    }\n    $result[] = $smallest;\n    $result[] = $smallest_index;\n    return\
    \ $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzeqsk1qr.php:51\nStack trace:\n#0 /tmp/tmpzeqsk1qr.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzeqsk1qr.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $smallest = min($evens);\n    $index\
    \ = array_search($smallest, $evens);\n    return [ $smallest, $index ];\n}\n\n\
    $arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple nodes with the same smallest\
    \ even value.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ that case.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ that case.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ that case.\n<|/ c |>\n<| c |>\nI added a comment to the question to clarify\
    \ that case.\n<|/ c |>\n<| a tags=php,arrays,algorithm |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpurxh6pqo.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays |>\n<code>\n\
    <?php\n$arr = [4,2,3];\n$result = array_filter($arr, function($v){\n    return\
    \ $v & 1;\n});\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile\
    \ this code may answer the question, providing additional context regarding why\
    \ and/or how this code answers the question improves its long-term value.\n<|/\
    \ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr,\
    \ function($v){\n    return $v & 1;\n});\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$arr = [4,2,3];\n$result\
    \ = array_filter($arr, function($v){\n    return $v & 1;\n});\nprint_r($result);\n\
    </code>\n<|/ a tags=php,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [4,2,3];\n$result = array_filter($arr, function($v){\n    return\
    \ $v & 1;\n});\nprint_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ why and/or how this code answers the question improves its long-term value.\n\
    <|/ c |>\n<| a tags=php,arrays |>\n<code>\n<?php\n$arr = [4,2,3];\n$result = array_filter($arr,\
    \ function($v){\n    return $v & 1;\n});\nprint_r($result);\n</code>\n<|/ a dscore=0\
    \ \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3rz7o1lo.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even values\n    if (count($evens)\
    \ === 0) return [];\n    $smallest_even = min($evens); // smallest even value\n\
    \    $smallest_index = array_search($smallest_even, $evens); // smallest index\n\
    \    return [$smallest_even, $smallest_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiz0y5can.php:40\n\
    Stack trace:\n#0 /tmp/tmpiz0y5can.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpiz0y5can.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    sort($result);\n \
    \   return $result[0][1];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpwvvw6b.php:43\n\
    Stack trace:\n#0 /tmp/tmpfpwvvw6b.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpfpwvvw6b.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0)\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzpv6e1i.php:43\n\
    Stack trace:\n#0 /tmp/tmpdzpv6e1i.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdzpv6e1i.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n    \
    \    return [];\n    }\n    $min = array_reduce($evens, function($min, $n) { return\
    \ $min < $n ? $min : $n; });\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgr805vy.php:42\n\
    Stack trace:\n#0 /tmp/tmpzgr805vy.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpzgr805vy.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 === 0) {\n            $even[$key] = $value;\n        }\
    \ else {\n            $index[$key] = $value;\n        }\n    }\n    foreach ($even\
    \ as $key => $value) {\n        $result[$key] = min($value, $index[$key]);\n \
    \   }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => \n    [1] => \n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8fkh87dk.php:52\nStack trace:\n#0 /tmp/tmp8fkh87dk.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8fkh87dk.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 == 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v > 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v > 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v > 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = array_flip($evens);\n\
    \    $evens = array_filter($evens, function($v){return $v > 0;});\n    $evens\
    \ = array_keys($evens);\n    $evens = array_flip($evens);\n    $evens = array_filter($evens,\
    \ function($v){return $v > 0;});\n    $evens = array_keys($evens);\n    $evens\
    \ = array_flip($evens);\n    $evens = array_filter($evens, function($v){return\
    \ $v > 0;});\n    $evens = array_keys($evens);\n    $evens = \nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkf7z8sy5.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpveearzr0.php:43\n\
    Stack trace:\n#0 /tmp/tmpveearzr0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpveearzr0.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpftf15pk5.php:43\nStack trace:\n#0 /tmp/tmpftf15pk5.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpftf15pk5.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 == 0;});\n    if (count($evens) == 0) {\n       \
    \ return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even values\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens); // find the smallest even value\n\
    \    $min_index = array_search($min, $evens); // find the smallest index\n   \
    \ return [ $min, $min_index ];\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw28obd7a.php:40\n\
    Stack trace:\n#0 /tmp/tmpw28obd7a.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpw28obd7a.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $min_index =\
    \ array_search($min, $arr);\n    return [$min, $min_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpty5ct7v3.php:44\n\
    Stack trace:\n#0 /tmp/tmpty5ct7v3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpty5ct7v3.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    $even = array_filter($even);\n    $odd = array_filter($odd);\n\
    \    if (count($even) == 0) {\n        return [];\n    }\n    $min = array_shift($even);\n\
    \    $min_index = array_search($min, $odd);\n    if ($min_index == -1) {\n   \
    \     return [];\n    }\n    return [$min, $min_index];\n}\n\n$arr = [4, 2, 3];\n\
    $result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => \n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpskyysz8x.php:60\nStack trace:\n#0 /tmp/tmpskyysz8x.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpskyysz8x.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 === 0;});\n    if(count($evens) === 0){\n       \
    \ return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidks8ie8.php:43\n\
    Stack trace:\n#0 /tmp/tmpidks8ie8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpidks8ie8.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = $evens[0];\n    $min_index = 0;\n    foreach\
    \ ($evens as $key => $value) {\n        if ($value < $min) {\n            $min\
    \ = $value;\n            $min_index = $key;\n        }\n    }\n    return [$min,\
    \ $min_index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\";\n\
    print_r($result);\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => \n    [1] => 0\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxusd5g84.php:55\nStack trace:\n#0 /tmp/tmpxusd5g84.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxusd5g84.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        } else {\n            $result[] = $value;\n        }\n    }\n\
    \    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $result[$index[$min]] = [min($even), $index[$min]];\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [] => Array\n        (\n            [0] =>\
    \ 2\n            [1] => \n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpnkaaikit.php:55\nStack trace:\n#0 /tmp/tmpnkaaikit.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnkaaikit.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpqbks0m6q.php:45\nStack trace:\n#0 /tmp/tmpqbks0m6q.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqbks0m6q.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0t5cetjl.php:39\n\
    Stack trace:\n#0 /tmp/tmp0t5cetjl.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp0t5cetjl.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_reduce($evens, function($min, $v){\n\
    \        return $min > $v ? $min : $v;\n    });\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9d7akuxm.php:45\n\
    Stack trace:\n#0 /tmp/tmp9d7akuxm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9d7akuxm.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 === 0;});\n    if (count($evens) === 0){\n      \
    \  return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n   \
    \ return [$evens[$minIndex], $minIndex];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqi3wtoe.php:39\n\
    Stack trace:\n#0 /tmp/tmpgqi3wtoe.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpgqi3wtoe.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) {\n        return\
    \ [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz6_831g1.php:40\n\
    Stack trace:\n#0 /tmp/tmpz6_831g1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpz6_831g1.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $evens);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 0\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4y5tin13.php:48\nStack trace:\n#0 /tmp/tmp4y5tin13.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4y5tin13.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 == 0;});\n    if (count($evens) === 0){\n       \
    \ return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/11598278)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to find the\
    \ smallest even number in the array and return the index. He also stated that\
    \ he wants to return the smallest even number in the array if there are multiple\
    \ even numbers in the array. He also stated that he wants to return an empty array\
    \ if there are no even numbers in the array. He also stated that he wants to return\
    \ the smallest even number in the array if there are multiple even numbers in\
    \ the array. He also stated that he wants to return the smallest even number in\
    \ the array if there are multiple even numbers in the array. He also stated that\
    \ he wants to return the smallest even number in the array if there are multiple\
    \ even numbers in the array. He also stated that he wants to return the smallest\
    \ even number in the array if there are multiple even numbers in the array. He\
    \ also stated that he wants to return the smallest even number in the array if\
    \ there are multiple even numbers in the array. He also stated that he wants to\
    \ return the smallest even number in the array if there are multiple even numbers\
    \ in the array. He also stated that he wants to return the smallest even number\
    \ in the array if there are multiple even numbers in the array. He also stated\
    \ that he wants to return the smallest even number in the array if there are multiple\
    \ even numbers in the array. He also stated that he wants to return the smallest\
    \ even number in the array if there are multiple even numbers in the array. He\
    \ also stated that he wants to return the smallest even number in the array if\
    \ there are multiple even numbers in the array. He also stated that he wants to\
    \ return the smallest even number in the array if there are multiple even numbers\
    \ in the array. He also stated that he wants to return the smallest even number\
    \ in the array if there are multiple even numbers in the array. He also stated\
    \ that he wants to return the smallest even number in the array if there are multiple\
    \ even numbers in the array. He also stated that he wants to return the smallest\
    \ even number in the array if there are \nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptlmdx7ig.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0){\n        return [];\n    }\n    $evens = array_flip($evens);\n\
    \    $min = min($evens);\n    $min_index = array_search($min, $evens);\n    return\
    \ [$min, $min_index];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgm3e1hc1.php:45\n\
    Stack trace:\n#0 /tmp/tmpgm3e1hc1.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpgm3e1hc1.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n   \
    \         $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsehhluvm.php:41\n\
    Stack trace:\n#0 /tmp/tmpsehhluvm.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsehhluvm.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 === 0;});\n    if (count($evens) === 0){\n      \
    \  return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe4208kky.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if(count($evens) ===\
    \ 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. Unfortunately, I cannot use any built-in functions. I\
    \ edited my question to make it more clear.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that uses no built-in functions. I hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Unfortunately, I cannot use any built-in functions. I edited\
    \ my question to make it more clear.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ uses no built-in functions. I hope it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n$arr = [4,2,3];\n$evens = array_filter($arr, function($v){\n    return\
    \ $v % 2 === 0;\n});\nif(count($evens) === 0){\n    return [];\n}\n$even = min($evens);\n\
    $index = array_search($even, $arr);\nreturn [$even, $index];\n</code>\n<|/ a tags=arrays,php\
    \ |>\n<| c |>\nThanks for your answer. Unfortunately, I cannot use any built-in\
    \ functions. I edited my question to make it more clear.\n<|/ c |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr, function($v){\n\
    \    return $v % 2 === 0;\n});\nif(count($evens) === 0){\n    return [];\n}\n\
    $even = min($evens);\n$index = array_search($even, $arr);\nreturn [$even, $index];\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $evens = array_filter($arr, function($v){\n    return $v % 2 === 0;\n});\nif(count($evens)\
    \ === 0){\n    return [];\n}\n$even = min($evens);\n$index = array_search($even,\
    \ $arr);\nreturn [$even, $index];\n</code>\n<|/ a dscore=0 |>\n<| c \nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7a0h4tjn.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqpk21ew5.php:40\n\
    Stack trace:\n#0 /tmp/tmpqpk21ew5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqpk21ew5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n\
    \    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4, 2, 3];\n$result =\
    \ pluck($arr);\nprint_r($result);\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjvdnmkg9.php:46\nStack trace:\n#0 /tmp/tmpjvdnmkg9.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjvdnmkg9.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 === 0) {\n            $even[] = $value;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    if (count($even) === 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $result[$min] = array_search($min, $even);\n\
    \    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\n\
    \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [3] => 2\n    [2] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwhjvnhtd.php:54\nStack trace:\n#0 /tmp/tmpwhjvnhtd.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwhjvnhtd.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $even = array_filter($even);\n    $odd = array_filter($odd);\n\
    \    $smallest_value = min($even);\n    $smallest_index = array_search($smallest_value,\
    \ $even);\n    if (empty($even) || empty($odd)) {\n        return [];\n    }\n\
    \    $smallest_value = min($odd);\n    $smallest_index = array_search($smallest_value,\
    \ $odd);\n    return [$smallest_value, $smallest_index];\n}\n\n$arr = [4, 2, 3];\n\
    $result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpe_w91r3t.php:57\nStack trace:\n#0 /tmp/tmpe_w91r3t.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpe_w91r3t.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v%2==0;});\n    if(count($evens)==0) return [];\n    $minIndex\
    \ = array_search(min($evens), $evens);\n    return [$evens[$minIndex], $minIndex];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n){return $n % 2 == 0;});\n    $evens = array_keys($evens);\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $min = $evens[0];\n \
    \   $minIndex = 0;\n    foreach ($evens as $key => $value) {\n        if ($value\
    \ < $min) {\n            $min = $value;\n            $minIndex = $key;\n     \
    \   }\n    }\n    return [$min, $minIndex];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpts2of1px.php:49\n\
    Stack trace:\n#0 /tmp/tmpts2of1px.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpts2of1px.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min = null;\n    $minIndex = null;\n    foreach ($arr as $key => $value)\
    \ {\n        if ($min === null || $value < $min) {\n            $min = $value;\n\
    \            $minIndex = $key;\n        }\n    }\n    $result[] = $min;\n    $result[]\
    \ = $minIndex;\n    return $result;\n}\n\nfunction candidate(...$args) {\n   \
    \ return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3w36mz5.php:48\n\
    Stack trace:\n#0 /tmp/tmpy3w36mz5.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpy3w36mz5.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n\
    \    return [$evens[$minIndex], $minIndex];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptle1nbf_.php:43\n\
    Stack trace:\n#0 /tmp/tmptle1nbf_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptle1nbf_.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfsdc97_t.php:39\n\
    Stack trace:\n#0 /tmp/tmpfsdc97_t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfsdc97_t.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0)\
    \ return [];\n    $min = array_reduce($evens, function($min, $v){\n        return\
    \ $min > $v ? $min : $v;\n    });\n    $index = array_search($min, $evens);\n\
    \    return [ $min, $index ];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpg9qup38r.php:47\nStack trace:\n#0 /tmp/tmpg9qup38r.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpg9qup38r.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5,0,3,0,4,2];\n\
    $arr = [5,0,3,0,4,2,1];\n$arr = [5,0,3,0,4,2,1,0];\n$arr = [5,0,3,0,4,2,1,0,1];\n\
    $arr = [5,0,3,0,4,2,1,0,1,2];\n$arr = [5,0,3,0,4,2,1,0,1,0,1];\n$arr = [5,0,3,0,4,2,1,0,1,0,1,2,3];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,1,2,3,4,5];\n$arr = [5,0,3,0,4,2,1,0,1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppjpfggbf.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thanks for your answer. Your solution works perfectly fine for small arrays. But\
    \ for large arrays it takes too much time. Is there any way to optimize it?\n\
    <|/ c |>\n<| c |>\nI added a solution that should be faster for large arrays.\
    \ I tested it on large arrays and it took less than a second.\n<|/ c |>\n<| c\
    \ |>\nThanks for your answer. Your solution works perfectly fine for small arrays.\
    \ But for large arrays it takes too much time. Is there any way to optimize it?\n\
    <|/ c |>\n<| c |>\nI added a solution that should be faster for large arrays.\
    \ I tested it on large arrays and it took less than a second.\n<|/ c |>\n<| a\
    \ tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n$arr1 = [1,2,3];\n\
    $arr2 = [];\n$arr3 = [];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n$arr6 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr7 = [5, 0, 3, 0, 4, 2, 1];\n$arr8 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr9 = [5, 0, 3, 0, 4, 2, 1];\n$arr10 = [5, 0, 3, 0, 4, 2, 1];\n$arr11\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr12 = [5, 0, 3, 0, 4, 2, 1];\n$arr13 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr14 = [5, 0, 3, 0, 4, 2, 1];\n$arr15 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr16 = [5, 0, 3, 0, 4, 2, 1];\n$arr17 = [5, 0, 3, 0, 4, 2, 1];\n$arr18 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr19 = [5, 0, 3, 0, 4, 2, 1];\n$arr20 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr21 = [5, 0, 3, 0, 4, 2, 1];\n$arr22 = [5, 0, 3, 0, 4, 2, 1];\n$arr23\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr24 = [5, 0, 3, 0, 4, 2, 1];\n$arr25 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr26 = [5, 0, 3, 0, 4, 2, 1];\n$arr27 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr28 = [5, 0, 3, 0, 4, 2, 1];\n$arr29\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkxvpr2wt.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[$value] = $value;\n        \
    \    $index[$value] = $key;\n        }\n    }\n    foreach ($even as $key => $value)\
    \ {\n        $result[] = $value;\n    }\n    foreach ($index as $key => $value)\
    \ {\n        $result[] = $key;\n    }\n    return $result;\n}\n\n$arr = [4, 2,\
    \ 3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 4\n    [3] => 2\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpwsx_wwba.php:54\nStack\
    \ trace:\n#0 /tmp/tmpwsx_wwba.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpwsx_wwba.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[$value] = $value;\n        \
    \    $index[$value] = $key;\n        } else {\n            $result[$value] = $value;\n\
    \        }\n    }\n    if (count($even) > 0) {\n        $smallest = $even[0];\n\
    \        $smallest_index = 0;\n        foreach ($even as $key => $value) {\n \
    \           if ($value < $smallest) {\n                $smallest = $value;\n \
    \               $smallest_index = $key;\n            }\n        }\n        $result[$smallest]\
    \ = $smallest_index;\n    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result\
    \ = pluck($arr);\nprint_r($result);\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [3] => 3\n    [] => 0\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmfdfktxe.php:61\nStack trace:\n#0 /tmp/tmpmfdfktxe.php(71):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmfdfktxe.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = $evens[0];\n    $minIndex = 0;\n    foreach ($evens as $index => $v)\
    \ {\n        if ($v === $min) {\n            $minIndex = $index;\n        }\n\
    \    }\n    return [$min, $minIndex];\n}\n\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplu_b39ct.php:45\n\
    Stack trace:\n#0 /tmp/tmplu_b39ct.php(55): test()\n#1 {main}\n  thrown in /tmp/tmplu_b39ct.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if(count($evens) ===\
    \ 0){\n        return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n\
    \    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n\
    $arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n$arr = [5,0,3,0,4,2];\n$arr = [5,0,3,0,4,2,1];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo8bzzav_.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 === 0;});\n    if (count($evens) === 0) {\n     \
    \   return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n  \
    \  return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = array_reduce($evens, function($min, $v) { return $min > $v ? $min\
    \ : $v; });\n    $index = array_search($min, $evens);\n    return [ $min, $index\
    \ ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 3\n    [1] => 2\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp1p6pv_co.php:45\nStack trace:\n#0 /tmp/tmp1p6pv_co.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1p6pv_co.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzndzn743.php:43\n\
    Stack trace:\n#0 /tmp/tmpzndzn743.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpzndzn743.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtk9uq6x.php:44\n\
    Stack trace:\n#0 /tmp/tmpbtk9uq6x.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbtk9uq6x.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp10ds9i2q.php:47\nStack trace:\n#0 /tmp/tmp10ds9i2q.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp10ds9i2q.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_reduce($evens, function($min, $v){\n\
    \        return $min > $v ? $min : $v;\n    });\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpazhwpm4q.php:49\nStack trace:\n#0 /tmp/tmpazhwpm4q.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpazhwpm4q.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpklpt4fnv.php:43\nStack trace:\n#0 /tmp/tmpklpt4fnv.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpklpt4fnv.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_trbe1rz.php:39\n\
    Stack trace:\n#0 /tmp/tmp_trbe1rz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_trbe1rz.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v & 1;});\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n\
    $arr = [5, 0, 3, 0, 4, 2];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr\
    \ = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, 0];\n$arr = [5, 0, 3, 0,\
    \ 4, 2, 0];\n$arr = [5, 0, 3, 0, 4, 2, \nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjq8u0rbz.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[] = $value;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    if (count($even) > 0) {\n        $result = $even;\n\
    \    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpt4e364tk.php:51\nStack trace:\n#0 /tmp/tmpt4e364tk.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpt4e364tk.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $smallest = null;\n    $smallest_index = 0;\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($smallest === null || $value < $smallest) {\n       \
    \     $smallest = $value;\n            $smallest_index = $key;\n        }\n  \
    \  }\n    $result[] = $smallest;\n    $result[] = $smallest_index;\n    return\
    \ $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nvar_dump($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(1)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9o9kg6gk.php:51\nStack trace:\n#0 /tmp/tmp9o9kg6gk.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9o9kg6gk.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) {\n        return\
    \ [];\n    }\n    $min = array_reduce($evens, function($min, $v) { return $min\
    \ < $v ? $min : $v; });\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\nI came up with this solution:\n<code>\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp29edvzs8.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkki34jls.php:40\n\
    Stack trace:\n#0 /tmp/tmpkki34jls.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpkki34jls.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7zjisz0.php:43\n\
    Stack trace:\n#0 /tmp/tmpd7zjisz0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpd7zjisz0.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[$value] = $key;\n        } else {\n           \
    \ $result[$value] = $key;\n        }\n    }\n    if (count($even) == 0) {\n  \
    \      return [];\n    }\n    $min = min($even);\n    $result[$min] = array_search($min,\
    \ $even);\n    return $result;\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [3] => 2\n    [0] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphtmcguus.php:53\nStack trace:\n#0 /tmp/tmphtmcguus.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphtmcguus.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $smallest_value = min($even);\n    $smallest_index\
    \ = array_search($smallest_value, $even);\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $smallest_value = min($odd);\n    $smallest_index = array_search($smallest_value,\
    \ $odd);\n    return [$smallest_value, $smallest_index];\n}\n$arr = [4,2,3];\n\
    $result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqztz_29f.php:54\nStack trace:\n#0 /tmp/tmpqztz_29f.php(64):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqztz_29f.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even numbers\n    $evens = array_keys($evens);\
    \ // get keys\n    $evens = array_flip($evens); // flip keys to get values\n \
    \   $evens = array_filter($evens, function($v) { return $v > 0; });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = min($evens); // get smallest\
    \ value\n    $index = array_search($min, $evens); // get index of smallest value\n\
    \    return [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1b8cwva.php:45\n\
    Stack trace:\n#0 /tmp/tmpu1b8cwva.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpu1b8cwva.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even values\n    if (count($evens)\
    \ === 0) return [];\n    $minIndex = array_search(min($evens), $evens); // get\
    \ the smallest index\n    return [$evens[$minIndex], $minIndex];\n}\n\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpatx3jyfv.php:39\n\
    Stack trace:\n#0 /tmp/tmpatx3jyfv.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpatx3jyfv.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpj_sx2_dv.php:45\nStack trace:\n#0 /tmp/tmpj_sx2_dv.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpj_sx2_dv.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) {\n        return\
    \ [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n    return [\
    \ $minIndex, array_search($minIndex, $evens) ];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzc5vt9nt.php:40\n\
    Stack trace:\n#0 /tmp/tmpzc5vt9nt.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpzc5vt9nt.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n\n$arr = [4,2,3];\n$arr2 = [1,5,3,7,8,9];\n\n$arr3 = array_filter($arr2,\
    \ function($v){\n    return $v & 1;\n});\n\n$arr4 = array_filter($arr3, function($v){\n\
    \    return $v & 1;\n});\n\n$arr5 = array_filter($arr4, function($v){\n    return\
    \ $v & 1;\n});\n\n$arr6 = array_filter($arr5, function($v){\n    return $v & 1;\n\
    });\n\n$arr7 = array_filter($arr6, function($v){\n    return $v & 1;\n});\n\n\
    $arr8 = array_filter($arr7, function($v){\n    return $v & 1;\n});\n\n$arr9 =\
    \ array_filter($arr8, function($v){\n    return $v & 1;\n});\n\n$arr10 = array_filter($arr9,\
    \ function($v){\n    return $v & 1;\n});\n\n$arr11 = array_filter($arr10, function($v){\n\
    \    return $v & 1;\n});\n\n$arr12 = array_filter($arr11, function($v){\n    return\
    \ $v & 1;\n});\n\n$arr13 = array_filter($arr12, function($v){\n    return $v &\
    \ 1;\n});\n\n$arr14 = array_filter($arr13, function($v){\n    return $v & 1;\n\
    });\n\n$arr15 = array_filter($arr14, function($v){\n    return $v & 1;\n});\n\n\
    $arr16 = array_filter($arr15, function($v){\n    return $v & 1;\n});\n\n$arr17\
    \ = array_filter($arr16, function($v){\n    return $v & 1;\n});\n\n$arr18 = array_filter($arr17,\
    \ function($v){\n    return $v & 1;\n});\n\n$arr19 = array_filter($arr18, function($v){\n\
    \    return $v & 1;\n});\n\n$arr20 = array_filter($arr19, function($v){\n    return\
    \ $v & 1;\n});\n\n$arr21 = array_filter($arr20, function($v){\n    return $v &\
    \ 1;\n});\n\n$\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy31n1lr4.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 == 0;\n    });\n    if (count($evens) ===\
    \ 0){\n        return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n\
    \    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $smallest_value = min($even);\n    $smallest_key\
    \ = array_search($smallest_value, $even);\n    $smallest_value = min($odd);\n\
    \    $smallest_key = array_search($smallest_value, $odd);\n    return [$smallest_value,\
    \ $smallest_key];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujuf86eh.php:49\n\
    Stack trace:\n#0 /tmp/tmpujuf86eh.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpujuf86eh.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpppjsyka8.php:40\n\
    Stack trace:\n#0 /tmp/tmpppjsyka8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpppjsyka8.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp389n4uf3.php:43\n\
    Stack trace:\n#0 /tmp/tmp389n4uf3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp389n4uf3.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = $evens[0];\n    $minIndex = 0;\n    foreach($evens\
    \ as $v){\n        if($v < $min){\n            $min = $v;\n            $minIndex\
    \ = $v;\n        }\n    }\n    return [$min, $minIndex];\n}\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabcluygv.php:49\n\
    Stack trace:\n#0 /tmp/tmpabcluygv.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpabcluygv.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even values\n    if (count($evens)\
    \ === 0) return [];\n    $min = array_reduce($evens, function($min, $v) { return\
    \ $min < $v ? $min : $v; });\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwt61f80.php:40\n\
    Stack trace:\n#0 /tmp/tmpgwt61f80.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgwt61f80.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $minIndex = array_search(min($evens), $evens);\n    return [$evens[$minIndex],\
    \ $minIndex];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwwc6r__4.php:39\n\
    Stack trace:\n#0 /tmp/tmpwwc6r__4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwwc6r__4.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 === 0) {\n            $even[] = $value;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    foreach ($even as $key => $value) {\n       \
    \ $result[$value] = $key;\n    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n\
    $result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [3] => 2\n    [4] => 0\n    [2] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpuoph6sfw.php:51\nStack trace:\n#0 /tmp/tmpuoph6sfw.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuoph6sfw.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $min = $arr[0];\n    $minIndex = 0;\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            if ($value < $min) {\n      \
    \          $min = $value;\n                $minIndex = $key;\n            }\n\
    \        }\n    }\n    $result[] = $min;\n    $result[] = $minIndex;\n    return\
    \ $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\n\
    \n$arr = [1, 2, 3];\n$result = pluck($arr);\nprint_r($result);\n\n$arr = [];\n\
    $result = pluck($arr);\nprint_r($result);\n\n$arr = [5, 0, 3, 0, 4, 2];\n$result\
    \ = pluck($arr);\nprint_r($result);\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj0m_6mso.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[] = $value;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    foreach ($result as $key => $value) {\n  \
    \      if ($value == $min) {\n            $result[$key] = $key;\n        }\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fp2nrpf.php:53\n\
    Stack trace:\n#0 /tmp/tmp7fp2nrpf.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp7fp2nrpf.php\
    \ on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr =\
    \ [5, 0, 3, 0, 4, 2];\n$arr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnmtjo4th.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (count($even) > 0) {\n        $result = $even[0];\n\
    \        $result = array_search($result, $index);\n    }\n    return $result;\n\
    }\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"$result\\n\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjk9d7j4e.php:52\n\
    Stack trace:\n#0 /tmp/tmpjk9d7j4e.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpjk9d7j4e.php\
    \ on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n\
    $arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5,\
    \ 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr\
    \ = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n\
    $arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4,\
    \ 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3,\
    \ 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5,\
    \ 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr\
    \ = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n\
    $arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4,\
    \ 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3,\
    \ 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5,\
    \ 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr\
    \ = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n\
    $arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4,\
    \ 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [5, 1, 3,\
    \ 6, 4, 2];\n$arr = [5, 1, 3, 6, 4, 2];\n$arr = [\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphrv20yws.php on line 86\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $even = min($evens);\n    return array_filter($arr,\
    \ function($num) use ($even) {\n        return $num === $even;\n    });\n}\n\n\
    $arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [1] => 2\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmppbr48rhl.php:48\nStack trace:\n#0 /tmp/tmppbr48rhl.php(58): test()\n\
    #1 {main}\n  thrown in /tmp/tmppbr48rhl.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    sort($result);\n \
    \   return $result[0];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp49uzewnt.php:48\nStack trace:\n#0 /tmp/tmp49uzewnt.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp49uzewnt.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n    \
    \    return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work if the array is empty or has only even values.\n<|/ c |>\n<|\
    \ c |>\nI added a solution that handles empty arrays and even values.\n<|/ c |>\n\
    <| c |>\nI added a solution that handles empty arrays and even values.\n<|/ c\
    \ |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4_8zvxxw.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpsk5r7hmk.php:45\nStack trace:\n#0 /tmp/tmpsk5r7hmk.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsk5r7hmk.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[] = $value;\n        } else {\n            $odd[]\
    \ = $value;\n        }\n    }\n    $even = array_filter($even);\n    $odd = array_filter($odd);\n\
    \    $even = array_keys($even);\n    $odd = array_keys($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $odd = array_flip($odd);\n    $even = array_flip($even);\n    $odd = array_flip($odd);\n\
    \    $even = array_flip($even);\n    $odd = array_flip($odd);\n    $even = array_flip($even);\n\
    \    $\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjg6i3ete.php on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even numbers\n    if (count($evens)\
    \ === 0) return [];\n    $min = min($evens); // find the smallest even number\n\
    \    $index = array_search($min, $evens); // find the index\n    return [ $min,\
    \ $index ];\n}\n</code>\n<|/ a tags=php,arrays,algorithm |>\n<| c |>\nThis doesn't\
    \ work if there are multiple nodes with the same smallest even value.\n<|/ c |>\n\
    <| c |>\nI added a comment to the question to clarify.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question to clarify.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question to clarify.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify.\n<|/ c |>\n<| a dscore=1 |>\nI came up with this solution:\n<code>\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi8egxqjn.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3okt3fpw.php:47\nStack trace:\n#0 /tmp/tmp3okt3fpw.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3okt3fpw.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}\n</code>\n<|/ a tags=arrays,php,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple nodes with the same smallest\
    \ even value.\n<|/ c |>\n<| c |>\nI added a comment to the question asking for\
    \ clarification.\n<|/ c |>\n<| c |>\nI added a comment to the question asking\
    \ for clarification.\n<|/ c |>\n<| c |>\nI added a comment to the question asking\
    \ for clarification.\n<|/ c |>\n<| c |>\nI added a comment to the question asking\
    \ for clarification.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnl8gnziy.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $smallest = min($evens);\n    $index = array_search($smallest, $evens);\n\
    \    return [ $smallest, $index ];\n}\n\n$arr = [4,2,3];\n$arr2 = [1,2,3];\n$arr3\
    \ = [0,5,0,3,0,4,2];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n\n$tests = [\n\
    \    [$arr],\n    [$arr2],\n    [$arr3],\n    [$arr4],\n    [$arr5],\n];\n\nforeach\
    \ ($tests as $test) {\n    var_dump(pluck($test[0]));\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the array is empty. Try it with `[1,2,3]`.\n\
    <|/ c |>\n<| c |>\nI added a test case for an empty array. Thanks for pointing\
    \ it out.\n<|/ c |>\n<| c |>\nThis doesn't work if the array is empty. Try it\
    \ with `[1,2,3]`.\n<|/ c |>\n<| c |>\nI added a test case for an empty array.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| c |>\nI added a test case for an empty\
    \ array. Thanks for pointing it out.\n<|/ c |>\n<| a |>\n<code>\n<?php\n\n$arr\
    \ = [4,2,3];\n$arr2 = [1,2,3];\n$arr3 = [0,5,0,3,0,4,2];\n$arr4 = [];\n$arr5 =\
    \ [5, 0, 3, 0, 4, 2];\n\n$tests = [\n    [$arr],\n    [$arr2],\n    [$arr3],\n\
    \    [$arr4],\n    [$arr5],\n];\n\nforeach ($tests as $test) {\n    var_dump(pluck($test[0]));\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjw4oe8y1.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $even = min($evens);\n    $index = array_search($even, $arr);\n    return\
    \ [$even, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkinrj92.php:40\n\
    Stack trace:\n#0 /tmp/tmpnkinrj92.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnkinrj92.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0)\
    \ return [];\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n\n$arr = [4,2,3];\nvar_dump(pluck($arr));\n$arr\
    \ = [1,2,3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n$arr\
    \ = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\n\
    var_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4,\
    \ 2, 0];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2, 0];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2, 0];\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n\
    \  int(1)\n  [1]=>\n  int(0)\n}\narray(0) {\n}\narray(2) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n\
    \  [1]=>\n  int(2)\n}\narray(2) {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\narray(2)\
    \ {\n  [0]=>\n  int(3)\n  [1]=>\n  int(2)\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbvpkzjrg.php:98\nStack trace:\n#0 /tmp/tmpbvpkzjrg.php(108):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbvpkzjrg.php on line 98\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $evens = array_keys($evens);\n    if (count($evens) === 0) return [];\n \
    \   $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\n$arr = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr = [5, 0, 3, 0, 4, 2, 1];\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqudsaq2g.php:92\n\
    Stack trace:\n#0 /tmp/tmpqudsaq2g.php(102): test()\n#1 {main}\n  thrown in /tmp/tmpqudsaq2g.php\
    \ on line 92\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n\
    \    return [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsiki_3d3.php:42\n\
    Stack trace:\n#0 /tmp/tmpsiki_3d3.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpsiki_3d3.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 === 0) {\n            $even[] = $value;\n        } else {\n            $result[$value]\
    \ = $key;\n        }\n    }\n    if (count($even) > 0) {\n        $result = array_intersect_key($result,\
    \ array_flip($even));\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpysb3k00n.php:48\n\
    Stack trace:\n#0 /tmp/tmpysb3k00n.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpysb3k00n.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_shift($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 3\n    [1] => 2\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbjkpf3s_.php:47\nStack trace:\n#0 /tmp/tmpbjkpf3s_.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbjkpf3s_.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = array_reduce($evens, function($min, $v) { return $min < $v ? $min\
    \ : $v; });\n    $index = array_search($min, $evens);\n    return [$min, $index];\n\
    }\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjokvxftq.php:40\n\
    Stack trace:\n#0 /tmp/tmpjokvxftq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjokvxftq.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = array_reduce($evens, function($carry,\
    \ $num) {\n        return $num < $carry ? $num : $carry;\n    });\n    $index\
    \ = array_search($min, $evens);\n    return [$min, $index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg48ecynh.php:46\n\
    Stack trace:\n#0 /tmp/tmpg48ecynh.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpg48ecynh.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_reduce($evens, function($carry, $v){\n\
    \        return $carry < $v ? $carry : $v;\n    });\n    $index = array_search($min,\
    \ $evens);\n    return [ $min, $index ];\n}\n\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeztxu1s_.php:46\n\
    Stack trace:\n#0 /tmp/tmpeztxu1s_.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpeztxu1s_.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp415tx6_5.php:45\nStack trace:\n#0 /tmp/tmp415tx6_5.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp415tx6_5.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    $even_index = [];\n    $odd_index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[$key]\
    \ = $value;\n            $even_index[$key] = $key;\n        } else {\n       \
    \     $odd[$key] = $value;\n            $odd_index[$key] = $key;\n        }\n\
    \    }\n    $smallest_value = min($even);\n    $smallest_index = array_search($smallest_value,\
    \ $even);\n    $smallest_value_odd = min($odd);\n    $smallest_index_odd = array_search($smallest_value_odd,\
    \ $odd);\n    if ($smallest_value == $smallest_value_odd) {\n        if ($smallest_value\
    \ == 0) {\n            return [$smallest_value, $smallest_index];\n        } else\
    \ {\n            return [$smallest_value, $smallest_index];\n        }\n    }\n\
    \    if ($smallest_value == 0) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index_odd) {\n        return [$smallest_value,\
    \ $smallest_index];\n    }\n    if ($smallest_value == $smallest_index) {\n  \
    \      return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_value_odd) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index_odd) {\n        return [$smallest_value,\
    \ $smallest_index];\n    }\n    if ($smallest_value == $smallest_index) {\n  \
    \      return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_value_odd) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index_odd) {\n        return [$smallest_value,\
    \ $smallest_index];\n    }\n    if ($smallest_value == $smallest_index) {\n  \
    \      return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_value_odd) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index_odd) {\n        return [$smallest_value,\
    \ $smallest_index];\n    }\n    if ($smallest_value == $smallest_index) {\n  \
    \      return [$smallest_value, $smallest_index];\n    }\n    if ($smallest_value\
    \ == $smallest_value_odd) {\n        return [$smallest_value, $smallest_index];\n\
    \    }\n    if ($smallest_value == $smallest_index_odd) {\n        return [$smallest_value,\
    \ $smallest_index];\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpi3v3xx1h.php on line 108\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $index = array_search($min, $even);\n    $result[]\
    \ = $min;\n    $result[] = $index;\n    return $result;\n}\n\n$arr = [4, 2, 3];\n\
    $result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => 1\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpuouc6p1q.php:56\nStack trace:\n#0 /tmp/tmpuouc6p1q.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuouc6p1q.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpd2dx1ip5.php:45\nStack trace:\n#0 /tmp/tmpd2dx1ip5.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd2dx1ip5.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if(count($evens) ===\
    \ 0){\n        return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n</code>\n<|/ a tags=php,arrays,algorithm\
    \ |>\n<| c |>\nThis doesn't work if there are multiple nodes with the same smallest\
    \ even value\n<|/ c |>\n<| c |>\nYes, I noticed that after I posted my answer.\
    \ I'll edit my answer in a minute.\n<|/ c |>\n<| c |>\nI edited my answer to include\
    \ a solution that works with multiple nodes with the same smallest even value.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n$arr = [4,2,3];\n$arr1 = [1,2,3];\n$arr2 = [];\n\
    $arr3 = [5,0,3,0,4,2];\n$arr4 = [];\n$arr5 = [5,0,3,0,4,2];\n$arr6 = [5,0,3,0,4,2];\n\
    $arr7 = [5,0,3,0,4,2];\n$arr8 = [5,0,3,0,4,2];\n$arr9 = [5,0,3,0,4,2];\n$arr10\
    \ = [5,0,3,0,4,2];\n$arr11 = [5,0,3,0,4,2];\n$arr12 = [5,0,3,0,4,2];\n$arr13 =\
    \ [5,0,3,0,4,2];\n$arr14 = [5,0,3,0,4,2];\n$arr15 = [5,0,3,0,4,2];\n$arr16 = [5,0,3,0,4,2];\n\
    $arr17 = [5,0,3,0,4,2];\n$arr18 = [5,0,3,0,4,2];\n$arr19 = [5,0,3,0,4,2];\n$arr20\
    \ = [5,0,3,0,4,2];\n$arr21 = [5,0,3,0,4,2];\n$arr22 = [5,0,3,0,4,2];\n$arr23 =\
    \ [5,0,3,0,4,2];\n$arr24 = [5,0,3,0,4,2];\n$arr25 = [5,0,3,0,4,2];\n$arr26 = [5,0,3,0,4,2];\n\
    $arr27 = [5,0,3,0,4,2];\n$arr28 = [5,0,3,0,4,2];\n$arr29 = [5,0,3,0,4,2];\n$arr30\
    \ = [5,0,3,0,4,2];\n$arr31 = [5,0,3,0,4,2];\n$arr32 = [5,0,3,0,4,2];\n$arr33 =\
    \ [5,0,3,0,4,2];\n$arr34 = [5,0,3,0,4,2];\n$arr35 = [5,0,3,\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxew49ish.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n    \
    \    return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work if the array\
    \ has duplicate values. For example, if `[1,2,2,3]` is passed in, it will return\
    \ `[2,1]` instead of `[1,2]`.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify that duplicate values should be ignored.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question to clarify that duplicate values should be ignored.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question to clarify that duplicate\
    \ values should be ignored.\n<|/ c |>\n<| c |>\nI added a comment to the question\
    \ to clarify that duplicate values should be ignored.\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\n$array = [4,2,3];\n$result = array_filter($array, function($v){\n    return\
    \ $v % 2 == 0;\n});\n$result = array_keys($result);\nprint_r($result);\n</code>\n\
    <|/ a dscore=1 tags=php,arrays |>\n<| c |>\nThis doesn't work if the array has\
    \ duplicate values. For example, if `[1,2,2,3]` is passed in, it will return `[2,1]`\
    \ instead of `[1,2]`.\n<|/ c |>\n<| c |>\nI added a comment to the question to\
    \ clarify that duplicate values should be ignored.\n<|/ c |>\n<| c |>\nI added\
    \ a comment to the question to clarify that duplicate values should be ignored.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n$array = [4,2,3];\n$result = array_filter($array,\
    \ function($v){\n    return $v % 2 == 0;\n});\n$result = array_keys($result);\n\
    print_r($result);\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't work\
    \ if the array has duplicate values. For example, if `[1,2,2,3]` is passed in,\
    \ it will return `[2,1]` instead of `[1,2]`.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question to clarify that duplicate values should be ignored.\n<|/ c |>\n\
    <| a tags=php,arrays |>\n<code>\n<?php\n$array = [4,2,3];\n$result = array_filter($array,\
    \ function($v){\n    return $v\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvxvdfhc9.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    echo \"<pre>\";\nprint_r($result);\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 === 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (count($even) === 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $indexMin = array_search($min, $even);\n \
    \   $result[] = $min;\n    $result[] = $indexMin;\n    return $result;\n}\n\n\
    $arr = [4, 2, 3];\n$result = pluck($arr);\nvar_dump($result);\n\n$arr = [1, 2,\
    \ 3];\n$result = pluck($arr);\nvar_dump($result);\n\n$arr = [];\n$result = pluck($arr);\n\
    var_dump($result);\n\n$arr = [5, 0, 3, 0, 4, 2];\n$result = pluck($arr);\nvar_dump($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your code works well\
    \ for small arrays, but for large arrays it takes too much time. My array has\
    \ about 500 000 elements and it takes about 30 seconds to execute your code. Do\
    \ you know any way to make it faster?\n<|/ c |>\n<| c |>\nI added a code snippet\
    \ that uses `array_search` instead of `array_filter`\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Your code works well for small arrays, but for large arrays\
    \ it takes too much time. My array has about 500 000 elements and it takes about\
    \ 30 seconds to execute your code. Do you know any way to make it faster?\n<|/\
    \ c |>\n<| c |>\nI added a code snippet that uses `array_search` instead of `array_filter`\n\
    <|/ c |>\n<| c |>\nThanks for your answer. Your code works well for small arrays,\
    \ but for large arrays it takes too much time. My array has about 500 000 elements\
    \ and it takes about 30 seconds to execute your code. Do you know any way to make\
    \ it faster?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9auz4ioe.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $smallest_value = min($even);\n    $smallest_key\
    \ = array_search($smallest_value, $even);\n    $smallest_value = $even[$smallest_key];\n\
    \    $smallest_key = array_search($smallest_value, $odd);\n    $smallest_value\
    \ = $odd[$smallest_key];\n    return [$smallest_value, $smallest_key];\n}\n\n\
    $arr = [4, 2, 3];\n$result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => \n    [1] => \n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_aax_pf3.php:55\nStack trace:\n#0 /tmp/tmp_aax_pf3.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_aax_pf3.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0)\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\nfunction candidate(...$args) {\n  \
    \  return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zkrm55t.php:43\n\
    Stack trace:\n#0 /tmp/tmp1zkrm55t.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1zkrm55t.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpaqc8yf69.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    $even_index = [];\n    $odd_index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[$key]\
    \ = $value;\n            $even_index[$key] = $key;\n        } else {\n       \
    \     $odd[$key] = $value;\n            $odd_index[$key] = $key;\n        }\n\
    \    }\n    $smallest_value = min($even);\n    $smallest_index = array_search($smallest_value,\
    \ $even);\n    if ($smallest_index === false) {\n        return [];\n    }\n \
    \   $smallest_value = min($odd);\n    $smallest_index = array_search($smallest_value,\
    \ $odd);\n    if ($smallest_index === false) {\n        return [];\n    }\n  \
    \  $smallest_value = min($even, $odd);\n    $smallest_index = array_search($smallest_value,\
    \ $even);\n    if ($smallest_index === false) {\n        return [];\n    }\n \
    \   $smallest_value = min($odd, $even);\n    $smallest_index = array_search($smallest_value,\
    \ $odd);\n    if ($smallest_index === false) {\n        return [];\n    }\n  \
    \  $smallest_value = min($even, $odd, $even, $odd);\n    $smallest_index = array_search($smallest_value,\
    \ $even);\n    if ($smallest_index === false) {\n        return [];\n    }\n \
    \   return [$smallest_value, $smallest_index];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6nluzls.php:74\n\
    Stack trace:\n#0 /tmp/tmpe6nluzls.php(84): test()\n#1 {main}\n  thrown in /tmp/tmpe6nluzls.php\
    \ on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[$key] = $value;\n          \
    \  $index[$key] = $key;\n        } else {\n            $result[$key] = $value;\n\
    \        }\n    }\n    foreach ($even as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    foreach ($index as $key => $value) {\n        $result[$key]\
    \ = $value;\n    }\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [2] => 3\n    [0] => 0\n    [1] => 1\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6mtuar45.php:56\nStack trace:\n#0 /tmp/tmp6mtuar45.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6mtuar45.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\necho \"$result[0]\\\
    n\";\necho \"$result[1]\\n\";\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "3\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp53kmms12.php:44\n\
    Stack trace:\n#0 /tmp/tmp53kmms12.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp53kmms12.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0)\
    \ {\n        return [];\n    }\n    $even = min($evens);\n    return array_filter($arr,\
    \ function($v) use ($even){\n        return $v & $even;\n    });\n}\n\n$arr =\
    \ [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5,0,3,0,4,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n$arr = [5,0,3,0,4,2,1,2];\n\
    $arr = [5,0,3,0,4,2,1,2];\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppd80eqra.php:87\n\
    Stack trace:\n#0 /tmp/tmppd80eqra.php(97): test()\n#1 {main}\n  thrown in /tmp/tmppd80eqra.php\
    \ on line 87\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 === 0; });\n    if (count($evens) === 0) return\
    \ [];\n    $even = min($evens);\n    $index = array_search($even, $arr);\n   \
    \ return [$even, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n</code>\n<|/ a |>\n<| c |>\nThis solution doesn't work if\
    \ there are multiple nodes with the same smallest even value\n<|/ c |>\n<| c |>\n\
    I added a solution that works with multiple nodes with the same smallest even\
    \ value.\n<|/ c |>\n<| a tags=arrays,php |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp16hb78_p.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    $result = $even[0];\n    $index = $index[0];\n\
    \    if (count($even) > 1) {\n        $result = min($even);\n        $index =\
    \ array_search($result, $even);\n    }\n    return [$result, $index];\n}\n\n$arr\
    \ = [4,2,3];\n$result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\necho\
    \ \"</pre>\";\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,algorithm |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpee5v795j.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp467t15xp.php:40\n\
    Stack trace:\n#0 /tmp/tmp467t15xp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp467t15xp.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v & 1;});\n    if (count($evens) === 0){\n        return\
    \ [];\n    }\n    $even = min($evens);\n    return array_filter($arr, function($v)\
    \ use ($even){return $v & $even;});\n}\n\n$arr = [4,2,3];\nvar_dump(pluck($arr));\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n\
    \n$arr = [4,2,3];\n$evens = array_filter($arr, function($v){return $v & 1;});\n\
    if (count($evens) === 0){\n    return [];\n}\n$even = min($evens);\nreturn array_filter($arr,\
    \ function($v) use ($even){return $v & $even;});\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp06t4xjj6.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n\
    $result = pluck($arr);\necho \"<pre>\";\nprint_r($result);\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 1\n)\n</pre>"
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if(count($evens) === 0){\n\
    \        return [];\n    }\n    $minIndex = array_search(min($evens), $evens);\n\
    \    return [$evens[$minIndex], $minIndex];\n}\n\n$arr = [4,2,3];\n$result = pluck($arr);\n\
    print_r($result);\n</code>\n<|/ a |>\n<| c |>\nI like this solution, however it\
    \ fails for me on large arrays. I tested it on [4,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    <|/ c |>\n<| c |>\nIt fails because of the `array_filter` call. `array_filter`\
    \ will filter out any element that does not have a `&` bitwise operator. Since\
    \ `&` has a higher precedence than `==`, it will evaluate to `($v & 1)` instead\
    \ of `($v == 1)`. See [this answer](https://stackoverflow.com/a/470925/157957)\
    \ for more details.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I updated\
    \ the answer to fix the issue.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require `array_filter`\n<|/ c |>\n<| a |>\nHere's a solution that doesn't require\
    \ array_filter or array_search:\n<code>\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgp37yrax.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[$value] = $key;\n        } else {\n           \
    \ $result[$value] = $key;\n        }\n    }\n    asort($even);\n    foreach ($even\
    \ as $key => $value) {\n        $result[] = $value;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99xeg2od.php:48\n\
    Stack trace:\n#0 /tmp/tmp99xeg2od.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp99xeg2od.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    $evens = array_keys($evens);\n\
    \    if (count($evens) === 0) {\n        return [];\n    }\n    $min = $evens[0];\n\
    \    $minIndex = 0;\n    foreach ($evens as $key => $value) {\n        if ($value\
    \ < $min) {\n            $min = $value;\n            $minIndex = $key;\n     \
    \   }\n    }\n    return [$min, $minIndex];\n}\nfunction candidate(...$args) {\n\
    \    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvpvd3sog.php:50\n\
    Stack trace:\n#0 /tmp/tmpvpvd3sog.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpvpvd3sog.php\
    \ on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = array_reduce($evens, function($min, $v) { return $min < $v ? $min\
    \ : $v; });\n    return array_filter($arr, function($v) use ($min) { return $v\
    \ === $min; });\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_m8j1mo.php:39\n\
    Stack trace:\n#0 /tmp/tmp3_m8j1mo.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3_m8j1mo.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 === 0) {\n   \
    \         $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmplnpb5o7p.php:45\nStack trace:\n#0 /tmp/tmplnpb5o7p.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplnpb5o7p.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $smallest = min($evens);\n    $index = array_search($smallest, $evens);\n\
    \    return [$smallest, $index];\n}\n\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6g45n_i6.php:40\n\
    Stack trace:\n#0 /tmp/tmp6g45n_i6.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6g45n_i6.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0){\n        return [];\n    }\n    $minIndex = array_search(min($evens),\
    \ $evens);\n    return [ $minIndex, min($evens) ];\n}\n\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmokzubmt.php:43\n\
    Stack trace:\n#0 /tmp/tmpmokzubmt.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmokzubmt.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $even = min($evens);\n    $index = array_search($even, $arr);\n    return\
    \ [$even, $index];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhi299ha.php:40\n\
    Stack trace:\n#0 /tmp/tmpnhi299ha.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnhi299ha.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = array_reduce($evens, function($min, $v){\n\
    \        return $min > $v ? $min : $v;\n    });\n    return array_filter($arr,\
    \ function($v) use ($min){\n        return $v & $min;\n    });\n}\n\n$arr = [4,2,3];\n\
    $arr2 = [1, 2];\n$arr3 = [1, 2, 3];\n$arr4 = [];\n$arr5 = [5, 0, 3, 0, 4, 2];\n\
    $arr6 = [5, 0, 3, 0, 4, 2, 1];\n$arr7 = [5, 0, 3, 0, 4, 2, 1];\n$arr8 = [5, 0,\
    \ 3, 0, 4, 2, 1];\n$arr9 = [5, 0, 3, 0, 4, 2, 1];\n$arr10 = [5, 0, 3, 0, 4, 2,\
    \ 1];\n$arr11 = [5, 0, 3, 0, 4, 2, 1];\n$arr12 = [5, 0, 3, 0, 4, 2, 1];\n$arr13\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr14 = [5, 0, 3, 0, 4, 2, 1];\n$arr15 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr16 = [5, 0, 3, 0, 4, 2, 1];\n$arr17 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr18 = [5, 0, 3, 0, 4, 2, 1];\n$arr19 = [5, 0, 3, 0, 4, 2, 1];\n$arr20 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr21 = [5, 0, 3, 0, 4, 2, 1];\n$arr22 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr23 = [5, 0, 3, 0, 4, 2, 1];\n$arr24 = [5, 0, 3, 0, 4, 2, 1];\n$arr25\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr26 = [5, 0, 3, 0, 4, 2, 1];\n$arr27 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr28 = [5, 0, 3, 0, 4, 2, 1];\n$arr29 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr30 = [5, 0, 3, 0, 4, 2, 1];\n$arr31 = [5, 0, 3, 0, 4, 2, 1];\n$arr32 = [5,\
    \ 0, 3, 0, 4, 2, 1];\n$arr33 = [5, 0, 3, 0, 4, 2, 1];\n$arr34 = [5, 0, 3, 0, 4,\
    \ 2, 1];\n$arr35 = [5, 0, 3, 0, 4, 2, 1];\n$arr36 = [5, 0, 3, 0, 4, 2, 1];\n$arr37\
    \ = [5, 0, 3, 0, 4, 2, 1];\n$arr38 = [5, 0, 3, 0, 4, 2, 1];\n$arr39 = [5, 0, 3,\
    \ 0, 4, 2, 1];\n$arr40 = [5, 0, 3, 0, 4, 2, 1];\n$arr41 = [5, 0, 3, 0, 4, 2, 1];\n\
    $arr42 = [5, 0, 3, 0, 4, 2, 1];\n$arr43 = [5, 0, 3, 0, 4, 2, 1];\n$arr44 = [5,\
    \ 0, 3, 0, \nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyk0a7aiq.php on line 86\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    sort($result);\n \
    \   return $result[0][1];\n}\n\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy07em81v.php:43\n\
    Stack trace:\n#0 /tmp/tmpy07em81v.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpy07em81v.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[$value] = $key;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi19iutyr.php:41\n\
    Stack trace:\n#0 /tmp/tmpi19iutyr.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpi19iutyr.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    if (count($result)\
    \ == 0) {\n        return [];\n    }\n    $result[$result[0][0] >> 1] = $result[0][1];\n\
    \    return $result;\n}\n\n$arr = [4, 2, 3];\n$result = pluck($arr);\nvar_dump($result);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "array(3) {\n  [0]=>\n  array(2) {\n    [0]=>\n    int(4)\n    [1]=>\n \
    \   int(0)\n  }\n  [1]=>\n  array(2) {\n    [0]=>\n    int(2)\n    [1]=>\n   \
    \ int(1)\n  }\n  [2]=>\n  int(0)\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_m11y9uq.php:49\nStack trace:\n#0 /tmp/tmp_m11y9uq.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_m11y9uq.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $result[] = [$value, $key];\n        }\n    }\n    return $result;\n\
    }\n\n$arr = [4,2,3];\n$result = pluck($arr);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => Array\n        (\n            [0] => 4\n         \
    \   [1] => 0\n        )\n\n    [1] => Array\n        (\n            [0] => 2\n\
    \            [1] => 1\n        )\n\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpenlufc_b.php:45\nStack trace:\n#0 /tmp/tmpenlufc_b.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpenlufc_b.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($n) { return $n % 2 == 0; });\n    if (count($evens) == 0) {\n    \
    \    return [];\n    }\n    $even = min($evens);\n    $index = array_search($even,\
    \ $arr);\n    return [$even, $index];\n}\n\nfunction candidate(...$args) {\n \
    \   return pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $even = [];\n  \
    \  $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[$key] = $value;\n        } else {\n            $odd[$key]\
    \ = $value;\n        }\n    }\n    $even = array_filter($even);\n    $odd = array_filter($odd);\n\
    \    $even = array_keys($even);\n    $odd = array_keys($odd);\n    if (count($even)\
    \ == 0) {\n        return [];\n    }\n    if (count($odd) == 0) {\n        return\
    \ $even;\n    }\n    $smallest_value = $even[0];\n    $smallest_index = 0;\n \
    \   foreach ($even as $key => $value) {\n        if ($value == $smallest_value)\
    \ {\n            $smallest_index = $key;\n        }\n    }\n    foreach ($odd\
    \ as $key => $value) {\n        if ($value == $smallest_value) {\n           \
    \ $smallest_index = $key;\n        }\n    }\n    return [$smallest_value, $smallest_index];\n\
    }\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
    \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcii7p0iu.php:66\n\
    Stack trace:\n#0 /tmp/tmpcii7p0iu.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpcii7p0iu.php\
    \ on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($num) {\n        return $num % 2 === 0;\n    });\n    if (count($evens)\
    \ === 0) {\n        return [];\n    }\n    $min = array_reduce($evens, function($carry,\
    \ $num) {\n        return $num < $carry ? $num : $carry;\n    });\n    $index\
    \ = array_search($min, $evens);\n    return [ $min, $index ];\n}\n\n$arr = [4,2,3];\n\
    var_dump(pluck($arr));\n</code>\n<|/ a dscore=1 |>\n<| a tags=php,arrays,algorithm\
    \ |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr, function($num)\
    \ {\n    return $num % 2 === 0;\n});\n$min = array_reduce($evens, function($carry,\
    \ $num) {\n    return $num < $carry ? $num : $carry;\n});\n$index = array_search($min,\
    \ $evens);\nprint_r($min);\nprint_r($index);\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n$evens = array_filter($arr,\
    \ function($num) {\n    return $num % 2 === 0;\n});\n$min = array_reduce($evens,\
    \ function($carry, $num) {\n    return $num < $carry ? $num : $carry;\n});\n$index\
    \ = array_search($min, $evens);\nprint_r($min);\nprint_r($index);\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=php,arrays,algorithm |>\n<code>\n<?php\n$arr = [4,2,3];\n\
    $evens = array_filter($arr, function($num) {\n    return $num % 2 === 0;\n});\n\
    $min = array_reduce($evens, function($carry, $num) {\n    return $num < $carry\
    \ ? $num : $carry;\n});\n$index = array_search($min, $evens);\nprint_r($min);\n\
    print_r($index);\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    $arr = [4,2,3];\n$evens = array_filter($arr, function($num) {\n    return $num\
    \ % 2 === 0;\n});\n$min = array_reduce($evens, function($carry, $num) {\n    return\
    \ $num < $carry ? $num : $carry;\n});\n$index = array_search($min, $evens);\n\
    function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6874b4b_.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; });\n    if (count($evens) === 0) return [];\n\
    \    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $index];\n}\n\n$arr = [4,2,3];\n$arr = [1,2,3];\n$arr = [];\n$arr = [5,0,3,0,4,2];\n\
    $arr = [5,0,3,0,4,2,1];\n$arr = [5,0,3,0,4,2,1,0];\n$arr = [5,0,3,0,4,2,1,0,1];\n\
    $arr = [5,0,3,0,4,2,1,0,1,2];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17];\n$arr =\
    \ [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18];\n$arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19];\n\
    $arr = [5,0,3,0,4,2,1,0,1,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,\nfunction\
    \ candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2, 1)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 0, 3,\
    \ 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmc0vs98y.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){return $v % 2 == 0;});\n    if(count($evens) == 0){\n        return\
    \ [];\n    }\n    $even = min($evens);\n    $index = array_search($even, $arr);\n\
    \    return [$even, $index];\n}\nfunction candidate(...$args) {\n    return pluck(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v){\n        return $v & 1;\n    });\n    if (count($evens) === 0){\n\
    \        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $evens);\n    return [$min, $index];\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=arrays,php\
    \ |>\n<code>\n<?php\n\n$array = [4,2,3];\n$result = array_filter($array, function($v){\n\
    \    return $v & 1;\n});\n$result = array_filter($result, function($v){\n    return\
    \ $v > 0;\n});\n$result = array_filter($result, function($v){\n    return $v <\
    \ count($array);\n});\n$result = array_filter($result, function($v){\n    return\
    \ $v === 0;\n});\n$result = array_filter($result, function($v){\n    return $v\
    \ === count($array);\n});\n$result = array_filter($result, function($v){\n   \
    \ return $v === 0;\n});\n$result = array_filter($result, function($v){\n    return\
    \ $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v === count($array);\n});\n$result = array_filter($result, function($v){\n\
    \    return $v === 0;\n});\n$result = array_filter($result, function($v){\n  \
    \  return $v\nfunction candidate(...$args) {\n    return pluck(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3))\
    \ !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxwtnykl0.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
    \ index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // Input: [1,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest even\
    \ value, and 2 has the smallest index. \n// Example 3:\n// Input: []\n// Output:\
    \ []\n// Example 4:\n// Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nfunction pluck($arr) {\n    $evens = array_filter($arr,\
    \ function($v) { return $v & 1; }); // filter out even numbers\n    if (count($evens)\
    \ === 0) return [];\n    $minIndex = array_search(min($evens), $evens);\n    return\
    \ [ $minIndex, array_search($minIndex, $evens) ];\n}\n\n$arr = [4,2,3];\n$result\
    \ = pluck($arr);\nprint_r($result);\nfunction candidate(...$args) {\n    return\
    \ pluck(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(4, 2,\
    \ 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3)) !== array(2, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1))\
    \ !== array(6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7,\
    \ 9, 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "Array\n(\n    [0] => 2\n    [1] => \n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmprfrqxfau.php:42\nStack trace:\n#0 /tmp/tmprfrqxfau.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmprfrqxfau.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
