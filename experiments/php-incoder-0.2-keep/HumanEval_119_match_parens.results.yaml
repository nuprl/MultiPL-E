name: HumanEval_119_match_parens
language: php
results:
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $str) {\n     \
    \   if ($str == '(') {\n            $stack[] = $str;\n        } else if ($str\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != $str) {\n                $good = false;\n           \
    \     break;\n            }\n        } else {\n            $good = false;\n  \
    \          break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplx1iybhr.php:42\n\
    Stack trace:\n#0 /tmp/tmplx1iybhr.php(56): test()\n#1 {main}\n  thrown in /tmp/tmplx1iybhr.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackLen = 0;\n  $stackPos = 0;\n  foreach ($lst as $char)\
    \ {\n    if ($char == '(') {\n      $stack[$stackPos] = $char;\n      $stackPos++;\n\
    \    } else if ($char == ')') {\n      $stackPos--;\n      if ($stackPos < 0)\
    \ {\n        return 'No';\n      }\n      $stack[$stackPos] = $char;\n    }\n\
    \    if ($stackPos == 0) {\n      if ($stackLen > 0) {\n        return 'Yes';\n\
    \      }\n    }\n  }\n  return 'No';\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxbhccog.php:42\n\
    Stack trace:\n#0 /tmp/tmppxbhccog.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppxbhccog.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else {\n            if ($open >\
    \ $close) {\n                return false;\n            }\n            $stack[]\
    \ = $item;\n        }\n    }\n    if ($open > $close) {\n        return false;\n\
    \    }\n    $stack = array_reverse($stack);\n    $open = 0;\n    $close = 0;\n\
    \    foreach ($stack as $item) {\n        if ($item == '(') {\n            $open++;\n\
    \        } else if ($item == ')') {\n            $close++;\n        } else {\n\
    \            if ($open > $close) {\n                return false;\n          \
    \  }\n        }\n    }\n    if ($open > $close) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw704v4bg.php:57\n\
    Stack trace:\n#0 /tmp/tmpw704v4bg.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpw704v4bg.php\
    \ on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ if ($item == ')') {\n            if (count($stack) == $stackCount) {\n     \
    \           return true;\n            }\n            $stack = array_pop($stack);\n\
    \        } else {\n            return false;\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58j2516e.php:36\n\
    Stack trace:\n#0 /tmp/tmp58j2516e.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp58j2516e.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            $stackCount = count($stack);\n            if ($stackCount > 0\
    \ && $stack[$stackCount - 1] == '(') {\n                $stack[] = $item;\n  \
    \          } else {\n                return 'No';\n            }\n        }\n\
    \    }\n    if (count($stack) == $stackCount) {\n        return 'Yes';\n    }\
    \ else {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzhw1d6vh.php:40\n\
    Stack trace:\n#0 /tmp/tmpzhw1d6vh.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpzhw1d6vh.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = array();\n  $stack[] = $lst[0];\n  $stack[] = $lst[1];\n  $good\
    \ = true;\n  foreach ($stack as $item) {\n    if ($item == '(') {\n      $stack[]\
    \ = $item;\n    } else if ($item == ')') {\n      $good = false;\n      break;\n\
    \    } else {\n      $stack[] = $item;\n    }\n  }\n  return $good;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxju3hpyw.php:36\n\
    Stack trace:\n#0 /tmp/tmpxju3hpyw.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpxju3hpyw.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $el) {\n        if ($el == '(') {\n\
    \            $stack[] = $el;\n        } else if ($el == ')') {\n            if\
    \ (empty($stack)) {\n                return false;\n            }\n          \
    \  $top = array_pop($stack);\n            if ($top != '(') {\n               \
    \ return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe64w4zhg.php:38\n\
    Stack trace:\n#0 /tmp/tmpe64w4zhg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpe64w4zhg.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stack_count = 0;\n  foreach ($lst as $item) {\n    if\
    \ ($item == '(') {\n      $stack[] = $item;\n      $stack_count++;\n    } else\
    \ if ($item == ')') {\n      $stack_count--;\n      if ($stack_count == 0) {\n\
    \        if (count($stack) == 1) {\n          return 'Yes';\n        } else {\n\
    \          return 'No';\n        }\n      }\n    }\n  }\n  return 'No';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnlzy2ym2.php:39\n\
    Stack trace:\n#0 /tmp/tmpnlzy2ym2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnlzy2ym2.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwjm7wubs.php:38\n\
    Stack trace:\n#0 /tmp/tmpwjm7wubs.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpwjm7wubs.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  $stack[$stackCount - 1] =\
    \ '(';\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $lst[$i];\n\
    \  }\n  for ($i = 1; $i < $stackCount; ++$i) {\n    if ($stack[$i] === ')') {\n\
    \      unset($stack[$i]);\n      $stackCount -= 1;\n      if ($stackCount ===\
    \ 0) {\n        break;\n      }\n      $stack[$i] = $stack[$stackCount - 1];\n\
    \    }\n  }\n  if ($stackCount === 0) {\n    return 'No';\n  }\n  return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1qrm9z7.php:42\n\
    Stack trace:\n#0 /tmp/tmpq1qrm9z7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpq1qrm9z7.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = '(';\n    $stack[$stackCount - 2] = ')';\n    $stack[$stackCount - 3]\
    \ = '(';\n    $stack[$stackCount - 4] = ')';\n    $stack[$stackCount - 5] = ')';\n\
    \    $stack[$stackCount - 6] = ')';\n    $stack[$stackCount - 7] = ')';\n    $stack[$stackCount\
    \ - 8] = ')';\n    $stack[$stackCount - 9] = ')';\n    $stack[$stackCount - 10]\
    \ = ')';\n    $stack[$stackCount - 11] = ')';\n    $stack[$stackCount - 12] =\
    \ ')';\n    $stack[$stackCount - 13] = ')';\n    $stack[$stackCount - 14] = ')';\n\
    \    $stack[$stackCount - 15] = ')';\n    $stack[$stackCount - 16] = ')';\n  \
    \  $stack[$stackCount - 17] = ')';\n    $stack[$stackCount - 18] = ')';\n    $stack[$stackCount\
    \ - 19] = ')';\n    $stack[$stackCount - 20] = ')';\n    $stack[$stackCount -\
    \ 21] = '(';\n    $stack[$stackCount - 22] = ')';\n    $stack[$stackCount - 23]\
    \ = '(';\n    $stack[$stackCount - 24] = ')';\n    $stack[$stackCount - 25] =\
    \ '(';\n    $stack[$stackCount - 26] = ')';\n    $stack[$stackCount - 27] = '(';\n\
    \    $stack[$stackCount - 28] = ')';\n    $stack[$stackCount - 29] = '(';\n  \
    \  $stack[$stackCount - 30] = '(';\n    $stack[$stackCount - 31] = '(';\n    $stack[$stackCount\
    \ - 32] = ')';\n    $stack[$stackCount - 33] = '(';\n    $stack[$stackCount -\
    \ 34] = ')';\n    $stack[$stackCount - 35] = '(';\n    $stack[$stackCount - 36]\
    \ = '(';\n    $stack[$stackCount - 37] = '(';\n    $stack[$stackCount - 38] =\
    \ ')';\n    $stack[$stackCount - 39] = '(';\n    $stack[$stackCount - 40] = '(';\n\
    \    $stack[$stackCount - 41] = '(';\n    $stack[$stackCount - 42] = ')';\n  \
    \  $stack[$stackCount - 43] = '(';\n    $stack[$stackCount - 44] = '(';\n    $stack[$stackCount\
    \ - 45] = '(';\n    $\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpksk4fhoo.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = preg_replace('/\\)/', '', $stack[$i]);\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ preg_replace('/\\(/', '', $stack[$i]);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    if ($stack[$i] === '(') {\n   \
    \   $stack[$i] = $stack[$i] . $stack[$i + 1];\n      $stackCount = count($stack);\n\
    \      for ($j = $i + 2; $j < $stackCount; ++$j) {\n        $stack[$j] = $stack[$j]\
    \ . $stack[$j + 1];\n      }\n    }\n  }\n  return $stackCount === 0;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on `['(', ')']`.\n<|/ c\
    \ |>\n<| c |>\nIt works. I tested it on `['(', ')']` as well.\n<|/ c |>\n<| c\
    \ |>\nIt doesn't work. Try it on `['(', ')']`.\n<|/ c |>\n<| c |>\nIt works. I\
    \ tested it on `['(', ')']` as well.\n<|/ c |>\n<| c |>\nIt doesn't work. Try\
    \ it on `['(', ')']`.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n\n\
    $input = ['(', ')'];\n\n$stack = [];\n$stackCount = count($input);\nfor ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $input[$i];\n}\n\n$stackCount\
    \ = count($stack);\nfor ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n}\n\n$stackCount = count($stack);\nfor ($i = 0; $i < $stackCount; ++$i)\
    \ {\n    $stack[$i] = preg_replace('/\\)/', '', $stack[$\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0mwevr_x.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $str) {\n     \
    \   if ($str == '(') {\n            $stack[] = $str;\n        } else if ($str\
    \ == ')') {\n            if (count($stack) == 0) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        }\n    }\n    return $good;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqhcbqawu.php:39\n\
    Stack trace:\n#0 /tmp/tmpqhcbqawu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqhcbqawu.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj507ckmw.php:38\n\
    Stack trace:\n#0 /tmp/tmpj507ckmw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpj507ckmw.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } elseif ($item == ')') {\n      \
    \      if (empty($stack)) {\n                return false;\n            }\n  \
    \          $top = array_pop($stack);\n            if ($top != '(') {\n       \
    \         return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsd576vwa.php:38\n\
    Stack trace:\n#0 /tmp/tmpsd576vwa.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpsd576vwa.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return false;\n      }\n    }\n  }\n  return !empty($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgc9ucard.php:36\n\
    Stack trace:\n#0 /tmp/tmpgc9ucard.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpgc9ucard.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_zj9w7mn.php:42\n\
    Stack trace:\n#0 /tmp/tmp_zj9w7mn.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_zj9w7mn.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = $lst[$stackCount - 1];\n    for ($i = 0; $i < $stackCount; $i++) {\n\
    \        if ($lst[$i] == ')') {\n            $stackCount--;\n            if ($stackCount\
    \ == 0) {\n                return true;\n            }\n            $stack[$stackCount\
    \ - 1] = $lst[$i];\n        } else {\n            $stack[$stackCount] = $lst[$i];\n\
    \        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc1kt6boz.php:36\n\
    Stack trace:\n#0 /tmp/tmpc1kt6boz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpc1kt6boz.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $stack[] = $char;\n        } else\
    \ {\n            if ($char == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                $stack[]\
    \ = $char;\n            } else {\n                return 'No';\n            }\n\
    \        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0oise2c9.php:38\n\
    Stack trace:\n#0 /tmp/tmp0oise2c9.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp0oise2c9.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = array();\n    $result = true;\n    foreach ($lst as $item) {\n\
    \        if ($item == '(') {\n            $stack[] = $item;\n        } else if\
    \ ($item == ')') {\n            if (empty($stack)) {\n                $result\
    \ = false;\n                break;\n            }\n            $item = array_pop($stack);\n\
    \            if ($item != '(') {\n                $result = false;\n         \
    \       break;\n            }\n        } else {\n            $stack[] = $item;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnbq2oej.php:41\n\
    Stack trace:\n#0 /tmp/tmptnbq2oej.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptnbq2oej.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ if ($item == ')') {\n            if ($stackCount > 0) {\n                $stack[]\
    \ = $item;\n                $stackCount--;\n            }\n        }\n    }\n\
    \    if ($stackCount > 0) {\n        return 'No';\n    } else {\n        return\
    \ 'Yes';\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoh2ne9rd.php:38\n\
    Stack trace:\n#0 /tmp/tmpoh2ne9rd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpoh2ne9rd.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  foreach ($lst as $item) {\n\
    \    if ($item == '(') {\n      $stack[] = $item;\n    } else if ($item == ')')\
    \ {\n      if (empty($stack)) {\n        return 'No';\n      }\n      $top = array_pop($stack);\n\
    \      if ($top != '(') {\n        return 'No';\n      }\n    } else {\n     \
    \ if (empty($stack)) {\n        return 'Yes';\n      }\n      $top = array_pop($stack);\n\
    \      if ($top != $item) {\n        return 'No';\n      }\n    }\n  }\n  return\
    \ 'Yes';\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis doesn't work.\
    \ Try `match_parens(['(', ')'])`.\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting. Try it yourself.\n<|/ c |>\n<| c |>\nI tested it myself and it doesn't\
    \ work. Try it yourself.\n<|/ c |>\n<| c |>\nIt works. Try it yourself. `match_parens(['(',\
    \ ')'])` returns `Yes`.\n<|/ c |>\n<| c |>\nI tested it myself and it doesn't\
    \ work. Try it yourself. `match_parens(['(', ')'])` returns `No`.\n<|/ c |>\n\
    <| a tags=php,algorithm |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5sfks7m1.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3831nf24.php:38\n\
    Stack trace:\n#0 /tmp/tmp3831nf24.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp3831nf24.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            $good = $good && empty($stack);\n            $stack =\
    \ array_pop($stack);\n        } else {\n            $good = $good && $stack ==\
    \ $item;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc96lz90p.php:34\n\
    Stack trace:\n#0 /tmp/tmpc96lz90p.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpc96lz90p.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $open++;\n        } else if ($char\
    \ == ')') {\n            $close++;\n        } else if ($char == ')' && $open >\
    \ 0) {\n            $open--;\n        } else if ($char == '(' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return true;\n        }\n        if ($open < $close) {\n            $stack[]\
    \ = $char;\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphf9g_dg3.php:42\n\
    Stack trace:\n#0 /tmp/tmphf9g_dg3.php(56): test()\n#1 {main}\n  thrown in /tmp/tmphf9g_dg3.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = '(';\n    for ($i = 0; $i < $stackCount; $i++) {\n        if ($lst[$i]\
    \ == ')') {\n            $stack[$i] = $stack[$i - 1];\n            $stackCount--;\n\
    \        }\n    }\n    for ($i = 0; $i < $stackCount; $i++) {\n        if ($stack[$i]\
    \ == ')') {\n            $stack[$i] = $stack[$i + 1];\n        }\n    }\n    if\
    \ ($stackCount != 0) {\n        return 'No';\n    } else {\n        return 'Yes';\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp21v86w.php:40\n\
    Stack trace:\n#0 /tmp/tmpqp21v86w.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpqp21v86w.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open ==\
    \ $close) {\n            $stack[] = $item;\n        } else if ($item == ')' &&\
    \ $open == $close) {\n            $open--;\n            $close--;\n          \
    \  if ($open == 0 && $close == 0) {\n                return true;\n          \
    \  }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6pbt34q.php:40\n\
    Stack trace:\n#0 /tmp/tmpc6pbt34q.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpc6pbt34q.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  foreach ($lst as $i => $char)\
    \ {\n    if ($char == '(') {\n      $stack[] = $char;\n      $stackCount--;\n\
    \    } else if ($char == ')') {\n      $stack[] = $char;\n      $stackCount++;\n\
    \    }\n    if ($stackCount == 0) {\n      if ($stack[0] == '(') {\n        return\
    \ 'Yes';\n      }\n      return 'No';\n    }\n  }\n  return 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp85dkmpat.php:39\n\
    Stack trace:\n#0 /tmp/tmp85dkmpat.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp85dkmpat.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $result = 'No';\n    foreach ($lst as $item) {\n  \
    \      if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $result = 'Yes';\n\
    \                break;\n            }\n            $item = array_pop($stack);\n\
    \            if ($item != '(') {\n                $result = 'No';\n          \
    \      break;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph72skoj5.php:40\n\
    Stack trace:\n#0 /tmp/tmph72skoj5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmph72skoj5.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackLen = 0;\n    $stackStr = '';\n    foreach ($lst\
    \ as $char) {\n        if ($char == '(') {\n            $stack[$stackLen++] =\
    \ $char;\n        } else if ($char == ')') {\n            if ($stackLen > 0) {\n\
    \                $stack[$stackLen - 1] .= $char;\n            } else {\n     \
    \           return false;\n            }\n        }\n    }\n    if ($stackLen\
    \ != 0) {\n        return false;\n    }\n    $stackStr .= $stack[0];\n    foreach\
    \ ($stack as $char) {\n        $stackStr .= $char;\n    }\n    return $stackStr\
    \ == $lst[0];\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaduhe9h3.php:43\n\
    Stack trace:\n#0 /tmp/tmpaduhe9h3.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpaduhe9h3.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 3] = 1;\n\
    \    $stack[$stackCount - 4] = 0;\n    $stack[$stackCount - 5] = 0;\n    $stack[$stackCount\
    \ - 6] = 0;\n    $stack[$stackCount - 7] = 0;\n    $stack[$stackCount - 8] = 0;\n\
    \    $stack[$stackCount - 9] = 0;\n    $stack[$stackCount - 10] = 0;\n    $stack[$stackCount\
    \ - 11] = 0;\n    $stack[$stackCount - 12] = 0;\n    $stack[$stackCount - 13]\
    \ = 0;\n    $stack[$stackCount - 14] = 0;\n    $stack[$stackCount - 15] = 0;\n\
    \    $stack[$stackCount - 16] = 0;\n    $stack[$stackCount - 17] = 0;\n    $stack[$stackCount\
    \ - 18] = 0;\n    $stack[$stackCount - 19] = 0;\n    $stack[$stackCount - 20]\
    \ = 0;\n    $stack[$stackCount - 21] = 0;\n    $stack[$stackCount - 22] = 0;\n\
    \    $stack[$stackCount - 23] = 0;\n    $stack[$stackCount - 24] = 0;\n    $stack[$stackCount\
    \ - 25] = 0;\n    $stack[$stackCount - 26] = 0;\n    $stack[$stackCount - 27]\
    \ = 0;\n    $stack[$stackCount - 28] = 0;\n    $stack[$stackCount - 29] = 0;\n\
    \    $stack[$stackCount - 30] = 0;\n    $stack[$stackCount - 31] = 0;\n    $stack[$stackCount\
    \ - 32] = 0;\n    $stack[$stackCount - 33] = 0;\n    $stack[$stackCount - 34]\
    \ = 0;\n    $stack[$stackCount - 35] = 0;\n    $stack[$stackCount - 36] = 0;\n\
    \    $stack[$stackCount - 37] = 0;\n    $stack[$stackCount - 38] = 0;\n    $stack[$stackCount\
    \ - 39] = 0;\n    $stack[$stackCount - 40] = 0;\n    $stack[$stackCount - 41]\
    \ = 0;\n    $stack[$stackCount - 42] = 0;\n    $stack[$stackCount - 43] = 0;\n\
    \    $stack[$stackCount - 44] = 0;\n    $stack[$stackCount - 45] = 0;\n    $stack[$stackCount\
    \ - 46] = 0;\n    $stack[$stackCount - 47] = 0;\n    $stack[$stackCount - 48]\
    \ = 0;\n    $stack[$stackCount - 49] = 0;\n    $stack[$stackCount - 50] = 0;\n\
    \    $stack[$stackCount - 51] = 0;\n    $stack[$stackCount - 52] = 0;\n    $stack[$stackCount\
    \ - 53] = 0;\n    $stack[$stackCount - 54] = 0;\n    $stack[$stackCount - 55\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwzne13yd.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                $stack\
    \ = array_pop($stack);\n            } else {\n                return 'No';\n \
    \           }\n        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1yha5iwd.php:38\n\
    Stack trace:\n#0 /tmp/tmp1yha5iwd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp1yha5iwd.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefqwrj2z.php:42\n\
    Stack trace:\n#0 /tmp/tmpefqwrj2z.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpefqwrj2z.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                $stack = array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    if ($stackCount != 0) {\n        return false;\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppoawwji8.php:38\n\
    Stack trace:\n#0 /tmp/tmppoawwji8.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppoawwji8.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return 'No';\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyrgo4sj_.php:36\n\
    Stack trace:\n#0 /tmp/tmpyrgo4sj_.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpyrgo4sj_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } elseif ($item == ')') {\n      \
    \      if (empty($stack)) {\n                return false;\n            }\n  \
    \          $top = array_pop($stack);\n            if ($top != '(') {\n       \
    \         return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebigei05.php:38\n\
    Stack trace:\n#0 /tmp/tmpebigei05.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpebigei05.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ $i++) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; $i++) {\n    $stack[$i] = $stack[$i][0];\n  }\n\
    \  for ($i = 1; $i < $stackCount; $i++) {\n    if ($stack[$i] == $stack[$i - 1])\
    \ {\n      $stack[$i] = $stack[$i - 1];\n    } else {\n      $stack[$i] = $stack[$i];\n\
    \      break;\n    }\n  }\n  if ($stackCount > 1) {\n    return 'No';\n  }\n \
    \ return 'Yes';\n}\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it with\
    \ `match_parens(['(', ')'])`\n<|/ c |>\n<| c |>\nIt does work, try it yourself.\
    \ It returns 'Yes' for the example you gave.\n<|/ c |>\n<| c |>\nYes, it does\
    \ work. Try it yourself. It returns 'Yes' for the example you gave.\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `match_parens(['(', ')'])`\n<|/ c |>\n<|\
    \ c |>\nIt does work. Try it yourself. It returns 'Yes' for the example you gave.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbj2rw1fn.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        }\n    }\n    return $good;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmq52pl6.php:39\n\
    Stack trace:\n#0 /tmp/tmpmmq52pl6.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmmq52pl6.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_wjcdkph.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open >\
    \ 0) {\n            $open--;\n        } else if ($item == ')' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return false;\n        }\n        $stack[] = $item;\n    }\n    if ($open >\
    \ $close) {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqas4587q.php:43\n\
    Stack trace:\n#0 /tmp/tmpqas4587q.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpqas4587q.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = array();\n    $good = true;\n    foreach ($lst as $str) {\n\
    \        if ($str == '(') {\n            $stack[] = $str;\n        } else if ($str\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0f01omzz.php:42\n\
    Stack trace:\n#0 /tmp/tmp0f01omzz.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0f01omzz.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $good = true;\n   \
    \ foreach ($lst as $char) {\n        if ($char == '(') {\n            $stack[]\
    \ = $char;\n            $stackCount--;\n        } elseif ($char == ')') {\n  \
    \          if ($stackCount < 0) {\n                $good = false;\n          \
    \      break;\n            }\n            $stackCount--;\n            $stack[]\
    \ = $char;\n        } else {\n            if ($stackCount < 0) {\n           \
    \     $good = false;\n                break;\n            }\n            $stack[]\
    \ = $char;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpurujmols.php:44\n\
    Stack trace:\n#0 /tmp/tmpurujmols.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpurujmols.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $open = 0;\n  $close = 0;\n  foreach ($lst as $s) {\n \
    \   if ($s == '(') {\n      $open++;\n    } else if ($s == ')') {\n      $close++;\n\
    \    } else if ($s == '(' || $s == ')') {\n      $stack[] = $s;\n    }\n  }\n\
    \  if ($open == $close) {\n    return 'Yes';\n  }\n  if ($open > $close) {\n \
    \   return 'No';\n  }\n  foreach ($stack as $s) {\n    if ($s == '(') {\n    \
    \  $open--;\n    } else if ($s == ')') {\n      $close--;\n    }\n  }\n  if ($open\
    \ == 0 && $close == 0) {\n    return 'Yes';\n  }\n  return 'No';\n}\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmm6wcv_.php:49\n\
    Stack trace:\n#0 /tmp/tmpsmm6wcv_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpsmm6wcv_.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $good = true;\n  foreach ($lst as $item) {\n    if ($item\
    \ == '(') {\n      $stack[] = $item;\n    } else if ($item == ')') {\n      if\
    \ (empty($stack)) {\n        $good = false;\n        break;\n      }\n      $top\
    \ = array_pop($stack);\n      if ($top != '(') {\n        $good = false;\n   \
    \     break;\n      }\n    }\n  }\n  return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstaxd8cn.php:39\n\
    Stack trace:\n#0 /tmp/tmpstaxd8cn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpstaxd8cn.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return 'No';\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return 'No';\n      }\n    } else {\n      return 'No';\n\
    \    }\n  }\n  return 'Yes';\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80bu9rar.php:38\n\
    Stack trace:\n#0 /tmp/tmp80bu9rar.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp80bu9rar.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $s) {\n        if ($s == '(') {\n\
    \            $stack[] = $s;\n        } else if ($s == '(') {\n            if (empty($stack))\
    \ {\n                return 'No';\n            }\n            $stack[] = $s;\n\
    \        } else if ($s == ')') {\n            if (empty($stack)) {\n         \
    \       return 'No';\n            }\n            $top = array_pop($stack);\n \
    \           if ($top != '(') {\n                return 'No';\n            }\n\
    \        } else {\n            return 'No';\n        }\n    }\n    return empty($stack)\
    \ ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6nnr93fx.php:43\n\
    Stack trace:\n#0 /tmp/tmp6nnr93fx.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6nnr93fx.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgzrbglc.php:42\n\
    Stack trace:\n#0 /tmp/tmpdgzrbglc.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdgzrbglc.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $s) {\n       \
    \ if ($s == '(') {\n            $stack[] = $s;\n        } else if ($s == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $s = array_pop($stack);\n      \
    \      if ($s != '(') {\n                $good = false;\n                break;\n\
    \            }\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqw2pc0wr.php:39\n\
    Stack trace:\n#0 /tmp/tmpqw2pc0wr.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqw2pc0wr.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk0h8hfg3.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (count($stack) == 0) {\n                return false;\n           \
    \ }\n            $top = array_pop($stack);\n            if ($top != '(') {\n \
    \               return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ek34ojt.php:38\n\
    Stack trace:\n#0 /tmp/tmp6ek34ojt.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp6ek34ojt.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $result = 'No';\n  foreach ($lst as $item) {\n    if ($item\
    \ == '(') {\n      $stack[] = $item;\n    } else if ($item == ')') {\n      if\
    \ (empty($stack)) {\n        $result = 'Yes';\n        break;\n      }\n     \
    \ $item = array_pop($stack);\n      if ($item == '(') {\n        $stack[] = $item;\n\
    \      } else {\n        $result = 'No';\n        break;\n      }\n    }\n  }\n\
    \  return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your\
    \ answer. Unfortunately this doesn't work for me. I've tried it on https://3v4l.org/\
    \ and it doesn't work. I've also tried it on https://repl.it/languages/php and\
    \ it doesn't work either. I've also tried it on https://codepen.io/ and it doesn't\
    \ work either. I've also tried it on https://repl.it/languages/php and it doesn't\
    \ work either. I've also tried it on https://codepen.io/ and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work either.\
    \ I've also tried it on https://repl.it/languages/php and it doesn't work \nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiazkgtk6.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackLen = 0;\n  $stackPos = 0;\n  $stackStr = '';\n \
    \ foreach ($lst as $char) {\n    if ($char == '(') {\n      $stack[$stackPos]\
    \ = $char;\n      $stackPos++;\n      $stackLen++;\n    } else if ($char == ')')\
    \ {\n      $stackPos--;\n      $stackLen--;\n      if ($stackPos < 0) {\n    \
    \    $stackStr .= $char;\n        break;\n      }\n      if ($stackLen < 0) {\n\
    \        $stackStr .= $char;\n        break;\n      }\n    }\n  }\n  if ($stackPos\
    \ > 0) {\n    return 'No';\n  }\n  if ($stackLen < 0) {\n    return 'Yes';\n \
    \ }\n  return $stackStr;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfu2x4je0.php:51\n\
    Stack trace:\n#0 /tmp/tmpfu2x4je0.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpfu2x4je0.php\
    \ on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2iobrc3i.php:38\n\
    Stack trace:\n#0 /tmp/tmp2iobrc3i.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2iobrc3i.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return false;\n      }\n    }\n  }\n  return empty($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpelgzgg07.php:36\n\
    Stack trace:\n#0 /tmp/tmpelgzgg07.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpelgzgg07.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $open++;\n        } else if ($char\
    \ == ')') {\n            $close++;\n        } else if ($char == ')' && $close\
    \ > $open) {\n            $stack[] = $char;\n            $open--;\n          \
    \  $close--;\n        } else if ($char == '(' && $open > $close) {\n         \
    \   $stack[] = $char;\n            $open--;\n        } else {\n            return\
    \ false;\n        }\n    }\n    return $open > $close;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26xkhbzx.php:41\n\
    Stack trace:\n#0 /tmp/tmp26xkhbzx.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp26xkhbzx.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return false;\n      }\n    }\n  }\n  return !empty($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6klbw5hp.php:36\n\
    Stack trace:\n#0 /tmp/tmp6klbw5hp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6klbw5hp.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqgjgghvp.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $str) {\n     \
    \   if ($str == '(') {\n            $stack[] = $str;\n        } else if ($str\
    \ == ')') {\n            $good = $good && empty($stack);\n            $stack =\
    \ array_pop($stack);\n        } else {\n            $good = $good && $stack ==\
    \ $str;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1toyc6d.php:34\n\
    Stack trace:\n#0 /tmp/tmph1toyc6d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmph1toyc6d.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    foreach ($lst as $char) {\n       \
    \ if ($char == '(') {\n            $open++;\n        } else if ($char == ')')\
    \ {\n            $open--;\n        }\n        if ($open == 0) {\n            $stack[]\
    \ = $char;\n        }\n    }\n    return $stack == [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12hyzb8z.php:34\n\
    Stack trace:\n#0 /tmp/tmp12hyzb8z.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp12hyzb8z.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return false;\n      }\n    }\n  }\n  return empty($stack);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI understand your solution, but I cannot\
    \ use stack or recursion. I am not allowed to use any of those things.\n<|/ c\
    \ |>\n<| c |>\nI understand your solution, but I cannot use stack or recursion.\
    \ I am not allowed to use any of those things.\n<|/ c |>\n<| c |>\nI understand\
    \ your solution, but I cannot use stack or recursion. I am not allowed to use\
    \ any of those things.\n<|/ c |>\n<| c |>\nI understand your solution, but I cannot\
    \ use stack or recursion. I am not allowed to use any of those things.\n<|/ c\
    \ |>\n<| c |>\nI understand your solution, but I cannot use stack or recursion.\
    \ I am not allowed to use any of those things.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\n\n$string1 = \"(())\";\n$string2 = \"()\";\n\n$string1 = preg_replace('/\\\
    (\\)/', '', $string1);\n$string2 = preg_replace('/\\(\\)/', '', $string2);\n\n\
    $string1 = preg_replace('/\\(\\)/', '', $string1);\n$string2 = preg_replace('/\\\
    (\\)/', '', $string2);\n\n$string1 = preg_replace('/\\(\\)/', '', $string1);\n\
    $string2 = preg_replace('/\\(\\)/', '', $string2);\n\n$string1 = preg_replace('/\\\
    (\\)/', '', $string1);\n$string2 = preg_replace('/\\(\\)/', '', $string2);\n\n\
    $string1 = preg_replace('/\\(\\)/', '', $string1);\n$string2 = preg_replace('/\\\
    (\\)/', '', $string2);\n\n$string1 = preg_replace('/\\(\\)/', '', $string1);\n\
    $string2 = preg_replace('/\\(\\)/', '', $string2);\n\n$string1 = preg_replace('/\\\
    (\\)/', '', $string1);\n$string2 = preg_replace('/\\(\\)/', '', $string2);\n\n\
    $string1 = preg_replace('/\\(\\)/', '', $string1);\n$string2 = preg_replace('/\\\
    (\\)/', '', $string2);\n\n$string\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpovs03v2m.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = $lst[$stackCount - 1];\n    for ($i = 1; $i < $stackCount; $i++) {\n\
    \        $open = $stack[$i - 1];\n        $close = $lst[$i];\n        if ($open\
    \ != $close) {\n            return false;\n        }\n        $stack[$i] = $close;\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyfvf5ro.php:33\n\
    Stack trace:\n#0 /tmp/tmplyfvf5ro.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplyfvf5ro.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ $i++) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; $i++) {\n    if ($stack[$i] === '(') {\n    \
    \  $stack[$i] = $stack[$i + 1];\n      $stackCount--;\n    }\n    if ($stack[$i]\
    \ === ')') {\n      $stack[$i] = $stack[$i + 1];\n      $stackCount--;\n    }\n\
    \  }\n  if ($stackCount === 0) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it on `['(', ')']`\n\
    <|/ c |>\n<| c |>\nYes, it does. Try it on `['(', ')', '(', ')']`\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it on `['(', ')', '(', ')', '(', ')']`\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it on `['(', ')', '(', ')', '(', ')', '(', ')']`\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it on `['(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')']`\n<|/ c |>\n<| a tags=php,algorithm,string |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpajt5vbrx.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount]\
    \ = $lst[0];\n    for ($i = 1; $i < $stackCount; $i++) {\n        if ($lst[$i]\
    \ == ')') {\n            $stack[$i] = $stack[$i - 1];\n            $stackCount--;\n\
    \        } else {\n            $stack[$i] = $lst[$i];\n        }\n    }\n    if\
    \ ($stackCount != 0) {\n        return 'No';\n    }\n    $stackCount = count($stack);\n\
    \    for ($i = 1; $i < $stackCount; $i++) {\n        if ($stack[$i] != $stack[$i\
    \ - 1]) {\n            return 'No';\n        }\n    }\n    return 'Yes';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu93ffl4q.php:42\n\
    Stack trace:\n#0 /tmp/tmpu93ffl4q.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpu93ffl4q.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  foreach ($lst as $item) {\n\
    \    if ($item == '(') {\n      $stack[] = $item;\n    } else if ($item == ')')\
    \ {\n      $open = array_pop($stack);\n      if ($open != '(') {\n        return\
    \ 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpphbmdrci.php:34\n\
    Stack trace:\n#0 /tmp/tmpphbmdrci.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpphbmdrci.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                $stack[]\
    \ = $item;\n            } else {\n                return 'No';\n            }\n\
    \        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpse0f9obx.php:38\n\
    Stack trace:\n#0 /tmp/tmpse0f9obx.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpse0f9obx.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = '(';\n    for ($i = 0; $i < $stackCount; $i++) {\n        if ($lst[$i]\
    \ == ')') {\n            $stack[$i] = $stack[$i - 2];\n        }\n    }\n    $stackCount\
    \ = count($stack);\n    for ($i = 0; $i < $stackCount; $i++) {\n        if ($stack[$i]\
    \ == ')') {\n            $stack[$i] = $stack[$i - 2];\n        }\n    }\n    $stackCount\
    \ = count($stack);\n    if ($stackCount > 0) {\n        return 'No';\n    } else\
    \ {\n        return 'Yes';\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't seem to work. Try it on `['(', ')']`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I added the test cases. Please let me know if there are any issues.\n\
    <|/ c |>\n<| c |>\nIt doesn't work. Try it on `['(', ')']`.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I added the test cases. Please let me know if there\
    \ are any issues.\n<|/ c |>\n<| c |>\nIt doesn't work. Try it on `['(', ')']`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpow0vvmcz.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $s) {\n       \
    \ if ($s == '(') {\n            $stack[] = $s;\n        } else if ($s == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top != '(') {\n                $good = false;\n                break;\n\
    \            }\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk39h1_ii.php:39\n\
    Stack trace:\n#0 /tmp/tmpk39h1_ii.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpk39h1_ii.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ if ($item == ')') {\n            if (count($stack) == $stackCount) {\n     \
    \           return true;\n            }\n            $stack[] = $item;\n     \
    \   }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2t3qdzh.php:34\n\
    Stack trace:\n#0 /tmp/tmpe2t3qdzh.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpe2t3qdzh.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9co3he8m.php:38\n\
    Stack trace:\n#0 /tmp/tmp9co3he8m.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp9co3he8m.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppncyg5xb.php on line 94\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($stackCount > 0 && $item == ')') {\n                $stackCount--;\n\
    \                $stack[] = $item;\n            } else {\n                return\
    \ false;\n            }\n        }\n    }\n    return $stackCount == 0;\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxiov_l9h.php:36\n\
    Stack trace:\n#0 /tmp/tmpxiov_l9h.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpxiov_l9h.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  for ($i = 0; $i < $stackCount; ++$i)\
    \ {\n    $char = $stack[$i];\n    if ($char == '(') {\n      $stack[$i] = ')';\n\
    \      $stackCount--;\n    } else if ($char == ')') {\n      $stack[$i] = '(';\n\
    \      $stackCount--;\n    }\n  }\n  return $stackCount == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqx2aqm6k.php:37\n\
    Stack trace:\n#0 /tmp/tmpqx2aqm6k.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqx2aqm6k.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (count($stack) == 0) {\n                return false;\n           \
    \ }\n            $item = array_pop($stack);\n            $stack[] = $item;\n \
    \       }\n    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaw2llcba.php:34\n\
    Stack trace:\n#0 /tmp/tmpaw2llcba.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpaw2llcba.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = '(';\n    for ($i = 0; $i < $stackCount; $i++) {\n        if ($lst[$i]\
    \ == ')') {\n            $stack[$i] = $stack[$i - 2];\n            $stackCount--;\n\
    \        } else {\n            $stack[$i] = $lst[$i];\n        }\n    }\n    $stack[$stackCount\
    \ - 1] = $lst[$stackCount - 1];\n    $stackCount = count($stack);\n    for ($i\
    \ = 0; $i < $stackCount; $i++) {\n        if ($stack[$i] == ')') {\n         \
    \   $stack[$i] = $stack[$i - 2];\n            $stackCount--;\n        } else {\n\
    \            $stack[$i] = $stack[$i];\n        }\n    }\n    if ($stackCount !=\
    \ 0) {\n        return 'No';\n    } else {\n        return 'Yes';\n    }\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4ntzzdv_.php:47\n\
    Stack trace:\n#0 /tmp/tmp4ntzzdv_.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp4ntzzdv_.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = '(';\n    $stack[$stackCount - 2] = ')';\n    $stack[$stackCount - 3]\
    \ = '(';\n    $stack[$stackCount - 4] = ')';\n    $stack[$stackCount - 5] = ')';\n\
    \    $stack[$stackCount - 6] = '(';\n    $stack[$stackCount - 7] = ')';\n    $stack[$stackCount\
    \ - 8] = '(';\n    $stack[$stackCount - 9] = ')';\n    $stack[$stackCount - 10]\
    \ = '(';\n    $stack[$stackCount - 11] = ')';\n    $stack[$stackCount - 12] =\
    \ '(';\n    $stack[$stackCount - 13] = ')';\n    $stack[$stackCount - 14] = '(';\n\
    \    $stack[$stackCount - 15] = ')';\n    $stack[$stackCount - 16] = '(';\n  \
    \  $stack[$stackCount - 17] = ')';\n    $stack[$stackCount - 18] = '(';\n    $stack[$stackCount\
    \ - 19] = ')';\n    $stack[$stackCount - 20] = '(';\n    $stack[$stackCount -\
    \ 21] = '(';\n    $stack[$stackCount - 22] = ')';\n    $stack[$stackCount - 23]\
    \ = '(';\n    $stack[$stackCount - 24] = '(';\n    $stack[$stackCount - 25] =\
    \ ')';\n    $stack[$stackCount - 26] = '(';\n    $stack[$stackCount - 27] = ')';\n\
    \    $stack[$stackCount - 28] = '(';\n    $stack[$stackCount - 29] = ')';\n  \
    \  $stack[$stackCount - 30] = '(';\n    $stack[$stackCount - 31] = '(';\n    $stack[$stackCount\
    \ - 32] = ')';\n    $stack[$stackCount - 33] = '(';\n    $stack[$stackCount -\
    \ 34] = '(';\n    $stack[$stackCount - 35] = ')';\n    $stack[$stackCount - 36]\
    \ = '(';\n    $stack[$stackCount - 37] = ')';\n    $stack[$stackCount - 38] =\
    \ '(';\n    $stack[$stackCount - 39] = ')';\n    $stack[$stackCount - 40] = '(';\n\
    \    $stack[$stackCount - 41] = '(';\n    $stack[$stackCount - 42] = ')';\n  \
    \  $stack[$stackCount - 43] = '(';\n    $stack[$stackCount - 44] = '(';\n    $stack[$stackCount\
    \ - 45] = ')';\n    $\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7vgc9b1d.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackLen = 0;\n    $stackStr = '';\n    foreach ($lst\
    \ as $char) {\n        if ($char == '(') {\n            $stack[] = $char;\n  \
    \          $stackLen++;\n        } else if ($char == ')') {\n            $stackLen--;\n\
    \            if ($stackLen < 0) {\n                return false;\n           \
    \ }\n            $stackStr .= $char;\n        } else {\n            $stackStr\
    \ .= $char;\n        }\n    }\n    if ($stackLen < 0) {\n        return false;\n\
    \    }\n    $stackStr .= ')';\n    $stackStrLen = strlen($stackStr);\n    for\
    \ ($i = 0; $i < $stackStrLen; $i++) {\n        if ($stack[$i] != $stackStr[$i])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27ive35_.php:49\n\
    Stack trace:\n#0 /tmp/tmp27ive35_.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp27ive35_.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $s) {\n    if ($s == '(') {\n      $stack[]\
    \ = $s;\n    } else if ($s == ')') {\n      if (empty($stack)) {\n        return\
    \ 'No';\n      }\n      $top = array_pop($stack);\n      if ($top != '(') {\n\
    \        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9h63fwk.php:36\n\
    Stack trace:\n#0 /tmp/tmpg9h63fwk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpg9h63fwk.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  $good = true;\n  for ($i\
    \ = 0; $i < $stackCount; $i++) {\n    $stack[$i] = $lst[$i];\n  }\n  for ($i =\
    \ 0; $i < $stackCount; $i++) {\n    if ($stack[$i] === '(') {\n      $stack[$i]\
    \ = ')';\n      $good = false;\n    }\n    if ($stack[$i] === ')') {\n      $good\
    \ = true;\n    }\n  }\n  return $good;\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkb5d61o0.php:37\n\
    Stack trace:\n#0 /tmp/tmpkb5d61o0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpkb5d61o0.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open ==\
    \ $close) {\n            $stack[] = $item;\n        } else if ($item == ')' &&\
    \ $open == $close) {\n            $open--;\n            $close--;\n          \
    \  if ($open == 0 && $close == 0) {\n                return true;\n          \
    \  }\n        }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4_x1dnyp.php:40\n\
    Stack trace:\n#0 /tmp/tmp4_x1dnyp.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp4_x1dnyp.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 3] = 1;\n\
    \    $stack[$stackCount - 4] = 0;\n    $stack[$stackCount - 5] = 0;\n    $stack[$stackCount\
    \ - 6] = 0;\n    $stack[$stackCount - 7] = 0;\n    $stack[$stackCount - 8] = 0;\n\
    \    $stack[$stackCount - 9] = 0;\n    $stack[$stackCount - 10] = 0;\n    $stack[$stackCount\
    \ - 11] = 0;\n    $stack[$stackCount - 12] = 0;\n    $stack[$stackCount - 13]\
    \ = 0;\n    $stack[$stackCount - 14] = 0;\n    $stack[$stackCount - 15] = 0;\n\
    \    $stack[$stackCount - 16] = 0;\n    $stack[$stackCount - 17] = 0;\n    $stack[$stackCount\
    \ - 18] = 0;\n    $stack[$stackCount - 19] = 0;\n    $stack[$stackCount - 20]\
    \ = 0;\n    $stack[$stackCount - 21] = 0;\n    $stack[$stackCount - 22] = 0;\n\
    \    $stack[$stackCount - 23] = 0;\n    $stack[$stackCount - 24] = 0;\n    $stack[$stackCount\
    \ - 25] = 0;\n    $stack[$stackCount - 26] = 0;\n    $stack[$stackCount - 27]\
    \ = 0;\n    $stack[$stackCount - 28] = 0;\n    $stack[$stackCount - 29] = 0;\n\
    \    $stack[$stackCount - 30] = 0;\n    $stack[$stackCount - 31] = 0;\n    $stack[$stackCount\
    \ - 32] = 0;\n    $stack[$stackCount - 33] = 0;\n    $stack[$stackCount - 34]\
    \ = 0;\n    $stack[$stackCount - 35] = 0;\n    $stack[$stackCount - 36] = 0;\n\
    \    $stack[$stackCount - 37] = 0;\n    $stack[$stackCount - 38] = 0;\n    $stack[$stackCount\
    \ - 39] = 0;\n    $stack[$stackCount - 40] = 0;\n    $stack[$stackCount - 41]\
    \ = 0;\n    $stack[$stackCount - 42] = 0;\n    $stack[$stackCount - 43] = 0;\n\
    \    $stack[$stackCount - 44] = 0;\n    $stack[$stackCount - 45] = 0;\n    $stack[$stackCount\
    \ - 46] = 0;\n    $stack[$stackCount - 47] = 0;\n    $stack[$stackCount - 48]\
    \ = 0;\n    $stack[$stackCount - 49] = 0;\n    $stack[$stackCount - 50] = 0;\n\
    \    $stack[$stackCount - 51] = 0;\n    $stack[$stackCount - 52] = 0;\n    $stack[$stackCount\
    \ - 53] = 0;\n    $stack[$stackCount - 54] = 0;\n    $stack[$stackCount - 55\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzhba5kji.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return false;\n      }\n    }\n  }\n  return !empty($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0y_czww.php:36\n\
    Stack trace:\n#0 /tmp/tmp_0y_czww.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_0y_czww.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                $stack\
    \ = array_pop($stack);\n            } else {\n                return 'No';\n \
    \           }\n        }\n    }\n    return 'No';\n}\n</code>\n<|/ a tags=php,algorithm,string\
    \ |>\n<| c |>\nThis doesn't work. Try it with `match_parens(['(', ')'])`.\n<|/\
    \ c |>\n<| c |>\nIt works, try it with `match_parens(['(', ')'])`\n<|/ c |>\n\
    <| c |>\nIt doesn't work. Try it with `match_parens(['(', ')'])`.\n<|/ c |>\n\
    <| c |>\nIt works, try it with `match_parens(['(', ')'])`\n<|/ c |>\n<| c |>\n\
    It works, try it with `match_parens(['(', ')'])`\n<|/ c |>\n<| a tags=php,algorithm,string\
    \ |>\nI wrote a solution in Python:\n<code>\ndef match_parens(lst):\n    stack\
    \ = []\n    for c in lst:\n        if c == '(':\n            stack.append(c)\n\
    \        elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n        else:\n            return False\n  \
    \  return len(stack) == 0\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsdzzgbdk.php on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8eyt6_yl.php:38\n\
    Stack trace:\n#0 /tmp/tmp8eyt6_yl.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp8eyt6_yl.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = array();\n    foreach ($lst as $s) {\n        if ($s == '(')\
    \ {\n            $stack[] = $s;\n        } else if ($s == ')') {\n           \
    \ if (empty($stack)) {\n                return false;\n            }\n       \
    \     $s = array_pop($stack);\n            if ($s == '(') {\n                $stack[]\
    \ = $s;\n            } else {\n                return false;\n            }\n\
    \        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpelrxfirw.php:38\n\
    Stack trace:\n#0 /tmp/tmpelrxfirw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpelrxfirw.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $el) {\n      \
    \  if ($el == '(') {\n            $stack[] = $el;\n        } else if ($el == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top != '(') {\n                $good = false;\n                break;\n\
    \            }\n        } else {\n            $good = false;\n            break;\n\
    \        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gnc_i_x.php:42\n\
    Stack trace:\n#0 /tmp/tmp4gnc_i_x.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4gnc_i_x.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (count($stack) == 0) {\n                return false;\n           \
    \ }\n            $stack = array_pop($stack);\n        } else {\n            if\
    \ (count($stack) != 0) {\n                return false;\n            }\n     \
    \       $stack[] = $item;\n        }\n    }\n    return count($stack) == 0;\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: count(): Parameter must be an array or an object that implements\
    \ Countable in /tmp/tmpor5erugd.php on line 30\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpor5erugd.php:38\nStack trace:\n#0 /tmp/tmpor5erugd.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpor5erugd.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return 'No';\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssn6067t.php:36\n\
    Stack trace:\n#0 /tmp/tmpssn6067t.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpssn6067t.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    if ($stack[$i] === '(') {\n   \
    \   $stack[$i] = '(';\n      $stackCount--;\n    }\n    if ($stack[$i] === ')')\
    \ {\n      $stack[$i] = ')';\n      $stackCount--;\n    }\n  }\n  if ($stackCount\
    \ === 0) {\n    return 'Yes';\n  }\n  return 'No';\n}\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknkd5jv6.php:48\n\
    Stack trace:\n#0 /tmp/tmpknkd5jv6.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpknkd5jv6.php\
    \ on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $open++;\n        } else if ($char\
    \ == ')') {\n            $close++;\n        } else if ($char == '(' && $open >\
    \ 0) {\n            $open--;\n        } else if ($char == ')' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return false;\n        }\n        $stack[] = $char;\n    }\n    return $open\
    \ > $close;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ootq9vt.php:40\n\
    Stack trace:\n#0 /tmp/tmp8ootq9vt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8ootq9vt.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $good = true;\n   \
    \ foreach ($lst as $item) {\n        if ($item == '(') {\n            $stack[]\
    \ = $item;\n        } else {\n            if ($item == ')') {\n              \
    \  if (count($stack) == 0) {\n                    $good = false;\n           \
    \         break;\n                }\n                $item = array_pop($stack);\n\
    \            }\n            $stack[] = $item;\n        }\n    }\n    return $good;\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1yefrgj7.php:39\n\
    Stack trace:\n#0 /tmp/tmp1yefrgj7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1yefrgj7.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($stackCount > 0 && $item == ')') {\n                $stackCount--;\n\
    \                if ($stackCount == 0) {\n                    $stack[] = $item;\n\
    \                }\n            } else {\n                return \"No\";\n   \
    \         }\n        }\n    }\n    return $stackCount > 0 ? \"Yes\" : \"No\";\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv0_sx4mf.php:38\n\
    Stack trace:\n#0 /tmp/tmpv0_sx4mf.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpv0_sx4mf.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $good = true;\n  foreach ($lst as $s) {\n    if ($s ==\
    \ '(') {\n      $stack[] = $s;\n    } else if ($s == ')') {\n      if (empty($stack))\
    \ {\n        $good = false;\n        break;\n      }\n      $top = array_pop($stack);\n\
    \      if ($top != '(') {\n        $good = false;\n        break;\n      }\n \
    \   }\n  }\n  return $good;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6d81ql3.php:39\n\
    Stack trace:\n#0 /tmp/tmpy6d81ql3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpy6d81ql3.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $result = '';\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            $result = $result . $stack[count($stack) - 1];\n    \
    \        unset($stack[count($stack) - 1]);\n        } else {\n            $result\
    \ = $result . $item;\n        }\n    }\n    return $result == 'Yes';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmugmtvrx.php:34\n\
    Stack trace:\n#0 /tmp/tmpmugmtvrx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpmugmtvrx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  $good = true;\n  foreach\
    \ ($lst as $i => $char) {\n    if ($char === '(') {\n      $stack[] = $char;\n\
    \      $stackCount--;\n    } else if ($char === ')') {\n      $stack[] = $char;\n\
    \      $stackCount++;\n      if ($stackCount === 0) {\n        $good = false;\n\
    \        break;\n      }\n    }\n  }\n  return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi1m_mx0m.php:38\n\
    Stack trace:\n#0 /tmp/tmpi1m_mx0m.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpi1m_mx0m.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open >\
    \ 0) {\n            $open--;\n        } else if ($item == ')' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return 'No';\n        }\n        $stack[] = $item;\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyqevo63.php:41\n\
    Stack trace:\n#0 /tmp/tmpkyqevo63.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpkyqevo63.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $open = 0;\n  $close = 0;\n  foreach ($lst as $char) {\n\
    \    if ($char == '(') {\n      $open++;\n    } else if ($char == ')') {\n   \
    \   $close++;\n    } else {\n      if ($open > $close) {\n        return 'No';\n\
    \      }\n      if ($open < $close) {\n        $stack[] = $char;\n      }\n  \
    \  }\n  }\n  if ($open > $close) {\n    return 'No';\n  }\n  foreach ($stack as\
    \ $char) {\n    if ($char == '(') {\n      $open--;\n    } else if ($char == ')')\
    \ {\n      $close--;\n    } else {\n      if ($open < $close) {\n        return\
    \ 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkms2aknj.php:54\n\
    Stack trace:\n#0 /tmp/tmpkms2aknj.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpkms2aknj.php\
    \ on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                } else {\n           \
    \         $stack[] = $item;\n                }\n            } else {\n       \
    \         $stack[] = $item;\n            }\n        }\n    }\n    return 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5bvzp89.php:39\n\
    Stack trace:\n#0 /tmp/tmph5bvzp89.php(53): test()\n#1 {main}\n  thrown in /tmp/tmph5bvzp89.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $s) {\n       \
    \ if ($s == '(') {\n            $stack[] = $s;\n        } else if ($s == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top != '(') {\n                $good = false;\n                break;\n\
    \            }\n        } else {\n            $good = false;\n            break;\n\
    \        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4b04_w_d.php:42\n\
    Stack trace:\n#0 /tmp/tmp4b04_w_d.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4b04_w_d.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $stack[] = $char;\n        } else\
    \ {\n            if ($char == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                $stack\
    \ = array_pop($stack);\n            } else {\n                return 'No';\n \
    \           }\n        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7dlar3h.php:38\n\
    Stack trace:\n#0 /tmp/tmpt7dlar3h.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpt7dlar3h.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($stackCount > 0 && $item == ')') {\n                $stackCount--;\n\
    \                if ($stackCount == 0) {\n                    return 'Yes';\n\
    \                }\n            }\n        }\n    }\n    return 'No';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpku1ifuj3.php:36\n\
    Stack trace:\n#0 /tmp/tmpku1ifuj3.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpku1ifuj3.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $result = '';\n  foreach ($lst as $item) {\n    if ($item\
    \ == '(') {\n      $stack[] = $item;\n    } else if ($item == ')') {\n      if\
    \ (empty($stack)) {\n        $result .= $item;\n      } else {\n        $result\
    \ = $item . $stack[count($stack) - 1];\n        $stack = array_pop($stack);\n\
    \      }\n    }\n  }\n  return $result == 'Yes';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuoiojvgn.php:36\n\
    Stack trace:\n#0 /tmp/tmpuoiojvgn.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpuoiojvgn.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    foreach ($lst as $char) {\n       \
    \ if ($char == '(') {\n            $open++;\n        } else if ($char == ')')\
    \ {\n            $open--;\n        }\n        if ($open == 0) {\n            $stack[]\
    \ = $char;\n        }\n    }\n    return $stack == [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tjy19s0.php:34\n\
    Stack trace:\n#0 /tmp/tmp9tjy19s0.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9tjy19s0.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return 'No';\n            }\n  \
    \          $top = array_pop($stack);\n            if ($top != '(') {\n       \
    \         return 'No';\n            }\n        } else {\n            return 'No';\n\
    \        }\n    }\n    return 'Yes';\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszdlrkpo.php:38\n\
    Stack trace:\n#0 /tmp/tmpszdlrkpo.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpszdlrkpo.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n    $stack[$stackCount-1]\
    \ = $lst[0];\n    $stack[$stackCount-1] = $lst[0];\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8vrl71b6.php on line 86\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else {\n      if ($item == ')') {\n        if (count($stack)\
    \ == 0) {\n          return 'No';\n        }\n        $item = array_pop($stack);\n\
    \      }\n      $stack[] = $item;\n    }\n  }\n  return 'Yes';\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq3qhcqe4.php:38\n\
    Stack trace:\n#0 /tmp/tmpq3qhcqe4.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpq3qhcqe4.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackLen = 0;\n    $stackStr = '';\n    $good = true;\n\
    \    foreach ($lst as $item) {\n        if ($item == '(') {\n            $stack[]\
    \ = $item;\n            $stackStr .= $item;\n            $stackLen++;\n      \
    \  } else if ($item == ')') {\n            $good = false;\n            $stackStr\
    \ .= $item;\n            $stackLen--;\n            if ($stackLen < 0) {\n    \
    \            return $good;\n            }\n        } else {\n            $stackStr\
    \ .= $item;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjftislzp.php:42\n\
    Stack trace:\n#0 /tmp/tmpjftislzp.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpjftislzp.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open >\
    \ 0) {\n            $open--;\n        } else if ($item == ')' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return false;\n        }\n        $stack[] = $item;\n    }\n    return $open\
    \ > $close;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppg_ejlt0.php:40\n\
    Stack trace:\n#0 /tmp/tmppg_ejlt0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmppg_ejlt0.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ $i++) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ $good = true;\n  for ($i = 0; $i < $stackCount; $i++) {\n    $good = $good &&\
    \ $stack[$i] === '(';\n    $good = $good && $stack[$i] === ')';\n  }\n  return\
    \ $good;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpk8jl5e.php:33\n\
    Stack trace:\n#0 /tmp/tmphpk8jl5e.php(47): test()\n#1 {main}\n  thrown in /tmp/tmphpk8jl5e.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else {\n            if ($item ==\
    \ ')') {\n                if (count($stack) == 0) {\n                    return\
    \ 'No';\n                }\n                $stack = array_pop($stack);\n    \
    \        } else {\n                if (count($stack) == 0) {\n               \
    \     return 'Yes';\n                }\n                $stack[] = $item;\n  \
    \          }\n        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3717d_q0.php:42\n\
    Stack trace:\n#0 /tmp/tmp3717d_q0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3717d_q0.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $s) {\n       \
    \ if ($s == '(') {\n            $stack[] = $s;\n        } else if ($s == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top != '(') {\n                $good = false;\n                break;\n\
    \            }\n        } else {\n            $good = false;\n            break;\n\
    \        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7quzwmyt.php:42\n\
    Stack trace:\n#0 /tmp/tmp7quzwmyt.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7quzwmyt.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqfan6o2.php:42\n\
    Stack trace:\n#0 /tmp/tmplqfan6o2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmplqfan6o2.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                array_pop($stack);\n\
    \            } else {\n                return 'No';\n            }\n        }\n\
    \    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfhzj_w02.php:38\n\
    Stack trace:\n#0 /tmp/tmpfhzj_w02.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpfhzj_w02.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open >\
    \ 0) {\n            $open--;\n        } else if ($item == ')' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return 'No';\n        }\n        $stack[] = $item;\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbva7s1y.php:41\n\
    Stack trace:\n#0 /tmp/tmpcbva7s1y.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcbva7s1y.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return 'No';\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppga1t4b8.php:36\n\
    Stack trace:\n#0 /tmp/tmppga1t4b8.php(50): test()\n#1 {main}\n  thrown in /tmp/tmppga1t4b8.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 3] = 0;\n\
    \    $stack[$stackCount - 4] = 0;\n    $stack[$stackCount - 5] = 0;\n    $stack[$stackCount\
    \ - 6] = 0;\n    $stack[$stackCount - 7] = 0;\n    $stack[$stackCount - 8] = 0;\n\
    \    $stack[$stackCount - 9] = 0;\n    $stack[$stackCount - 10] = 0;\n    $stack[$stackCount\
    \ - 11] = 0;\n    $stack[$stackCount - 12] = 0;\n    $stack[$stackCount - 13]\
    \ = 0;\n    $stack[$stackCount - 14] = 0;\n    $stack[$stackCount - 15] = 0;\n\
    \    $stack[$stackCount - 16] = 0;\n    $stack[$stackCount - 17] = 0;\n    $stack[$stackCount\
    \ - 18] = 0;\n    $stack[$stackCount - 19] = 0;\n    $stack[$stackCount - 20]\
    \ = 0;\n    $stack[$stackCount - 21] = 0;\n    $stack[$stackCount - 22] = 0;\n\
    \    $stack[$stackCount - 23] = 0;\n    $stack[$stackCount - 24] = 0;\n    $stack[$stackCount\
    \ - 25] = 0;\n    $stack[$stackCount - 26] = 0;\n    $stack[$stackCount - 27]\
    \ = 0;\n    $stack[$stackCount - 28] = 0;\n    $stack[$stackCount - 29] = 0;\n\
    \    $stack[$stackCount - 30] = 0;\n    $stack[$stackCount - 31] = 0;\n    $stack[$stackCount\
    \ - 32] = 0;\n    $stack[$stackCount - 33] = 0;\n    $stack[$stackCount - 34]\
    \ = 0;\n    $stack[$stackCount - 35] = 0;\n    $stack[$stackCount - 36] = 0;\n\
    \    $stack[$stackCount - 37] = 0;\n    $stack[$stackCount - 38] = 0;\n    $stack[$stackCount\
    \ - 39] = 0;\n    $stack[$stackCount - 40] = 0;\n    $stack[$stackCount - 41]\
    \ = 0;\n    $stack[$stackCount - 42] = 0;\n    $stack[$stackCount - 43] = 0;\n\
    \    $stack[$stackCount - 44] = 0;\n    $stack[$stackCount - 45] = 0;\n    $stack[$stackCount\
    \ - 46] = 0;\n    $stack[$stackCount - 47] = 0;\n    $stack[$stackCount - 48]\
    \ = 0;\n    $stack[$stackCount - 49] = 0;\n    $stack[$stackCount - 50] = 0;\n\
    \    $stack[$stackCount - 51] = 0;\n    $stack[$stackCount - 52] = 0;\n    $stack[$stackCount\
    \ - 53] = 0;\n    $stack[$stackCount - 54] = 0;\n    $stack[$stackCount - 55\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjpkkuybu.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $open++;\n        } else if ($char\
    \ == ')') {\n            $close++;\n        } else if ($char == ')' && $close\
    \ > 0) {\n            $close--;\n        } else if ($char == '(' && $open > 0)\
    \ {\n            $open--;\n        }\n        if ($open > $close) {\n        \
    \    return false;\n        }\n        $stack[] = $char;\n    }\n    return $open\
    \ > $close;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eywg1yn.php:40\n\
    Stack trace:\n#0 /tmp/tmp3eywg1yn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3eywg1yn.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = array();\n    $open = array();\n    $close = array();\n    foreach\
    \ ($lst as $item) {\n        if ($item == '(') {\n            $open[] = $item;\n\
    \        } else {\n            $close[] = $item;\n        }\n    }\n    $open\
    \ = array_reverse($open);\n    foreach ($open as $item) {\n        if ($item ==\
    \ ')') {\n            $stack[] = $item;\n        } else {\n            $stack[]\
    \ = $item;\n        }\n    }\n    foreach ($close as $item) {\n        if ($item\
    \ == '(') {\n            $stack[] = $item;\n        } else {\n            $stack[]\
    \ = $item;\n        }\n    }\n    return $stack == array_reverse($stack);\n}\n\
    \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp218pnfqf.php:47\n\
    Stack trace:\n#0 /tmp/tmp218pnfqf.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp218pnfqf.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $good = true;\n   \
    \ foreach ($lst as $item) {\n        if ($item == '(') {\n            $stack[]\
    \ = $item;\n        } else {\n            if ($item == ')') {\n              \
    \  if (empty($stack)) {\n                    $good = false;\n                \
    \    break;\n                }\n                $item = array_pop($stack);\n \
    \           }\n            $stack[] = $item;\n        }\n    }\n    return $good;\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_vo1exob.php:39\n\
    Stack trace:\n#0 /tmp/tmp_vo1exob.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_vo1exob.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    foreach ($lst as $char) {\n        if ($char == '(') {\n            $stack[$stackCount\
    \ - 1]++;\n        } elseif ($char == ')') {\n            $stack[$stackCount -\
    \ 2]++;\n        } else {\n            $stack[$stackCount - 1]++;\n          \
    \  $stack[$stackCount - 2]++;\n        }\n    }\n    if ($stack[$stackCount -\
    \ 1] == $stack[$stackCount - 2]) {\n        return 'Yes';\n    } else {\n    \
    \    return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk0ht51rs.php:41\n\
    Stack trace:\n#0 /tmp/tmpk0ht51rs.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpk0ht51rs.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  foreach ($lst as $i => $char)\
    \ {\n    if ($char == '(') {\n      $stack[] = $char;\n      $stackCount--;\n\
    \    } else if ($char == ')') {\n      $stack[] = $char;\n      $stackCount--;\n\
    \      if ($stackCount == 0) {\n        $stack = array_reverse($stack);\n    \
    \    $stackCount = count($stack);\n        if ($stackCount > 0) {\n          return\
    \ 'Yes';\n        }\n      }\n    }\n  }\n  return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbglvnlsx.php:40\n\
    Stack trace:\n#0 /tmp/tmpbglvnlsx.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbglvnlsx.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $result = 'No';\n    foreach ($lst as $item) {\n  \
    \      if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $result = 'Yes';\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $result = 'No';\n           \
    \     break;\n            }\n        } else {\n            $result = 'No';\n \
    \           break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp037z7rpy.php:42\n\
    Stack trace:\n#0 /tmp/tmp037z7rpy.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp037z7rpy.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][1];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i][0];\n  }\n  $stackCount = count($stack);\n  for ($i\
    \ = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][1];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i][0];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$i][1];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][0];\n \
    \ }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n\
    \    $stack[$i] = $stack[$i][1];\n  }\n  $stackCount = count($stack);\n  for ($i\
    \ = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][0];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i][1];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$i][0];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][1];\n \
    \ }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n\
    \    $stack[$i] = $stack[$i][0];\n  }\n  $stackCount = count($stack);\n  for ($i\
    \ = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][1];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i][0];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph0ut3cke.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($stackCount > 0 && $item == ')') {\n                $stackCount--;\n\
    \                $stack[] = $item;\n            } else {\n                return\
    \ false;\n            }\n        }\n    }\n    if ($stackCount > 0) {\n      \
    \  return false;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprryihust.php:39\n\
    Stack trace:\n#0 /tmp/tmprryihust.php(53): test()\n#1 {main}\n  thrown in /tmp/tmprryihust.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = $lst[$stackCount - 1];\n    $stack[$stackCount - 2] = $lst[$stackCount\
    \ - 2];\n    $stack[$stackCount - 3] = $lst[$stackCount - 3];\n    $stack[$stackCount\
    \ - 4] = $lst[$stackCount - 4];\n    $stack[$stackCount - 5] = $lst[$stackCount\
    \ - 5];\n    $stack[$stackCount - 6] = $lst[$stackCount - 6];\n    $stack[$stackCount\
    \ - 7] = $lst[$stackCount - 7];\n    $stack[$stackCount - 8] = $lst[$stackCount\
    \ - 8];\n    $stack[$stackCount - 9] = $lst[$stackCount - 9];\n    $stack[$stackCount\
    \ - 10] = $lst[$stackCount - 10];\n    $stack[$stackCount - 11] = $lst[$stackCount\
    \ - 11];\n    $stack[$stackCount - 12] = $lst[$stackCount - 12];\n    $stack[$stackCount\
    \ - 13] = $lst[$stackCount - 13];\n    $stack[$stackCount - 14] = $lst[$stackCount\
    \ - 14];\n    $stack[$stackCount - 15] = $lst[$stackCount - 15];\n    $stack[$stackCount\
    \ - 16] = $lst[$stackCount - 16];\n    $stack[$stackCount - 17] = $lst[$stackCount\
    \ - 17];\n    $stack[$stackCount - 18] = $lst[$stackCount - 18];\n    $stack[$stackCount\
    \ - 19] = $lst[$stackCount - 19];\n    $stack[$stackCount - 20] = $lst[$stackCount\
    \ - 20];\n    $stack[$stackCount - 21] = $lst[$stackCount - 21];\n    $stack[$stackCount\
    \ - 22] = $lst[$stackCount - 22];\n    $stack[$stackCount - 23] = $lst[$stackCount\
    \ - 23];\n    $stack[$stackCount - 24] = $lst[$stackCount - 24];\n    $stack[$stackCount\
    \ - 25] = $lst[$stackCount - 25];\n    $stack[$stackCount - 26] = $lst[$stackCount\
    \ - 26];\n    $stack[$stackCount - 27] = $lst[$stackCount - 27];\n    $stack[$stackCount\
    \ - 28] = $lst[$stackCount - 28];\n    $stack[$stackCount - 29] = $lst[$stackCount\
    \ - 29];\n    $stack[$stackCount - 30] = $lst[$stack\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpukz6c3sb.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    foreach ($lst as $char) {\n        if ($char == '(') {\n    \
    \        $stack[$stackCount - 1]++;\n        } else if ($char == ')') {\n    \
    \        $stack[$stackCount - 1]--;\n            if ($stack[$stackCount - 1] <\
    \ 0) {\n                return \"No\";\n            }\n        }\n        $stackCount--;\n\
    \    }\n    if ($stackCount != 0) {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparihi9fu.php:41\n\
    Stack trace:\n#0 /tmp/tmparihi9fu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmparihi9fu.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open ==\
    \ $close) {\n            $stack[] = $item;\n        } else if ($item == ')' &&\
    \ $open == $close) {\n            $open--;\n            $close--;\n        } else\
    \ if ($item == ')' && $open == $close) {\n            $open--;\n        } else\
    \ if ($item == '(' && $open == $close) {\n            $open--;\n        }\n  \
    \  }\n    return $open > 0 && $close == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__ubc838.php:41\n\
    Stack trace:\n#0 /tmp/tmp__ubc838.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp__ubc838.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0deifxs.php:42\n\
    Stack trace:\n#0 /tmp/tmpa0deifxs.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpa0deifxs.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbdxwf0cy.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open ==\
    \ $close) {\n            $stack[] = $item;\n        } else if ($item == ')' &&\
    \ $open == $close) {\n            $open--;\n            $close--;\n        } else\
    \ if ($item == ')' && $open == $close) {\n            $open--;\n        } else\
    \ if ($item == '(' && $open == $close) {\n            $open--;\n        }\n  \
    \  }\n    if ($open == 0 && $close == 0) {\n        return 'Yes';\n    } else\
    \ {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo0azql49.php:45\n\
    Stack trace:\n#0 /tmp/tmpo0azql49.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpo0azql49.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $el) {\n      \
    \  if ($el == '(') {\n            $stack[] = $el;\n        } else if ($el == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top != '(') {\n                $good = false;\n                break;\n\
    \            }\n        } else {\n            $good = false;\n            break;\n\
    \        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmjhil2nz.php:42\n\
    Stack trace:\n#0 /tmp/tmpmjhil2nz.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpmjhil2nz.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = array();\n  foreach ($lst as $el) {\n    if ($el == '(') {\n \
    \     $stack[] = $el;\n    } else if ($el == ')') {\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return false;\n      }\n    }\n  }\n  return empty($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6eu5wvx0.php:36\n\
    Stack trace:\n#0 /tmp/tmp6eu5wvx0.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6eu5wvx0.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $good = true;\n   \
    \ foreach ($lst as $char) {\n        if ($char === '(') {\n            $stack[]\
    \ = $char;\n            $stackCount--;\n        } elseif ($char === ')') {\n \
    \           $stack[] = $char;\n            $stackCount++;\n        } else {\n\
    \            if ($stackCount === 0) {\n                $good = false;\n      \
    \          break;\n            }\n            $stack[] = $char;\n            $stackCount--;\n\
    \        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm4n1az20.php:41\n\
    Stack trace:\n#0 /tmp/tmpm4n1az20.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpm4n1az20.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $result = '';\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                return \"No\";\n\
    \            }\n            $result = $stack[count($stack) - 1];\n           \
    \ unset($stack[count($stack) - 1]);\n        } else {\n            $result .=\
    \ $item;\n        }\n    }\n    if (empty($stack)) {\n        return \"Yes\";\n\
    \    }\n    return \"No\";\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbx3iemld.php:40\n\
    Stack trace:\n#0 /tmp/tmpbx3iemld.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbx3iemld.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $good = true;\n  foreach ($lst as $s) {\n    if ($s ==\
    \ '(') {\n      $stack[] = $s;\n    } else if ($s == ')') {\n      if (empty($stack))\
    \ {\n        $good = false;\n        break;\n      }\n      $top = array_pop($stack);\n\
    \      if ($top != '(') {\n        $good = false;\n        break;\n      }\n \
    \   } else {\n      if (empty($stack)) {\n        $good = false;\n        break;\n\
    \      }\n      $top = array_pop($stack);\n      if ($top != $s) {\n        $good\
    \ = false;\n        break;\n      }\n    }\n  }\n  return $good;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7pq2xubq.php:49\n\
    Stack trace:\n#0 /tmp/tmp7pq2xubq.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp7pq2xubq.php\
    \ on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $s) {\n    if ($s == '(') {\n      $stack[]\
    \ = $s;\n    } else if ($s == ')') {\n      if (empty($stack)) {\n        return\
    \ false;\n      }\n      $s = array_pop($stack);\n      if ($s == '(') {\n   \
    \     $stack[] = $s;\n      } else {\n        return false;\n      }\n    } else\
    \ {\n      return false;\n    }\n  }\n  return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9my29qd.php:40\n\
    Stack trace:\n#0 /tmp/tmpa9my29qd.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpa9my29qd.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $str) {\n     \
    \   if ($str == '(') {\n            $stack[] = $str;\n        } else if ($str\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        }\n    }\n    return $good;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6azo5z7s.php:39\n\
    Stack trace:\n#0 /tmp/tmp6azo5z7s.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp6azo5z7s.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy21sc8x_.php:42\n\
    Stack trace:\n#0 /tmp/tmpy21sc8x_.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpy21sc8x_.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } elseif ($item == ')') {\n      \
    \      if (empty($stack)) {\n                return false;\n            }\n  \
    \          $top = array_pop($stack);\n            if ($top != '(') {\n       \
    \         return false;\n            }\n        }\n    }\n    return empty($stack);\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9_izq8tr.php:36\n\
    Stack trace:\n#0 /tmp/tmp9_izq8tr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp9_izq8tr.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 3] = 0;\n\
    \    $stack[$stackCount - 4] = 0;\n    $stack[$stackCount - 5] = 0;\n    $stack[$stackCount\
    \ - 6] = 0;\n    $stack[$stackCount - 7] = 0;\n    $stack[$stackCount - 8] = 0;\n\
    \    $stack[$stackCount - 9] = 0;\n    $stack[$stackCount - 10] = 0;\n    $stack[$stackCount\
    \ - 11] = 0;\n    $stack[$stackCount - 12] = 0;\n    $stack[$stackCount - 13]\
    \ = 0;\n    $stack[$stackCount - 14] = 0;\n    $stack[$stackCount - 15] = 0;\n\
    \    $stack[$stackCount - 16] = 0;\n    $stack[$stackCount - 17] = 0;\n    $stack[$stackCount\
    \ - 18] = 0;\n    $stack[$stackCount - 19] = 0;\n    $stack[$stackCount - 20]\
    \ = 0;\n    $stack[$stackCount - 21] = 0;\n    $stack[$stackCount - 22] = 0;\n\
    \    $stack[$stackCount - 23] = 0;\n    $stack[$stackCount - 24] = 0;\n    $stack[$stackCount\
    \ - 25] = 0;\n    $stack[$stackCount - 26] = 0;\n    $stack[$stackCount - 27]\
    \ = 0;\n    $stack[$stackCount - 28] = 0;\n    $stack[$stackCount - 29] = 0;\n\
    \    $stack[$stackCount - 30] = 0;\n    $stack[$stackCount - 31] = 0;\n    $stack[$stackCount\
    \ - 32] = 0;\n    $stack[$stackCount - 33] = 0;\n    $stack[$stackCount - 34]\
    \ = 0;\n    $stack[$stackCount - 35] = 0;\n    $stack[$stackCount - 36] = 0;\n\
    \    $stack[$stackCount - 37] = 0;\n    $stack[$stackCount - 38] = 0;\n    $stack[$stackCount\
    \ - 39] = 0;\n    $stack[$stackCount - 40] = 0;\n    $stack[$stackCount - 41]\
    \ = 0;\n    $stack[$stackCount - 42] = 0;\n    $stack[$stackCount - 43] = 0;\n\
    \    $stack[$stackCount - 44] = 0;\n    $stack[$stackCount - 45] = 0;\n    $stack[$stackCount\
    \ - 46] = 0;\n    $stack[$stackCount - 47] = 0;\n    $stack[$stackCount - 48]\
    \ = 0;\n    $stack[$stackCount - 49] = 0;\n    $stack[$stackCount - 50] = 0;\n\
    \    $stack[$stackCount - 51] = 0;\n    $stack[$stackCount - 52] = 0;\n    $stack[$stackCount\
    \ - 53] = 0;\n    $stack[$stackCount - 54] = 0;\n    $stack[$stackCount - 55\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptmzu89kc.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = '(';\n    for ($i = 0; $i < $stackCount; $i++) {\n        if ($lst[$i]\
    \ == ')') {\n            $stack[$i] = $stack[$i - 2];\n            $stackCount--;\n\
    \        } else {\n            $stack[$i] = $lst[$i];\n        }\n    }\n    $stack[$stackCount\
    \ - 1] = ')';\n    $stackCount = count($stack);\n    for ($i = 0; $i < $stackCount;\
    \ $i++) {\n        if ($stack[$i] != $stack[$i - 1]) {\n            return 'No';\n\
    \        }\n    }\n    return 'Yes';\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_by4dha.php:40\n\
    Stack trace:\n#0 /tmp/tmpu_by4dha.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpu_by4dha.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackLen = 0;\n  $good = true;\n  foreach ($lst as $item)\
    \ {\n    if ($item == '(') {\n      $stack[] = $item;\n      $stackLen++;\n  \
    \  } else if ($item == ')') {\n      if ($stackLen > 0) {\n        $stackLen--;\n\
    \      }\n      if ($stackLen < 0) {\n        $good = false;\n      }\n    }\n\
    \  }\n  return $good;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp93s46vh.php:38\n\
    Stack trace:\n#0 /tmp/tmpp93s46vh.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpp93s46vh.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = $lst[$stackCount - 1];\n    for ($i = 0; $i < $stackCount; $i++) {\n\
    \        if ($lst[$i] === '(') {\n            $stack[$i] = $lst[$i + 1];\n   \
    \         $i++;\n        }\n        if ($lst[$i] === ')') {\n            if ($stack[$i]\
    \ === ')') {\n                $stack[$i] = $lst[$i + 1];\n                $i++;\n\
    \            } else {\n                $stack[$i] = $lst[$i + 1];\n          \
    \      $stackCount--;\n            }\n        }\n    }\n    if ($stackCount ===\
    \ 0) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f1tjayi.php:44\n\
    Stack trace:\n#0 /tmp/tmp3f1tjayi.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp3f1tjayi.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                unset($stack[count($stack)\
    \ - 1]);\n            } else {\n                return 'No';\n            }\n\
    \        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68h933ju.php:38\n\
    Stack trace:\n#0 /tmp/tmp68h933ju.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp68h933ju.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else {\n            if ($item ==\
    \ ')') {\n                if (count($stack) == 0) {\n                    return\
    \ 'No';\n                }\n                $item = array_pop($stack);\n     \
    \       }\n            $stack[] = $item;\n        }\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4drt4afy.php:38\n\
    Stack trace:\n#0 /tmp/tmp4drt4afy.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp4drt4afy.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stack_count = 0;\n    foreach ($lst as $item) {\n\
    \        if ($item == '(') {\n            $stack[] = $item;\n            $stack_count++;\n\
    \        } elseif ($item == ')') {\n            $stack_count--;\n            if\
    \ ($stack_count == 0) {\n                $stack = array_reverse($stack);\n   \
    \             return $stack;\n            }\n        }\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsm7mj24o.php:36\n\
    Stack trace:\n#0 /tmp/tmpsm7mj24o.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsm7mj24o.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $s) {\n       \
    \ if ($s === '(') {\n            $stack[] = $s;\n        } else if ($s === ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top !== '(') {\n                $good = false;\n               \
    \ break;\n            }\n        } else {\n            $good = false;\n      \
    \      break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdoqtgteg.php:42\n\
    Stack trace:\n#0 /tmp/tmpdoqtgteg.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpdoqtgteg.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $s) {\n    if ($s == '(') {\n      $stack[]\
    \ = $s;\n    } else if ($s == ')') {\n      if (empty($stack)) {\n        return\
    \ false;\n      }\n      $top = array_pop($stack);\n      if ($top != '(') {\n\
    \        return false;\n      }\n    }\n  }\n  return empty($stack);\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpul7cl8ld.php:36\n\
    Stack trace:\n#0 /tmp/tmpul7cl8ld.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpul7cl8ld.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipzcgo50.php:38\n\
    Stack trace:\n#0 /tmp/tmpipzcgo50.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpipzcgo50.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $s) {\n       \
    \ if ($s === '(') {\n            $stack[] = $s;\n        } else if ($s === ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top !== '(') {\n                $good = false;\n               \
    \ break;\n            }\n        } else {\n            $good = false;\n      \
    \      break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaubrjlln.php:42\n\
    Stack trace:\n#0 /tmp/tmpaubrjlln.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpaubrjlln.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $good = true;\n   \
    \ foreach ($lst as $item) {\n        if ($item == '(') {\n            $stack[]\
    \ = $item;\n            $stackCount--;\n        } elseif ($item == ')') {\n  \
    \          if ($stackCount < 0) {\n                $good = false;\n          \
    \      break;\n            }\n            $stackCount--;\n            $stack[]\
    \ = $item;\n        } else {\n            $good = false;\n            break;\n\
    \        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt5khgjd.php:41\n\
    Stack trace:\n#0 /tmp/tmpxt5khgjd.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpxt5khgjd.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = $lst[$stackCount - 1];\n    for ($i = 1; $i < $stackCount; $i++) {\n\
    \        $open = $stack[$i - 1];\n        $close = $lst[$i];\n        if ($open\
    \ === '(' && $close === ')') {\n            $stack[$i] = $close;\n        } else\
    \ {\n            $stack[$i] = $open;\n        }\n    }\n    $stackCount = count($stack);\n\
    \    if ($stackCount === 1) {\n        return 'Yes';\n    }\n    return 'No';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfvayn84.php:39\n\
    Stack trace:\n#0 /tmp/tmpxfvayn84.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpxfvayn84.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][0];\n  }\n\
    \  for ($i = 1; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][$stack[$i][0]];\n\
    \  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n\
    \    $stack[$i] = $stack[$i][0];\n  }\n  for ($i = 1; $i < $stackCount; ++$i)\
    \ {\n    $stack[$i] = $stack[$i][$stack[$i][0]];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][0];\n \
    \ }\n  for ($i = 1; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][$stack[$i][0]];\n\
    \  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n\
    \    $stack[$i] = $stack[$i][0];\n  }\n  for ($i = 1; $i < $stackCount; ++$i)\
    \ {\n    $stack[$i] = $stack[$i][$stack[$i][0]];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][0];\n \
    \ }\n  for ($i = 1; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][$stack[$i][0]];\n\
    \  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n\
    \    $stack[$i] = $stack[$i][0];\n  }\n  for ($i = 1; $i < $stackCount; ++$i)\
    \ {\n    $stack[$i] = $stack[$i][$stack[$i][0]];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][0];\n \
    \ }\n  for ($i = 1; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i][$stack[$i][0]];\n\
    \  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n\
    \    $stack[$i] = $stack[$i][0];\n  }\n  for ($\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprtg42kxd.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ if ($item == ')') {\n            if (empty($stack)) {\n                return\
    \ 'No';\n            }\n            $stack[] = $item;\n            $stackCount\
    \ = count($stack);\n        } else {\n            if ($stackCount != count($stack))\
    \ {\n                return 'No';\n            }\n            $stackCount = count($stack);\n\
    \        }\n    }\n    if (empty($stack)) {\n        return 'Yes';\n    }\n  \
    \  return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2wnmpo24.php:43\n\
    Stack trace:\n#0 /tmp/tmp2wnmpo24.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp2wnmpo24.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $open++;\n        } else if ($char\
    \ == ')') {\n            $close++;\n        } else if ($char == '(' && $open ==\
    \ $close) {\n            $stack[] = $char;\n        }\n    }\n    return $open\
    \ >= $close;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx31fbhq3.php:34\n\
    Stack trace:\n#0 /tmp/tmpx31fbhq3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx31fbhq3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $s) {\n       \
    \ if ($s == '(') {\n            $stack[] = $s;\n        } else if ($s == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top != '(') {\n                $good = false;\n                break;\n\
    \            }\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpasr771qu.php:39\n\
    Stack trace:\n#0 /tmp/tmpasr771qu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpasr771qu.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if ($stackCount > 0 && $stack[count($stack)\
    \ - 1] == '(') {\n                    $stack[] = $item;\n                } else\
    \ {\n                    return 'No';\n                }\n            } else {\n\
    \                $stack[] = $item;\n            }\n        }\n    }\n    if ($stackCount\
    \ > 0 && $stack[count($stack) - 1] == '(') {\n        return 'Yes';\n    } else\
    \ {\n        return 'No';\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6u7c09w.php:43\n\
    Stack trace:\n#0 /tmp/tmpc6u7c09w.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpc6u7c09w.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n\
    \    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount\
    \ - 1] = 0;\n    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n\
    \    $stack[$stackCount - 2] = 0;\n    $stack[$stackCount - 1] = 0;\n    $stack[$stackCount\
    \ \nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkznnenv3.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (!empty($stack))\
    \ {\n        $item = array_pop($stack);\n      } else {\n        return 'No';\n\
    \      }\n    }\n  }\n  return 'Yes';\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsl95egz8.php on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $open++;\n        } else if ($char\
    \ == ')') {\n            $close++;\n        } else {\n            $stack[] = $char;\n\
    \        }\n    }\n    if ($open != $close) {\n        return 'No';\n    }\n \
    \   foreach ($stack as $char) {\n        if ($char == '(') {\n            $open--;\n\
    \        } else if ($char == ')') {\n            $close--;\n        }\n    }\n\
    \    if ($open != 0) {\n        return 'No';\n    }\n    return 'Yes';\n}\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxk319ia.php:47\n\
    Stack trace:\n#0 /tmp/tmpdxk319ia.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpdxk319ia.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $el) {\n        if ($el == '(') {\n\
    \            $stack[] = $el;\n        } else if ($el == ')') {\n            if\
    \ (empty($stack)) {\n                return false;\n            }\n          \
    \  $el = $stack[count($stack) - 1];\n            $stack = array_slice($stack,\
    \ 0, count($stack) - 1);\n            if ($el != ')') {\n                return\
    \ false;\n            }\n            $stack[] = $el;\n        }\n    }\n    return\
    \ empty($stack);\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxtjri4iq.php:38\n\
    Stack trace:\n#0 /tmp/tmpxtjri4iq.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpxtjri4iq.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $el) {\n      \
    \  if ($el == '(') {\n            $stack[] = $el;\n        } else if ($el == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top != '(') {\n                $good = false;\n                break;\n\
    \            }\n        } else {\n            $good = false;\n            break;\n\
    \        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc44f318u.php:42\n\
    Stack trace:\n#0 /tmp/tmpc44f318u.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpc44f318u.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $close\
    \ == $open) {\n            $stack[] = $item;\n        } else if ($item == ')'\
    \ && $open > $close) {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')' && $open > $close) {\n            $stack[] = $item;\n        } else if\
    \ ($item == '(' && $open > $close) {\n            $stack[] = $item;\n        }\n\
    \    }\n    if ($open > $close) {\n        return 'No';\n    } else {\n      \
    \  return 'Yes';\n    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp35es9wro.php:45\n\
    Stack trace:\n#0 /tmp/tmp35es9wro.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp35es9wro.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = $lst[$stackCount - 1];\n    for ($i = 0; $i < $stackCount; $i++) {\n\
    \        if ($lst[$i] === '(') {\n            $stack[$i] = $lst[$i + 1];\n   \
    \         $i++;\n        }\n        if ($lst[$i] === ')') {\n            $stack[$i]\
    \ = $lst[$i + 1];\n            $i++;\n        }\n    }\n    $stackCount = count($stack);\n\
    \    if ($stackCount === 1) {\n        return 'Yes';\n    }\n    if ($stackCount\
    \ === 0) {\n        return 'No';\n    }\n    $stack[$stackCount - 1] = $lst[$stackCount\
    \ - 1];\n    $stackCount = count($stack);\n    for ($i = 0; $i < $stackCount;\
    \ $i++) {\n        if ($stack[$i] === '(') {\n            $stack[$i] = $lst[$i\
    \ + 1];\n            $i++;\n        }\n        if ($stack[$i] === ')') {\n   \
    \         $stack[$i] = $lst[$i + 1];\n            $i++;\n        }\n    }\n  \
    \  $stackCount = count($stack);\n    if ($stackCount === 1) {\n        return\
    \ 'Yes';\n    }\n    if ($stackCount === 0) {\n        return 'No';\n    }\n \
    \   return 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9smsz0a4.php:63\n\
    Stack trace:\n#0 /tmp/tmp9smsz0a4.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp9smsz0a4.php\
    \ on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ if ($item == ')') {\n            if (count($stack) == $stackCount) {\n     \
    \           return true;\n            }\n            $stack[] = $item;\n     \
    \   }\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprl2s56bx.php:34\n\
    Stack trace:\n#0 /tmp/tmprl2s56bx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprl2s56bx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $el) {\n    if ($el == '(') {\n      $stack[]\
    \ = $el;\n    } else if ($el == ')') {\n      if (empty($stack)) {\n        return\
    \ false;\n      }\n      $top = array_pop($stack);\n      if ($top != '(') {\n\
    \        return false;\n      }\n    } else {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99gl1bqs.php:38\n\
    Stack trace:\n#0 /tmp/tmp99gl1bqs.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp99gl1bqs.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                $stack[]\
    \ = $item;\n            } else {\n                $stack[] = $item;\n        \
    \    }\n        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5dkvjmf.php:38\n\
    Stack trace:\n#0 /tmp/tmpw5dkvjmf.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpw5dkvjmf.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                if (count($stack) == $stackCount)\
    \ {\n                    return 'Yes';\n                }\n                $stack[]\
    \ = $item;\n            } else {\n                return 'No';\n            }\n\
    \        }\n    }\n    return 'No';\n}\n\nfunction candidate(...$args) {\n   \
    \ return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7lnb03u.php:38\n\
    Stack trace:\n#0 /tmp/tmpz7lnb03u.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpz7lnb03u.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open ==\
    \ $close) {\n            $stack[] = $item;\n        }\n    }\n    if ($open !=\
    \ $close) {\n        return 'No';\n    }\n    foreach ($stack as $item) {\n  \
    \      if ($item != ')') {\n            return 'No';\n        }\n    }\n    return\
    \ 'Yes';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpew96nbod.php:42\n\
    Stack trace:\n#0 /tmp/tmpew96nbod.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpew96nbod.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = array();\n    $stack[] = array('(', ')');\n    $stack[] = array('(',\
    \ ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n  \
    \  $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[]\
    \ = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(',\
    \ ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n  \
    \  $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[]\
    \ = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(',\
    \ ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n  \
    \  $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[]\
    \ = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(',\
    \ ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n  \
    \  $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[]\
    \ = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(',\
    \ ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n  \
    \  $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[]\
    \ = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(',\
    \ ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n  \
    \  $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[]\
    \ = array('(', ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(',\
    \ ')');\n    $stack[] = array('(', ')');\n    $stack[] = array('(', ')');\n\n\
    function candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !==\
    \ \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1io4z37y.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpngz2icg5.php:42\n\
    Stack trace:\n#0 /tmp/tmpngz2icg5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpngz2icg5.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = array();\n    $good = true;\n    foreach ($lst as $s) {\n  \
    \      if ($s == '(') {\n            $stack[] = $s;\n        } else if ($s ==\
    \ ')') {\n            if (empty($stack)) {\n                $good = false;\n \
    \               break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        }\n    }\n    return $good;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi6ddcns.php:39\n\
    Stack trace:\n#0 /tmp/tmpmi6ddcns.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpmi6ddcns.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return 'No';\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmuq0qd9v.php:36\n\
    Stack trace:\n#0 /tmp/tmpmuq0qd9v.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmuq0qd9v.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$\nfunction candidate(...$args) {\n    return\
    \ match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqh32ys2r.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $char)\
    \ {\n        if ($char == '(') {\n            $open++;\n        } else if ($char\
    \ == ')') {\n            $close++;\n        } else if ($char == '(' && $open >\
    \ 0) {\n            $open--;\n        } else if ($char == ')' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return false;\n        }\n        $stack[] = $char;\n    }\n    return $open\
    \ > $close;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirg6tzdj.php:40\n\
    Stack trace:\n#0 /tmp/tmpirg6tzdj.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpirg6tzdj.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $item) {\n    \
    \    if ($item == '(') {\n            $stack[] = $item;\n        } else if ($item\
    \ == ')') {\n            if (empty($stack)) {\n                $good = false;\n\
    \                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4exvo17p.php:42\n\
    Stack trace:\n#0 /tmp/tmp4exvo17p.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp4exvo17p.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $s) {\n        if ($s == '(') {\n\
    \            $stack[] = $s;\n        } else if ($s == '(') {\n            if (empty($stack))\
    \ {\n                return 'No';\n            }\n            $stack[] = $s;\n\
    \        } else if ($s == ')') {\n            if (empty($stack)) {\n         \
    \       return 'No';\n            }\n            $top = array_pop($stack);\n \
    \           if ($top != '(') {\n                return 'No';\n            }\n\
    \        } else {\n            return 'No';\n        }\n    }\n    return empty($stack)\
    \ ? 'Yes' : 'No';\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph358c213.php:43\n\
    Stack trace:\n#0 /tmp/tmph358c213.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph358c213.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $lst[$i];\n  }\n  $stackCount = count($stack);\n \
    \ for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = substr($stack[$i],\
    \ 1, -1);\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = substr($stack[$i], 0, -1);\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount\
    \ = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] =\
    \ $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount;\
    \ ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n\
    \  for ($i = 0; $i < $stackCount; ++$i) {\n    $stack[$i] = $stack[$i];\n  }\n\
    \  $stackCount = count($stack);\n  for ($i = 0; $i < $stackCount; ++$i) {\n  \
    \  $stack[$i] = $stack[$i];\n  }\n  $stackCount = count($stack);\n  for ($i =\
    \ 0; $i < $stackCount; ++$i) {\n    $stack[$\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphm_e03ns.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (!empty($stack))\
    \ {\n        $item = array_pop($stack);\n      }\n    } else {\n      return false;\n\
    \    }\n  }\n  return !empty($stack);\n}\n\nfunction candidate(...$args) {\n \
    \   return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzd8ojdho.php:34\n\
    Stack trace:\n#0 /tmp/tmpzd8ojdho.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpzd8ojdho.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl795lhre.php:38\n\
    Stack trace:\n#0 /tmp/tmpl795lhre.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpl795lhre.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = array();\n    $good = true;\n    foreach ($lst as $item) {\n\
    \        if ($item == '(') {\n            $stack[] = $item;\n        } else if\
    \ ($item == ')') {\n            if (empty($stack)) {\n                $good =\
    \ false;\n                break;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                $good = false;\n            \
    \    break;\n            }\n        } else {\n            $good = false;\n   \
    \         break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptkcfc3p5.php:42\n\
    Stack trace:\n#0 /tmp/tmptkcfc3p5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmptkcfc3p5.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return false;\n      }\n    }\n  }\n  return empty($stack);\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your answer. Your solution\
    \ works but it's too slow. My solution takes about 2 seconds to run on my computer.\
    \ Do you know any faster solution?\n<|/ c |>\n<| c |>\nI added a faster solution\n\
    <|/ c |>\n<| a tags=php,algorithm |>\nI wrote a solution in Python. Hope it helps.\n\
    <code>\ndef isGood(lst):\n    stack = []\n    for x in lst:\n        if x == '(':\n\
    \            stack.append(x)\n        elif x == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            top = stack.pop()\n       \
    \     if top != '(':\n                return False\n    return len(stack) == 0\n\
    \nlst = ['(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')', '(', ')',\
    \ '(', ')', '(', ')\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps3ld39tu.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $good = true;\n   \
    \ foreach ($lst as $item) {\n        if ($item == '(') {\n            $stack[]\
    \ = $item;\n            $stackCount--;\n        } elseif ($item == ')') {\n  \
    \          if ($stackCount < 0) {\n                $good = false;\n          \
    \      break;\n            }\n            $stackCount--;\n            $stack[]\
    \ = $item;\n        } elseif ($stackCount > 0) {\n            $good = false;\n\
    \            break;\n        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg1hbfbwj.php:41\n\
    Stack trace:\n#0 /tmp/tmpg1hbfbwj.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpg1hbfbwj.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return false;\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return false;\n      }\n    } else {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptkoi1rng.php:38\n\
    Stack trace:\n#0 /tmp/tmptkoi1rng.php(52): test()\n#1 {main}\n  thrown in /tmp/tmptkoi1rng.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            if ($item == ')') {\n                $stackCount = count($stack);\n\
    \                if ($stackCount > 0) {\n                    $lastItem = array_pop($stack);\n\
    \                    if ($lastItem != '(') {\n                        return false;\n\
    \                    }\n                }\n            } else {\n            \
    \    return false;\n            }\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return match_parens(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"\
    ())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqw_w7mxg.php:41\n\
    Stack trace:\n#0 /tmp/tmpqw_w7mxg.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqw_w7mxg.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open >\
    \ 0) {\n            $open--;\n        } else if ($item == ')' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return 'No';\n        }\n        $stack[] = $item;\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplybx4_dm.php:41\n\
    Stack trace:\n#0 /tmp/tmplybx4_dm.php(54): test()\n#1 {main}\n  thrown in /tmp/tmplybx4_dm.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (count($stack) == 0) {\n                return false;\n           \
    \ }\n            $item = array_pop($stack);\n        }\n        $stack[] = $item;\n\
    \    }\n    return count($stack) == 0;\n}\n\nfunction candidate(...$args) {\n\
    \    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhea8llo.php:34\n\
    Stack trace:\n#0 /tmp/tmpyhea8llo.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyhea8llo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $good = true;\n    foreach ($lst as $s) {\n       \
    \ if ($s == '(') {\n            $stack[] = $s;\n        } else if ($s == ')')\
    \ {\n            if (empty($stack)) {\n                $good = false;\n      \
    \          break;\n            }\n            $top = array_pop($stack);\n    \
    \        if ($top != '(') {\n                $good = false;\n                break;\n\
    \            }\n        } else {\n            $good = false;\n            break;\n\
    \        }\n    }\n    return $good;\n}\n\nfunction candidate(...$args) {\n  \
    \  return match_parens(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    ()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\")\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"(()(())\", \"())())\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")())\", \"(()()(\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"((((\"\
    , \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(()\", \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\")(\", \")(\")) !== \"No\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"(\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgeyulkjl.php:42\n\
    Stack trace:\n#0 /tmp/tmpgeyulkjl.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpgeyulkjl.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ if ($item == ')') {\n            $openCount = count($stack);\n            if\
    \ ($openCount > 0) {\n                $stackCount = count($stack);\n         \
    \       if ($openCount != $stackCount) {\n                    return 'No';\n \
    \               }\n                $stack = array_pop($stack);\n            }\n\
    \        } else {\n            return 'No';\n        }\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zfdj56b.php:40\n\
    Stack trace:\n#0 /tmp/tmp5zfdj56b.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5zfdj56b.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    $close = 0;\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $open++;\n        } else if ($item\
    \ == ')') {\n            $close++;\n        } else if ($item == '(' && $open >\
    \ 0) {\n            $open--;\n        } else if ($item == ')' && $close > 0) {\n\
    \            $close--;\n        }\n        if ($open > $close) {\n           \
    \ return 'No';\n        }\n        $stack[] = $item;\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44f67nw5.php:41\n\
    Stack trace:\n#0 /tmp/tmp44f67nw5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp44f67nw5.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  foreach ($lst as $item) {\n    if ($item == '(') {\n  \
    \    $stack[] = $item;\n    } else if ($item == ')') {\n      if (empty($stack))\
    \ {\n        return 'No';\n      }\n      $top = array_pop($stack);\n      if\
    \ ($top != '(') {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n\
    }\n</code>\n<|/ a |>\n<| c |>\nI believe this fails for `match_parens([')', ')'])`\n\
    <|/ c |>\n<| c |>\nI believe this fails for `match_parens([')', ')'])`\n<|/ c\
    \ |>\n<| c |>\nI believe this fails for `match_parens([')', ')'])`\n<|/ c |>\n\
    <| c |>\nI believe this fails for `match_parens([')', ')'])`\n<|/ c |>\n<| c |>\n\
    I believe this fails for `match_parens([')', ')'])`\n<|/ c |>\n<| a tags=php,algorithm\
    \ |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpafn2zf7y.php on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    $stack[$stackCount\
    \ - 1] = '(';\n    $stack[$stackCount - 2] = ')';\n    $stack[$stackCount - 3]\
    \ = '(';\n    $stack[$stackCount - 4] = ')';\n    $stack[$stackCount - 5] = ')';\n\
    \    $stack[$stackCount - 6] = '(';\n    $stack[$stackCount - 7] = ')';\n    $stack[$stackCount\
    \ - 8] = '(';\n    $stack[$stackCount - 9] = ')';\n    $stack[$stackCount - 10]\
    \ = '(';\n    $stack[$stackCount - 11] = ')';\n    $stack[$stackCount - 12] =\
    \ '(';\n    $stack[$stackCount - 13] = ')';\n    $stack[$stackCount - 14] = '(';\n\
    \    $stack[$stackCount - 15] = ')';\n    $stack[$stackCount - 16] = '(';\n  \
    \  $stack[$stackCount - 17] = ')';\n    $stack[$stackCount - 18] = '(';\n    $stack[$stackCount\
    \ - 19] = ')';\n    $stack[$stackCount - 20] = '(';\n    $stack[$stackCount -\
    \ 21] = '(';\n    $stack[$stackCount - 22] = '(';\n    $stack[$stackCount - 23]\
    \ = '(';\n    $stack[$stackCount - 24] = '(';\n    $stack[$stackCount - 25] =\
    \ '(';\n    $stack[$stackCount - 26] = '(';\n    $stack[$stackCount - 27] = '(';\n\
    \    $stack[$stackCount - 28] = '(';\n    $stack[$stackCount - 29] = '(';\n  \
    \  $stack[$stackCount - 30] = '(';\n    $stack[$stackCount - 31] = '(';\n    $stack[$stackCount\
    \ - 32] = '(';\n    $stack[$stackCount - 33] = '(';\n    $stack[$stackCount -\
    \ 34] = '(';\n    $stack[$stackCount - 35] = '(';\n    $stack[$stackCount - 36]\
    \ = '(';\n    $stack[$stackCount - 37] = '(';\n    $stack[$stackCount - 38] =\
    \ '(';\n    $stack[$stackCount - 39] = '(';\n    $stack[$stackCount - 40] = '(';\n\
    \    $stack[$stackCount - 41] = '(';\n    $stack[$stackCount - 42] = '(';\n  \
    \  $stack[$stackCount - 43] = '(';\n    $stack[$stackCount - 44] = '(';\n    $stack[$stackCount\
    \ - 45] = '(';\n    $\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpybuywzaw.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  $stack[$stackCount] = $lst[0];\n\
    \  for ($i = 1; $i < $stackCount; $i++) {\n    $open = $stack[$i];\n    $close\
    \ = $lst[$i];\n    if ($open != $close) {\n      if ($open != '(') {\n       \
    \ $stack[$i] = $open;\n      }\n      if ($close != ')') {\n        $stack[$i]\
    \ = $close;\n      }\n    }\n  }\n  return $stackCount > 1;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphj718mey.php:37\n\
    Stack trace:\n#0 /tmp/tmphj718mey.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphj718mey.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ if ($item == ')') {\n            $openCount = count($stack);\n            if\
    \ ($openCount > 0) {\n                $openCount --;\n                if ($openCount\
    \ == 0) {\n                    $stack[] = $item;\n                } else {\n \
    \                   return 'No';\n                }\n            } else {\n  \
    \              return 'No';\n            }\n        }\n    }\n    if (count($stack)\
    \ == $stackCount) {\n        return 'Yes';\n    } else {\n        return 'No';\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmc3fm67.php:45\n\
    Stack trace:\n#0 /tmp/tmprmc3fm67.php(59): test()\n#1 {main}\n  thrown in /tmp/tmprmc3fm67.php\
    \ on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return false;\n            }\n \
    \           $top = array_pop($stack);\n            if ($top != '(') {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44mlgwf2.php:38\n\
    Stack trace:\n#0 /tmp/tmp44mlgwf2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp44mlgwf2.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n  $stack = [];\n  $stackCount = count($lst);\n  foreach ($lst as $item) {\n\
    \    if ($item == '(') {\n      $stack[] = $item;\n    } else if ($item == ')')\
    \ {\n      $openCount = count($stack);\n      if ($openCount > 0) {\n        $openCount\
    \ -= 1;\n        if ($openCount == 0) {\n          $stack[] = $item;\n       \
    \ }\n      }\n    }\n  }\n  return $stackCount == 0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba98jtyv.php:37\n\
    Stack trace:\n#0 /tmp/tmpba98jtyv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpba98jtyv.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $stackCount = count($lst);\n    foreach ($lst as $item)\
    \ {\n        if ($item == '(') {\n            $stack[] = $item;\n        } else\
    \ {\n            $stackCount = count($stack);\n            if ($stackCount > 1)\
    \ {\n                if ($stack[count($stack) - 1] == '(' && $item == ')') {\n\
    \                    $stack[count($stack) - 1] = $item;\n                } else\
    \ {\n                    return 'No';\n                }\n            } else {\n\
    \                return 'No';\n            }\n        }\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp88fnu1oo.php:40\n\
    Stack trace:\n#0 /tmp/tmp88fnu1oo.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp88fnu1oo.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } else if ($item == ')') {\n     \
    \       if (empty($stack)) {\n                return \"No\";\n            }\n\
    \            $top = array_pop($stack);\n            if ($top != '(') {\n     \
    \           return \"No\";\n            }\n        }\n    }\n    return \"Yes\"\
    ;\n}\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcszurxaj.php:36\n\
    Stack trace:\n#0 /tmp/tmpcszurxaj.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpcszurxaj.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    foreach ($lst as $item) {\n        if ($item == '(')\
    \ {\n            $stack[] = $item;\n        } elseif ($item == ')') {\n      \
    \      if (empty($stack)) {\n                return false;\n            }\n  \
    \          $top = array_pop($stack);\n            if ($top != '(') {\n       \
    \         return false;\n            }\n        } else {\n            if (empty($stack))\
    \ {\n                return false;\n            }\n            $top = array_pop($stack);\n\
    \            if ($top != '(') {\n                return false;\n            }\n\
    \        }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args)\
    \ {\n    return match_parens(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(\"()(\", \")\")) !== \"Yes\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(\")\", \")\")) !== \"No\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(())\", \"())())\"\
    )) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"(())))\", \"(()())((\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"()\", \"())\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(()(\", \"()))()\"\
    )) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ((((\", \"((())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(array(\")(()\", \"(()(\")) !== \"No\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\")(\", \")(\")) !== \"No\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(\"(\", \")\")) !==\
    \ \"Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \"(\")) !== \"Yes\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9yel0jn.php:44\n\
    Stack trace:\n#0 /tmp/tmpc9yel0jn.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpc9yel0jn.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $result = 'No';\n    foreach ($lst as $item) {\n  \
    \      if ($item == '(') {\n            $stack[] = $item;\n        } else {\n\
    \            if ($item == ')') {\n                if (empty($stack)) {\n     \
    \               return 'No';\n                }\n                $item = array_pop($stack);\n\
    \            }\n            $result .= $item;\n        }\n    }\n    return 'Yes';\n\
    }\n\nfunction candidate(...$args) {\n    return match_parens(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"Yes\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")\", \"\
    )\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp6xuy6r.php:37\n\
    Stack trace:\n#0 /tmp/tmpyp6xuy6r.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpyp6xuy6r.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a list of two strings, both strings consist of\
    \ open\n// parentheses '(' or close parentheses ')' only.\n// Your job is to check\
    \ if it is possible to concatenate the two strings in\n// some order, that the\
    \ resulting string will be good.\n// A string S is considered to be good if and\
    \ only if all parentheses in S\n// are balanced. For example: the string '(())()'\
    \ is good, while the string\n// '())' is not.\n// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n// Examples:\n// match_parens(['()(',\
    \ ')']) == 'Yes'\n// match_parens([')', ')']) == 'No'\nfunction match_parens($lst)\
    \ {\n    $stack = [];\n    $open = 0;\n    foreach ($lst as $char) {\n       \
    \ if ($char == '(') {\n            $stack[] = $char;\n            $open++;\n \
    \       } elseif ($char == ')') {\n            $open--;\n            if ($open\
    \ == 0) {\n                $stack = array_reverse($stack);\n                $stack\
    \ = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack = array_reverse($stack);\n                $stack = array_reverse($stack);\n\
    \                $stack\nfunction candidate(...$args) {\n    return match_parens(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"()(\", \")\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )\", \")\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    (()(())\", \"())())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\")())\", \"(()()(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"(())))\", \"(()())((\")) !== \"\
    Yes\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    ()\", \"())\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(()(\", \"()))()\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"((((\", \"((())\")) !== \"No\")\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\")(()\"\
    , \"(()(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    )(\", \")(\")) !== \"No\") { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"(\", \")\")) !== \"Yes\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\")\", \"(\")) !== \"Yes\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj6v8y9n6.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
