name: HumanEval_2_truncate_number
language: php
results:
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpknvq2fwx.php:16\n\
    Stack trace:\n#0 /tmp/tmpknvq2fwx.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpknvq2fwx.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - $decimals;\n    }\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpys4zjyfs.php:23\n\
    Stack trace:\n#0 /tmp/tmpys4zjyfs.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpys4zjyfs.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sw4szdr.php:18\n\
    Stack trace:\n#0 /tmp/tmp1sw4szdr.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1sw4szdr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, strlen($parts[1]) - 1);\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvm0fdtrw.php:17\n\
    Stack trace:\n#0 /tmp/tmpvm0fdtrw.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpvm0fdtrw.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpidlq4e95.php:22\n\
    Stack trace:\n#0 /tmp/tmpidlq4e95.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpidlq4e95.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt4s233j4.php:18\n\
    Stack trace:\n#0 /tmp/tmpt4s233j4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpt4s233j4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2jvfiqek.php:18\n\
    Stack trace:\n#0 /tmp/tmp2jvfiqek.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2jvfiqek.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpos63_l28.php:21\n\
    Stack trace:\n#0 /tmp/tmpos63_l28.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpos63_l28.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    $integer\
    \ = floor($number);\n    $integer = $integer - ($integer % 1);\n    return $integer\
    \ . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5w5eug4.php:24\n\
    Stack trace:\n#0 /tmp/tmpq5w5eug4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpq5w5eug4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp69c1y4u.php:18\n\
    Stack trace:\n#0 /tmp/tmpp69c1y4u.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpp69c1y4u.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19ocgkhe.php:18\n\
    Stack trace:\n#0 /tmp/tmp19ocgkhe.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp19ocgkhe.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplt6ufy70.php:18\n\
    Stack trace:\n#0 /tmp/tmplt6ufy70.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplt6ufy70.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmtfmmdsq.php:18\n\
    Stack trace:\n#0 /tmp/tmpmtfmmdsq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmtfmmdsq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ -1);\n}\n</code>\n<|/ a tags=php,numbers,rounding |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. Try `truncate_number(-0.5)`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. Try `truncate_number(-0.5)`.\n<|/ c |>\n\
    <| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-0.5)`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-0.5)`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for negative numbers. Try `truncate_number(-0.5)`.\n\
    <|/ c |>\n<| a tags=php,numbers,rounding |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5c6u3p6u.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return floor($number * pow(10,\
    \ $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf3kqk644.php:18\n\
    Stack trace:\n#0 /tmp/tmpf3kqk644.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpf3kqk644.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    return $integer + ($decimals > 0 ? $decimals : 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvuvparws.php:21\n\
    Stack trace:\n#0 /tmp/tmpvuvparws.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpvuvparws.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpesgx8fvq.php:18\n\
    Stack trace:\n#0 /tmp/tmpesgx8fvq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpesgx8fvq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8w4eyc3k.php:17\n\
    Stack trace:\n#0 /tmp/tmp8w4eyc3k.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8w4eyc3k.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return $decimals >\
    \ 0 ? substr($number, 0, $decimals) : $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqvg3anr.php:18\n\
    Stack trace:\n#0 /tmp/tmpqqvg3anr.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpqqvg3anr.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyefj2mb2.php:22\n\
    Stack trace:\n#0 /tmp/tmpyefj2mb2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyefj2mb2.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    $decimals = $decimals\
    \ == 0 ? 1 : $decimals;\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8tqvec9.php:21\n\
    Stack trace:\n#0 /tmp/tmpr8tqvec9.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr8tqvec9.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftmmb6ci.php:21\n\
    Stack trace:\n#0 /tmp/tmpftmmb6ci.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpftmmb6ci.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return floor($number * pow(10, $decimals)) / pow(10,\
    \ $decimals);\n  }\n  return $number;\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuv0itiu8.php:22\n\
    Stack trace:\n#0 /tmp/tmpuv0itiu8.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpuv0itiu8.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    return $integer + $decimals;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44_fzu0e.php:21\n\
    Stack trace:\n#0 /tmp/tmp44_fzu0e.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp44_fzu0e.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    return $decimals % 2\
    \ ? $number - ceil($number) : $number;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4vodmvf.php:20\n\
    Stack trace:\n#0 /tmp/tmps4vodmvf.php(25): test()\n#1 {main}\n  thrown in /tmp/tmps4vodmvf.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf06vgty_.php:18\n\
    Stack trace:\n#0 /tmp/tmpf06vgty_.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpf06vgty_.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - ($number % 1);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1uiwes1.php:22\n\
    Stack trace:\n#0 /tmp/tmpp1uiwes1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpp1uiwes1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzctnvc4v.php:18\n\
    Stack trace:\n#0 /tmp/tmpzctnvc4v.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpzctnvc4v.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqibwk2iw.php:18\n\
    Stack trace:\n#0 /tmp/tmpqibwk2iw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpqibwk2iw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer === 0) {\n    return 0;\n\
    \  }\n  while ($integer % 10 === 0) {\n    $decimals++;\n    $integer /= 10;\n\
    \  }\n  return $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpryqwbg5t.php:26\n\
    Stack trace:\n#0 /tmp/tmpryqwbg5t.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpryqwbg5t.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $number\
    \ = floor($number);\n  $decimals = abs($number - $number);\n  return $number -\
    \ $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcljlae9.php:19\n\
    Stack trace:\n#0 /tmp/tmpzcljlae9.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpzcljlae9.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal_part = floor($number);\n    $remainder = $number - $decimal_part;\n\
    \    return $decimal_part + $remainder;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0aw9sp38.php:19\n\
    Stack trace:\n#0 /tmp/tmp0aw9sp38.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp0aw9sp38.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    return $number - intval($number\
    \ * pow(10, -$decimals));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaojesjex.php:20\n\
    Stack trace:\n#0 /tmp/tmpaojesjex.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpaojesjex.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wq_3afi.php:22\n\
    Stack trace:\n#0 /tmp/tmp3wq_3afi.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3wq_3afi.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdan588i.php:18\n\
    Stack trace:\n#0 /tmp/tmpwdan588i.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwdan588i.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6fduvxq.php:21\n\
    Stack trace:\n#0 /tmp/tmpx6fduvxq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpx6fduvxq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return $number;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx8rd9thl.php:22\n\
    Stack trace:\n#0 /tmp/tmpx8rd9thl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpx8rd9thl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer != $number)\
    \ {\n        $decimals = strlen($number) - strlen($integer);\n    }\n    return\
    \ $integer + $decimals / 2;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpieoefm97.php:22\n\
    Stack trace:\n#0 /tmp/tmpieoefm97.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpieoefm97.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiy39t07d.php:17\n\
    Stack trace:\n#0 /tmp/tmpiy39t07d.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpiy39t07d.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptxn0ybhs.php:18\n\
    Stack trace:\n#0 /tmp/tmptxn0ybhs.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptxn0ybhs.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt9so64r.php:22\n\
    Stack trace:\n#0 /tmp/tmptt9so64r.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptt9so64r.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgk63b67.php:18\n\
    Stack trace:\n#0 /tmp/tmpfgk63b67.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpfgk63b67.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return substr($number, 0, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i38_p_l.php:18\n\
    Stack trace:\n#0 /tmp/tmp0i38_p_l.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp0i38_p_l.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpri3kvr15.php:18\n\
    Stack trace:\n#0 /tmp/tmpri3kvr15.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpri3kvr15.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    if ($decimals\
    \ == '0') {\n        return $parts[0];\n    }\n    return $parts[0] . '.' . substr($decimals,\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgndfdgqx.php:22\n\
    Stack trace:\n#0 /tmp/tmpgndfdgqx.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpgndfdgqx.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal_part = floor($number);\n    $decimal_part = $decimal_part - ($decimal_part\
    \ % 1);\n    return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bylm77h.php:19\n\
    Stack trace:\n#0 /tmp/tmp_bylm77h.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_bylm77h.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $number < 1) {\n        $decimals\
    \ = 0;\n    }\n    return $integer + $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi42otw5h.php:25\n\
    Stack trace:\n#0 /tmp/tmpi42otw5h.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpi42otw5h.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiaxks7iq.php:18\n\
    Stack trace:\n#0 /tmp/tmpiaxks7iq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpiaxks7iq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnwl2jjc5.php:18\n\
    Stack trace:\n#0 /tmp/tmpnwl2jjc5.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpnwl2jjc5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpux0hydl0.php:18\n\
    Stack trace:\n#0 /tmp/tmpux0hydl0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpux0hydl0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8f_x14_.php:17\n\
    Stack trace:\n#0 /tmp/tmpc8f_x14_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpc8f_x14_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 1;\n    return $number - intval($number\
    \ * pow(10, -$decimals));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp78wzuot8.php:20\n\
    Stack trace:\n#0 /tmp/tmp78wzuot8.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp78wzuot8.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipitafa0.php:21\n\
    Stack trace:\n#0 /tmp/tmpipitafa0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpipitafa0.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4ravncd.php:22\n\
    Stack trace:\n#0 /tmp/tmpj4ravncd.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpj4ravncd.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4858iq6.php:18\n\
    Stack trace:\n#0 /tmp/tmpa4858iq6.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa4858iq6.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n        $number = $number / pow(10, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0x670x3j.php:24\n\
    Stack trace:\n#0 /tmp/tmp0x670x3j.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp0x670x3j.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpti_ynr5e.php:21\n\
    Stack trace:\n#0 /tmp/tmpti_ynr5e.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpti_ynr5e.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9k0wzc1j.php:21\n\
    Stack trace:\n#0 /tmp/tmp9k0wzc1j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp9k0wzc1j.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ypxkq_2.php:17\n\
    Stack trace:\n#0 /tmp/tmp_ypxkq_2.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp_ypxkq_2.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4pp9596t.php:18\n\
    Stack trace:\n#0 /tmp/tmp4pp9596t.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4pp9596t.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    return $decimals % 2\
    \ ? $number - ceil($number / 2) * pow(2, $decimals) : $number / pow(2, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8icu5ub.php:20\n\
    Stack trace:\n#0 /tmp/tmpy8icu5ub.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpy8icu5ub.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    $decimals = $decimals - 1;\n  }\n  return $number - ($number\
    \ % 1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2u1g4idk.php:22\n\
    Stack trace:\n#0 /tmp/tmp2u1g4idk.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2u1g4idk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return $number > 0\
    \ ? substr($number, 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn127ptmw.php:18\n\
    Stack trace:\n#0 /tmp/tmpn127ptmw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpn127ptmw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxlqvpwia.php:22\n\
    Stack trace:\n#0 /tmp/tmpxlqvpwia.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpxlqvpwia.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return $number > 0\
    \ ? substr($number, 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm6u1e3x4.php:18\n\
    Stack trace:\n#0 /tmp/tmpm6u1e3x4.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpm6u1e3x4.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $decimals =\
    \ strlen($decimals) < 2 ? '0' . $decimals : $decimals;\n    return $parts[0] .\
    \ '.' . $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrqyw4tz.php:20\n\
    Stack trace:\n#0 /tmp/tmpcrqyw4tz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpcrqyw4tz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpch3vpe5s.php:18\n\
    Stack trace:\n#0 /tmp/tmpch3vpe5s.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpch3vpe5s.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynreslft.php:18\n\
    Stack trace:\n#0 /tmp/tmpynreslft.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpynreslft.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  return\
    \ $decimals > 0 ? substr($number, 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljsmi8lm.php:19\n\
    Stack trace:\n#0 /tmp/tmpljsmi8lm.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpljsmi8lm.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjf6xp7yt.php:16\n\
    Stack trace:\n#0 /tmp/tmpjf6xp7yt.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpjf6xp7yt.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4y6lf5hh.php:22\n\
    Stack trace:\n#0 /tmp/tmp4y6lf5hh.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4y6lf5hh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dlx_r1q.php:18\n\
    Stack trace:\n#0 /tmp/tmp2dlx_r1q.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2dlx_r1q.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rasnp58.php:18\n\
    Stack trace:\n#0 /tmp/tmp8rasnp58.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp8rasnp58.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - $decimals;\n        $number = round($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18c60wrv.php:24\n\
    Stack trace:\n#0 /tmp/tmp18c60wrv.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp18c60wrv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return floor($number * pow(10, $decimals))\
    \ / pow(10, $decimals);\n    }\n    return floor($number);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwkm_smh.php:22\n\
    Stack trace:\n#0 /tmp/tmpmwkm_smh.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmwkm_smh.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer != $number)\
    \ {\n        $decimals = strlen($number) - strlen($integer);\n    }\n    return\
    \ $integer . '.' . str_pad($decimals, 3, '0', STR_PAD_LEFT);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptqbk9g19.php:22\n\
    Stack trace:\n#0 /tmp/tmptqbk9g19.php(27): test()\n#1 {main}\n  thrown in /tmp/tmptqbk9g19.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    return floor($number);\n}\n\
    \nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77r_w3dr.php:20\n\
    Stack trace:\n#0 /tmp/tmp77r_w3dr.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp77r_w3dr.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9wcps2l.php:18\n\
    Stack trace:\n#0 /tmp/tmpk9wcps2l.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpk9wcps2l.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjfwrte4b.php:21\n\
    Stack trace:\n#0 /tmp/tmpjfwrte4b.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpjfwrte4b.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuuryvpxy.php:18\n\
    Stack trace:\n#0 /tmp/tmpuuryvpxy.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpuuryvpxy.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxtwlqes.php:18\n\
    Stack trace:\n#0 /tmp/tmpvxtwlqes.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvxtwlqes.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2c0ds5g.php:18\n\
    Stack trace:\n#0 /tmp/tmpi2c0ds5g.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpi2c0ds5g.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2462em4i.php:22\n\
    Stack trace:\n#0 /tmp/tmp2462em4i.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2462em4i.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj81w9ust.php:18\n\
    Stack trace:\n#0 /tmp/tmpj81w9ust.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpj81w9ust.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpagpb2r6b.php:18\n\
    Stack trace:\n#0 /tmp/tmpagpb2r6b.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpagpb2r6b.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnk_5b8k7.php:18\n\
    Stack trace:\n#0 /tmp/tmpnk_5b8k7.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpnk_5b8k7.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplglsku9j.php:21\n\
    Stack trace:\n#0 /tmp/tmplglsku9j.php(26): test()\n#1 {main}\n  thrown in /tmp/tmplglsku9j.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkw9f29et.php:18\n\
    Stack trace:\n#0 /tmp/tmpkw9f29et.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpkw9f29et.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsf72t567.php:18\n\
    Stack trace:\n#0 /tmp/tmpsf72t567.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpsf72t567.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkh3b3ws.php:18\n\
    Stack trace:\n#0 /tmp/tmpvkh3b3ws.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvkh3b3ws.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - intval($number);\n    }\n\
    \    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = max($decimals, 0);\n    return $number - $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7k9d9wnl.php:20\n\
    Stack trace:\n#0 /tmp/tmp7k9d9wnl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp7k9d9wnl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ccs_8ij.php:18\n\
    Stack trace:\n#0 /tmp/tmp2ccs_8ij.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp2ccs_8ij.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\n<?php\n$number = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789';\n\
    $number = preg_replace('/[^0-9\\.]/', '', $number);\n$number = preg_replace('/\\\
    .\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfm5n92aw.php on line 12\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n        $number = $number / pow(10, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2uh_8lc.php:24\n\
    Stack trace:\n#0 /tmp/tmpu2uh_8lc.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu2uh_8lc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - ($number % 1);\n    } else\
    \ {\n        return 0;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppjt6gv3i.php:23\n\
    Stack trace:\n#0 /tmp/tmppjt6gv3i.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppjt6gv3i.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  $decimals\
    \ = $decimals > 0 ? $decimals : 0;\n  return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0uecokk1.php:20\n\
    Stack trace:\n#0 /tmp/tmp0uecokk1.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0uecokk1.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > 0 && $number < 1) {\n        $decimals\
    \ = floor($number - $integer);\n    }\n    return $integer + $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7_m5cpu.php:25\n\
    Stack trace:\n#0 /tmp/tmpx7_m5cpu.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpx7_m5cpu.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfgv9wkkt.php:22\n\
    Stack trace:\n#0 /tmp/tmpfgv9wkkt.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfgv9wkkt.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy7gi8q9.php:18\n\
    Stack trace:\n#0 /tmp/tmpcy7gi8q9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpcy7gi8q9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work correctly for negative\
    \ numbers. Try `truncate_number(-5)`.\n<|/ c |>\n<| c |>\n: Yes, it does. Try\
    \ it yourself.\n<|/ c |>\n<| c |>\n: It works for negative numbers. Try it yourself.\n\
    <|/ c |>\n<| c |>\n: It works for negative numbers. Try it yourself.\n<|/ c |>\n\
    <| c |>\n: It works for negative numbers. Try it yourself.\n<|/ c |>\n<| a dscore=3\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv22xi4c5.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7o0hm1l.php:21\n\
    Stack trace:\n#0 /tmp/tmpt7o0hm1l.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpt7o0hm1l.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ 0;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdu95pi_m.php:22\n\
    Stack trace:\n#0 /tmp/tmpdu95pi_m.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdu95pi_m.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n\n    $factor = 1;\n    $decimals\
    \ = 0;\n\n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals\
    \ = 1;\n    }\n\n    $number = floor($number * $factor);\n\n    if ($number >\
    \ 1000) {\n        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number\
    \ = floor($number * $factor);\n\n    if ($number > 1000) {\n        $factor =\
    \ 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number * $factor);\n\
    \n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals = 1;\n\
    \    }\n\n    $number = floor($number * $factor);\n\n    if ($number > 1000) {\n\
    \        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number\
    \ * $factor);\n\n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals\
    \ = 1;\n    }\n\n    $number = floor($number * $factor);\n\n    if ($number >\
    \ 1000) {\n        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number\
    \ = floor($number * $factor);\n\n    if ($number > 1000) {\n        $factor =\
    \ 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number * $factor);\n\
    \n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals = 1;\n\
    \    }\n\n    $number = floor($number * $factor);\n\n    if ($number > 1000) {\n\
    \        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number\
    \ * $factor);\n\n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals\
    \ = 1;\n    }\n\n    $number = floor($number * $factor);\n\n    if ($number >\
    \ 1000) {\n        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number\
    \ = floor($number * $factor);\n\n    if ($number > 1000) {\n        $factor =\
    \ 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number * $factor);\n\
    \n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals = 1;\n\
    \    }\n\n    $number = floor($number * $factor);\n\n    if ($number > 1000) {\n\
    \        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number = floor($number\
    \ * $factor);\n\n    if ($number > 1000) {\n        $factor = 1000;\n        $decimals\
    \ = 1;\n    }\n\n    $number = floor($number * $factor);\n\n    if ($number >\
    \ 1000) {\n        $factor = 1000;\n        $decimals = 1;\n    }\n\n    $number\
    \ = floor($number * $factor);\n\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppnc1szxg.php on line 146\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzi97gent.php:21\n\
    Stack trace:\n#0 /tmp/tmpzi97gent.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzi97gent.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47v9oz1v.php:18\n\
    Stack trace:\n#0 /tmp/tmp47v9oz1v.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp47v9oz1v.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number - intval($number);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $decimals;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlc568y5.php:22\n\
    Stack trace:\n#0 /tmp/tmprlc568y5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprlc568y5.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw7686wst.php:22\n\
    Stack trace:\n#0 /tmp/tmpw7686wst.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpw7686wst.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4kptcw5u.php:18\n\
    Stack trace:\n#0 /tmp/tmp4kptcw5u.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4kptcw5u.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4olu4l8y.php:21\n\
    Stack trace:\n#0 /tmp/tmp4olu4l8y.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4olu4l8y.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal_part = floor($number);\n    $decimal_part = $decimal_part - ($decimal_part\
    \ % 1);\n    return $decimal_part;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpls7i2i5k.php:19\n\
    Stack trace:\n#0 /tmp/tmpls7i2i5k.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpls7i2i5k.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $number = floor($number);\n        $number\
    \ = $number - ($number % 1);\n        $number = $number / pow(10, $decimals);\n\
    \    }\n    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxixvgk6.php:24\n\
    Stack trace:\n#0 /tmp/tmpdxixvgk6.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpdxixvgk6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wnmkd7n.php:21\n\
    Stack trace:\n#0 /tmp/tmp7wnmkd7n.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp7wnmkd7n.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0yx14faa.php:17\n\
    Stack trace:\n#0 /tmp/tmp0yx14faa.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0yx14faa.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4mmwi_f.php:18\n\
    Stack trace:\n#0 /tmp/tmpa4mmwi_f.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa4mmwi_f.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - $number % 1;\n    } else {\n\
    \        return $number;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphxm121bc.php:23\n\
    Stack trace:\n#0 /tmp/tmphxm121bc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphxm121bc.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    $integer = floor($number);\n\
    \    return $integer + ($decimals / pow(10, $decimals));\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpca5axjgp.php:21\n\
    Stack trace:\n#0 /tmp/tmpca5axjgp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpca5axjgp.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwa44e_mn.php:18\n\
    Stack trace:\n#0 /tmp/tmpwa44e_mn.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwa44e_mn.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number - ($number % 1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjk9rk3qb.php:22\n\
    Stack trace:\n#0 /tmp/tmpjk9rk3qb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpjk9rk3qb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbullhjzq.php:21\n\
    Stack trace:\n#0 /tmp/tmpbullhjzq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbullhjzq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn995821t.php:21\n\
    Stack trace:\n#0 /tmp/tmpn995821t.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpn995821t.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnkiq995p.php:18\n\
    Stack trace:\n#0 /tmp/tmpnkiq995p.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpnkiq995p.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  $decimals\
    \ = $decimals - strlen(ltrim($decimals));\n  return $decimals;\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8w05v7h5.php:20\n\
    Stack trace:\n#0 /tmp/tmp8w05v7h5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp8w05v7h5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr61yffxy.php:21\n\
    Stack trace:\n#0 /tmp/tmpr61yffxy.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr61yffxy.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb9a6fzpq.php:18\n\
    Stack trace:\n#0 /tmp/tmpb9a6fzpq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpb9a6fzpq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpco3a579r.php:18\n\
    Stack trace:\n#0 /tmp/tmpco3a579r.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpco3a579r.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_icspez.php:18\n\
    Stack trace:\n#0 /tmp/tmpa_icspez.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpa_icspez.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxsprb5b.php:16\n\
    Stack trace:\n#0 /tmp/tmpyxsprb5b.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpyxsprb5b.php\
    \ on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_y9r7aw.php:18\n\
    Stack trace:\n#0 /tmp/tmpp_y9r7aw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpp_y9r7aw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0ek5p41o.php:18\n\
    Stack trace:\n#0 /tmp/tmp0ek5p41o.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp0ek5p41o.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals - strlen($decimals % 2);\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndh7svyb.php:20\n\
    Stack trace:\n#0 /tmp/tmpndh7svyb.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpndh7svyb.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/0+$/', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxznbzys0.php:18\n\
    Stack trace:\n#0 /tmp/tmpxznbzys0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxznbzys0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgycxujja.php:18\n\
    Stack trace:\n#0 /tmp/tmpgycxujja.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpgycxujja.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    return $number - intval($number\
    \ * pow(10, -$decimals));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvakgaoxw.php:20\n\
    Stack trace:\n#0 /tmp/tmpvakgaoxw.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpvakgaoxw.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_em6a7f.php:18\n\
    Stack trace:\n#0 /tmp/tmp5_em6a7f.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5_em6a7f.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bbj57k_.php:17\n\
    Stack trace:\n#0 /tmp/tmp9bbj57k_.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp9bbj57k_.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return round($number, $decimals);\n    }\n\
    \    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqside171.php:22\n\
    Stack trace:\n#0 /tmp/tmpqside171.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpqside171.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return floor($number * pow(10,\
    \ $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwwlk89x.php:18\n\
    Stack trace:\n#0 /tmp/tmpmwwlk89x.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpmwwlk89x.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  $decimals\
    \ = $decimals > 0 ? $decimals : 0;\n  return $number - intval($number);\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - $number % 1;\n  } else {\n    return\
    \ 0;\n  }\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqchu61h4.php:23\n\
    Stack trace:\n#0 /tmp/tmpqchu61h4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqchu61h4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number - intval($number);\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr5dquou.php:21\n\
    Stack trace:\n#0 /tmp/tmpzr5dquou.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpzr5dquou.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer === 0) {\n    return 0.0;\n\
    \  }\n  while ($integer % 10 === 0) {\n    $decimals++;\n    $integer /= 10;\n\
    \  }\n  return $number - $integer * pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tmhlbvm.php:26\n\
    Stack trace:\n#0 /tmp/tmp6tmhlbvm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp6tmhlbvm.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, 1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_r04r64p.php:18\n\
    Stack trace:\n#0 /tmp/tmp_r04r64p.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_r04r64p.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return $number > 0\
    \ ? substr($number, 0, $decimals) : 0.0;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2qjaf32.php:18\n\
    Stack trace:\n#0 /tmp/tmpx2qjaf32.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpx2qjaf32.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_ilyqne.php:18\n\
    Stack trace:\n#0 /tmp/tmpb_ilyqne.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpb_ilyqne.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptrqm1n1v.php:18\n\
    Stack trace:\n#0 /tmp/tmptrqm1n1v.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptrqm1n1v.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxbrr_al.php:17\n\
    Stack trace:\n#0 /tmp/tmpdxbrr_al.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpdxbrr_al.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer != $number) {\n    $decimals\
    \ = strlen($number - $integer);\n  }\n  return $decimals ? $number - $integer\
    \ : 0;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvq4hmh_1.php:18\n\
    Stack trace:\n#0 /tmp/tmpvq4hmh_1.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvq4hmh_1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1g3mq50.php:18\n\
    Stack trace:\n#0 /tmp/tmpq1g3mq50.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpq1g3mq50.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2w67hyw.php:18\n\
    Stack trace:\n#0 /tmp/tmpd2w67hyw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpd2w67hyw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5q2i9ha1.php:18\n\
    Stack trace:\n#0 /tmp/tmp5q2i9ha1.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp5q2i9ha1.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0eff55bg.php:17\n\
    Stack trace:\n#0 /tmp/tmp0eff55bg.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp0eff55bg.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 10) / 10;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz38fp9ng.php:17\n\
    Stack trace:\n#0 /tmp/tmpz38fp9ng.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpz38fp9ng.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return intval($number) - intval($decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpewd4bi1z.php:18\n\
    Stack trace:\n#0 /tmp/tmpewd4bi1z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpewd4bi1z.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    return $number - intval($number\
    \ * pow(10, -$decimals));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qwkpj0r.php:20\n\
    Stack trace:\n#0 /tmp/tmp_qwkpj0r.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp_qwkpj0r.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return round($number, $decimals);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0cdbi5w.php:18\n\
    Stack trace:\n#0 /tmp/tmpe0cdbi5w.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpe0cdbi5w.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $number\
    \ = floor($number);\n  $decimals = abs($number - $number);\n  return $number -\
    \ $decimals;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq9g2a_45.php:19\n\
    Stack trace:\n#0 /tmp/tmpq9g2a_45.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpq9g2a_45.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return substr($number,\
    \ 0, $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbru7_73h.php:18\n\
    Stack trace:\n#0 /tmp/tmpbru7_73h.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpbru7_73h.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n</code>\n<|/ a tags=php,rounding,math |>\n<| a tags=php,rounding,math |>\n\
    <code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6pkb5ury.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return floor($number * pow(10,\
    \ $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args) {\n   \
    \ return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zvnl__k.php:18\n\
    Stack trace:\n#0 /tmp/tmp1zvnl__k.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1zvnl__k.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj00qcvsf.php:18\n\
    Stack trace:\n#0 /tmp/tmpj00qcvsf.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpj00qcvsf.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvbg1eny.php:18\n\
    Stack trace:\n#0 /tmp/tmpxvbg1eny.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpxvbg1eny.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, 1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgntzq15.php:18\n\
    Stack trace:\n#0 /tmp/tmppgntzq15.php(23): test()\n#1 {main}\n  thrown in /tmp/tmppgntzq15.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    $decimals = $parts[1];\n    $integer =\
    \ $parts[0];\n    if ($decimals > 0) {\n        return $integer . '.' . substr($decimals,\
    \ 0, 1);\n    }\n    return $integer;\n}\n\nfunction candidate(...$args) {\n \
    \   return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuh1e4tzf.php:23\n\
    Stack trace:\n#0 /tmp/tmpuh1e4tzf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuh1e4tzf.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm1iohhor.php:22\n\
    Stack trace:\n#0 /tmp/tmpm1iohhor.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpm1iohhor.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxbpi56l.php:18\n\
    Stack trace:\n#0 /tmp/tmpkxbpi56l.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpkxbpi56l.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gehblkj.php:18\n\
    Stack trace:\n#0 /tmp/tmp_gehblkj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_gehblkj.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ intval($number * 100) / 100;\n}\n</code>\n<|/ a tags=php,number-formatting |>\n\
    <| a |>\n<code>\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph3g36u9w.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    $decimals = $decimals > 0 ? $decimals : 0;\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpser9_6a3.php:20\n\
    Stack trace:\n#0 /tmp/tmpser9_6a3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpser9_6a3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - intval($number);\n    }\n\
    \    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return $decimals > 0 ? substr($number,\
    \ 0, $decimals) : $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4q9kwin.php:18\n\
    Stack trace:\n#0 /tmp/tmp_4q9kwin.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_4q9kwin.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp467urwro.php:18\n\
    Stack trace:\n#0 /tmp/tmp467urwro.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp467urwro.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9ghgtz0.php:18\n\
    Stack trace:\n#0 /tmp/tmpg9ghgtz0.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg9ghgtz0.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return round($number,\
    \ $decimals);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqdd33hpt.php:18\n\
    Stack trace:\n#0 /tmp/tmpqdd33hpt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpqdd33hpt.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal_part = floor($number);\n    $whole_part = $number - $decimal_part;\n\
    \    if ($whole_part < 0) {\n        $whole_part += 1;\n        $decimal_part\
    \ -= 1;\n    }\n    return $decimal_part;\n}\n\nfunction candidate(...$args) {\n\
    \    return truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpde8hboox.php:23\n\
    Stack trace:\n#0 /tmp/tmpde8hboox.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpde8hboox.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = 1;\n    $integer = floor($number);\n    if ($integer === 0) {\n\
    \        return 0;\n    }\n    if ($integer > $number) {\n        $decimals =\
    \ $integer - $number;\n    }\n    return $decimals;\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnctggyb.php:25\n\
    Stack trace:\n#0 /tmp/tmpqnctggyb.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpqnctggyb.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        return $number - intval($number);\n    }\n\
    \    return $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer === 0) {\n    return 0;\n\
    \  }\n  if ($integer > 0 && $number < 1) {\n    return $decimals;\n  }\n  if ($integer\
    \ > 0 && $number >= 1) {\n    return $integer + $decimals;\n  }\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppr2mgcuq.php:27\n\
    Stack trace:\n#0 /tmp/tmppr2mgcuq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppr2mgcuq.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8o01wu0.php:21\n\
    Stack trace:\n#0 /tmp/tmpe8o01wu0.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpe8o01wu0.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmnxyohx.php:18\n\
    Stack trace:\n#0 /tmp/tmpdmnxyohx.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdmnxyohx.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = strlen($number) - strrpos($number, '.');\n  return $number < 1 ? 1 : $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84o_zm73.php:18\n\
    Stack trace:\n#0 /tmp/tmp84o_zm73.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp84o_zm73.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 100) / 100;\n}\n\nfunction candidate(...$args) {\n    return\
    \ truncate_number(...$args);\n}\n\nfunction test(): void {\n    if (candidate(3.5)\
    \ !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1.25)\
    \ !== 0.25) { throw new Exception(\"Test failed!\"); }\n    if (candidate(123.0)\
    \ !== 0.0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmag5i6h.php:17\n\
    Stack trace:\n#0 /tmp/tmpvmag5i6h.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpvmag5i6h.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    if ($decimals > 0)\
    \ {\n        return substr($number, 0, $decimals);\n    }\n    return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp98ml0c1z.php:21\n\
    Stack trace:\n#0 /tmp/tmp98ml0c1z.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp98ml0c1z.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $parts\
    \ = explode('.', $number);\n  return $parts[0] . '.' . substr($parts[1], 0, -1);\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogp459j5.php:18\n\
    Stack trace:\n#0 /tmp/tmpogp459j5.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpogp459j5.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/\\./', '', $number);\n    $decimals = strlen($decimals);\n\
    \    if ($decimals > 0) {\n        $decimals = $decimals - 1;\n    }\n    return\
    \ $number;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3pftovk.php:22\n\
    Stack trace:\n#0 /tmp/tmpx3pftovk.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpx3pftovk.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $parts = explode('.', $number);\n    return $parts[0] . '.' . substr($parts[1],\
    \ 0, -1);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4wws77tm.php:18\n\
    Stack trace:\n#0 /tmp/tmp4wws77tm.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp4wws77tm.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = 1;\n  $integer = floor($number);\n  if ($integer > $number) {\n    $decimals\
    \ = $integer - $number;\n    $integer = 0;\n  }\n  return $integer . '.' . str_pad($decimals,\
    \ 3, '0', STR_PAD_LEFT);\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pqld88q.php:23\n\
    Stack trace:\n#0 /tmp/tmp9pqld88q.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp9pqld88q.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ if ($number < 1) {\n        return 0;\n    }\n    $decimals = strlen($number)\
    \ - strrpos($number, '.');\n    return round($number, $decimals);\n}\n\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo35f98vq.php:21\n\
    Stack trace:\n#0 /tmp/tmpo35f98vq.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpo35f98vq.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimal_part = floor($number);\n    $decimal_part = abs($decimal_part);\n \
    \   $int_part = floor($number - $decimal_part);\n    return $decimal_part + $int_part;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6uogrxuh.php:20\n\
    Stack trace:\n#0 /tmp/tmp6uogrxuh.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp6uogrxuh.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  if\
    \ ($decimals > 0) {\n    return $number - intval($number);\n  }\n  return $number;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgygh61iw.php:18\n\
    Stack trace:\n#0 /tmp/tmpgygh61iw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpgygh61iw.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  return $number - $decimals;\n}\n\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsr_ozrd9.php:18\n\
    Stack trace:\n#0 /tmp/tmpsr_ozrd9.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpsr_ozrd9.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = strlen($number) - strrpos($number, '.');\n    return floor($number\
    \ * pow(10, $decimals)) / pow(10, $decimals);\n}\n\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0js8a02z.php:18\n\
    Stack trace:\n#0 /tmp/tmp0js8a02z.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp0js8a02z.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  return\
    \ floor($number * 10) / 10;\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91n3ie2m.php:17\n\
    Stack trace:\n#0 /tmp/tmp91n3ie2m.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp91n3ie2m.php\
    \ on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n  $decimals\
    \ = preg_replace('/\\./', '', $number);\n  $decimals = strlen($decimals);\n  $decimals\
    \ = $decimals > 0 ? $decimals : 0;\n  return $number - intval($number * pow(10,\
    \ -$decimals));\n}\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqza_atto.php:20\n\
    Stack trace:\n#0 /tmp/tmpqza_atto.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpqza_atto.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Given a positive floating point number, it can be decomposed\
    \ into\n// and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number($number) {\n   \
    \ $decimals = preg_replace('/0+$/', '', $number);\n    return $number - $decimals;\n\
    }\n\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsn3bf47.php:18\n\
    Stack trace:\n#0 /tmp/tmpnsn3bf47.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpnsn3bf47.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
