name: HumanEval_59_largest_prime_factor
language: php
results:
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \        if ($j > $i) {\n                $i = $j;\n            }\n        }\n\
    \        $i++;\n    }\n    return $i;\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6y6qoke.php:27\n\
    Stack trace:\n#0 /tmp/tmpk6y6qoke.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpk6y6qoke.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \        if ($j == $i) {\n                return $i;\n            }\n        }\n\
    \        $i++;\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpft689eny.php:27\n\
    Stack trace:\n#0 /tmp/tmpft689eny.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpft689eny.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ '/' . $n;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhzc08dn.php:25\n\
    Stack trace:\n#0 /tmp/tmpbhzc08dn.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbhzc08dn.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n            $j++;\n        }\n        elseif ($n %\
    \ $i == 1) {\n            $i++;\n        }\n        else {\n            $j++;\n\
    \        }\n    }\n    return $j;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p < $n) {\n        if ($n % $i == 0) {\n            $p *= $i;\n          \
    \  $i++;\n        }\n        else {\n            $i = 2;\n        }\n    }\n \
    \   return $p;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvc66z91y.php:27\n\
    Stack trace:\n#0 /tmp/tmpvc66z91y.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvc66z91y.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = $j = 2;\n \
    \ while ($i <= sqrt($n)) {\n    while ($n % $i == 0) {\n      $i++;\n    }\n \
    \   if ($i == $j) {\n      return $j;\n    }\n    $j++;\n  }\n  return $j;\n}\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptfieay7a.php:26\n\
    Stack trace:\n#0 /tmp/tmptfieay7a.php(33): test()\n#1 {main}\n  thrown in /tmp/tmptfieay7a.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code\
    \ doesn't work for me. I'm getting a blank page when I run it.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it worked for me. Are you sure you copied the code correctly?\
    \ Did you change the variable names?\n<|/ c |>\n<| c |>\nI copied the code exactly\
    \ as you wrote it. I changed the variable names. I even tried copying and pasting\
    \ your code into a new php file and running it on localhost. I'm still getting\
    \ a blank page.\n<|/ c |>\n<| c |>\nI tested it again and it works fine for me.\
    \ Are you sure you copied the code correctly? Did you change the variable names?\n\
    <|/ c |>\n<| c |>\nI copied the code exactly as you wrote it. I changed the variable\
    \ names. I even tried copying and pasting your code into a new php file and running\
    \ it on localhost. I'm still getting a blank page.\n<|/ c |>\n<| a tags=php,primes\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzuyzccoe.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    }\
    \ else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfstlr7yt.php:25\n\
    Stack trace:\n#0 /tmp/tmpfstlr7yt.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfstlr7yt.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj6_4t20.php:26\n\
    Stack trace:\n#0 /tmp/tmplj6_4t20.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplj6_4t20.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p > 1) {\n        if ($n % $i == 0) {\n            $p = $p / $i;\n       \
    \     $i++;\n        }\n        else {\n            $i++;\n        }\n    }\n\
    \    return $p;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the\
    \ question. OP wants to find the largest prime factor of a number, not just its\
    \ greatest prime factor.\n<|/ c |>\n<| c |>\nThe question was \"Find the largest\
    \ prime factor of a number\", not \"Find the greatest prime factor of a number\"\
    \n<|/ c |>\n<| c |>\nThe question was \"Find the largest prime factor of a number\"\
    , not \"Find the greatest prime factor of a number\"\n<|/ c |>\n<| c |>\nThe question\
    \ was \"Find the largest prime factor of a number\", not \"Find the greatest prime\
    \ factor of a number\"\n<|/ c |>\n<| c |>\nThe question was \"Find the largest\
    \ prime factor of a number\", not \"Find the greatest prime factor of a number\"\
    \n<|/ c |>\n<| a tags=php,prime-factoring |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc8cbyoji.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3zjis5pp.php:25\n\
    Stack trace:\n#0 /tmp/tmp3zjis5pp.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp3zjis5pp.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = $j = 2;\n \
    \ while ($i <= $n) {\n    while ($n % $i == 0) {\n      $i++;\n    }\n    if ($i\
    \ == $j) {\n      return $j;\n    }\n    while ($j % $i == 0) {\n      $j++;\n\
    \    }\n    if ($j == $i) {\n      return $i;\n    }\n    $i++;\n    $j++;\n \
    \ }\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp91r6wonq.php:32\n\
    Stack trace:\n#0 /tmp/tmp91r6wonq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp91r6wonq.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $i\
    \ . $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n     \
    \   }\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp517wfikd.php:26\n\
    Stack trace:\n#0 /tmp/tmp517wfikd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp517wfikd.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks for your\
    \ answer. Your code works perfectly for small numbers but for large numbers it\
    \ gives wrong result. For example, for number 1536, it returns 3 instead of 2.\n\
    <|/ c |>\n<| c |>\nYes, I tested it for large numbers and it works perfectly.\
    \ Try it again with 1536 and see if it works.\n<|/ c |>\n<| c |>\nYes, it works\
    \ perfectly for large numbers. But for number 1536 it returns 3 instead of 2.\
    \ Do you know why it happens?\n<|/ c |>\n<| c |>\nI tested it again with 1536\
    \ and it returns 2 correctly. Are you sure you copied the code correctly? It returns\
    \ 2 correctly for 1536.\n<|/ c |>\n<| c |>\nYes, I copied your code and tested\
    \ it again with 1536 and it returns 2 correctly. Are you sure you copied the code\
    \ correctly? It returns 2 correctly for 1536.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps9s05hle.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $i = 2;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code\
    \ doesn't work for me. `largest_prime_factor(13195)` returns `2` instead of `3`.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 7.0.10 and it works fine. Maybe you have\
    \ a different PHP version?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.15 and it\
    \ works fine. Maybe you have a different PHP version?\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.5.9 and it works fine. Maybe you have a different PHP version?\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works fine. Maybe you have\
    \ a different PHP version?\n<|/ c |>\n<| a tags=php,primes |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmps0myn79f.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmzz_vb8_.php:26\n\
    Stack trace:\n#0 /tmp/tmpmzz_vb8_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmzz_vb8_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n       \
    \ }\n    }\n    return $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqyd04s6.php:25\n\
    Stack trace:\n#0 /tmp/tmpwqyd04s6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpwqyd04s6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvl6r7id4.php:26\n\
    Stack trace:\n#0 /tmp/tmpvl6r7id4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvl6r7id4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $factor = $i;\n            break;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4nr4x3b.php:26\n\
    Stack trace:\n#0 /tmp/tmpb4nr4x3b.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpb4nr4x3b.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n--;\n    do {\n        $n--;\
    \ // Divide by 2\n        $n++; // Divide by 3\n        $n++; // Divide by 5\n\
    \        $n++; // Divide by 7\n        $n++; // Divide by 11\n        $n++; //\
    \ Divide by 13\n        $n++; // Divide by 17\n        $n++; // Divide by 19\n\
    \        $n++; // Divide by 23\n        $n++; // Divide by 29\n        $n++; //\
    \ Divide by 31\n        $n++; // Divide by 37\n        $n++; // Divide by 41\n\
    \        $n++; // Divide by 43\n        $n++; // Divide by 47\n        $n++; //\
    \ Divide by 53\n        $n++; // Divide by 59\n        $n++; // Divide by 61\n\
    \        $n++; // Divide by 67\n        $n++; // Divide by 71\n        $n++; //\
    \ Divide by 73\n        $n++; // Divide by 79\n        $n++; // Divide by 83\n\
    \        $n++; // Divide by 89\n        $n++; // Divide by 97\n    } while ($n\
    \ > 1);\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqy42wft5.php:27\n\
    Stack trace:\n#0 /tmp/tmpqy42wft5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqy42wft5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqg3dum5.php:26\n\
    Stack trace:\n#0 /tmp/tmppqg3dum5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppqg3dum5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $p = 1; $q = $n; $m = $n;\
    \ $found = false;\n    while ($i <= $m) {\n        if ($n % $i == 0) {\n     \
    \       $p *= $i;\n            $found = true;\n        }\n        $i += $q;\n\
    \        $q = $p * $q;\n    }\n    return $p > 1 ? $p : null;\n}\n</code>\n<|/\
    \ a tags=php,algorithm |>\n<| c |>\nThe algorithm is correct, but I believe it\
    \ can be optimized a bit. Instead of checking all numbers from 2 to sqrt(n), it\
    \ would be better to check only odd numbers from 2 to sqrt(n).\n<|/ c |>\n<| c\
    \ |>\nI agree, but I wanted to keep it simple and easy to understand.\n<|/ c |>\n\
    <| c |>\nI agree with you that it's easy to understand, but I believe it can be\
    \ optimized a bit. Instead of checking all numbers from 2 to sqrt(n), it would\
    \ be better to check only odd numbers from 2 to sqrt(n).\n<|/ c |>\n<| c |>\n\
    I agree with you that it's easy to understand, but I believe it can be optimized\
    \ a bit. Instead of checking all numbers from 2 to sqrt(n), it would be better\
    \ to check only odd numbers from 2 to sqrt(n).\n<|/ c |>\n<| c |>\nI agree with\
    \ you that it's easy to understand, but I believe it can be optimized a bit. Instead\
    \ of checking all numbers from 2 to sqrt(n), it would be better to check only\
    \ odd numbers from 2 to sqrt(n).\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwlzbipo4.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3q9j_7l.php:26\n\
    Stack trace:\n#0 /tmp/tmph3q9j_7l.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph3q9j_7l.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code\
    \ is not working with large numbers. I tested with number like `1000000000000`\
    \ and it returns `1` instead of `2`.\n<|/ c |>\n<| c |>\nI tested with number\
    \ like `1000000000000` and it returns `1` instead of `2`.\n<|/ c |>\n<| c |>\n\
    It returns 1 because `1000000000000` is greater than `PHP_INT_MAX`, which is 2147483647.\
    \ `PHP_INT_MAX` is `9223372036854775807` which is `9223372036854775808`. `9223372036854775808`\
    \ is greater than `2147483647`, which is `2147483648`. `2147483648` is greater\
    \ than `2147483647`, which is `2147483647`. `2147483647` is greater than `2147483647`,\
    \ which is `2147483647`. `2147483647` is greater than `2147483647`, which is `2147483647`.\
    \ `2147483647` is greater than `2147483647`, which is `2147483647`. `2147483647`\
    \ is greater than `2147483647`, which is `2147483647`. `2147483647` is greater\
    \ than `2147483647`, which is `2147483647`. `2147483647` is greater than `2147483647`,\
    \ which is `2147483647`. `2147483647` is greater than `2147483647`, which is `2147483647`.\
    \ `2147483647` is greater than `2147483647`, which is `2147483647`. `2147483647`\
    \ is greater than `2147483647`, which is `2147483647`. `2147483647` is greater\
    \ than `2147483647`, which is `2147483647`. `2147483647` is greater than `2147483647`,\
    \ which is `2147483647`. `2147483647` is greater than `2147483647`, which is `2147483647`.\
    \ `2147483647` is greater than `2147483647`, which is `2147483647`. `2147483647`\
    \ is greater than `2147483647`, which is `2147483647\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd1hl2496.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\n\
    The question was about PHP not Python\n<|/ c |>\n<| c |>\nI added a PHP solution\n\
    <|/ c |>\n<| c |>\nThe question was about PHP not Python\n<|/ c |>\n<| c |>\n\
    I added a PHP solution\n<|/ c |>\n<| c |>\nThe question was about PHP not Python\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_awp74wj.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph2k6oul5.php:26\n\
    Stack trace:\n#0 /tmp/tmph2k6oul5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmph2k6oul5.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \        if ($j > $i) {\n                return $i;\n            }\n        }\n\
    \        $i++;\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1u5iem6.php:27\n\
    Stack trace:\n#0 /tmp/tmp_1u5iem6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp_1u5iem6.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pp4rjir.php:27\n\
    Stack trace:\n#0 /tmp/tmp5pp4rjir.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5pp4rjir.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 1;\n  while\
    \ ($i <= sqrt($n)) {\n    $n = $i * $n;\n    $i++;\n  }\n  return $n;\n}\n</code>\n\
    <|/ a tags=php,primes |>\n<| c |>\nThis code doesn't work. Try it with `largest_prime_factor(1025)`.\n\
    <|/ c |>\n<| c |>\nIt works fine for me. Try it with `largest_prime_factor(1025)`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work for me. Try it with `largest_prime_factor(1025)`.\n\
    <|/ c |>\n<| c |>\nIt works for me on PHP 5.3.10. Try it with `largest_prime_factor(1025)`.\n\
    <|/ c |>\n<| c |>\nIt works for me on PHP 5.3.10. Try it with `largest_prime_factor(1025)`.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf0c24il3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdfierary.php:27\n\
    Stack trace:\n#0 /tmp/tmpdfierary.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdfierary.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $i = $j + 1;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $j;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= $n) {\n    if ($n % $i == 0) {\n      $n = $i + ($n / $i);\n    } else\
    \ {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cte68ul.php:26\n\
    Stack trace:\n#0 /tmp/tmp4cte68ul.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4cte68ul.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfoicmmx.php:26\n\
    Stack trace:\n#0 /tmp/tmpxfoicmmx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpxfoicmmx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n       \
    \ }\n    }\n    return $n;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThe\
    \ first two lines of code are unnecessary, and can be replaced with `return $n\
    \ <= 1 ? 1 : $n <= 3 ? 3 : largest_prime_factor($n / 2);`\n<|/ c |>\n<| c |>\n\
    : Yes, but that would not work if `$n` is negative (which it might be).\n<|/ c\
    \ |>\n<| c |>\n: Yes, but that would not work if `$n` is negative (which it might\
    \ be).\n<|/ c |>\n<| c |>\n: Yes, but that would not work if `$n` is negative\
    \ (which it might be).\n<|/ c |>\n<| c |>\n: Yes, but that would not work if `$n`\
    \ is negative (which it might be).\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmptweituj9.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xdff406.php:26\n\
    Stack trace:\n#0 /tmp/tmp9xdff406.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9xdff406.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $max = 2; $max_so_far =\
    \ $n; $factor = $n; $found = 0; $prime = true;\n    while ($i <= $n) {\n     \
    \   if ($n % $i == 0) {\n            $found++;\n            if ($found == $max)\
    \ {\n                $max++; $max_so_far = $n;\n            }\n            $factor\
    \ = $i;\n            $prime = false;\n        }\n        $i++;\n    }\n    if\
    \ ($prime) {\n        return $factor;\n    } else {\n        return $max_so_far;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_0zllkrg.php:31\n\
    Stack trace:\n#0 /tmp/tmp_0zllkrg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_0zllkrg.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7_d6foq.php:25\n\
    Stack trace:\n#0 /tmp/tmpu7_d6foq.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpu7_d6foq.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThanks so much for this. I understand it better now.\
    \ I've been trying to learn PHP by myself and I really appreciate your help. I\
    \ really appreciate your time. Thank you so much!\n<|/ c |>\n<| c |>\nNo problem.\
    \ Glad I could help. If this answer solved your problem, please consider marking\
    \ it as accepted by clicking the check mark next to it.\n<|/ c |>\n<| c |>\nI\
    \ did but my reputation is too low for it to show publicly.\n<|/ c |>\n<| c |>\n\
    Ah, I see. Thanks for letting me know. :)\n<|/ c |>\n<| a tags=php,primes |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa2dgreu1.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for\
    \ your answer. Your code works fine for small numbers but for large numbers it\
    \ takes too much time to execute. Is there any way to optimize it?\n<|/ c |>\n\
    <| c |>\n: I added a faster version. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ a lot. Your code works perfectly for large numbers. But it takes too much time\
    \ to execute for small numbers. Is there any way to optimize it?\n<|/ c |>\n<|\
    \ c |>\n: I added a faster version. Hope it helps.\n<|/ c |>\n<| c |>\nThanks\
    \ a lot. Your code works perfectly for large numbers. But it takes too much time\
    \ to execute for small numbers. Is there any way to optimize it?\n<|/ c |>\n<|\
    \ a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy9s5w4ti.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \    }\n        $i += $j;\n    }\n    return $j;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i82hdof.php:24\n\
    Stack trace:\n#0 /tmp/tmp2i82hdof.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp2i82hdof.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n\
    <|/ a tags=php,primes |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n\
    <| c |>\nThe code above is wrong. Try it with `largest_prime_factor(1025)`. You'll\
    \ get `3` instead of `5`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I\
    \ fixed the code accordingly.\n<|/ c |>\n<| c |>\nThanks so much! I appreciate\
    \ it!\n<|/ c |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbdw0qvi3.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7iunmo0.php:26\n\
    Stack trace:\n#0 /tmp/tmpr7iunmo0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpr7iunmo0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i++;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1xa267j.php:26\n\
    Stack trace:\n#0 /tmp/tmpn1xa267j.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpn1xa267j.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgm1ra1iz.php:26\n\
    Stack trace:\n#0 /tmp/tmpgm1ra1iz.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpgm1ra1iz.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 1;\n  while\
    \ ($i <= $n) {\n    $i += $n % $i;\n    $n = $n / $i;\n    $i++;\n  }\n  return\
    \ $i;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ja8t4p4.php:23\n\
    Stack trace:\n#0 /tmp/tmp6ja8t4p4.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp6ja8t4p4.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n--;\n    do {\n        $n--;\
    \ // Divide n by 2\n    } while ($n > 1);\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96tsutkt.php:20\n\
    Stack trace:\n#0 /tmp/tmp96tsutkt.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp96tsutkt.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $i\
    \ . '/' . $n;\n        }\n        $i++;\n    }\n    return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp506v16_9.php:23\n\
    Stack trace:\n#0 /tmp/tmp506v16_9.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp506v16_9.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor = $i;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzf8wtruo.php:26\n\
    Stack trace:\n#0 /tmp/tmpzf8wtruo.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzf8wtruo.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for small numbers, but for large numbers\
    \ it doesn't work properly. For example, for 13195 it returns 3, but for 2048\
    \ it returns 2. Do you know why it happens?\n<|/ c |>\n<| c |>\nI tested it with\
    \ your numbers and it works fine. Are you sure you copied the code correctly?\
    \ I tested it on PHP 5.3.10 and PHP 5.3.8. Maybe you have a typo or something?\n\
    <|/ c |>\n<| c |>\nYes, I copied your code exactly. Maybe I should try it on another\
    \ computer. Thanks for your help.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10\
    \ and PHP 5.3.8. Maybe you have a typo or something?\n<|/ c |>\n<| c |>\nI tested\
    \ it on PHP 5.3.10 and PHP 5.3.8. Maybe you have a typo or something?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjqb28vnc.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \    }\n        $i++;\n    }\n    return $j;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbjtmu93.php:25\n\
    Stack trace:\n#0 /tmp/tmpnbjtmu93.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpnbjtmu93.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbs3342z.php:26\n\
    Stack trace:\n#0 /tmp/tmprbs3342z.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprbs3342z.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $max_factor = 1;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $max_factor\
    \ = $i;\n        }\n        $i++;\n    }\n    return $max_factor;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiloiid42.php:24\n\
    Stack trace:\n#0 /tmp/tmpiloiid42.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpiloiid42.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ seem to work. `largest_prime_factor(13195)` returns `2` instead of `3`.\n<|/\
    \ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works. I tested it on PHP 5.2.17\
    \ and it works. I tested it on PHP 5.1.6 it works. I tested it on PHP 5.3.0 it\
    \ works. I tested it on PHP 5.2.6 it works. I tested it on PHP 5.3.3 it works.\
    \ I tested it on PHP 5.3.8 it works. I tested it on PHP 5.3.2 it works. I tested\
    \ it on PHP 5.3.1 it works. I tested it on PHP 5.3.4 it works. I tested it on\
    \ PHP 5.3.6 it works. I tested it on PHP 5.3.7 it works. I tested it on PHP 5.3.9\
    \ it works. I tested it on PHP 5.3.10 it works. I tested it on PHP 5.3.11 it works.\
    \ I tested it on PHP 5.3.12 it works. I tested it on PHP 5.3.13 it works. I tested\
    \ it on PHP 5.3.14 it works. I tested it on PHP 5.3.15 it works. I tested it on\
    \ PHP 5.3.16 it works. I tested it on PHP 5.3.17 it works. I tested it on PHP\
    \ 5.3.18 it works. I tested it on PHP 5.3.19 it works. I tested it on PHP 5.3.20\
    \ it works. I tested it on PHP 5.3.21 it works. I tested it on PHP 5.3.22 it works.\
    \ I tested it on PHP 5.3.23 it works. I tested it on PHP 5.3.24 it works. I tested\
    \ it on PHP 5.3.25 it works. I tested it on PHP 5.3.26 it works. I tested it on\
    \ PHP 5.3.27 it works. I tested it on PHP 5.3.28 it works. I tested it on PHP\
    \ 5.3.29 it works. I tested it on PHP 5.3.30 it works. I tested it on PHP 5.3.31\
    \ it works. I tested it on PHP 5.3.32 it works. I tested it on PHP 5.3.33 it \n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa7_0j03g.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis\
    \ code doesn't work for large numbers. Try it with `largest_prime_factor(1000000000)`\n\
    <|/ c |>\n<| c |>\nIt works for me on PHP 5.6.29. Try it yourself.\n<|/ c |>\n\
    <| c |>\nI tested it on PHP 5.6.29 and it didn't work for me. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.6.29 and it didn't work for me. Try it\
    \ yourself.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.29 and it didn't work for\
    \ me. Try it yourself.\n<|/ c |>\n<| a dscore=5 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphh2w8bq5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    $max_i = $n - 1;\n    $max_j = 2;\n    while ($i <= $max_i && $j <= $max_j)\
    \ {\n        if ($n % $i == 0) {\n            $i++;\n        }\n        if ($n\
    \ % $j == 0) {\n            $j++;\n        }\n        if ($i % $j == 0) {\n  \
    \          $j++;\n        }\n        if ($j > $max_j) {\n            $max_j =\
    \ $j;\n        }\n        if ($i > $max_i) {\n            $max_i = $i;\n     \
    \   }\n    }\n    return $max_j * pow(2, $max_i);\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $p = 3;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $p\
    \ = $i;\n        }\n        $i += $p;\n    }\n    return $p;\n}\n</code>\n<|/\
    \ a tags=php,primes |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2dt3595z.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n        } else {\n            $j++;\n        }\n  \
    \  }\n    return $j;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    \
    \  $i++;\n    }\n    else {\n      $i++;\n    }\n  }\n  return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswae1jfx.php:27\n\
    Stack trace:\n#0 /tmp/tmpswae1jfx.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpswae1jfx.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt5cvpmd.php:27\n\
    Stack trace:\n#0 /tmp/tmpnt5cvpmd.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnt5cvpmd.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i =\
    \ 2;\n    } else {\n      $i++;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0gkjdy2.php:26\n\
    Stack trace:\n#0 /tmp/tmpz0gkjdy2.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpz0gkjdy2.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \    }\n        $i++;\n    }\n    return $j;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1i2ijm9v.php:25\n\
    Stack trace:\n#0 /tmp/tmp1i2ijm9v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1i2ijm9v.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $prime = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $prime = $i;\n      \
    \      $n = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $prime;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post.\n<|/ c |>\n<| c |>\nIt does\
    \ provide an answer to the question. He asked \"how do I find the largest prime\
    \ factor of a number?\" and I provided an answer that does exactly that. How is\
    \ that not an answer?\n<|/ c |>\n<| c |>\nThe question was \"how do I find the\
    \ largest prime factor of a number?\" Your answer does not do that. Your answer\
    \ finds the largest prime factor of a number. Your answer does not answer the\
    \ question. Your answer does not explain why your answer works.\n<|/ c |>\n<|\
    \ c |>\nThe question was \"how do I find the largest prime factor of a number?\"\
    \ Your answer does not do that. Your answer finds the largest prime factor of\
    \ a number. Your answer does not answer the question. Your answer does not explain\
    \ why your answer works.\n<|/ c |>\n<| c |>\nThe question was \"how do I find\
    \ the largest prime factor of a number?\" Your answer does not do that. Your answer\
    \ finds the largest prime factor of a number. Your answer does not answer the\
    \ question. Your answer does not explain why your answer works.\n<|/ c |>\n<|\
    \ a dscore=4 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp595y2v4x.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThanks so much!\
    \ I appreciate it!\n<|/ c |>\n<| c |>\nYou're welcome! I hope you enjoy this code!\
    \ :)\n<|/ c |>\n<| c |>\nThanks so much! I appreciate it!\n<|/ c |>\n<| c |>\n\
    Thanks so much! I appreciate it!\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn3ont_zt.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw8inc6bx.php:26\n\
    Stack trace:\n#0 /tmp/tmpw8inc6bx.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpw8inc6bx.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_tlwqxs.php:26\n\
    Stack trace:\n#0 /tmp/tmp0_tlwqxs.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp0_tlwqxs.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = 3;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $p = $i;\n    \
    \    }\n        $i += $p;\n    }\n    return $p;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5sejzkn6.php:23\n\
    Stack trace:\n#0 /tmp/tmp5sejzkn6.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5sejzkn6.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 1;\n  while\
    \ ($i <= sqrt($n)) {\n    $n = $i * $n;\n    $i++;\n  }\n  return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i\
    \ += 2;\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafs6j084.php:24\n\
    Stack trace:\n#0 /tmp/tmpafs6j084.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpafs6j084.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n   \
    \         $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n  \
    \  }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51893i4g.php:26\n\
    Stack trace:\n#0 /tmp/tmp51893i4g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp51893i4g.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt4hmmhp.php:26\n\
    Stack trace:\n#0 /tmp/tmpnt4hmmhp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnt4hmmhp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThe first part of this answer was very helpful to\
    \ me. Thanks.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdku3fs9g.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i =\
    \ 2;\n    } else {\n      $i++;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmz3stw4.php:26\n\
    Stack trace:\n#0 /tmp/tmpmmz3stw4.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmmz3stw4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    }\
    \ else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyb5uhip8.php:25\n\
    Stack trace:\n#0 /tmp/tmpyb5uhip8.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyb5uhip8.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4sf5plte.php:26\n\
    Stack trace:\n#0 /tmp/tmp4sf5plte.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4sf5plte.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI like your answer,\
    \ but this doesn't seem to work for me. I'm getting `Fatal error: Call to undefined\
    \ function largest_prime_factor()`\n<|/ c |>\n<| c |>\nYou have to define it yourself.\
    \ I added the function definition to the answer.\n<|/ c |>\n<| c |>\nI added the\
    \ function definition to the answer.\n<|/ c |>\n<| c |>\nI added the function\
    \ definition to the answer.\n<|/ c |>\n<| c |>\nI added the function definition\
    \ to the answer.\n<|/ c |>\n<| a |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4om303of.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8qj98rs.php:26\n\
    Stack trace:\n#0 /tmp/tmps8qj98rs.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps8qj98rs.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $m = $n; $p = 1; $q = $n;\
    \ $r = $n; $s = $n; $t = $n;\n    while ($i <= $m) {\n        while ($n % $i ==\
    \ 0) {\n            $p *= $i; $q *= $i; $r *= $i; $s *= $i; $t *= $i;\n      \
    \      $i++;\n        }\n        if ($p > $q) {\n            $m = $p; $p = $q;\
    \ $q = $r; $r = $s; $s = $t;\n        }\n    }\n    return $q;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpirukpaib.php:26\n\
    Stack trace:\n#0 /tmp/tmpirukpaib.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpirukpaib.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $s = 2; $d = 2; $r = 1;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $i\
    \ . $n / $i;\n            $d = $i * $i;\n            $s = $i * $s;\n         \
    \   $r = $i * $r;\n        }\n        $i++;\n    }\n    return $r;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=php,primes |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphm3cz22u.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp96flnifu.php:26\n\
    Stack trace:\n#0 /tmp/tmp96flnifu.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp96flnifu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxgb1nsl.php:26\n\
    Stack trace:\n#0 /tmp/tmpoxgb1nsl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpoxgb1nsl.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $p = 1; $q = $n; $m = $n;\
    \ $factor = 1;\n    while ($i <= $m) {\n        if ($n % $i == 0) {\n        \
    \    $p *= $i; $q = $p / $i; $factor++;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpniy07i9y.php:22\n\
    Stack trace:\n#0 /tmp/tmpniy07i9y.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpniy07i9y.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    $max_i = $n;\n    while ($i <= $max_i) {\n        if ($n % $i == 0) {\n \
    \           $max_i = $i;\n            $j++;\n        }\n        $i++;\n    }\n\
    \    return $j;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodo9lftm.php:26\n\
    Stack trace:\n#0 /tmp/tmpodo9lftm.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpodo9lftm.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while($i <= $n) {\n        if($n % $i == 0) {\n         \
    \   $factor++;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7iejy6zj.php:28\n\
    Stack trace:\n#0 /tmp/tmp7iejy6zj.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7iejy6zj.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ez1tfbv.php:26\n\
    Stack trace:\n#0 /tmp/tmp9ez1tfbv.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9ez1tfbv.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmad7t1sr.php:26\n\
    Stack trace:\n#0 /tmp/tmpmad7t1sr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpmad7t1sr.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n--;\n    $i = 2;\n    $factor\
    \ = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor++;\n\
    \        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes\
    \ |>\n<| c |>\nThis doesn't work for me. `largest_prime_factor(13195)` returns\
    \ `3` but `largest_prime_factor(2048)` returns `2`.\n<|/ c |>\n<| c |>\nThe code\
    \ works fine for me on PHP 5.5.9. Are you sure you're using PHP 5.5.9? It works\
    \ fine for me on PHP 5.3.10 as well.\n<|/ c |>\n<| c |>\nYes, I'm sure. I'm using\
    \ PHP 5.3.10. I'm running Ubuntu 12.04 LTS. Maybe it's an issue with my version\
    \ of PHP?\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it works fine. Maybe\
    \ it's an issue with your version of PHP? Try upgrading to the latest version\
    \ of PHP and see if it works.\n<|/ c |>\n<| c |>\nI upgraded to PHP 5.3.10 and\
    \ it still doesn't work. I'm running Ubuntu 12.04 LTS.\n<|/ c |>\n<| a |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprv7ymmyq.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n--;\n    do {\n        $n--;\
    \ // Divide by two and discard remainder.\n        $f = $n % $n;\n        $n =\
    \ (int) ($n/$f);\n    } while ($n > 1);\n    return $n;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for large numbers. Try `largest_prime_factor(1000000007)`\n\
    <|/ c |>\n<| c |>\n: It works for me. Try it yourself.\n<|/ c |>\n<| c |>\n: I\
    \ tested it on PHP 5.3.10 and PHP 5.2.17. Both give me `2`.\n<|/ c |>\n<| c |>\n\
    : I tested it on PHP 5.3.10 and PHP 5.2.17. Both give me `2`.\n<|/ c |>\n<| c\
    \ |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both give me `2`.\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4dk4073b.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $i = $j + 1;\n            $j = $i;\n        }\n        else\
    \ {\n            $i = $i + 1;\n        }\n    }\n    return $j;\n}\n</code>\n\
    <|/ a tags=php,primes |>\n<| a dscore=2 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw3rlhpx6.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $p = 2;\n    $q = 3;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $p = $i;\n            while ($n % $p == 0) {\n                $q\
    \ = $p;\n                $p++;\n            }\n            $n = $q;\n        }\n\
    \        $i++;\n    }\n    return $p;\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuv14utmp.php:31\n\
    Stack trace:\n#0 /tmp/tmpuv14utmp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpuv14utmp.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $i = $j + 1;\n            $j = $j + 1;\n        } else {\n\
    \            $i = $i + 1;\n        }\n    }\n    return $j;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabk00xdl.php:27\n\
    Stack trace:\n#0 /tmp/tmpabk00xdl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpabk00xdl.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    }\
    \ else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpluzflc74.php:25\n\
    Stack trace:\n#0 /tmp/tmpluzflc74.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpluzflc74.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n        } else {\n            $j++;\n        }\n  \
    \  }\n    return $j;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n   \
    \ } else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmpb8ktc.php:25\n\
    Stack trace:\n#0 /tmp/tmpmmpb8ktc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpmmpb8ktc.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $factor = 2;\n   \
    \ while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n /\
    \ $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj5lnir8p.php:25\n\
    Stack trace:\n#0 /tmp/tmpj5lnir8p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpj5lnir8p.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0obpm0_.php:26\n\
    Stack trace:\n#0 /tmp/tmpt0obpm0_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpt0obpm0_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n   \
    \ } else {\n      $i++;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppfffc4nl.php:25\n\
    Stack trace:\n#0 /tmp/tmppfffc4nl.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppfffc4nl.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n        } else {\n            $j++;\n        }\n  \
    \  }\n    return $j;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $p = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $p\
    \ = $i;\n        }\n        $i++;\n    }\n    return $p;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nThis code doesn't work for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `largest_prime_factor(-2)`.\n\
    <|/ c |>\n<| a dscore=4 tags=php,primes |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpws0uij35.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n--;\n    do {\n        $n--;\
    \ // Divide by 2\n        $n--; // Divide by 3\n        $n--; // Divide by 5\n\
    \        $n--; // Divide by 7\n        $n--; // Divide by 11\n        $n--; //\
    \ Divide by 13\n        $n--; // Divide by 17\n        $n--; // Divide by 19\n\
    \        $n--; // Divide by 23\n        $n--; // Divide by 29\n        $n--; //\
    \ Divide by 31\n        $n--; // Divide by 37\n        $n--; // Divide by 41\n\
    \        $n--; // Divide by 43\n        $n--; // Divide by 47\n        $n--; //\
    \ Divide by 53\n        $n--; // Divide by 59\n        $n--; // Divide by 61\n\
    \        $n--; // Divide by 67\n        $n--; // Divide by 71\n        $n--; //\
    \ Divide by 73\n        $n--; // Divide by 79\n        $n--; // Divide by 83\n\
    \        $n--; // Divide by 89\n        $n--; // Divide by 97\n        $n--; //\
    \ Divide by 101\n        $n--; // Divide by 103\n        $n--; // Divide by 107\n\
    \        $n--; // Divide by 109\n        $n--; // Divide by 113\n        $n--;\
    \ // Divide by 127\n        $n--; // Divide by 131\n        $n--; // Divide by\
    \ 137\n        $n--; // Divide by 139\n        $n--; // Divide by 147\n      \
    \  $n--; // Divide by 151\n        $n--; // Divide by 157\n        $n--; // Divide\
    \ by 163\n        $n--; // Divide by 167\n        $n--; // Divide by 173\n   \
    \     $n--; // Divide by 179\n        $n--; // Divide by 181\n        $n--; //\
    \ Divide by 191\n        $n--; // Divide by 193\n        $n--; // Divide by 197\n\
    \        $n--; // Divide by 199\n        $n--; // Divide by 211\n        $n--;\
    \ // Divide by 223\n        $n--; // Divide by 227\n        $n--; // Divide by\
    \ 229\n        $n--; // Divide by 233\n        $n--; // Divide by 239\n      \
    \  $n--; // Divide by 241\n        $n--; // Divide by 251\n        $n--; // Divide\
    \ by 257\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx7mrlgc2.php on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $factor = 2;\n   \
    \ while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n /\
    \ $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahgtar_e.php:25\n\
    Stack trace:\n#0 /tmp/tmpahgtar_e.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpahgtar_e.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $p = 3;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n      \
    \      $p = $i;\n        }\n        $i += $p;\n    }\n    return $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_mqx5fg.php:25\n\
    Stack trace:\n#0 /tmp/tmpc_mqx5fg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpc_mqx5fg.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcj28v_8d.php:26\n\
    Stack trace:\n#0 /tmp/tmpcj28v_8d.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpcj28v_8d.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n        }\n        else {\n            $j++;\n    \
    \    }\n    }\n    return $j;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        } else {\n           \
    \ $i++;\n        }\n    }\n    return $factor;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqr4unei7.php:27\n\
    Stack trace:\n#0 /tmp/tmpqr4unei7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqr4unei7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $max = 2; $factor = 1;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factor = $i;\n\
    \            $max = $i;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoca942wl.php:24\n\
    Stack trace:\n#0 /tmp/tmpoca942wl.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpoca942wl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i++;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsk4jyqjw.php:26\n\
    Stack trace:\n#0 /tmp/tmpsk4jyqjw.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpsk4jyqjw.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i =\
    \ 2;\n    } else {\n      $i++;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $p = 2; $q = $n; $factor\
    \ = 1;\n    while ($i <= $q) {\n        if ($n % $i == 0) {\n            $n =\
    \ $i . $p . $factor;\n            $factor = 1;\n            $p++;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $n;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThe question was about a specific algorithm, not about a general\
    \ algorithm.\n<|/ c |>\n<| c |>\nThe question was about a specific algorithm,\
    \ not about a general algorithm.\n<|/ c |>\n<| c |>\nThe question was about a\
    \ specific algorithm, not about a general algorithm.\n<|/ c |>\n<| c |>\nThe question\
    \ was about a specific algorithm, not about a general algorithm.\n<|/ c |>\n<|\
    \ c |>\nThe question was about a specific algorithm, not about a general algorithm.\n\
    <|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb3fk5v8h.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6v57yo0.php:25\n\
    Stack trace:\n#0 /tmp/tmpe6v57yo0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpe6v57yo0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $i = 2;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdv3qq2v7.php:26\n\
    Stack trace:\n#0 /tmp/tmpdv3qq2v7.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdv3qq2v7.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ '/' . $n;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8vbngob7.php:27\n\
    Stack trace:\n#0 /tmp/tmp8vbngob7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp8vbngob7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `sqrt`\
    \ function doesn't exist in PHP. You'll need to use `sqrt()`.\n<|/ c |>\n<| c\
    \ |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp5yq_uvab.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $i = $j + 1;\n            $j++;\n        }\n        else\
    \ {\n            $i++;\n        }\n    }\n    return $j;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiiivgf9o.php:27\n\
    Stack trace:\n#0 /tmp/tmpiiivgf9o.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpiiivgf9o.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n   \
    \ } else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprb4fkyft.php:25\n\
    Stack trace:\n#0 /tmp/tmprb4fkyft.php(32): test()\n#1 {main}\n  thrown in /tmp/tmprb4fkyft.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $p = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $p\
    \ = $i;\n        }\n        $i++;\n    }\n    return $p;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2k7gooj.php:25\n\
    Stack trace:\n#0 /tmp/tmps2k7gooj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps2k7gooj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i\
    \ += 2;\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_o9f1sqm.php:24\n\
    Stack trace:\n#0 /tmp/tmp_o9f1sqm.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_o9f1sqm.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p < $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n        }\n\
    \        $i += 1;\n    }\n    return $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsatbx4fg.php:24\n\
    Stack trace:\n#0 /tmp/tmpsatbx4fg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpsatbx4fg.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 1;\n  while\
    \ ($n % $i == 0) {\n    $i++;\n  }\n  return $i;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtrwl2j8.php:21\n\
    Stack trace:\n#0 /tmp/tmpjtrwl2j8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpjtrwl2j8.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ seem to work. `largest_prime_factor(13195)` returns `2` but `largest_prime_factor(2048)`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it worked fine.\
    \ Are you sure you copied the code correctly? I tested it on PHP 5.3.10 and it\
    \ worked fine.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it worked fine.\
    \ Are you sure you copied the code correctly? I tested it on PHP 5.3.10 and it\
    \ worked fine.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it worked fine.\
    \ Are you sure you copied the code correctly? I tested it on PHP 5.3.10 and it\
    \ worked fine.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.3.10 and it worked fine.\
    \ Are you sure you copied the code correctly? I tested it on PHP 5.3.10 and it\
    \ worked fine.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpixsxqunr.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n   \
    \ } else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyp4fkqf0.php:25\n\
    Stack trace:\n#0 /tmp/tmpyp4fkqf0.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyp4fkqf0.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \        if ($j > $i) {\n                $i = $j;\n            }\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $i;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzz2h_eri.php:28\n\
    Stack trace:\n#0 /tmp/tmpzz2h_eri.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzz2h_eri.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp26pulldb.php:26\n\
    Stack trace:\n#0 /tmp/tmp26pulldb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp26pulldb.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor = $i;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo1urssau.php:26\n\
    Stack trace:\n#0 /tmp/tmpo1urssau.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpo1urssau.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $s = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n\
    \ = $s / $i;\n            $s = $i;\n            $i++;\n        }\n        else\
    \ {\n            $i++;\n        }\n    }\n    return $s;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnfgcdkn6.php:29\n\
    Stack trace:\n#0 /tmp/tmpnfgcdkn6.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpnfgcdkn6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i\
    \ += 2;\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgyce4rw.php:24\n\
    Stack trace:\n#0 /tmp/tmpzgyce4rw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpzgyce4rw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p <= $n) {\n        if ($n % $i == 0) {\n            $p = $i * $i;\n     \
    \   }\n        $i += 1;\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3w82k2x.php:24\n\
    Stack trace:\n#0 /tmp/tmpx3w82k2x.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpx3w82k2x.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $factor = 2;\n   \
    \ while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n /\
    \ $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n\
    }\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis doesn't seem to work. `largest_prime_factor(13195)`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.30 and\
    \ it works. I edited my answer to include a link to the PHP documentation for\
    \ largest_prime_factor.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.6.30 and it works.\
    \ I edited my answer to include a link to the PHP documentation for largest_prime_factor.\n\
    <|/ c |>\n<| c |>\nI tested it on PHP 5.6.30 and it works. I edited my answer\
    \ to include a link to the PHP documentation for largest_prime_factor.\n<|/ c\
    \ |>\n<| c |>\nI tested it on PHP 5.6.30 and it works. I edited my answer to include\
    \ a link to the PHP documentation for largest_prime_factor.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuifg2o8z.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $p = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n      \
    \      $p = $i;\n        }\n        $i += $p;\n    }\n    return $p;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeoc95a8n.php:25\n\
    Stack trace:\n#0 /tmp/tmpeoc95a8n.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpeoc95a8n.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyedjjmkr.php:27\n\
    Stack trace:\n#0 /tmp/tmpyedjjmkr.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpyedjjmkr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $max = 2; $factor = 2;\
    \ $factors = [];\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n      \
    \      $factors[] = $i;\n            if ($i > $max) {\n                $max =\
    \ $i;\n            }\n            $i++;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $factors[count($factors) - 1];\n}\n</code>\n<|/\
    \ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `largest_prime_factor(19)`.\n\
    <|/ c |>\n<| c |>\nIt works fine for me. `largest_prime_factor(19)` returns `2`.\n\
    <|/ c |>\n<| c |>\nYes, it does. But it also returns `2` for `largest_prime_factor(19)`.\n\
    <|/ c |>\n<| c |>\nYes, it does. But it also returns `2` for `largest_prime_factor(19)`.\n\
    <|/ c |>\n<| c |>\nIt returns `2` for `largest_prime_factor(19)` because `19`\
    \ isn't a prime. Try it with `largest_prime_factor(19)`.\n<|/ c |>\n<| a tags=php,math\
    \ |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmposw7fkf2.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgtj5t9ff.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for your\
    \ answer. Can you please explain me why you used $n = abs($n); ?\n<|/ c |>\n<|\
    \ c |>\nBecause `abs()` returns the absolute value of its argument. `-42` becomes\
    \ `42`, but `-42` becomes `-42`.\n<|/ c |>\n<| c |>\nThanks for your explanation.\
    \ Can you please tell me why you used $n = abs($n); ?\n<|/ c |>\n<| c |>\nBecause\
    \ `abs()` returns the absolute value of its argument. `-42` becomes `42`, but\
    \ `-42` becomes `-42`.\n<|/ c |>\n<| c |>\nThanks for your explanation. Can you\
    \ please tell me why you used $n = abs($n); ?\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpklraq8tq.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 1;\n  while\
    \ ($i <= $n) {\n    $i += floor($n / $i);\n    $n = $n % $i;\n  }\n  return $i;\n\
    }\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77dyg50c.php:22\n\
    Stack trace:\n#0 /tmp/tmp77dyg50c.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp77dyg50c.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n       \
    \ }\n    }\n    return $n;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis\
    \ code doesn't work. Try it with `largest_prime_factor(10)`. You'll get `1` instead\
    \ of `2`.\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it worked. Are you\
    \ sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly.\
    \ I'm running PHP 5.3.10-1ubuntu3.11 with Suhosin-Patch (cli) (built: Jul 17 2013\
    \ 11:58:26).\n<|/ c |>\n<| c |>\nI tested it on PHP 5.5.9 and it worked. Are you\
    \ sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it correctly.\
    \ I'm running PHP 5.3.10-1ubuntu3.11 with Suhosin-Patch (cli) (built: Jul 17 2013\
    \ 11:58:26).\n<|/ c |>\n<| a dscore=2 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmr8h8fbl.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp84j4_51r.php:26\n\
    Stack trace:\n#0 /tmp/tmp84j4_51r.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp84j4_51r.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    $n = $i * $n;\n    $i++;\n  }\n  return $n;\n}\n\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    }\
    \ else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_ow3ocm.php:25\n\
    Stack trace:\n#0 /tmp/tmpe_ow3ocm.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpe_ow3ocm.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebcxrgrk.php:26\n\
    Stack trace:\n#0 /tmp/tmpebcxrgrk.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpebcxrgrk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnife4t3v.php:27\n\
    Stack trace:\n#0 /tmp/tmpnife4t3v.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpnife4t3v.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7atdmd76.php:26\n\
    Stack trace:\n#0 /tmp/tmp7atdmd76.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp7atdmd76.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp446u71cp.php:26\n\
    Stack trace:\n#0 /tmp/tmp446u71cp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp446u71cp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $factor = $i;\n            break;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a |>\n<| a tags=php,primes |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph6hag79v.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while($i <= $n) {\n        if($n % $i == 0) {\n         \
    \   $factor = $i;\n            $n = $n / $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $s = 2; $t = 2;\n    while\
    \ ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $s = $s * $i;\n            $t = $t * $i;\n        }\n        $i++;\n\
    \    }\n    return $t;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnod0fxjx.php:25\n\
    Stack trace:\n#0 /tmp/tmpnod0fxjx.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnod0fxjx.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis code\
    \ will fail for large numbers. For example, `largest_prime_factor(10000000000000000000000000000000)`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes, it will. That's why I said\
    \ \"Assume n > 1 and is not a prime.\"\n<|/ c |>\n<| c |>\nYes, I know. That's\
    \ why I said \"Assume n > 1 and is not a prime.\"\n<|/ c |>\n<| c |>\nYes, I know.\
    \ That's why I said \"Assume n > 1 and is not a prime.\"\n<|/ c |>\n<| c |>\n\
    Yes, I know. That's why I said \"Assume n > 1 and is not a prime.\"\n<|/ c |>\n\
    <| a dscore=5 |>\n<code>\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr54_pv6o.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . $n / $i;\n    }\
    \ else {\n      $i = $i + 1;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hbb1ak4.php:25\n\
    Stack trace:\n#0 /tmp/tmp4hbb1ak4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp4hbb1ak4.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2; $max = 2; $max_i = $n;\
    \ $max_n = 1; $max_p = 1; $max_q = 1;\n    while ($i <= $n) {\n        if ($n\
    \ % $i == 0) {\n            $p = $i; $n = $n / $i;\n            $q = $i; $i =\
    \ 2; $max = $max * $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    while ($i <= $max_i) {\n        if ($n % $i == 0) {\n            $p = $i;\
    \ $n = $n / $i;\n            $q = $i; $i = 2; $max = $max * $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    while ($i <= $max_n) {\n       \
    \ if ($n % $i == 0) {\n            $p = $i; $n = $n / $i;\n            $q = $i;\
    \ $i = 2; $max = $max * $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    while ($i <= $max_p) {\n        if ($n % $i == 0) {\n            $p\
    \ = $i; $n = $n / $i;\n            $q = $i; $i = 2; $max = $max * $i;\n      \
    \  } else {\n            $i++;\n        }\n    }\n    while ($i <= $max_q) {\n\
    \        if ($n % $i == 0) {\n            $p = $i; $n = $n / $i;\n           \
    \ $q = $i; $i = 2; $max = $max * $i;\n        } else {\n            $i++;\n  \
    \      }\n    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdd76dst.php:56\n\
    Stack trace:\n#0 /tmp/tmpxdd76dst.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpxdd76dst.php\
    \ on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $i = $j + 1;\n        } else {\n            $j++;\n        }\n  \
    \  }\n    return $j;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtec12f6.php:26\n\
    Stack trace:\n#0 /tmp/tmpvtec12f6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpvtec12f6.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppukj4z0c.php:26\n\
    Stack trace:\n#0 /tmp/tmppukj4z0c.php(32): test()\n#1 {main}\n  thrown in /tmp/tmppukj4z0c.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p <= $i) {\n        if ($n % $i == 0) {\n            $p = $i;\n        }\n\
    \        $i += $p;\n    }\n    return $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj8insx9q.php:24\n\
    Stack trace:\n#0 /tmp/tmpj8insx9q.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpj8insx9q.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmparo0jw9e.php:26\n\
    Stack trace:\n#0 /tmp/tmparo0jw9e.php(33): test()\n#1 {main}\n  thrown in /tmp/tmparo0jw9e.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyooh9oa.php:27\n\
    Stack trace:\n#0 /tmp/tmplyooh9oa.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplyooh9oa.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p > 1) {\n        if ($n % $i == 0) {\n            $p = $p / $i;\n       \
    \     $i++;\n        }\n        else {\n            $i++;\n        }\n    }\n\
    \    return $p;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp980so6eh.php:27\n\
    Stack trace:\n#0 /tmp/tmp980so6eh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp980so6eh.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while($i <= $n) {\n        if($n % $i == 0) {\n         \
    \   $factor++;\n            $n = ($n / $i) + 1;\n        } else {\n          \
    \  $i++;\n        }\n    }\n    return $factor;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscih6sib.php:27\n\
    Stack trace:\n#0 /tmp/tmpscih6sib.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpscih6sib.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhbt7_ea.php:26\n\
    Stack trace:\n#0 /tmp/tmphhbt7_ea.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphhbt7_ea.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= $n) {\n    if ($n % $i == 0) {\n      $n = $i + ($n / $i);\n    } else\
    \ {\n      $i = $i + 2;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyoo74961.php:25\n\
    Stack trace:\n#0 /tmp/tmpyoo74961.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyoo74961.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n = $n\
    \ / $i;\n            $i = $j + 1;\n        } else {\n            $j++;\n     \
    \   }\n    }\n    return $j;\n}\n\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor = $i;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm698rqk3.php:26\n\
    Stack trace:\n#0 /tmp/tmpm698rqk3.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpm698rqk3.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $i . '/' . $n;\n   \
    \ } else {\n      $i++;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9mtxcioc.php:25\n\
    Stack trace:\n#0 /tmp/tmp9mtxcioc.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9mtxcioc.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54causqk.php:26\n\
    Stack trace:\n#0 /tmp/tmp54causqk.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp54causqk.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer. Can\
    \ you please explain how this works?\n<|/ c |>\n<| c |>\nThis code will find the\
    \ largest prime factor of the number passed in. For example, `largest_prime_factor(13195)`\
    \ will return `29` because `29 = 2^3 * 3 * 5^1`\n<|/ c |>\n<| c |>\nThis code\
    \ will find the largest prime factor of the number passed in. For example, `largest_prime_factor(13195)`\
    \ will return `29` because `29 = 2^3 * 3 * 5^1`\n<|/ c |>\n<| c |>\nThis code\
    \ will find the largest prime factor of the number passed in. For example, `largest_prime_factor(13195)`\
    \ will return `29` because `29 = 2^3 * 3 * 5^1`\n<|/ c |>\n<| c |>\nThis code\
    \ will find the largest prime factor of the number passed in. For example, `largest_prime_factor(13195)`\
    \ will return `29` because `29 = 2^3 * 3 * 5^1`\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7po3i6og.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i\
    \ += 2;\n  }\n  return $n;\n}\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't\
    \ work for me. `largest_prime_factor(13195)` returns `29` instead of `3`.\n<|/\
    \ c |>\n<| c |>\n: It works for me in PHP 5.3.10. Maybe you have a different PHP\
    \ version?\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17. Both\
    \ give me `3`.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17.\
    \ Both give me `3`.\n<|/ c |>\n<| c |>\n: I tested it on PHP 5.3.10 and PHP 5.2.17.\
    \ Both give me `3`.\n<|/ c |>\n<| a tags=php,math |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp2xfq1q3f.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \    }\n        $i += $j;\n    }\n    return $j;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttu99e6v.php:24\n\
    Stack trace:\n#0 /tmp/tmpttu99e6v.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpttu99e6v.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrdl7_5n.php:27\n\
    Stack trace:\n#0 /tmp/tmphrdl7_5n.php(33): test()\n#1 {main}\n  thrown in /tmp/tmphrdl7_5n.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p > 1) {\n        if ($n % $i == 0) {\n            $p = $p / $i;\n       \
    \ }\n        $i++;\n    }\n    return $p;\n}\n\nfunction candidate(...$args) {\n\
    \    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp857w5v1s.php:24\n\
    Stack trace:\n#0 /tmp/tmp857w5v1s.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp857w5v1s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxhkr3b1.php:26\n\
    Stack trace:\n#0 /tmp/tmpyxhkr3b1.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyxhkr3b1.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ '/' . $n;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bxzn7fk.php:24\n\
    Stack trace:\n#0 /tmp/tmp_bxzn7fk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_bxzn7fk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 1;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnu73tpg.php:26\n\
    Stack trace:\n#0 /tmp/tmpwnu73tpg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpwnu73tpg.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      $n = $n / $i;\n      $i =\
    \ 2;\n    } else {\n      $i++;\n    }\n  }\n  return $n;\n}\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n       \
    \ }\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprqnegmee.php:26\n\
    Stack trace:\n#0 /tmp/tmprqnegmee.php(33): test()\n#1 {main}\n  thrown in /tmp/tmprqnegmee.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            break;\n        }\n        $i++;\n    }\n   \
    \ return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppndb6y0n.php:26\n\
    Stack trace:\n#0 /tmp/tmppndb6y0n.php(33): test()\n#1 {main}\n  thrown in /tmp/tmppndb6y0n.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n--;\n    do {\n        $n--;\
    \ // Divide by 2\n        $n++; // Divide by 3\n        $n++; // Divide by 5\n\
    \        $n++; // Divide by 7\n        $n++; // Divide by 11\n        $n++; //\
    \ Divide by 13\n        $n++; // Divide by 17\n        $n++; // Divide by 19\n\
    \        $n++; // Divide by 23\n        $n++; // Divide by 29\n        $n++; //\
    \ Divide by 31\n    } while ($n > 1);\n    return $n;\n}\n</code>\n<|/ a tags=php,primes,algorithm\
    \ |>\n<| c |>\nThe algorithm is wrong. Try it with 13195 and you'll see that it's\
    \ wrong.\n<|/ c |>\n<| c |>\n: Thanks for pointing out. I've corrected the algorithm.\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing out. I've corrected the algorithm.\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing out. I've corrected the algorithm.\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing out. I've corrected the algorithm.\n\
    <|/ c |>\n<| a tags=php,primes,algorithm |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk5yrdkkw.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p < $n) {\n        if ($n % $i == 0) {\n            $p = $i;\n        }\n\
    \        $i += 2;\n    }\n    return $p;\n}\n</code>\n<|/ a tags=php,primes |>\n\
    <| a tags=php,primes |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk0bqwkx7.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz3tki86t.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $i = 2;\n    $p = $n;\n    while\
    \ ($p > 1) {\n        if ($n % $i == 0) {\n            $p = $p / $i;\n       \
    \ }\n        $i++;\n    }\n    return $p;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis doesn't work. Try it with `largest_prime_factor(1300)`.\n\
    <|/ c |>\n<| c |>\nIt works fine for me with 1300 :) It returns 2 as the largest\
    \ prime factor.\n<|/ c |>\n<| c |>\nIt doesn't work for me with 1300 either. Try\
    \ it with `largest_prime_factor(1300)`.\n<|/ c |>\n<| c |>\nIt works for me with\
    \ 1300 :) It returns 2 as the largest prime factor.\n<|/ c |>\n<| c |>\nIt works\
    \ for me with 1300 :) It returns 2 as the largest prime factor.\n<|/ c |>\n<|\
    \ a tags=php,algorithm |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxu985uaf.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy_o43g_.php:26\n\
    Stack trace:\n#0 /tmp/tmpcy_o43g_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpcy_o43g_.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n</code>\n<|/ a tags=php,primes |>\n<| c |>\nThis\
    \ code does not work for large numbers. For example, `largest_prime_factor(1000000000000)`\
    \ returns `1` instead of `2`.\n<|/ c |>\n<| c |>\nIt works for me on PHP 7.2.17.\
    \ Try it yourself here: https://3v4l.org/7u3Vc\n<|/ c |>\n<| c |>\nIt works for\
    \ me on PHP 7.2.17. Try it yourself here: https://3v4l.org/7u3Vc\n<|/ c |>\n<|\
    \ c |>\nIt works for me on PHP 7.2.17. Try it yourself here: https://3v4l.org/7u3Vc\n\
    <|/ c |>\n<| c |>\nIt works for me on PHP 7.2.17. Try it yourself here: https://3v4l.org/7u3Vc\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n<?php\nfunction candidate(...$args) {\n  \
    \  return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc3uocq8y.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor = $i;\n            $n = $n / $i;\n        }\n        $i++;\n   \
    \ }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwlspx3b.php:27\n\
    Stack trace:\n#0 /tmp/tmpzwlspx3b.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpzwlspx3b.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79hi53jp.php:26\n\
    Stack trace:\n#0 /tmp/tmp79hi53jp.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp79hi53jp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \        if ($j > $i) {\n                break;\n            }\n        }\n  \
    \      $i++;\n    }\n    return $i;\n}\n\nfunction candidate(...$args) {\n   \
    \ return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27)\
    \ !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !==\
    \ 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4sfiqa4.php:27\n\
    Stack trace:\n#0 /tmp/tmpi4sfiqa4.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpi4sfiqa4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis code doesn't work. Try it with 13195 and you'll\
    \ get an infinite loop.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Are\
    \ you sure you copied the code correctly?\n<|/ c |>\n<| c |>\nYes, I copied it\
    \ exactly. Maybe it's my PHP version?\n<|/ c |>\n<| c |>\nYes, it works fine for\
    \ me on PHP 5.3.10. Try `echo largest_prime_factor(13195);` on http://writecodeonline.com/php/\n\
    <|/ c |>\n<| c |>\nOh, I see what's going on. You're using PHP 5.2.17. Try it\
    \ on PHP 5.3.10 and you'll see it works. I guess I'll have to upgrade my PHP version.\
    \ Thanks for your help!\n<|/ c |>\n<| a tags=php,primes |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2lwywzpw.php on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfth4orfd.php:26\n\
    Stack trace:\n#0 /tmp/tmpfth4orfd.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpfth4orfd.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n  $n = abs($n);\n  $i = 2;\n  while\
    \ ($i <= sqrt($n)) {\n    if ($n % $i == 0) {\n      return $i;\n    }\n    $i\
    \ += 2;\n  }\n  return $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1de14gar.php:24\n\
    Stack trace:\n#0 /tmp/tmp1de14gar.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1de14gar.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\n<?php\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp382rz1e6.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 1;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $factor++;\n        }\n        $i++;\n    }\n    return $factor;\n}\n\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_cqd2jo.php:25\n\
    Stack trace:\n#0 /tmp/tmpl_cqd2jo.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpl_cqd2jo.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = $j = 2;\n\
    \    while ($i <= $n) {\n        if ($n % $i == 0) {\n            $j++;\n    \
    \        if ($j == $i) {\n                return $i;\n            }\n        }\n\
    \        $i++;\n    }\n    return $n;\n}\n\nfunction candidate(...$args) {\n \
    \   return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63)\
    \ !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !==\
    \ 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !==\
    \ 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm86mfhg0.php:27\n\
    Stack trace:\n#0 /tmp/tmpm86mfhg0.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpm86mfhg0.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $p = 3;\n    while (!($n % $p)) {\n        $i += $p;\n        $p = $i * $i;\n\
    \    }\n    return $i;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpies8ioz_.php:24\n\
    Stack trace:\n#0 /tmp/tmpies8ioz_.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpies8ioz_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n \
    \           $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n\
    \    }\n    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6tn9zvk0.php:26\n\
    Stack trace:\n#0 /tmp/tmp6tn9zvk0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp6tn9zvk0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  $factor = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $n = $n / $i;\n            $factor++;\n        }\n        $i++;\n    }\n\
    \    return $factor;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfa63uf_w.php:26\n\
    Stack trace:\n#0 /tmp/tmpfa63uf_w.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpfa63uf_w.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
    // 2\nfunction largest_prime_factor($n) {\n    $n = abs($n);\n    $i = 2;\n  \
    \  while($i <= sqrt($n)) {\n        if($n % $i == 0) {\n            $n = $i .\
    \ $n / $i;\n            $i = 2;\n        } else {\n            $i++;\n       \
    \ }\n    }\n    return $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpslqy8arj.php:25\n\
    Stack trace:\n#0 /tmp/tmpslqy8arj.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpslqy8arj.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
