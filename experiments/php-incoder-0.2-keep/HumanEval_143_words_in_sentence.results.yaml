name: HumanEval_143_words_in_sentence
language: php
results:
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = [];\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_unique($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiajwsjw4.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        foreach ($word as $char) {\n      \
    \      $result[] = $char;\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        foreach ($word as $char) {\n      \
    \      $result[] = $char;\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        foreach ($word as $char) {\n            $result[] = $char;\n\
    \        }\n    }\n    $result = [];\n    foreach ($result as $word) {\n     \
    \   foreach ($word as $char) {\n            $result[] = $char;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $char) {\n            $result[] = $char;\n        }\n    }\n    $result =\
    \ [];\n    foreach ($result as $word) {\n        foreach ($word as $char) {\n\
    \            $result[] = $char;\n        }\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        foreach ($word as $char) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        foreach ($word as $char) {\n            $result[] = $char;\n    \
    \    }\n    }\n    $result = [];\n    foreach ($result as $word) {\n        foreach\
    \ ($word as $char) {\n            $result[] = $char;\n        }\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        foreach ($word as $char) {\n\
    \            $result[] = $char;\n        }\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        foreach ($word as $char) {\n            $result[]\
    \ = $char;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        foreach ($word as $char) {\n            $result[] = $char;\n    \
    \    }\n    }\n    $result = [];\n    foreach ($result as $word) {\n        foreach\
    \ ($word as $char) {\n            $result[] = $char;\n        }\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        foreach ($word as $char) {\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1sln3f03.php on line 122\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1okvrsl.php:44\n\
    Stack trace:\n#0 /tmp/tmpk1okvrsl.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpk1okvrsl.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length < 2) {\n   \
    \         continue;\n        }\n        $prime = true;\n        for ($i = 2; $i\
    \ <= $length; $i++) {\n            if ($word % $i == 0) {\n                $prime\
    \ = false;\n                break;\n            }\n        }\n        if ($prime)\
    \ {\n            $result .= $word;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpnjn6vnyo.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpnjn6vnyo.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpnjn6vnyo.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnjn6vnyo.php:43\n\
    Stack trace:\n#0 /tmp/tmpnjn6vnyo.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpnjn6vnyo.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmtpen7qb.php:20\nStack trace:\n#0 /tmp/tmpmtpen7qb.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpmtpen7qb.php(32): candidate('This is a test')\n#2 /tmp/tmpmtpen7qb.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmtpen7qb.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        $new_words[] = $word;\n    }\n    $new_words =\
    \ array_unique($new_words);\n    $new_words = array_filter($new_words);\n    $new_words\
    \ = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp573sb9cd.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprgzub9tf.php:44\n\
    Stack trace:\n#0 /tmp/tmprgzub9tf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmprgzub9tf.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxxvuocz3.php:30\n\
    Stack trace:\n#0 /tmp/tmpxxvuocz3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxxvuocz3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_filter($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_unique($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_count_values($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_keys($word);\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        $result[] =\
    \ array_values($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_count_values($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_keys($word);\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        $result[] =\
    \ array_values($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_count_values($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_keys($word);\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        $result[] =\
    \ array_values($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_count_values($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_keys($word);\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        $result[] =\
    \ array_values($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_count_values($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_keys($word);\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        $result[] =\
    \ array_values($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_count_values($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_keys($word);\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppyi121m6.php on line 111\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8l7qxdt9.php:44\n\
    Stack trace:\n#0 /tmp/tmp8l7qxdt9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp8l7qxdt9.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $result .= $word;\n            $result .= ' ';\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7m89vwuw.php:35\n\
    Stack trace:\n#0 /tmp/tmp7m89vwuw.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp7m89vwuw.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_unique($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqo45n1p9.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        $new_words[] = $word;\n    }\n    $new_words =\
    \ array_unique($new_words);\n    $new_words = array_filter($new_words);\n    $new_words\
    \ = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpc3q2rlde.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $result .= $word;\n            $result .= ' ';\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcf42yp9.php:35\n\
    Stack trace:\n#0 /tmp/tmppcf42yp9.php(44): test()\n#1 {main}\n  thrown in /tmp/tmppcf42yp9.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        $result[]\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp41mkziu7.php on line 91\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    $result = [];\n    foreach ($result as $word) {\n        if (count($word)\
    \ == 1) {\n            $result[] = $word[0];\n        } else {\n            $result[]\
    \ = array_count_values($word);\n        }\n    }\n    foreach ($result as $key\
    \ => $value) {\n        if ($value['1'] > 1) {\n            unset($result[$key]);\n\
    \        }\n    }\n    return implode(' ', array_keys($result));\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0jewjjq.php:44\n\
    Stack trace:\n#0 /tmp/tmpg0jewjjq.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpg0jewjjq.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23cs60nw.php:44\n\
    Stack trace:\n#0 /tmp/tmp23cs60nw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp23cs60nw.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_unique($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_map('strlen',\
    \ $new_words);\n    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw4th1d77.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqfhlg7vg.php:44\n\
    Stack trace:\n#0 /tmp/tmpqfhlg7vg.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqfhlg7vg.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4895sxk9.php:30\n\
    Stack trace:\n#0 /tmp/tmp4895sxk9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4895sxk9.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        if (is_prime(str_len($word))) {\n            $new_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $new_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpsywrxzp8.php:20\nStack trace:\n#0 /tmp/tmpsywrxzp8.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpsywrxzp8.php(32): candidate('This is a test')\n#2 /tmp/tmpsywrxzp8.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpsywrxzp8.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $newWords = array();\n    foreach($words\
    \ as $word) {\n        $newWords[] = $word;\n    }\n    sort($newWords);\n   \
    \ $primes = array();\n    for($i = 0; $i < count($newWords); $i++) {\n       \
    \ if(isPrime($newWords[$i])) {\n            $primes[] = $newWords[$i];\n     \
    \   }\n    }\n    return implode(\" \", $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpk7hhrrme.php:25\nStack trace:\n#0 /tmp/tmpk7hhrrme.php(33): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpk7hhrrme.php(37): candidate('This is a test')\n#2 /tmp/tmpk7hhrrme.php(46):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpk7hhrrme.php on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpl9zuqej2.php:20\nStack trace:\n#0 /tmp/tmpl9zuqej2.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpl9zuqej2.php(32): candidate('This is a test')\n#2 /tmp/tmpl9zuqej2.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpl9zuqej2.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result = $result . ' ' . strlen($word);\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1picfz13.php:30\n\
    Stack trace:\n#0 /tmp/tmp1picfz13.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1picfz13.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp1vga9fog.php:20\nStack trace:\n#0 /tmp/tmp1vga9fog.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp1vga9fog.php(32): candidate('This is a test')\n#2 /tmp/tmp1vga9fog.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp1vga9fog.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3ktlusi.php:44\n\
    Stack trace:\n#0 /tmp/tmpm3ktlusi.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpm3ktlusi.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_4sukm2x.php:44\n\
    Stack trace:\n#0 /tmp/tmp_4sukm2x.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_4sukm2x.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    foreach ($result as $key => $value) {\n        if (count($value) == 1) {\n\
    \            unset($result[$key]);\n        }\n    }\n    sort($result);\n   \
    \ $result = array_unique($result);\n    sort($result);\n    return implode(' ',\
    \ $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_unf44n_.php:39\n\
    Stack trace:\n#0 /tmp/tmp_unf44n_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_unf44n_.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzk5unrf0.php:44\n\
    Stack trace:\n#0 /tmp/tmpzk5unrf0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpzk5unrf0.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word[1]\
    \ > 1) {\n            $result[] = $word[0];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n</code>\n<|/ a tags=php |>\n<| c |>\nThank you for your answer,\
    \ but i can't use any loops, i need to use only foreach loops.\n<|/ c |>\n<| c\
    \ |>\nI edited my answer, I hope it helps you\n<|/ c |>\n<| c |>\nThank you for\
    \ your answer, but i can't use any loops, i need to use only foreach loops.\n\
    <|/ c |>\n<| c |>\nI edited my answer, I hope it helps you\n<|/ c |>\n<| c |>\n\
    Thank you for your answer, but i can't use any loops, i need to use only foreach\
    \ loops.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n$sentence = \"lets go for\
    \ swimming\";\n$words = explode(\" \", $sentence);\n$result = [];\nforeach ($words\
    \ as $word) {\n    $result[] = str_split($word);\n}\n$result = [];\nforeach ($result\
    \ as $word) {\n    $result[] = array_count_values($word);\n}\n$result = [];\n\
    foreach ($result as $word) {\n    if ($word[1] > 1) {\n        $result[] = $word[0];\n\
    \    }\n}\necho implode(\" \", $result);\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    Thank you for your answer, but i can't use any loops, i need to use only foreach\
    \ loops.\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n$sentence = \"lets go for\
    \ swimming\";\n$words = explode(\" \", $sentence);\n$result = [];\nforeach ($words\
    \ as $word) {\n    $result[] = str_split($word);\n}\n$result = [];\nforeach ($result\
    \ as $word) {\n    $result[] = array_count_values($word);\n}\n$result = [];\n\
    foreach ($result as $word) {\n    if ($\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwjrqvaia.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9ec60nj.php:30\n\
    Stack trace:\n#0 /tmp/tmpa9ec60nj.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpa9ec60nj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $result .= $word;\n            $result .= ' ';\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmt20ewv.php:35\n\
    Stack trace:\n#0 /tmp/tmpwmt20ewv.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpwmt20ewv.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nI appreciate your effort but this does not answer\
    \ the question. Your code does not take into account the fact that words can be\
    \ repeated more than once. For example, \"the quick brown fox jumps over the lazy\
    \ dog\" would return \"the quick brown fox jumps over the lazy dog\" instead of\
    \ \"the quick brown fox jumps over\".\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've updated my answer to include a solution that does take that into account.\n\
    <|/ c |>\n<| c |>\nThank you for your effort. I appreciate it. I will try this\
    \ out and let you know if it works.\n<|/ c |>\n<| c |>\nI tested your solution\
    \ and it works perfectly. Thank you so much!\n<|/ c |>\n<| c |>\nYou're welcome.\
    \ Glad I could help.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$sentence = \"\
    lets go for swimming\";\n$words = explode(' ', $sentence);\n$result = '';\nforeach\
    \ ($words as $word) {\n    $result .= $word;\n}\necho $result;\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpggmqo__y.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $result .= $word;\n            $result .= ' ';\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8vvac86.php:35\n\
    Stack trace:\n#0 /tmp/tmpo8vvac86.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo8vvac86.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $result .= $word;\n            $result .= \" \"\
    ;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprkr2j13h.php:35\n\
    Stack trace:\n#0 /tmp/tmprkr2j13h.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprkr2j13h.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result = $result . ' ' . $word;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsixtk10s.php:30\n\
    Stack trace:\n#0 /tmp/tmpsixtk10s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpsixtk10s.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2t789f_0.php:30\n\
    Stack trace:\n#0 /tmp/tmp2t789f_0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp2t789f_0.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 1; $i < $length; $i++) {\n                if ($word[$i]\
    \ % $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpuv0mxugl.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpuv0mxugl.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpuv0mxugl.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuv0mxugl.php:44\n\
    Stack trace:\n#0 /tmp/tmpuv0mxugl.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpuv0mxugl.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2u84s59.php:30\n\
    Stack trace:\n#0 /tmp/tmps2u84s59.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps2u84s59.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    $result = [];\n    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    sort($result);\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word[1] > 1) {\n            $result[] = $word[0];\n        }\n\
    \    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzbppftyx.php:42\n\
    Stack trace:\n#0 /tmp/tmpzbppftyx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzbppftyx.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $word = trim($word);\n        if (strlen($word) == 0) {\n\
    \            continue;\n        }\n        $length = strlen($word);\n        for\
    \ ($i = 1; $i <= $length; $i++) {\n            if ($length % $i == 0) {\n    \
    \            $result .= $word[$i - 1];\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinjt1_q8.php:39\n\
    Stack trace:\n#0 /tmp/tmpinjt1_q8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpinjt1_q8.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbbycgl2a.php:44\n\
    Stack trace:\n#0 /tmp/tmpbbycgl2a.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbbycgl2a.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $result = $result . substr($word, 0, strlen($word) - 1);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2tna08g.php:30\n\
    Stack trace:\n#0 /tmp/tmpx2tna08g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx2tna08g.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp5blh9__1.php:20\nStack trace:\n#0 /tmp/tmp5blh9__1.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp5blh9__1.php(32): candidate('This is a test')\n#2 /tmp/tmp5blh9__1.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp5blh9__1.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $result[] = $word;\n    }\n    sort($result);\n    $primes\
    \ = array_filter($result, function($word) {\n        return is_prime($word);\n\
    \    });\n    return implode(\" \", $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: [] operator not supported for strings in\
    \ /tmp/tmp1et065sv.php:20\nStack trace:\n#0 /tmp/tmp1et065sv.php(30): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp1et065sv.php(34): candidate('This is a test')\n#2 /tmp/tmp1et065sv.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp1et065sv.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppm82d_5l.php:20\nStack trace:\n#0 /tmp/tmppm82d_5l.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmppm82d_5l.php(32): candidate('This is a test')\n#2 /tmp/tmppm82d_5l.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppm82d_5l.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68jdhp0e.php:44\n\
    Stack trace:\n#0 /tmp/tmp68jdhp0e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp68jdhp0e.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphict5omt.php on line 113\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $key => $value) {\n            if ($value == 1) {\n                unset($result[$key]);\n\
    \            }\n        }\n    }\n    foreach ($result as $word) {\n        $result[]\
    \ = array_keys($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_values($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_filter($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_reduce($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_keys($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_values($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_filter($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_reduce($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_keys($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_values($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_filter($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_reduce($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_keys($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_values($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_filter($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_reduce($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0sa8n0d4.php on line 99\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw1h_zzya.php:30\n\
    Stack trace:\n#0 /tmp/tmpw1h_zzya.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpw1h_zzya.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n\
    \            $result .= $word;\n        } else {\n            $prime = true;\n\
    \            for ($i = 2; $i <= $length; $i++) {\n                if ($length\
    \ % $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppiv489z5.php:44\n\
    Stack trace:\n#0 /tmp/tmppiv489z5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmppiv489z5.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    $result = [];\n    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    foreach ($result as $word) {\n        if ($word[1] > 1) {\n      \
    \      $result[] = $word[0];\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzfniym_4.php:40\n\
    Stack trace:\n#0 /tmp/tmpzfniym_4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpzfniym_4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word[1]\
    \ > 1) {\n            $result[] = $word[0];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptn769y1n.php:40\n\
    Stack trace:\n#0 /tmp/tmptn769y1n.php(49): test()\n#1 {main}\n  thrown in /tmp/tmptn769y1n.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpyeqw8u_i.php:20\nStack trace:\n#0 /tmp/tmpyeqw8u_i.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpyeqw8u_i.php(32): candidate('This is a test')\n#2 /tmp/tmpyeqw8u_i.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyeqw8u_i.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a1fdynf.php:44\n\
    Stack trace:\n#0 /tmp/tmp0a1fdynf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0a1fdynf.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 1; $i < $length; $i++) {\n                if ($word[$i]\
    \ % $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpn68tu1vd.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpn68tu1vd.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpn68tu1vd.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn68tu1vd.php:44\n\
    Stack trace:\n#0 /tmp/tmpn68tu1vd.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpn68tu1vd.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_unique($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_map('strlen',\
    \ $new_words);\n    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3bfgv0q4.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi39m1acb.php:44\n\
    Stack trace:\n#0 /tmp/tmpi39m1acb.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpi39m1acb.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $result .= $word;\n            $result .= ' ';\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1q0148o6.php:35\n\
    Stack trace:\n#0 /tmp/tmp1q0148o6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1q0148o6.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuepos2he.php:20\nStack trace:\n#0 /tmp/tmpuepos2he.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpuepos2he.php(32): candidate('This is a test')\n#2 /tmp/tmpuepos2he.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuepos2he.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3854bxv.php:44\n\
    Stack trace:\n#0 /tmp/tmp_3854bxv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_3854bxv.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $len = strlen($word);\n        if ($len == 1) {\n     \
    \       $result .= $word;\n        } else {\n            $prime = true;\n    \
    \        for ($i = 2; $i <= $len; $i++) {\n                if ($word % $i == 0)\
    \ {\n                    $prime = false;\n                    break;\n       \
    \         }\n            }\n            if ($prime) {\n                $result\
    \ .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp3xa8jw8i.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmp3xa8jw8i.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmp3xa8jw8i.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3xa8jw8i.php:44\n\
    Stack trace:\n#0 /tmp/tmp3xa8jw8i.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3xa8jw8i.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length < 2) {\n   \
    \         continue;\n        }\n        $prime = true;\n        for ($i = 2; $i\
    \ < $length; $i++) {\n            if ($length % $i == 0) {\n                $prime\
    \ = false;\n                break;\n            }\n        }\n        if ($prime)\
    \ {\n            $result .= $word;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppln74plm.php:44\n\
    Stack trace:\n#0 /tmp/tmppln74plm.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppln74plm.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3wbyv1e1.php:44\n\
    Stack trace:\n#0 /tmp/tmp3wbyv1e1.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3wbyv1e1.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwlhcmkz4.php:30\n\
    Stack trace:\n#0 /tmp/tmpwlhcmkz4.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwlhcmkz4.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word . ' ';\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpye93jrjy.php:30\n\
    Stack trace:\n#0 /tmp/tmpye93jrjy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpye93jrjy.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word['1']\
    \ > 1) {\n            $result[] = $word['1'];\n        }\n    }\n    return implode('\
    \ ', array_filter($result));\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiy_wlmr4.php:40\n\
    Stack trace:\n#0 /tmp/tmpiy_wlmr4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpiy_wlmr4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    sort($new_words);\n \
    \   $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_map(function($word)\
    \ {\n        return $word;\n    }, $new_words);\n    $new_words = array_filter($new_words);\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsa23g0p0.php on line 94\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $new_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $new_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp3c96z1nn.php:20\nStack trace:\n#0 /tmp/tmp3c96z1nn.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp3c96z1nn.php(32): candidate('This is a test')\n#2 /tmp/tmp3c96z1nn.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3c96z1nn.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length < 2) {\n   \
    \         continue;\n        }\n        $prime = true;\n        for ($i = 2; $i\
    \ <= $length; $i++) {\n            if ($length % $i == 0) {\n                $prime\
    \ = false;\n                break;\n            }\n        }\n        if ($prime)\
    \ {\n            $result .= $word . ' ';\n        }\n    }\n    return trim($result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_11ubrt.php:43\n\
    Stack trace:\n#0 /tmp/tmpo_11ubrt.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo_11ubrt.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvnz_kp16.php on line 113\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n\
    \            $result .= $word;\n        } else {\n            $prime = true;\n\
    \            for ($i = 2; $i <= $length; $i++) {\n                if ($word %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \n$sentence = \"lets go for swimming\";\n$result = words_in_sentence($sentence);\n\
    echo \"$result\\n\";\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpl9aftu4j.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpl9aftu4j.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpl9aftu4j.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpl9aftu4j.php on line\
    \ 26\n\n\nWarning: A non-numeric value encountered in /tmp/tmpl9aftu4j.php on\
    \ line 26\n\nWarning: A non-numeric value encountered in /tmp/tmpl9aftu4j.php\
    \ on line 26\n\nWarning: A non-numeric value encountered in /tmp/tmpl9aftu4j.php\
    \ on line 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9aftu4j.php:47\n\
    Stack trace:\n#0 /tmp/tmpl9aftu4j.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpl9aftu4j.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $len = strlen($word);\n        if ($len > 0) {\n         \
    \   $result .= $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin45ruer.php:33\n\
    Stack trace:\n#0 /tmp/tmpin45ruer.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpin45ruer.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = array_filter($result);\n\
    \    $result = array_map(function($word) {\n        return array_sum($word);\n\
    \    }, $result);\n    $result = array_filter($result);\n    $result = array_unique($result);\n\
    \    $result = array_filter($result);\n    $result = array_values($result);\n\
    \    $result = array_filter($result);\n    $result = array_map(function($word)\
    \ {\n        return $word[0];\n    }, $result);\n    return implode(' ', $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcsy15f7.php:42\n\
    Stack trace:\n#0 /tmp/tmpdcsy15f7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpdcsy15f7.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp32lu7gbo.php:20\nStack trace:\n#0 /tmp/tmp32lu7gbo.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp32lu7gbo.php(32): candidate('This is a test')\n#2 /tmp/tmp32lu7gbo.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp32lu7gbo.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    sort($words);\n    $result = array_diff($result, $words);\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvv1p99h1.php:33\n\
    Stack trace:\n#0 /tmp/tmpvv1p99h1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvv1p99h1.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpusuzv3ir.php:20\nStack trace:\n#0 /tmp/tmpusuzv3ir.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpusuzv3ir.php(32): candidate('This is a test')\n#2 /tmp/tmpusuzv3ir.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpusuzv3ir.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnhvpgz4a.php:30\n\
    Stack trace:\n#0 /tmp/tmpnhvpgz4a.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnhvpgz4a.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcac83k5e.php:44\n\
    Stack trace:\n#0 /tmp/tmpcac83k5e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcac83k5e.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q9td8ny.php:44\n\
    Stack trace:\n#0 /tmp/tmp2q9td8ny.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2q9td8ny.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90tbc52v.php:44\n\
    Stack trace:\n#0 /tmp/tmp90tbc52v.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp90tbc52v.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length < 2) {\n   \
    \         continue;\n        }\n        $prime = true;\n        for ($i = 2; $i\
    \ <= $length; $i++) {\n            if ($length % $i == 0) {\n                $prime\
    \ = false;\n                break;\n            }\n        }\n        if ($prime)\
    \ {\n            $result .= $word;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpympjqe2a.php:43\n\
    Stack trace:\n#0 /tmp/tmpympjqe2a.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpympjqe2a.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvzhlq9pa.php:44\n\
    Stack trace:\n#0 /tmp/tmpvzhlq9pa.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvzhlq9pa.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp14vf_ehq.php:30\n\
    Stack trace:\n#0 /tmp/tmp14vf_ehq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp14vf_ehq.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $result = $result . substr($word, 0, 1) . \" \";\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0jc62x3.php:30\n\
    Stack trace:\n#0 /tmp/tmpr0jc62x3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr0jc62x3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u5d648d.php:30\n\
    Stack trace:\n#0 /tmp/tmp3u5d648d.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3u5d648d.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $key => $value) {\n            if ($value == 1) {\n                $result[$key]\
    \ = $key;\n            }\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_reduce($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_sum($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_sum($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_product($word);\n    }\n    $result = [];\n   \
    \ foreach ($result as $word) {\n        $result[] = array_sum($word);\n    }\n\
    \    $result = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_sum($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_product($word);\n    }\n    $result = [];\n   \
    \ foreach ($result as $word) {\n        $result[] = array_sum($word);\n    }\n\
    \    $result = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_sum($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_product($word);\n    }\n    $result = [];\n   \
    \ foreach ($\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv7dsmp_p.php on line 100\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = array_map(function($words)\
    \ {\n        return array_reduce($words, 'strlen');\n    }, $result);\n    $result\
    \ = array_filter($result, function($words) {\n        return $words > 1;\n   \
    \ });\n    $result = array_map(function($words) {\n        return implode(' ',\
    \ $words);\n    }, $result);\n    return implode(' ', $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nWarning: strlen() expects exactly 1 parameter, 2 given in /tmp/tmprjz08c81.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprjz08c81.php:39\n\
    Stack trace:\n#0 /tmp/tmprjz08c81.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprjz08c81.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $result .= $word;\n            $result .= ' ';\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i255o3q.php:35\n\
    Stack trace:\n#0 /tmp/tmp0i255o3q.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp0i255o3q.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbear79g9.php:44\n\
    Stack trace:\n#0 /tmp/tmpbear79g9.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbear79g9.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        if (is_prime($word)) {\n            $new_words[]\
    \ = $word;\n        }\n    }\n    return implode(\" \", $new_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp6x_ylaxn.php:20\nStack trace:\n#0 /tmp/tmp6x_ylaxn.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp6x_ylaxn.php(32): candidate('This is a test')\n#2 /tmp/tmp6x_ylaxn.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp6x_ylaxn.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word[1]\
    \ > 1) {\n            $result[] = $word[0];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nI didn't downvote\
    \ you, but I suspect it's because you didn't explain what the code does and how\
    \ it works. A good answer should explain how it works and why it works.\n<|/ c\
    \ |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nI didn't downvote\
    \ you, but I suspect it's because you didn't explain what the code does and how\
    \ it works. A good answer should explain how it works and why it works.\n<|/ c\
    \ |>\n<| c |>\nI added some explanation.\n<|/ c |>\n<| c |>\nI added some explanation.\n\
    <|/ c |>\n<| a |>\n<code>\n<?php\n\n$sentence = \"lets go for swimming\";\n$words\
    \ = explode(\" \", $sentence);\n\n$result = [];\nforeach ($words as $word) {\n\
    \    $result[] = str_split($word);\n}\n\n$result = [];\nforeach ($result as $word)\
    \ {\n    $result[] = array_count_values($word);\n}\n\n$result = [];\nforeach ($result\
    \ as $word) {\n    if ($word[1] > 1) {\n        $result[] = $word[0];\n    }\n\
    }\n\necho implode(\" \", $result);\n</code>\n<|/ a tags=php,arrays dscore=0 |>\n\
    <| c |>\nI didn't downvote you, but I suspect it's because you didn't explain\
    \ what the code does and how it works. A good answer should explain how it works\
    \ and why it works.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$sentence = \"\
    lets go for swimming\";\n$words = explode(\" \", $sentence);\n\n$result = [];\n\
    foreach ($words as $word) {\n    $result[] = str_split($word);\n}\n\n$result =\
    \ [];\nforeach ($\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0s9i5vfp.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        $new_words[] = $word;\n    }\n    sort($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph7j2ex40.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    $result = array_unique($result);\n    $result = array_filter($result);\n\
    \    $result = array_map(function($word) {\n        return implode(' ', $word);\n\
    \    }, $result);\n    $result = array_filter($result);\n    $result = array_count_values($result);\n\
    \    $result = array_filter($result);\n    $result = array_keys($result);\n  \
    \  $result = array_values($result);\n    $result = array_filter($result);\n  \
    \  $result = array_map(function($word) {\n        return $word;\n    }, $result);\n\
    \    $result = array_filter($result);\n    $result = array_count_values($result);\n\
    \    $result = array_filter($result);\n    $result = array_keys($result);\n  \
    \  $result = array_values($result);\n    $result = array_filter($result);\n  \
    \  $result = array_map(function($word) {\n        return $word;\n    }, $result);\n\
    \    $result = array_filter($result);\n    $result = array_count_values($result);\n\
    \    $result = array_filter($result);\n    $result = array_keys($result);\n  \
    \  $result = array_values($result);\n    $result = array_filter($result);\n  \
    \  $result = array_map(function($word) {\n        return $word;\n    }, $result);\n\
    \    $result = array_filter($result);\n    $result = array_count_values($result);\n\
    \    $result = array_filter($result);\n    $result = array_keys($result);\n  \
    \  $result = array_values($result);\n    $result = array_filter($result);\n  \
    \  $result = array_map(function($word) {\n        return $word;\n    }, $result);\n\
    \    $result = array_filter($result);\n    $result = array_count_values($result);\n\
    \    $result = array_filter($result);\n    $result = array_keys($result);\n  \
    \  $result = array_values($result);\n    $result = array_filter($result);\n  \
    \  $result = array_map(function($word) {\n        return $word;\n    }, $result);\n\
    \    $result = array_filter($result);\n    $result = array_count_values($result);\n\
    \    $result = array_filter($result);\n    $result = array_keys($result);\n  \
    \  $result = array_values($result);\n    $result = array_filter($result);\n  \
    \  $result = array_map(function($word) {\n        return $word;\n    }, $result);\n\
    \    $result = array_filter($result);\n    $result = array_count_values($result);\n\
    \    $result = array_filter($result);\n    $result = array_keys($result);\n  \
    \  $result = array_values($result);\n    $result = array_filter($result);\n  \
    \  $result = array_map(function($word) {\n        return $word;\n    }, $result);\n\
    \    $result = array_filter($result);\n    $result = \nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvtmbzism.php on line 93\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word[1]\
    \ > 1) {\n            $result[] = $word[0];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjg0f862u.php:40\n\
    Stack trace:\n#0 /tmp/tmpjg0f862u.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjg0f862u.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word['1']\
    \ > 1) {\n            $result[] = $word['1'];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThank you for your answer.\
    \ Your code works but it is too slow for my purposes. I need a faster solution.\
    \ Thank you for your help.\n<|/ c |>\n<| c |>\nI edited my answer, I hope it helps\
    \ you\n<|/ c |>\n<| c |>\nThank you for your answer. Your code works but it is\
    \ too slow for my purposes. I need a faster solution. Thank you for your help.\n\
    <|/ c |>\n<| c |>\nI edited my answer, I hope it helps you\n<|/ c |>\n<| c |>\n\
    Thank you for your answer. Your code works but it is too slow for my purposes.\
    \ I need a faster solution. Thank you for your help.\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n<?php\n$string = 'This is a test';\n$words = explode(\" \", $string);\n\
    $result = [];\nforeach ($words as $word) {\n    $result[] = str_split($word);\n\
    }\n$result = [];\nforeach ($result as $word) {\n    $result[] = array_count_values($word);\n\
    }\n$result = [];\nforeach ($result as $word) {\n    if ($word['1'] > 1) {\n  \
    \      $result[] = $word['1'];\n    }\n}\n$result = implode(\" \", $result);\n\
    echo $result;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj3gqr97_.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result = $result . ' ' . $word;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yq3ntfr.php:30\n\
    Stack trace:\n#0 /tmp/tmp_yq3ntfr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_yq3ntfr.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzk4bxln8.php on line 97\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word\
    \ == 1) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 2) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 3) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 4) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 5) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 6) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 7) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 8) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 9) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 10) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 11) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0mmvee81.php on line 124\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $new_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $new_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmphpz988tn.php:20\nStack trace:\n#0 /tmp/tmphpz988tn.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmphpz988tn.php(32): candidate('This is a test')\n#2 /tmp/tmphpz988tn.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphpz988tn.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdyohu_6e.php:44\n\
    Stack trace:\n#0 /tmp/tmpdyohu_6e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdyohu_6e.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp3jmwtd8b.php:20\nStack trace:\n#0 /tmp/tmp3jmwtd8b.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp3jmwtd8b.php(32): candidate('This is a test')\n#2 /tmp/tmp3jmwtd8b.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3jmwtd8b.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result = $result . ' ' . $word;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0pwxvf54.php:30\n\
    Stack trace:\n#0 /tmp/tmp0pwxvf54.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0pwxvf54.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word[1]\
    \ > 1) {\n            $result[] = $word[0];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't seem\
    \ to work. `words_in_sentence(\"This is a test\")` returns `\"is\"` instead of\
    \ `\"is a\"`.\n<|/ c |>\n<| c |>\nI added a test case to my answer. Maybe you\
    \ missed it.\n<|/ c |>\n<| c |>\nI added a test case to my answer. Maybe you missed\
    \ it.\n<|/ c |>\n<| c |>\nI added a test case to my answer. Maybe you missed it.\n\
    <|/ c |>\n<| c |>\nI added a test case to my answer. Maybe you missed it.\n<|/\
    \ c |>\n<| a |>\n<code>\n<?php\n$sentence = \"This is a test\";\n$words = explode(\"\
    \ \", $sentence);\n$result = [];\nforeach ($words as $word) {\n    $result[] =\
    \ str_split($word);\n}\n$result = [];\nforeach ($result as $word) {\n    $result[]\
    \ = array_count_values($word);\n}\n$result = [];\nforeach ($result as $word) {\n\
    \    if ($word[1] > 1) {\n        $result[] = $word[0];\n    }\n}\necho implode(\"\
    \ \", $result);\n</code>\n<|/ a dscore=0 tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ seem to work. `words_in_sentence(\"This is a test\")` returns `\"is\"` instead\
    \ of `\"is a\"`.\n<|/ c |>\n<| c |>\nI added a test case to my answer. Maybe you\
    \ missed it.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$sentence = \"This is\
    \ a test\";\n$words = explode(\" \", $sentence);\n$result = [];\nforeach ($words\
    \ as $word) {\n    $result[] = str_split($word);\n}\n$result = [];\nforeach ($result\
    \ as $word) {\n    $result[] = array_count_values(\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7rwf62cu.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp6z55k9f.php:20\nStack trace:\n#0 /tmp/tmpp6z55k9f.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpp6z55k9f.php(32): candidate('This is a test')\n#2 /tmp/tmpp6z55k9f.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpp6z55k9f.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    $result = [];\n    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    foreach ($result as $word) {\n        if ($word[1] > 1) {\n      \
    \      return implode(\" \", array_keys($word));\n        }\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy7dr3b3g.php:39\n\
    Stack trace:\n#0 /tmp/tmpy7dr3b3g.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpy7dr3b3g.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        $new_words[] = $word;\n    }\n    sort($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpblp6gw0p.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $prime = true;\n            $prime_count = 1;\n\
    \            for ($i = 0; $i < strlen($word); $i++) {\n                if ($word[$i]\
    \ != 'a' && $word[$i] != 'e' && $word[$i] != 'i' && $word[$i] != 'o' && $word[$i]\
    \ != 'u') {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ for ($i = 1; $i < strlen($word); $i++) {\n                    if ($word[$i]\
    \ != 'a' && $word[$i] != 'e' && $word[$i] != 'i' && $word[$i] != 'o' && $word[$i]\
    \ != 'u') {\n                        $prime_count++;\n                    }\n\
    \                }\n                if ($prime_count == strlen($word)) {\n   \
    \                 $result .= $word;\n                }\n            }\n      \
    \  }\n    }\n    return $result;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks\
    \ for your answer! But I still don't understand why my code doesn't work. Could\
    \ you please explain it to me?\n<|/ c |>\n<| c |>\nI added some comments to my\
    \ answer.\n<|/ c |>\n<| c |>\nThanks for your answer! But I still don't understand\
    \ why my code doesn't work. Could you please explain it to me?\n<|/ c |>\n<| c\
    \ |>\nI added some comments to my answer.\n<|/ c |>\n<| c |>\nThanks for your\
    \ answer! But I still don't understand why my code doesn't work. Could you please\
    \ explain it to me?\n<|/ c |>\n<| a tags=php |>\n<code>\n<?php\n$sentence = \"\
    lets go for swimming\";\n$words = explode(' ', $sentence);\n$result = '';\nforeach\
    \ ($words as $word) {\n    if (strlen($word) == 1) {\n        $result .= $word;\n\
    \    } else {\n        $prime = true;\n        $prime_count = 1;\n        for\
    \ ($i = 0; $i < strlen($word); $i++) {\n            if ($word[$i] != 'a' && $word[$i]\
    \ != 'e' && $word[$i] != 'i' && $word[$i] != 'o' && $word[$i] != 'u') {\n    \
    \            $prime = false;\n                break;\n            }\n        }\n\
    \        if ($prime\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpurdo8d5x.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        $new_words[] = $word;\n    }\n    $new_words =\
    \ array_filter($new_words);\n    $new_words = array_unique($new_words);\n    $new_words\
    \ = array_map(\"strlen\", $new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppitjgylc.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_afpuhgk.php:44\n\
    Stack trace:\n#0 /tmp/tmp_afpuhgk.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_afpuhgk.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps2pagdpy.php:30\n\
    Stack trace:\n#0 /tmp/tmps2pagdpy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmps2pagdpy.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpblq8h96_.php:20\nStack trace:\n#0 /tmp/tmpblq8h96_.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpblq8h96_.php(32): candidate('This is a test')\n#2 /tmp/tmpblq8h96_.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpblq8h96_.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9nvi5ps9.php:30\n\
    Stack trace:\n#0 /tmp/tmp9nvi5ps9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9nvi5ps9.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpnu30rru3.php:20\nStack trace:\n#0 /tmp/tmpnu30rru3.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpnu30rru3.php(32): candidate('This is a test')\n#2 /tmp/tmpnu30rru3.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnu30rru3.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 1; $i < $length; $i++) {\n                if ($word[$i]\
    \ % $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmp4lxa_b3p.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmp4lxa_b3p.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmp4lxa_b3p.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lxa_b3p.php:44\n\
    Stack trace:\n#0 /tmp/tmp4lxa_b3p.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4lxa_b3p.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpqetckugy.php:20\nStack trace:\n#0 /tmp/tmpqetckugy.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpqetckugy.php(32): candidate('This is a test')\n#2 /tmp/tmpqetckugy.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpqetckugy.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $prime = true;\n            for ($i = 2; $i <=\
    \ strlen($word); $i++) {\n                if ($word[$i] % $i == 0) {\n       \
    \             $prime = false;\n                    break;\n                }\n\
    \            }\n            if ($prime) {\n                $result .= $word;\n\
    \            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpe05hfihm.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpe05hfihm.php on line\
    \ 25\n\nWarning: A non-numeric value encountered in /tmp/tmpe05hfihm.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe05hfihm.php:43\n\
    Stack trace:\n#0 /tmp/tmpe05hfihm.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpe05hfihm.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphuryxlbi.php:44\n\
    Stack trace:\n#0 /tmp/tmphuryxlbi.php(53): test()\n#1 {main}\n  thrown in /tmp/tmphuryxlbi.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    $result = [];\n    foreach ($result as $word) {\n        if (count($word)\
    \ == 1) {\n            $result[] = $word[0];\n        } else {\n            $result[]\
    \ = array_count_values($word)[$word[0]];\n        }\n    }\n    sort($result);\n\
    \    $result = [];\n    foreach ($result as $word) {\n        if ($word % 2 ==\
    \ 0) {\n            $result[] = $word;\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tudt0i2.php:46\n\
    Stack trace:\n#0 /tmp/tmp9tudt0i2.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9tudt0i2.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxzcakio_.php:44\n\
    Stack trace:\n#0 /tmp/tmpxzcakio_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxzcakio_.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = [];\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_unique($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_map(\"strlen\"\
    , $new_words);\n    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppdezgi65.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        $new_words[] = $word;\n    }\n    sort($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp98cog74p.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9bxzv5yf.php:44\n\
    Stack trace:\n#0 /tmp/tmp9bxzv5yf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9bxzv5yf.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl3riac00.php:44\n\
    Stack trace:\n#0 /tmp/tmpl3riac00.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpl3riac00.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpyw_2th6p.php:20\nStack trace:\n#0 /tmp/tmpyw_2th6p.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpyw_2th6p.php(32): candidate('This is a test')\n#2 /tmp/tmpyw_2th6p.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyw_2th6p.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpso6cjfew.php:30\n\
    Stack trace:\n#0 /tmp/tmpso6cjfew.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpso6cjfew.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    foreach ($result as $word) {\n        if ($word[1] > 1) {\n      \
    \      return implode(\" \", array_keys($word));\n        }\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxm13h28.php:38\n\
    Stack trace:\n#0 /tmp/tmpzxm13h28.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzxm13h28.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_unique($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    sort($new_words);\n   \
    \ $new_words = array_slice($new_words, 0, count($new_words) - 1);\n    $new_words\
    \ = array_keys($new_words);\n    $new_words = array_values($new_words);\n    $new_words\
    \ = array_map(function($word) {\n        return $word;\n    }, $new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    sort($new_words);\n    $new_words = array_slice($new_words, 0, count($new_words)\
    \ - 1);\n    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_map(function($word) {\n        return $word;\n    }, $new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    sort($new_words);\n    $new_words = array_slice($new_words, 0, count($new_words)\
    \ - 1);\n    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_map(function($word) {\n        return $word;\n    }, $new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    sort($new_words);\n    $new_words = array_slice($new_words, 0, count($new_words)\
    \ - 1);\n    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_map(function($word) {\n        return $word;\n    }, $new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    sort($new_words);\n    $new_words = array_slice($new_words, 0, \nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplynsw_26.php on line 72\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word[1]\
    \ > 1) {\n            $result[] = $word[0];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk3yx6i0z.php:40\n\
    Stack trace:\n#0 /tmp/tmpk3yx6i0z.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpk3yx6i0z.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = substr($word, 0, 1);\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptgmr9e_n.php:30\n\
    Stack trace:\n#0 /tmp/tmptgmr9e_n.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptgmr9e_n.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjg08yxql.php:44\n\
    Stack trace:\n#0 /tmp/tmpjg08yxql.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjg08yxql.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr8rpnvd7.php:44\n\
    Stack trace:\n#0 /tmp/tmpr8rpnvd7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpr8rpnvd7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpzq5qsduq.php:20\nStack trace:\n#0 /tmp/tmpzq5qsduq.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpzq5qsduq.php(32): candidate('This is a test')\n#2 /tmp/tmpzq5qsduq.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpzq5qsduq.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word[1]\
    \ > 1) {\n            $result[] = $word[0];\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppf30t8az.php:40\n\
    Stack trace:\n#0 /tmp/tmppf30t8az.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppf30t8az.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        if (is_prime($word)) {\n            $new_words[]\
    \ = $word;\n        }\n    }\n    return implode(\" \", $new_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpv84akog0.php:20\nStack trace:\n#0 /tmp/tmpv84akog0.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpv84akog0.php(32): candidate('This is a test')\n#2 /tmp/tmpv84akog0.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpv84akog0.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    sort($new_words);\n \
    \   $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn83cwuay.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_gj_x1l5.php:44\n\
    Stack trace:\n#0 /tmp/tmp_gj_x1l5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_gj_x1l5.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $new_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $new_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz4zvzc2q.php:20\nStack trace:\n#0 /tmp/tmpz4zvzc2q.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz4zvzc2q.php(32): candidate('This is a test')\n#2 /tmp/tmpz4zvzc2q.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz4zvzc2q.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = array_filter($result);\n\
    \    $result = array_map(function($word) {\n        return array_sum($word);\n\
    \    }, $result);\n    $result = array_filter($result);\n    $result = array_unique($result);\n\
    \    $result = array_filter($result);\n    $result = array_values($result);\n\
    \    return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjd9wtffh.php:38\n\
    Stack trace:\n#0 /tmp/tmpjd9wtffh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpjd9wtffh.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result = $result . substr($word, 0, 1) . ' ';\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpftjk6f3k.php:30\n\
    Stack trace:\n#0 /tmp/tmpftjk6f3k.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpftjk6f3k.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = [];\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_unique($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    foreach ($new_words as\
    \ $key => $value) {\n        if ($value == 1) {\n            $new_words[$key]\
    \ = $key;\n        }\n    }\n    return implode(\" \", $new_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxb9w6wz.php:39\n\
    Stack trace:\n#0 /tmp/tmplxb9w6wz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplxb9w6wz.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpnx3akhn5.php:20\nStack trace:\n#0 /tmp/tmpnx3akhn5.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpnx3akhn5.php(32): candidate('This is a test')\n#2 /tmp/tmpnx3akhn5.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnx3akhn5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    $result = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $result = [];\n    foreach ($words as $word)\
    \ {\n        $result[] = str_split($word);\n    }\n    $result = [];\n    foreach\
    \ ($words as $word) {\n        $result[] = str_split($word);\n    }\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $result[] = str_split($word);\n\
    \    }\n    $result = [];\n    foreach ($words as $word) {\n        $result[]\
    \ = str_split($word);\n    }\n    $\nfunction candidate(...$args) {\n    return\
    \ words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgkvrr6sj.php on line 99\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $new_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $new_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmphpzm5vch.php:20\nStack trace:\n#0 /tmp/tmphpzm5vch.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmphpzm5vch.php(32): candidate('This is a test')\n#2 /tmp/tmphpzm5vch.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphpzm5vch.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybgvoagj.php:44\n\
    Stack trace:\n#0 /tmp/tmpybgvoagj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpybgvoagj.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa9iozrd2.php on line 113\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 1; $i <= $length; $i++) {\n                if ($word % $i\
    \ == 0) {\n                    $prime = false;\n                    break;\n \
    \               }\n            }\n            if ($prime) {\n                $result\
    \ .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpcj9a4zxx.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpcj9a4zxx.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpcj9a4zxx.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcj9a4zxx.php:44\n\
    Stack trace:\n#0 /tmp/tmpcj9a4zxx.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcj9a4zxx.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwnuxof8d.php:20\nStack trace:\n#0 /tmp/tmpwnuxof8d.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpwnuxof8d.php(32): candidate('This is a test')\n#2 /tmp/tmpwnuxof8d.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwnuxof8d.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5s57vxgt.php:30\n\
    Stack trace:\n#0 /tmp/tmp5s57vxgt.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5s57vxgt.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0o5z0j2.php:44\n\
    Stack trace:\n#0 /tmp/tmpu0o5z0j2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpu0o5z0j2.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n\
    \            $result .= $word;\n        } else {\n            $prime = true;\n\
    \            for ($i = 2; $i <= $length; $i++) {\n                if ($length\
    \ % $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvsrup23f.php:44\n\
    Stack trace:\n#0 /tmp/tmpvsrup23f.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvsrup23f.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprg41dzg0.php:44\n\
    Stack trace:\n#0 /tmp/tmprg41dzg0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmprg41dzg0.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $key => $value) {\n            if ($value == 1) {\n                $result[$key]\
    \ = $key;\n            }\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_count_values($word);\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        foreach ($word as $key => $value) {\n            if ($value\
    \ == 1) {\n                $result[$key] = $key;\n            }\n        }\n \
    \   }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_keys($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_values($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_count_values($word);\n    }\n\
    \    $result = [];\n    foreach ($result as $word) {\n        foreach ($word as\
    \ $key => $value) {\n            if ($value == 1) {\n                $result[$key]\
    \ = $key;\n            }\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_count_values($word);\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        foreach ($word as $key => $value) {\n            if ($value\
    \ == 1) {\n                $result[$key] = $key;\n            }\n        }\n \
    \   }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_keys($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_values($word);\n    }\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn5tmyt4d.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpv4h5az34.php:20\nStack trace:\n#0 /tmp/tmpv4h5az34.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpv4h5az34.php(32): candidate('This is a test')\n#2 /tmp/tmpv4h5az34.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpv4h5az34.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpd9dwipmf.php:20\nStack trace:\n#0 /tmp/tmpd9dwipmf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpd9dwipmf.php(32): candidate('This is a test')\n#2 /tmp/tmpd9dwipmf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpd9dwipmf.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yfnlzbm.php:44\n\
    Stack trace:\n#0 /tmp/tmp7yfnlzbm.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp7yfnlzbm.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($word % $i\
    \ == 0) {\n                    $prime = false;\n                    break;\n \
    \               }\n            }\n            if ($prime) {\n                $result\
    \ .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpjw_1fpbo.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpjw_1fpbo.php on line\
    \ 26\n\nWarning: A non-numeric value encountered in /tmp/tmpjw_1fpbo.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjw_1fpbo.php:44\n\
    Stack trace:\n#0 /tmp/tmpjw_1fpbo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjw_1fpbo.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        if (is_prime($word)) {\n            $new_words[]\
    \ = $word;\n        }\n    }\n    return implode(\" \", $new_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4a67vrml.php:20\nStack trace:\n#0 /tmp/tmp4a67vrml.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp4a67vrml.php(32): candidate('This is a test')\n#2 /tmp/tmp4a67vrml.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4a67vrml.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = [];\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_unique($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_count_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values(\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp52hd1bwr.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $new_words = array();\n    foreach\
    \ ($words as $word) {\n        $new_words[] = $word;\n    }\n    sort($new_words);\n\
    \    $prime_words = array();\n    $prime_words[2] = 1;\n    $prime_words[3] =\
    \ 1;\n    $prime_words[5] = 1;\n    $prime_words[7] = 1;\n    $prime_words[11]\
    \ = 1;\n    $prime_words[13] = 1;\n    $prime_words[17] = 1;\n    $prime_words[19]\
    \ = 1;\n    $prime_words[23] = 1;\n    $prime_words[29] = 1;\n    $prime_words[31]\
    \ = 1;\n    $prime_words[37] = 1;\n    $prime_words[41] = 1;\n    $prime_words[67]\
    \ = 1;\n    $prime_words[71] = 1;\n    $prime_words[73] = 1;\n    $prime_words[79]\
    \ = 1;\n    $prime_words[83] = 1;\n    $prime_words[89] = 1;\n    $prime_words[97]\
    \ = 1;\n    $prime_words[101] = 1;\n    $prime_words[103] = 1;\n    $prime_words[107]\
    \ = 1;\n    $prime_words[109] = 1;\n    $prime_words[113] = 1;\n    $prime_words[127]\
    \ = 1;\n    $prime_words[131] = 1;\n    $prime_words[137] = 1;\n    $prime_words[139]\
    \ = 1;\n    $prime_words[143] = 1;\n    $prime_words[147] = 1;\n    $prime_words[151]\
    \ = 1;\n    $prime_words[157] = 1;\n    $prime_words[161] = 1;\n    $prime_words[163]\
    \ = 1;\n    $prime_words[167] = 1;\n    $prime_words[173] = 1;\n    $prime_words[179]\
    \ = 1;\n    $prime_words[183] = 1;\n    $prime_words[191] = 1;\n    $prime_words[193]\
    \ = 1;\n    $prime_words[197] = 1;\n    $prime_words[199] = 1;\n    $prime_words[203]\
    \ = 1;\n    $prime_words[209] = 1;\n    $prime_words[211] = 1;\n    $prime_words[213]\
    \ = 1;\n    $prime_words[217] = 1;\n    $prime_words[221] = 1;\n    $prime_words[227]\
    \ = 1;\n    $prime_words[229] = 1;\n    $prime_word\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpus721l4i.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpnxv62vn5.php:20\nStack trace:\n#0 /tmp/tmpnxv62vn5.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpnxv62vn5.php(32): candidate('This is a test')\n#2 /tmp/tmpnxv62vn5.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpnxv62vn5.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = $word;\n    }\n    sort($result);\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        if (is_prime($word)) {\n  \
    \          $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_sd0ij23.php:37\n\
    Stack trace:\n#0 /tmp/tmp_sd0ij23.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp_sd0ij23.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $len = strlen($word);\n        if ($len > 1) {\n         \
    \   $result .= $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekk4xrbo.php:33\n\
    Stack trace:\n#0 /tmp/tmpekk4xrbo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpekk4xrbo.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbrw4avkk.php:30\n\
    Stack trace:\n#0 /tmp/tmpbrw4avkk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbrw4avkk.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    $result2 = array();\n    foreach ($result as $word) {\n        $result2[]\
    \ = array_count_values($word);\n    }\n    foreach ($result2 as $word => $count)\
    \ {\n        if ($count > 1) {\n            $result2[$word] = $count;\n      \
    \  }\n    }\n    $result3 = array();\n    foreach ($result2 as $word => $count)\
    \ {\n        if ($count > 1) {\n            $result3[] = $word;\n        }\n \
    \   }\n    return implode(' ', $result3);\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprujc5q58.php:46\n\
    Stack trace:\n#0 /tmp/tmprujc5q58.php(55): test()\n#1 {main}\n  thrown in /tmp/tmprujc5q58.php\
    \ on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpggdauwcv.php:44\n\
    Stack trace:\n#0 /tmp/tmpggdauwcv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpggdauwcv.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $newWords = array();\n    foreach\
    \ ($words as $word) {\n        $newWords[] = $word;\n    }\n    $newWords = array_unique($newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $newWords = array_map(function($word) {\n        return $word;\n    }, $newWords);\n\
    \    $newWords = array_filter($newWords);\n    $newWords = array_values($newWords);\n\
    \    $\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy16pin51.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $key => $value) {\n            if ($value == 1) {\n                $result[$key]\
    \ = $key;\n            }\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        foreach ($word as $key => $value) {\n            if ($value\
    \ % 2 != 0) {\n                $result[$key] = $key;\n            }\n        }\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $key => $value) {\n            if ($value == 1) {\n                $result[$key]\
    \ = $key;\n            }\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        foreach ($word as $key => $value) {\n            if ($value\
    \ == 1) {\n                $result[$key] = $key;\n            }\n        }\n \
    \   }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $key => $value) {\n            if ($value == 1) {\n                $result[$key]\
    \ = $key;\n            }\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        foreach ($word as $key => $value) {\n            if ($value\
    \ == 1) {\n                $result[$key] = $key;\n            }\n        }\n \
    \   }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $key => $value) {\n            if ($value == 1) {\n                $result[$key]\
    \ = $key;\n            }\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        foreach ($word as $key => $value) {\n            if ($value\
    \ == 1) {\n                $result[$key] = $key;\n            }\n        }\n \
    \   }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ as $key => $value) {\n            if ($value == 1) {\n                $result[$key]\
    \ = $key;\n            }\n        }\n    }\n    $result = [];\n    foreach ($result\
    \ as $word) {\n        foreach ($word as $key => $value) {\n            if ($value\
    \ == 1) {\n                $result[$key] = $key;\n            }\n        }\n \
    \   }\n    $result = [];\n    foreach ($result as $word) {\n        foreach ($word\
    \ \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbzz0mus1.php on line 109\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n</code>\n\
    <|/ a tags=php,string |>\n<| c |>\nThanks for your answer. Can you please explain\
    \ how this works?\n<|/ c |>\n<| c |>\nI added some comments to my answer.\n<|/\
    \ c |>\n<| c |>\nThanks for your answer. Can you please explain how this works?\n\
    <|/ c |>\n<| c |>\nI added some comments to my answer.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer. Can you please explain how this works?\n<|/ c |>\n<| a tags=php,string\
    \ |>\n<code>\n<?php\n$string = \"This is a test\";\n$words = explode(\" \", $string);\n\
    $result = \"\";\nforeach ($words as $word) {\n    if (strlen($word) == 1) {\n\
    \        $result .= $word;\n    } else {\n        $result .= $word;\n    }\n}\n\
    echo $result;\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0dobcvhj.php on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    sort($new_words);\n \
    \   $new_words = array_unique($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5d9v_01m.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $word = trim($word);\n        if (strlen($word) > 0) {\n\
    \            $result .= $word;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3a9ab6p2.php:33\n\
    Stack trace:\n#0 /tmp/tmp3a9ab6p2.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3a9ab6p2.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word[1]\
    \ > 1) {\n            $result[] = $word[0];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxoikbn4.php:40\n\
    Stack trace:\n#0 /tmp/tmpgxoikbn4.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpgxoikbn4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words as\
    \ $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word\
    \ == 1) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 2) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 3) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 4) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 5) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 6) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 7) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 8) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 9) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 10) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 11) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if (\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_4uhivcd.php on line 111\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = array_map(function($word)\
    \ {\n        return array_reduce($word, function($carry, $item) {\n          \
    \  return $carry && $item % $carry === 0;\n        }, true);\n    }, $result);\n\
    \    return implode(' ', array_filter($result));\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nWarning: A non-numeric value encountered in /tmp/tmpzio59c8p.php on line\
    \ 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzio59c8p.php:35\n\
    Stack trace:\n#0 /tmp/tmpzio59c8p.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzio59c8p.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_may_57l.php:44\n\
    Stack trace:\n#0 /tmp/tmp_may_57l.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp_may_57l.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpietzoafl.php:30\n\
    Stack trace:\n#0 /tmp/tmpietzoafl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpietzoafl.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpffp23ls1.php:44\n\
    Stack trace:\n#0 /tmp/tmpffp23ls1.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpffp23ls1.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpa53gtbol.php:20\nStack trace:\n#0 /tmp/tmpa53gtbol.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpa53gtbol.php(32): candidate('This is a test')\n#2 /tmp/tmpa53gtbol.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpa53gtbol.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4c0cjvr7.php:44\n\
    Stack trace:\n#0 /tmp/tmp4c0cjvr7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp4c0cjvr7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) == 1) {\n            $result .= $word;\n\
    \        } else {\n            $result .= $word;\n            $result .= ' ';\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp757gych8.php:35\n\
    Stack trace:\n#0 /tmp/tmp757gych8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp757gych8.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez4fh3t8.php:30\n\
    Stack trace:\n#0 /tmp/tmpez4fh3t8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpez4fh3t8.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1jcp3c3f.php:44\n\
    Stack trace:\n#0 /tmp/tmp1jcp3c3f.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1jcp3c3f.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    sort($result);\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    foreach ($result as $word) {\n        foreach ($word as $key => $value)\
    \ {\n            if ($value == 1) {\n                unset($result[$key]);\n \
    \           }\n        }\n    }\n    sort($result);\n    $result = array_unique($result);\n\
    \    sort($result);\n    return implode(' ', array_slice($result, 0, count($result)\
    \ - 1));\n}\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemwl0djw.php:44\n\
    Stack trace:\n#0 /tmp/tmpemwl0djw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpemwl0djw.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpkugjxx0j.php:20\nStack trace:\n#0 /tmp/tmpkugjxx0j.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpkugjxx0j.php(32): candidate('This is a test')\n#2 /tmp/tmpkugjxx0j.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpkugjxx0j.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $new_words[] = $word;\n\
    \        }\n    }\n    return implode(' ', $new_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmua_x_fc.php:20\nStack trace:\n#0 /tmp/tmpmua_x_fc.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpmua_x_fc.php(32): candidate('This is a test')\n#2 /tmp/tmpmua_x_fc.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmua_x_fc.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = \"\";\n    foreach ($words\
    \ as $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n\
    \            $result .= $word;\n        } else {\n            $prime = true;\n\
    \            for ($i = 1; $i <= $length; $i++) {\n                if ($length\
    \ % $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxqosoz0.php:44\n\
    Stack trace:\n#0 /tmp/tmpoxqosoz0.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpoxqosoz0.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) > 1) {\n            $result .= $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu34wf11q.php:32\n\
    Stack trace:\n#0 /tmp/tmpu34wf11q.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu34wf11q.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpry33s5zd.php:44\n\
    Stack trace:\n#0 /tmp/tmpry33s5zd.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpry33s5zd.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $new_words = array();\n    foreach ($words\
    \ as $word) {\n        $new_words[] = $word;\n    }\n    $new_words = array_unique($new_words);\n\
    \    sort($new_words);\n    $new_words = array_filter($new_words);\n    $new_words\
    \ = array_values($new_words);\n    $new_words = array_count_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\n    $new_words = array_keys($new_words);\n\
    \    $new_words = array_values($new_words);\n    $new_words = array_filter($new_words);\n\
    \    $new_words = array_keys($new_words);\n    $new_words = array_values($new_words);\n\
    \    $new_words = array_filter($new_words);\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzt4e6fah.php on line 84\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        $result[] = array_count_values($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        $result[]\
    \ = array_filter($word);\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        $result[] = array_keys($word);\n    }\n    $result = [];\n    foreach\
    \ ($result as $word) {\n        $result[] = array_values($word);\n    }\n    $result\
    \ = [];\n    foreach ($result as $word) {\n        $result[] = array_product($word);\n\
    \    }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word\
    \ == 1) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 2) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 3) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 4) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 5) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 6) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 7) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 8) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\n        if ($word == 9) {\n            $result[] = $word;\n        }\n  \
    \  }\n    $result = [];\n    foreach ($result as $word) {\n        if ($word ==\
    \ 10) {\n            $result[] = $word;\n        }\n    }\n    $result = [];\n\
    \    foreach ($result as $word) {\n        if ($word == 11) {\n            $result[]\
    \ = $word;\n        }\n    }\n    $result = [];\n    foreach ($result as $word)\
    \ {\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxhu4tsdm.php on line 124\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpz3948swb.php:20\nStack trace:\n#0 /tmp/tmpz3948swb.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpz3948swb.php(32): candidate('This is a test')\n#2 /tmp/tmpz3948swb.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpz3948swb.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpssk3geb7.php:44\n\
    Stack trace:\n#0 /tmp/tmpssk3geb7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpssk3geb7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result = $result . ' ' . $word;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhgqrsxa.php:30\n\
    Stack trace:\n#0 /tmp/tmprhgqrsxa.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprhgqrsxa.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result .= $word;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bz798ue.php:30\n\
    Stack trace:\n#0 /tmp/tmp7bz798ue.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7bz798ue.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $result = $result . ' ' . $word;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwp3f7ia.php:30\n\
    Stack trace:\n#0 /tmp/tmphwp3f7ia.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphwp3f7ia.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (is_prime($word)) {\n            $result .= $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"lets go for swimming\") !== \"go for\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"there is no place available here\") !==\
    \ \"there is no place\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Hi I am Hussein\") !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"go for it\") !== \"go for it\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here\") !== \"\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpeq2ot0uy.php:20\nStack trace:\n#0 /tmp/tmpeq2ot0uy.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpeq2ot0uy.php(32): candidate('This is a test')\n#2 /tmp/tmpeq2ot0uy.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpeq2ot0uy.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = array();\n    foreach ($words\
    \ as $word) {\n        if (is_prime($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptn1koz82.php:20\nStack trace:\n#0 /tmp/tmptn1koz82.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptn1koz82.php(32): candidate('This is a test')\n#2 /tmp/tmptn1koz82.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptn1koz82.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        if (strlen($word) > 1) {\n            $result .= $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67i_vf4u.php:32\n\
    Stack trace:\n#0 /tmp/tmp67i_vf4u.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp67i_vf4u.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(' ', $sentence);\n    $result = '';\n    foreach ($words as\
    \ $word) {\n        $length = strlen($word);\n        if ($length == 1) {\n  \
    \          $result .= $word;\n        } else {\n            $prime = true;\n \
    \           for ($i = 2; $i <= $length; $i++) {\n                if ($length %\
    \ $i == 0) {\n                    $prime = false;\n                    break;\n\
    \                }\n            }\n            if ($prime) {\n               \
    \ $result .= $word;\n            }\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79lflu7o.php:44\n\
    Stack trace:\n#0 /tmp/tmp79lflu7o.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp79lflu7o.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// You are given a string representing a sentence,\n// the sentence\
    \ contains some words separated by a space,\n// and you have to return a string\
    \ that contains the words from the original sentence,\n// whose lengths are prime\
    \ numbers,\n// the order of the words in the new string should be the same as\
    \ the original one.\n// Example 1:\n// Input: sentence = \"This is a test\"\n\
    // Output: \"is\"\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\
    \n// Output: \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// *\
    \ sentence contains only letters\nfunction words_in_sentence($sentence) {\n  \
    \  $words = explode(\" \", $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        $result[] = str_split($word);\n    }\n    $result = [];\n\
    \    foreach ($words as $word) {\n        $result[] = str_split($word);\n    }\n\
    \    foreach ($words as $word) {\n        foreach ($word as $char) {\n       \
    \     if ($char == \"a\" || $char == \"e\" || $char == \"i\" || $char == \"o\"\
    \ || $char == \"u\") {\n                $result[] = $word;\n            }\n  \
    \      }\n    }\n    foreach ($words as $word) {\n        foreach ($word as $char)\
    \ {\n            if ($char == \"a\" || $char == \"e\" || $char == \"i\" || $char\
    \ == \"o\" || $char == \"u\") {\n                $result[] = $word;\n        \
    \    }\n        }\n    }\n    foreach ($words as $word) {\n        foreach ($word\
    \ as $char) {\n            if ($char == \"a\" || $char == \"e\" || $char == \"\
    i\" || $char == \"o\" || $char == \"u\") {\n                $result[] = $word;\n\
    \            }\n        }\n    }\n    foreach ($words as $word) {\n        foreach\
    \ ($word as $char) {\n            if ($char == \"a\" || $char == \"e\" || $char\
    \ == \"i\" || $char == \"o\" || $char == \"u\") {\n                $result[] =\
    \ $word;\n            }\n        }\n    }\n    foreach ($words as $word) {\n \
    \       foreach ($word as $char) {\n            if ($char == \"a\" || $char ==\
    \ \"e\" || $char == \"i\" || $char == \"o\" || $char == \"u\") {\n           \
    \     $result[] = $word;\n            }\n        }\n    }\n    foreach ($words\
    \ as $word) {\n        foreach ($word as $char) {\n            if ($char == \"\
    a\" || $char == \"e\" || $char == \"i\" || $char == \"o\" || $char == \"u\") {\n\
    \                $result[] = $word;\n            }\n        }\n    }\n    foreach\
    \ ($words as $word) {\n        foreach ($word as $char) {\n            if ($char\
    \ == \"a\" || $char == \"e\" || $char == \"i\" || $char == \"o\" || $char == \"\
    u\") {\n                $result[] = $word;\n            }\n        }\n    }\n\
    \    foreach ($words as $word) {\n        foreach ($word as $char) {\n       \
    \     if ($char == \"a\" || $char == \"e\" || $char == \"i\" || $char == \"o\"\
    \ || $char == \"u\") {\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbs_sr8_j.php on line 93\n"
  stderr: ''
  exit_code: 255
  status: Exception
