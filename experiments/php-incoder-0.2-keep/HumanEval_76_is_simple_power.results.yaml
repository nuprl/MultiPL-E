name: HumanEval_76_is_simple_power
language: php
results:
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n ** 2) {\n        return true;\n    }\n    if ($x % $n == 0) {\n\
    \        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtny6rym.php:43\n\
    Stack trace:\n#0 /tmp/tmpbtny6rym.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtny6rym.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgl6tl6c9.php:25\n\
    Stack trace:\n#0 /tmp/tmpgl6tl6c9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpgl6tl6c9.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x < $n && $n % $x ==\
    \ 0) {\n        return is_simple_power($x, $n - $x);\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1g14yuz.php:39\n\
    Stack trace:\n#0 /tmp/tmpp1g14yuz.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpp1g14yuz.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n);\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoy53pdpb.php:42\n\
    Stack trace:\n#0 /tmp/tmpoy53pdpb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpoy53pdpb.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9requ6bp.php:44\n\
    Stack trace:\n#0 /tmp/tmp9requ6bp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9requ6bp.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu1t87k6g.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis fails for `is_simple_power(3, 2)` which should return `true`.\n\
    <|/ c |>\n<| c |>\n: Yes, I realized that after I posted it. I fixed it now.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with negative numbers as well.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with negative numbers as well.\n\
    <|/ c |>\n<| c |>\n: I added a version that works with negative numbers as well.\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq7__bnbd.php on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return is_simple_power($x/$n, $n);\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi9gndp0c.php:29\n\
    Stack trace:\n#0 /tmp/tmpi9gndp0c.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpi9gndp0c.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfyi96kjc.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($n==2) {\n        return\
    \ true;\n    }\n    if ($n%2==0) {\n        return false;\n    }\n    $x=$x/$n;\n\
    \    if ($x==intval($x)) {\n        return is_simple_power($x, $n-1);\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopzf41r4.php:40\n\
    Stack trace:\n#0 /tmp/tmpopzf41r4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpopzf41r4.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x%$n==0) return is_simple_power($x/$n, $n);\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpomlx7yby.php:23\n\
    Stack trace:\n#0 /tmp/tmpomlx7yby.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpomlx7yby.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpneync6fp.php:24\n\
    Stack trace:\n#0 /tmp/tmpneync6fp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpneync6fp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpin4ru_em.php:43\n\
    Stack trace:\n#0 /tmp/tmpin4ru_em.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpin4ru_em.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph542g0r9.php:44\n\
    Stack trace:\n#0 /tmp/tmph542g0r9.php(51): test()\n#1 {main}\n  thrown in /tmp/tmph542g0r9.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i62kjx0.php:24\n\
    Stack trace:\n#0 /tmp/tmp7i62kjx0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7i62kjx0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($n==$x)\
    \ {\n        return true;\n    }\n    if ($n<$x) {\n        return false;\n  \
    \  }\n    if ($n%$x==0) {\n        return is_simple_power($x/$n, $n);\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpto8hifm1.php:41\n\
    Stack trace:\n#0 /tmp/tmpto8hifm1.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpto8hifm1.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwwoadoe.php:24\n\
    Stack trace:\n#0 /tmp/tmpdwwoadoe.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpdwwoadoe.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp187zmlqp.php:24\n\
    Stack trace:\n#0 /tmp/tmp187zmlqp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp187zmlqp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n - 1);\n    }\n    return false;\n}\n</code>\n\
    <|/ a tags=php,algorithm |>\n<| c |>\nThis code doesn't work for `is_simple_power(3,\
    \ 1)` because `is_simple_power(3, 1)` returns `true` but `is_simple_power(3, 2)`\
    \ returns `false`\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ for that case. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphwzs14ra.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppukejfkz.php:25\n\
    Stack trace:\n#0 /tmp/tmppukejfkz.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppukejfkz.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n    }\n\
    \    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd83qm6wc.php:37\n\
    Stack trace:\n#0 /tmp/tmpd83qm6wc.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpd83qm6wc.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi776zxx0.php:44\n\
    Stack trace:\n#0 /tmp/tmpi776zxx0.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpi776zxx0.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return $x==1;\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_tedunn6.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x==1 || $x==0) {\n        return true;\n\
    \    }\n    if ($n==0) {\n        return false;\n    }\n    if ($n==1) {\n   \
    \     return ($x==1);\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n\
    \    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd2l4iqdy.php:38\n\
    Stack trace:\n#0 /tmp/tmpd2l4iqdy.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpd2l4iqdy.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n ** 2) {\n        return true;\n    }\n    if ($x == $n ** 3) {\n\
    \        return true;\n    }\n    if ($x == $n ** 4) {\n        return true;\n\
    \    }\n    if ($x == $n ** 5) {\n        return true;\n    }\n    if ($x == $n\
    \ ** 6) {\n        return true;\n    }\n    if ($x == $n ** 7) {\n        return\
    \ true;\n    }\n    if ($x == $n ** 8) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 9) {\n        return true;\n    }\n    if ($x == $n ** 10) {\n\
    \        return true;\n    }\n    if ($x == $n ** 11) {\n        return true;\n\
    \    }\n    if ($x == $n ** 12) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 13) {\n        return true;\n    }\n    if ($x == $n ** 14) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 15) {\n        return true;\n    }\n\
    \    if ($x == $n ** 16) {\n        return true;\n    }\n    if ($x == $n ** 17)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 18) {\n        return true;\n\
    \    }\n    if ($x == $n ** 19) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 20) {\n        return true;\n    }\n    if ($x == $n ** 21) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 22) {\n        return true;\n    }\n\
    \    if ($x == $n ** 23) {\n        return true;\n    }\n    if ($x == $n ** 24)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 25) {\n        return true;\n\
    \    }\n    if ($x == $n ** 26) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 27) {\n        return true;\n    }\n    if ($x == $n ** 28) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 29) {\n        return true;\n    }\n\
    \    if ($x == $n ** 30) {\n        return true;\n    }\n    if ($x == $n ** 31)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 32) {\n        return true;\n\
    \    }\n    if ($x == $n ** 33) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 34) {\n        return true;\n    }\n    if ($x == $n ** 35) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 36) {\n        return true;\n    }\n\
    \    if ($x == $n ** 37) {\n        return true;\n    }\n    if ($x == $n ** 38)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzex000cf.php on line 153\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsef2fy_f.php:24\n\
    Stack trace:\n#0 /tmp/tmpsef2fy_f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsef2fy_f.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($n ** $x == $x) {\n    return true;\n  }\n\
    \  return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5xiy8ew.php:24\n\
    Stack trace:\n#0 /tmp/tmpb5xiy8ew.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpb5xiy8ew.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ad894wj.php:40\n\
    Stack trace:\n#0 /tmp/tmp5ad894wj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5ad894wj.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($n==-1) return false;\n    if ($x==0) return false;\n    if ($x==1)\
    \ return true;\n    if ($x==-1) return false;\n    if ($x==2) return true;\n \
    \   if ($x==-2) return false;\n    if ($x==3) return true;\n    if ($x==-3) return\
    \ false;\n    if ($x==4) return true;\n    if ($x==-4) return false;\n    if ($x==5)\
    \ return true;\n    if ($x==-5) return false;\n    if ($x==6) return true;\n \
    \   if ($x==-6) return false;\n    if ($x==7) return true;\n    if ($x==-7) return\
    \ false;\n    if ($x==8) return true;\n    if ($x==-8) return false;\n    if ($x==9)\
    \ return true;\n    if ($x==-9) return false;\n    if ($x==10) return true;\n\
    \    if ($x==-10) return false;\n    if ($x==11) return true;\n    if ($x==-11)\
    \ return false;\n    if ($x==12) return true;\n    if ($x==-12) return false;\n\
    \    if ($x==13) return true;\n    if ($x==-13) return false;\n    if ($x==14)\
    \ return true;\n    if ($x==-14) return false;\n    if ($x==15) return true;\n\
    \    if ($x==-15) return false;\n    if ($x==16) return true;\n    if ($x==-16)\
    \ return false;\n    if ($x==17) return true;\n    if ($x==-17) return false;\n\
    \    if ($x==18) return true;\n    if ($x==-18) return false;\n    if ($x==19)\
    \ return true;\n    if ($x==-19) return false;\n    if ($x==20) return true;\n\
    \    if ($x==-20) return false;\n    if ($x==21) return true;\n    if ($x==-21)\
    \ return false;\n    if ($x==22) return true;\n    if ($x==-22) return false;\n\
    \    if ($x==23) return true;\n    if ($x==-23) return false;\n    if ($x==24)\
    \ return true;\n    if ($x==-24) return false;\n    if ($x==25) return true;\n\
    \    if ($x==-25) return false;\n    if ($x==26) return true;\n    if ($x==-26)\
    \ return false;\n    if ($x==27) return true;\n    if ($x==-27) return false;\n\
    \    if ($x==28) return true;\n    if ($x==-28) return false;\n    if ($x==29)\
    \ return true;\n    if ($x==-29) return false;\n    if ($x==30) return true;\n\
    \    if ($x==-30) return false;\n    if ($x==31) return true;\n    if ($x==-31)\
    \ return false;\n    if ($x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsbn17qtn.php on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphy2x1cnx.php:40\n\
    Stack trace:\n#0 /tmp/tmphy2x1cnx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphy2x1cnx.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x==$n) return true;\n    if ($x<$n) return\
    \ is_simple_power($x/$n, $n);\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrlfpf30.php:22\n\
    Stack trace:\n#0 /tmp/tmpjrlfpf30.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjrlfpf30.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzfrxme_.php:34\n\
    Stack trace:\n#0 /tmp/tmpdzfrxme_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdzfrxme_.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb898j1t4.php:35\n\
    Stack trace:\n#0 /tmp/tmpb898j1t4.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpb898j1t4.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return is_simple_power($x/$n, $n);\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfi0d9tvo.php:30\n\
    Stack trace:\n#0 /tmp/tmpfi0d9tvo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfi0d9tvo.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return $x==1;\n    }\n    if ($n==2) {\n        return\
    \ $x==1;\n    }\n    if ($n==3) {\n        return $x==1;\n    }\n    if ($n==4)\
    \ {\n        return $x==1;\n    }\n    if ($n==5) {\n        return $x==1;\n \
    \   }\n    if ($n==6) {\n        return $x==1;\n    }\n    if ($n==7) {\n    \
    \    return $x==1;\n    }\n    if ($n==8) {\n        return $x==1;\n    }\n  \
    \  if ($n==9) {\n        return $x==1;\n    }\n    if ($n==10) {\n        return\
    \ $x==1;\n    }\n    if ($n==11) {\n        return $x==1;\n    }\n    if ($n==12)\
    \ {\n        return $x==1;\n    }\n    if ($n==13) {\n        return $x==1;\n\
    \    }\n    if ($n==14) {\n        return $x==1;\n    }\n    if ($n==15) {\n \
    \       return $x==1;\n    }\n    if ($n==16) {\n        return $x==1;\n    }\n\
    \    if ($n==17) {\n        return $x==1;\n    }\n    if ($n==18) {\n        return\
    \ $x==1;\n    }\n    if ($n==19) {\n        return $x==1;\n    }\n    if ($n==20)\
    \ {\n        return $x==1;\n    }\n    if ($n==21) {\n        return $x==1;\n\
    \    }\n    if ($n==22) {\n        return $x==1;\n    }\n    if ($n==23) {\n \
    \       return $x==1;\n    }\n    if ($n==24) {\n        return $x==1;\n    }\n\
    \    if ($n==25) {\n        return $x==1;\n    }\n    if ($n==26) {\n        return\
    \ $x==1;\n    }\n    if ($n==27) {\n        return $x==1;\n    }\n    if ($n==28)\
    \ {\n        return $x==1;\n    }\n    if ($n==29) {\n        return $x==1;\n\
    \    }\n    if ($n==30) {\n        return $x==1;\n    }\n    if ($n==31) {\n \
    \       return $x==1;\n    }\n    if ($n==32) {\n        return $x==1;\n    }\n\
    \    if ($n==33) {\n        return $x==1;\n    }\n    if ($n==34) {\n        return\
    \ $x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo3gfkn0j.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7eucp0o9.php:24\n\
    Stack trace:\n#0 /tmp/tmp7eucp0o9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7eucp0o9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n ** 2) {\n        return true;\n    }\n    if ($x == $n ** 3) {\n\
    \        return true;\n    }\n    if ($x == $n ** 4) {\n        return true;\n\
    \    }\n    if ($x == $n ** 5) {\n        return true;\n    }\n    if ($x == $n\
    \ ** 6) {\n        return true;\n    }\n    if ($x == $n ** 7) {\n        return\
    \ true;\n    }\n    if ($x == $n ** 8) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 9) {\n        return true;\n    }\n    if ($x == $n ** 10) {\n\
    \        return true;\n    }\n    if ($x == $n ** 11) {\n        return true;\n\
    \    }\n    if ($x == $n ** 12) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 13) {\n        return true;\n    }\n    if ($x == $n ** 14) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 15) {\n        return true;\n    }\n\
    \    if ($x == $n ** 16) {\n        return true;\n    }\n    if ($x == $n ** 17)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 18) {\n        return true;\n\
    \    }\n    if ($x == $n ** 19) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 20) {\n        return true;\n    }\n    if ($x == $n ** 21) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 22) {\n        return true;\n    }\n\
    \    if ($x == $n ** 23) {\n        return true;\n    }\n    if ($x == $n ** 24)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 25) {\n        return true;\n\
    \    }\n    if ($x == $n ** 26) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 27) {\n        return true;\n    }\n    if ($x == $n ** 28) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 29) {\n        return true;\n    }\n\
    \    if ($x == $n ** 30) {\n        return true;\n    }\n    if ($x == $n ** 31)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 32) {\n        return true;\n\
    \    }\n    if ($x == $n ** 33) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 34) {\n        return true;\n    }\n    if ($x == $n ** 35) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 36) {\n        return true;\n    }\n\
    \    if ($x == $n ** 37) {\n        return true;\n    }\n    if ($x == $n ** 38)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb49iy5r4.php on line 153\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n    }\n   \
    \ return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp99tn3lor.php:39\n\
    Stack trace:\n#0 /tmp/tmp99tn3lor.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp99tn3lor.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    if ($x%$n==1) return true;\n    return is_simple_power($x/$n,\
    \ $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6ax7fc8.php:26\n\
    Stack trace:\n#0 /tmp/tmpc6ax7fc8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc6ax7fc8.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x==$n) return true;\n    if ($n<0) return\
    \ false;\n    if ($n==1) return true;\n    if ($x%$n==0) return false;\n    return\
    \ is_simple_power($x/$n, $n);\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxvffb67h.php:25\n\
    Stack trace:\n#0 /tmp/tmpxvffb67h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxvffb67h.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n</code>\n<|/ a tags=php,algorithm\
    \ |>\n<| c |>\nThis doesn't work for `is_simple_power(3, 2)`\n<|/ c |>\n<| c |>\n\
    It works for me. `is_simple_power(3, 2)` returns `false`\n<|/ c |>\n<| c |>\n\
    It works for me too. `is_simple_power(3, 2)` returns `false`\n<|/ c |>\n<| c |>\n\
    It works for me too. `is_simple_power(3, 2)` returns `false`\n<|/ c |>\n<| c |>\n\
    It works for me too. `is_simple_power(3, 2)` returns `false`\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9zi53lcg.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==2) {\n        return\
    \ ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n    }\n    if ($n==4)\
    \ {\n        return ($x==1);\n    }\n    if ($n==5) {\n        return ($x==1);\n\
    \    }\n    if ($n==6) {\n        return ($x==1);\n    }\n    if ($n==7) {\n \
    \       return ($x==1);\n    }\n    if ($n==8) {\n        return ($x==1);\n  \
    \  }\n    if ($n==9) {\n        return ($x==1);\n    }\n    if ($n==10) {\n  \
    \      return ($x==1);\n    }\n    if ($n==11) {\n        return ($x==1);\n  \
    \  }\n    if ($n==12) {\n        return ($x==1);\n    }\n    if ($n==13) {\n \
    \       return ($x==1);\n    }\n    if ($n==14) {\n        return ($x==1);\n \
    \   }\n    if ($n==15) {\n        return ($x==1);\n    }\n    if ($n==16) {\n\
    \        return ($x==1);\n    }\n    if ($n==17) {\n        return ($x==1);\n\
    \    }\n    if ($n==18) {\n        return ($x==1);\n    }\n    if ($n==19) {\n\
    \        return ($x==1);\n    }\n    if ($n==20) {\n        return ($x==1);\n\
    \    }\n    if ($n==21) {\n        return ($x==1);\n    }\n    if ($n==22) {\n\
    \        return ($x==1);\n    }\n    if ($n==23) {\n        return ($x==1);\n\
    \    }\n    if ($n==24) {\n        return ($x==1);\n    }\n    if ($n==25) {\n\
    \        return ($x==1);\n    }\n    if ($n==26) {\n        return ($x==1);\n\
    \    }\n    if ($n==27) {\n        return ($x==1);\n    }\n    if ($n==28) {\n\
    \        return ($x==1);\n    }\n    if ($n==29) {\n        return ($x==1);\n\
    \    }\n    if ($n==30) {\n        return ($x==1);\n    }\n    if ($n==31) {\n\
    \        return ($x==1);\n    }\n    if ($n==32) {\n        return ($x==1);\n\
    \    }\n    if ($n==33) {\n        return ($x==1);\n    }\n    if ($n==34) {\n\
    \        return ($x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbrcf1k3h.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ljy47eg.php:43\n\
    Stack trace:\n#0 /tmp/tmp6ljy47eg.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp6ljy47eg.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjg3bc1kt.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x==$n) return true;\n    if ($x<$n) return\
    \ is_simple_power($x*$x, $n);\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdl0ik7mv.php:23\n\
    Stack trace:\n#0 /tmp/tmpdl0ik7mv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpdl0ik7mv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_pxzwvc.php:40\n\
    Stack trace:\n#0 /tmp/tmpc_pxzwvc.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpc_pxzwvc.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return true;\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ody0k36.php:31\n\
    Stack trace:\n#0 /tmp/tmp8ody0k36.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8ody0k36.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return true;\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76qz2nni.php:30\n\
    Stack trace:\n#0 /tmp/tmp76qz2nni.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp76qz2nni.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==2) {\n        return\
    \ ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n    }\n    if ($n==4)\
    \ {\n        return ($x==1);\n    }\n    if ($n==5) {\n        return ($x==1);\n\
    \    }\n    if ($n==6) {\n        return ($x==1);\n    }\n    if ($n==7) {\n \
    \       return ($x==1);\n    }\n    if ($n==8) {\n        return ($x==1);\n  \
    \  }\n    if ($n==9) {\n        return ($x==1);\n    }\n    if ($n==10) {\n  \
    \      return ($x==1);\n    }\n    if ($n==11) {\n        return ($x==1);\n  \
    \  }\n    if ($n==12) {\n        return ($x==1);\n    }\n    if ($n==13) {\n \
    \       return ($x==1);\n    }\n    if ($n==14) {\n        return ($x==1);\n \
    \   }\n    if ($n==15) {\n        return ($x==1);\n    }\n    if ($n==16) {\n\
    \        return ($x==1);\n    }\n    if ($n==17) {\n        return ($x==1);\n\
    \    }\n    if ($n==18) {\n        return ($x==1);\n    }\n    if ($n==19) {\n\
    \        return ($x==1);\n    }\n    if ($n==20) {\n        return ($x==1);\n\
    \    }\n    if ($n==21) {\n        return ($x==1);\n    }\n    if ($n==22) {\n\
    \        return ($x==1);\n    }\n    if ($n==23) {\n        return ($x==1);\n\
    \    }\n    if ($n==24) {\n        return ($x==1);\n    }\n    if ($n==25) {\n\
    \        return ($x==1);\n    }\n    if ($n==26) {\n        return ($x==1);\n\
    \    }\n    if ($n==27) {\n        return ($x==1);\n    }\n    if ($n==28) {\n\
    \        return ($x==1);\n    }\n    if ($n==29) {\n        return ($x==1);\n\
    \    }\n    if ($n==30) {\n        return ($x==1);\n    }\n    if ($n==31) {\n\
    \        return ($x==1);\n    }\n    if ($n==32) {\n        return ($x==1);\n\
    \    }\n    if ($n==33) {\n        return ($x==1);\n    }\n    if ($n==34) {\n\
    \        return ($x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpby3k06db.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==1) return true;\n    if ($n==0) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return true;\n    if ($x==-2) return true;\n    if ($x==-3) return true;\n \
    \   if ($x==-4) return true;\n    if ($x==-5) return true;\n    if ($x==-6) return\
    \ true;\n    if ($x==-7) return true;\n    if ($x==-8) return true;\n    if ($x==-9)\
    \ return true;\n    if ($x==-10) return true;\n    if ($x==-11) return true;\n\
    \    if ($x==-12) return true;\n    if ($x==-13) return true;\n    if ($x==-14)\
    \ return true;\n    if ($x==-15) return true;\n    if ($x==-16) return true;\n\
    \    if ($x==-17) return true;\n    if ($x==-18) return true;\n    if ($x==-19)\
    \ return true;\n    if ($x==-20) return true;\n    if ($x==-21) return true;\n\
    \    if ($x==-22) return true;\n    if ($x==-23) return true;\n    if ($x==-24)\
    \ return true;\n    if ($x==-25) return true;\n    if ($x==-26) return true;\n\
    \    if ($x==-27) return true;\n    if ($x==-28) return true;\n    if ($x==-29)\
    \ return true;\n    if ($x==-30) return true;\n    if ($x==-31) return true;\n\
    \    if ($x==-32) return true;\n    if ($x==-33) return true;\n    if ($x==-34)\
    \ return true;\n    if ($x==-35) return true;\n    if ($x==-36) return true;\n\
    \    if ($x==-37) return true;\n    if ($x==-38) return true;\n    if ($x==-39)\
    \ return true;\n    if ($x==-40) return true;\n    if ($x==-41) return true;\n\
    \    if ($x==-42) return true;\n    if ($x==-43) return true;\n    if ($x==-44)\
    \ return true;\n    if ($x==-45) return true;\n    if ($x==-46) return true;\n\
    \    if ($x==-47) return true;\n    if ($x==-48) return true;\n    if ($x==-49)\
    \ return true;\n    if ($x==-50) return true;\n    if ($x==-51) return true;\n\
    \    if ($x==-52) return true;\n    if ($x==-53) return true;\n    if ($x==-54)\
    \ return true;\n    if ($x==-55) return true;\n    if ($x==-56) return \nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzhdjknle.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbenul8u.php:44\n\
    Stack trace:\n#0 /tmp/tmprbenul8u.php(51): test()\n#1 {main}\n  thrown in /tmp/tmprbenul8u.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x%$n==0) return false;\n    if ($n%2==1) return false;\n   \
    \ return is_simple_power($x/$n, $n-1);\n}\nfunction candidate(...$args) {\n  \
    \  return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47i_ysjn.php:24\n\
    Stack trace:\n#0 /tmp/tmp47i_ysjn.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp47i_ysjn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n    }\n    if ($\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfq37xnwo.php on line 155\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x%$n==0) return true;\n    return is_simple_power($x/$n, $n);\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21z8he75.php:25\n\
    Stack trace:\n#0 /tmp/tmp21z8he75.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp21z8he75.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvmexevhx.php:41\n\
    Stack trace:\n#0 /tmp/tmpvmexevhx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpvmexevhx.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n ** 2) {\n        return true;\n    }\n    if ($x == $n ** 3) {\n\
    \        return true;\n    }\n    if ($x == $n ** 4) {\n        return true;\n\
    \    }\n    if ($x == $n ** 5) {\n        return true;\n    }\n    if ($x == $n\
    \ ** 6) {\n        return true;\n    }\n    if ($x == $n ** 7) {\n        return\
    \ true;\n    }\n    if ($x == $n ** 8) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 9) {\n        return true;\n    }\n    if ($x == $n ** 10) {\n\
    \        return true;\n    }\n    if ($x == $n ** 11) {\n        return true;\n\
    \    }\n    if ($x == $n ** 12) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 13) {\n        return true;\n    }\n    if ($x == $n ** 14) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 15) {\n        return true;\n    }\n\
    \    if ($x == $n ** 16) {\n        return true;\n    }\n    if ($x == $n ** 17)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 18) {\n        return true;\n\
    \    }\n    if ($x == $n ** 19) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 20) {\n        return true;\n    }\n    if ($x == $n ** 21) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 22) {\n        return true;\n    }\n\
    \    if ($x == $n ** 23) {\n        return true;\n    }\n    if ($x == $n ** 24)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 25) {\n        return true;\n\
    \    }\n    if ($x == $n ** 26) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 27) {\n        return true;\n    }\n    if ($x == $n ** 28) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 29) {\n        return true;\n    }\n\
    \    if ($x == $n ** 30) {\n        return true;\n    }\n    if ($x == $n ** 31)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 32) {\n        return true;\n\
    \    }\n    if ($x == $n ** 33) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 34) {\n        return true;\n    }\n    if ($x == $n ** 35) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 36) {\n        return true;\n    }\n\
    \    if ($x == $n ** 37) {\n        return true;\n    }\n    if ($x == $n ** 38)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvjx5z9cn.php on line 153\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_027fquo.php:34\n\
    Stack trace:\n#0 /tmp/tmp_027fquo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_027fquo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8z6ddpf.php:25\n\
    Stack trace:\n#0 /tmp/tmpa8z6ddpf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpa8z6ddpf.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x==$n) return true;\n    if ($x<$n) return\
    \ is_simple_power($x/$n, $n);\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4vonya1.php:23\n\
    Stack trace:\n#0 /tmp/tmpk4vonya1.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpk4vonya1.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n ** 2) {\n        return true;\n    }\n    if ($x % $n == 0) {\n\
    \        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9w1p9avu.php:44\n\
    Stack trace:\n#0 /tmp/tmp9w1p9avu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9w1p9avu.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_wrxei7.php:44\n\
    Stack trace:\n#0 /tmp/tmp2_wrxei7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2_wrxei7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   if ($x % $n == 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp55qavrmn.php:44\n\
    Stack trace:\n#0 /tmp/tmp55qavrmn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp55qavrmn.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7az2w_v.php:40\n\
    Stack trace:\n#0 /tmp/tmpj7az2w_v.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpj7az2w_v.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dwd24be.php:44\n\
    Stack trace:\n#0 /tmp/tmp2dwd24be.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2dwd24be.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n    }\n    if ($\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9duhvggc.php on line 155\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==1) return true;\n    if ($n==0) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return true;\n    if ($x==-2) return true;\n    if ($x==-3) return true;\n \
    \   if ($x==-4) return true;\n    if ($x==-5) return true;\n    if ($x==-6) return\
    \ true;\n    if ($x==-7) return true;\n    if ($x==-8) return true;\n    if ($x==-9)\
    \ return true;\n    if ($x==-10) return true;\n    if ($x==-11) return true;\n\
    \    if ($x==-12) return true;\n    if ($x==-13) return true;\n    if ($x==-14)\
    \ return true;\n    if ($x==-15) return true;\n    if ($x==-16) return true;\n\
    \    if ($x==-17) return true;\n    if ($x==-18) return true;\n    if ($x==-19)\
    \ return true;\n    if ($x==-20) return true;\n    if ($x==-21) return true;\n\
    \    if ($x==-22) return true;\n    if ($x==-23) return true;\n    if ($x==-24)\
    \ return true;\n    if ($x==-25) return true;\n    if ($x==-26) return true;\n\
    \    if ($x==-27) return true;\n    if ($x==-28) return true;\n    if ($x==-29)\
    \ return true;\n    if ($x==-30) return true;\n    if ($x==-31) return true;\n\
    \    if ($x==-32) return true;\n    if ($x==-33) return true;\n    if ($x==-34)\
    \ return true;\n    if ($x==-35) return true;\n    if ($x==-36) return true;\n\
    \    if ($x==-37) return true;\n    if ($x==-38) return true;\n    if ($x==-39)\
    \ return true;\n    if ($x==-40) return true;\n    if ($x==-41) return true;\n\
    \    if ($x==-42) return true;\n    if ($x==-43) return true;\n    if ($x==-44)\
    \ return true;\n    if ($x==-45) return true;\n    if ($x==-46) return true;\n\
    \    if ($x==-47) return true;\n    if ($x==-48) return true;\n    if ($x==-49)\
    \ return true;\n    if ($x==-50) return true;\n    if ($x==-51) return true;\n\
    \    if ($x==-52) return true;\n    if ($x==-53) return true;\n    if ($x==-54)\
    \ return true;\n    if ($x==-55) return true;\n    if ($x==-56) return \nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvyv5vggz.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpemsgcm2m.php:24\n\
    Stack trace:\n#0 /tmp/tmpemsgcm2m.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpemsgcm2m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydclgmr3.php:44\n\
    Stack trace:\n#0 /tmp/tmpydclgmr3.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpydclgmr3.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc47iwq1l.php:24\n\
    Stack trace:\n#0 /tmp/tmpc47iwq1l.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpc47iwq1l.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3k2s0vf_.php:44\n\
    Stack trace:\n#0 /tmp/tmp3k2s0vf_.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp3k2s0vf_.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return false;\n    }\n    if ($n % 3 == 0) {\n \
    \       return false;\n    }\n    if ($n % 5 == 0) {\n        return false;\n\
    \    }\n    if ($n % 7 == 0) {\n        return false;\n    }\n    if ($n % 9 ==\
    \ 0) {\n        return false;\n    }\n    if ($n % 11 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 13 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 17 == 0) {\n        return false;\n    }\n    if ($n % 19 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 23 == 0) {\n        return false;\n\
    \    }\n    if ($n % 29 == 0) {\n        return false;\n    }\n    if ($n % 31\
    \ == 0) {\n        return false;\n    }\n    if ($n % 37 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 41 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 43 == 0) {\n        return false;\n    }\n    if ($n % 47 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 49 == 0) {\n        return false;\n\
    \    }\n    if ($n % 53 == 0) {\n        return false;\n    }\n    if ($n % 57\
    \ == 0) {\n        return false;\n    }\n    if ($n % 61 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 67 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 71 == 0) {\n        return false;\n    }\n    if ($n % 73 == 0) {\n  \
    \      return false;\n    }\n    if ($n % 79 == 0) {\n        return false;\n\
    \    }\n    if ($n % 83 == 0) {\n        return false;\n    }\n    if ($n % 89\
    \ == 0) {\n        return false;\n    }\n    if ($n % 97 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 101 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 103 == 0) {\n        return false;\n    }\n    if ($n % 107 == 0) {\n\
    \        return false;\n    }\n    if ($n % 109 == 0) {\n        return false;\n\
    \    }\n    if ($n % 111 == 0) {\n        return false;\n    }\n    if ($n % 113\
    \ == 0) {\n        return false;\n    }\n    if ($n % 117 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 121 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 123 == 0) {\n        return false;\n    }\n    if ($n % 127 == 0) {\n\
    \        return false;\n    }\n    if ($n % 131 == 0) {\n        return false;\n\
    \    }\n    if ($n % 133 == 0) {\n        return false;\n    }\n    if ($n % 137\
    \ == 0) {\n        return false;\n    }\n    if ($n % 141 == 0) {\n        return\
    \ false;\n    }\n    if ($n % 143 == 0) {\n        return false;\n    }\n    if\
    \ ($n % 147 == 0) {\n        return false;\n    }\n    if ($n % 151 == 0) {\n\
    \        return false;\n    }\n    if ($n % 153 == 0) {\n        return false;\n\
    \    }\n    if ($n % 157 == 0) {\n        return false;\n    }\n    if ($n % 161\
    \ == 0) {\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplt4aokb4.php on line 181\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg5k61nec.php:35\n\
    Stack trace:\n#0 /tmp/tmpg5k61nec.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg5k61nec.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n    }\n   \
    \ return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1ijf9u4.php:39\n\
    Stack trace:\n#0 /tmp/tmpx1ijf9u4.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx1ijf9u4.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppzu0txz3.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==2) {\n        return\
    \ ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n    }\n    if ($n==4)\
    \ {\n        return ($x==1);\n    }\n    if ($n==5) {\n        return ($x==1);\n\
    \    }\n    if ($n==6) {\n        return ($x==1);\n    }\n    if ($n==7) {\n \
    \       return ($x==1);\n    }\n    if ($n==8) {\n        return ($x==1);\n  \
    \  }\n    if ($n==9) {\n        return ($x==1);\n    }\n    if ($n==10) {\n  \
    \      return ($x==1);\n    }\n    if ($n==11) {\n        return ($x==1);\n  \
    \  }\n    if ($n==12) {\n        return ($x==1);\n    }\n    if ($n==13) {\n \
    \       return ($x==1);\n    }\n    if ($n==14) {\n        return ($x==1);\n \
    \   }\n    if ($n==15) {\n        return ($x==1);\n    }\n    if ($n==16) {\n\
    \        return ($x==1);\n    }\n    if ($n==17) {\n        return ($x==1);\n\
    \    }\n    if ($n==18) {\n        return ($x==1);\n    }\n    if ($n==19) {\n\
    \        return ($x==1);\n    }\n    if ($n==20) {\n        return ($x==1);\n\
    \    }\n    if ($n==21) {\n        return ($x==1);\n    }\n    if ($n==22) {\n\
    \        return ($x==1);\n    }\n    if ($n==23) {\n        return ($x==1);\n\
    \    }\n    if ($n==24) {\n        return ($x==1);\n    }\n    if ($n==25) {\n\
    \        return ($x==1);\n    }\n    if ($n==26) {\n        return ($x==1);\n\
    \    }\n    if ($n==27) {\n        return ($x==1);\n    }\n    if ($n==28) {\n\
    \        return ($x==1);\n    }\n    if ($n==29) {\n        return ($x==1);\n\
    \    }\n    if ($n==30) {\n        return ($x==1);\n    }\n    if ($n==31) {\n\
    \        return ($x==1);\n    }\n    if ($n==32) {\n        return ($x==1);\n\
    \    }\n    if ($n==33) {\n        return ($x==1);\n    }\n    if ($n==34) {\n\
    \        return ($x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2bcbvhpd.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpax5ugtft.php:44\n\
    Stack trace:\n#0 /tmp/tmpax5ugtft.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpax5ugtft.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkved_7i.php:26\n\
    Stack trace:\n#0 /tmp/tmpmkved_7i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpmkved_7i.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    if ($x%$n==1) return true;\n    return is_simple_power($x/$n,\
    \ $n);\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nI believe this fails\
    \ for `is_simple_power(3, 2)` as `is_simple_power(3, 2)` returns `true` but `is_simple_power(3,\
    \ 1)` returns `false`.\n<|/ c |>\n<| c |>\n: Yes, I realized that after I posted\
    \ my answer. Fixed now.\n<|/ c |>\n<| c |>\n: I added a more efficient solution\
    \ that doesn't require recursion.\n<|/ c |>\n<| c |>\n: I added a more efficient\
    \ solution that doesn't require recursion.\n<|/ c |>\n<| c |>\n: I added a more\
    \ efficient solution that doesn't require recursion.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa14jui1m.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return true;\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwisaqkp.php:30\n\
    Stack trace:\n#0 /tmp/tmpmwisaqkp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmwisaqkp.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x<0)\
    \ return false;\n    if ($n<0) return false;\n    if ($n==1) return false;\n \
    \   if ($n==2) return true;\n    if ($x>1) return false;\n    if ($x>2) return\
    \ false;\n    if ($x>3) return false;\n    if ($x>4) return true;\n    if ($x>5)\
    \ return true;\n    if ($x>6) return true;\n    if ($x>7) return true;\n    if\
    \ ($x>8) return true;\n    if ($x>9) return true;\n    if ($x>10) return true;\n\
    \    if ($x>11) return true;\n    if ($x>12) return true;\n    if ($x>13) return\
    \ true;\n    if ($x>14) return true;\n    if ($x>15) return true;\n    if ($x>16)\
    \ return true;\n    if ($x>17) return true;\n    if ($x>18) return true;\n   \
    \ if ($x>19) return true;\n    if ($x>20) return true;\n    if ($x>21) return\
    \ true;\n    if ($x>22) return true;\n    if ($x>23) return true;\n    if ($x>24)\
    \ return true;\n    if ($x>25) return true;\n    if ($x>26) return true;\n   \
    \ if ($x>27) return true;\n    if ($x>28) return true;\n    if ($x>29) return\
    \ true;\n    if ($x>30) return true;\n    if ($x>31) return true;\n    if ($x>32)\
    \ return true;\n    if ($x>33) return true;\n    if ($x>34) return true;\n   \
    \ if ($x>35) return true;\n    if ($x>36) return true;\n    if ($x>37) return\
    \ true;\n    if ($x>38) return true;\n    if ($x>39) return true;\n    if ($x>40)\
    \ return true;\n    if ($x>41) return true;\n    if ($x>42) return true;\n   \
    \ if ($x>43) return true;\n    if ($x>44) return true;\n    if ($x>45) return\
    \ true;\n    if ($x>46) return true;\n    if ($x>47) return true;\n    if ($x>48)\
    \ return true;\n    if ($x>49) return true;\n    if ($x>50) return true;\n   \
    \ if ($x>51) return true;\n    if ($x>52) return true;\n    if ($x>53) return\
    \ true;\n    if ($x>54) return true;\n    if ($x>55) return true;\n    if ($x>56\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5efw_vbg.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpokw_wedd.php:25\n\
    Stack trace:\n#0 /tmp/tmpokw_wedd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpokw_wedd.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppj6iigl2.php:25\n\
    Stack trace:\n#0 /tmp/tmppj6iigl2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppj6iigl2.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    if ($x % $n == 1) {\n        return false;\n   \
    \ }\n    if ($x % $n == -1) {\n        return false;\n    }\n    if ($n % $x ==\
    \ 0) {\n        return true;\n    }\n    if ($n % $x == 1) {\n        return false;\n\
    \    }\n    if ($n % $x == -1) {\n        return false;\n    }\n    if ($n % $x\
    \ == -2) {\n        return false;\n    }\n    if ($n % $x == -3) {\n        return\
    \ false;\n    }\n    if ($n % $x == -4) {\n        return false;\n    }\n    if\
    \ ($n % $x == -5) {\n        return false;\n    }\n    if ($n % $x == -6) {\n\
    \        return false;\n    }\n    if ($n % $x == -7) {\n        return false;\n\
    \    }\n    if ($n % $x == -8) {\n        return false;\n    }\n    if ($n % $x\
    \ == -9) {\n        return false;\n    }\n    if ($n % $x == -10) {\n        return\
    \ false;\n    }\n    if ($n % $x == -11) {\n        return false;\n    }\n   \
    \ if ($n % $x == -12) {\n        return false;\n    }\n    if ($n % $x == -13)\
    \ {\n        return false;\n    }\n    if ($n % $x == -14) {\n        return false;\n\
    \    }\n    if ($n % $x == -15) {\n        return false;\n    }\n    if ($n %\
    \ $x == -16) {\n        return false;\n    }\n    if ($n % $x == -17) {\n    \
    \    return false;\n    }\n    if ($n % $x == -18) {\n        return false;\n\
    \    }\n    if ($n % $x == -19) {\n        return false;\n    }\n    if ($n %\
    \ $x == -20) {\n        return false;\n    }\n    if ($n % $x == -21) {\n    \
    \    return false;\n    }\n    if ($n % $x == -22) {\n        return false;\n\
    \    }\n    if ($n % $x == -23) {\n        return false;\n    }\n    if ($n %\
    \ $x == -24) {\n        return false;\n    }\n    if ($n % $x == -25) {\n    \
    \    return false;\n    }\n    if ($n % $x == -26) {\n        return false;\n\
    \    }\n    if ($n % $x == -27) {\n        return false;\n    }\n    if ($n %\
    \ $x == -28) {\n        return false;\n    }\n    if ($n % $x == -29) {\n    \
    \    return false;\n    }\n    if ($n % $x == -30) {\n        return false;\n\
    \    }\n    if ($n % $x == -31) {\n        return false;\n    }\n    if ($n %\
    \ $x == -32) {\n        return false;\n    }\n    if ($n % $x == -33) {\n    \
    \    return false;\n    }\n    if ($\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj2k_iz00.php on line 143\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxrhl0uqn.php:41\n\
    Stack trace:\n#0 /tmp/tmpxrhl0uqn.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpxrhl0uqn.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7h8b7xr.php:25\n\
    Stack trace:\n#0 /tmp/tmp_7h8b7xr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_7h8b7xr.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4jvfcftg.php:41\n\
    Stack trace:\n#0 /tmp/tmp4jvfcftg.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4jvfcftg.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h8otsqt.php:44\n\
    Stack trace:\n#0 /tmp/tmp4h8otsqt.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4h8otsqt.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($n==$x)\
    \ {\n        return true;\n    }\n    if ($n<$x) {\n        return false;\n  \
    \  }\n    if ($n>$x) {\n        return false;\n    }\n    if ($x%$n==0) {\n  \
    \      return true;\n    }\n    if ($n%$x==0) {\n        return true;\n    }\n\
    \    if ($x%$n==0) {\n        return true;\n    }\n    if ($n%$x==0) {\n     \
    \   return true;\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n  \
    \  if ($n%$x==0) {\n        return true;\n    }\n    if ($x%$n==0) {\n       \
    \ return true;\n    }\n    if ($n%$x==0) {\n        return true;\n    }\n    if\
    \ ($x%$n==0) {\n        return true;\n    }\n    if ($n%$x==0) {\n        return\
    \ true;\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    if ($n%$x==0)\
    \ {\n        return true;\n    }\n    if ($x%$n==0) {\n        return true;\n\
    \    }\n    if ($n%$x==0) {\n        return true;\n    }\n    if ($x%$n==0) {\n\
    \        return true;\n    }\n    if ($n%$x==0) {\n        return true;\n    }\n\
    \    if ($x%$n==0) {\n        return true;\n    }\n    if ($n%$x==0) {\n     \
    \   return true;\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n  \
    \  if ($n%$x==0) {\n        return true;\n    }\n    if ($x%$n==0) {\n       \
    \ return true;\n    }\n    if ($n%$x==0) {\n        return true;\n    }\n    if\
    \ ($x%$n==0) {\n        return true;\n    }\n    if ($n%$x==0) {\n        return\
    \ true;\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n    if ($n%$x==0)\
    \ {\n        return true;\n    }\n    if ($x%$n==0) {\n        return true;\n\
    \    }\n    if ($n%$x==0) {\n        return true;\n    }\n    if ($x%$n==0) {\n\
    \        return true;\n    }\n    if ($n%$x==0) {\n        return true;\n    }\n\
    \    if ($x%$n==0) {\n        return true;\n    }\n    if ($n%$x==0) {\n     \
    \   return true;\n    }\n    if ($x%$n==0) {\n        return true;\n    }\n  \
    \  if ($n%$x\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5oli13pt.php on line 134\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==-1) {\n        return\
    \ ($x==1);\n    }\n    if ($n==2) {\n        return ($x==1);\n    }\n    if ($n==3)\
    \ {\n        return ($x==1);\n    }\n    if ($n==4) {\n        return ($x==1);\n\
    \    }\n    if ($n==5) {\n        return ($x==1);\n    }\n    if ($n==6) {\n \
    \       return ($x==1);\n    }\n    if ($n==7) {\n        return ($x==1);\n  \
    \  }\n    if ($n==8) {\n        return ($x==1);\n    }\n    if ($n==9) {\n   \
    \     return ($x==1);\n    }\n    if ($n==10) {\n        return ($x==1);\n   \
    \ }\n    if ($n==11) {\n        return ($x==1);\n    }\n    if ($n==12) {\n  \
    \      return ($x==1);\n    }\n    if ($n==13) {\n        return ($x==1);\n  \
    \  }\n    if ($n==14) {\n        return ($x==1);\n    }\n    if ($n==15) {\n \
    \       return ($x==1);\n    }\n    if ($n==16) {\n        return ($x==1);\n \
    \   }\n    if ($n==17) {\n        return ($x==1);\n    }\n    if ($n==18) {\n\
    \        return ($x==1);\n    }\n    if ($n==19) {\n        return ($x==1);\n\
    \    }\n    if ($n==20) {\n        return ($x==1);\n    }\n    if ($n==21) {\n\
    \        return ($x==1);\n    }\n    if ($n==22) {\n        return ($x==1);\n\
    \    }\n    if ($n==23) {\n        return ($x==1);\n    }\n    if ($n==24) {\n\
    \        return ($x==1);\n    }\n    if ($n==25) {\n        return ($x==1);\n\
    \    }\n    if ($n==26) {\n        return ($x==1);\n    }\n    if ($n==27) {\n\
    \        return ($x==1);\n    }\n    if ($n==28) {\n        return ($x==1);\n\
    \    }\n    if ($n==29) {\n        return ($x==1);\n    }\n    if ($n==30) {\n\
    \        return ($x==1);\n    }\n    if ($n==31) {\n        return ($x==1);\n\
    \    }\n    if ($n==32) {\n        return ($x==1);\n    }\n    if ($n==33) {\n\
    \        return ($x==1);\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm2l3z149.php on line 134\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    // Your code here\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any built in functions.\
    \ I should also not use any loops. I should only use if statements and if statements.\n\
    <|/ c |>\n<| c |>\nI added a solution that uses only `if` statements.\n<|/ c |>\n\
    <| c |>\nThanks again for your answer. I tried it and it worked but I am not sure\
    \ why it works. I understand that it is checking if the number is divisible by\
    \ n but I am not sure why it works. I understand that it is checking if the number\
    \ is divisible by n but I am not sure why it works. I understand that it is checking\
    \ if the number is divisible by n but I am not sure why it works. I understand\
    \ that it is checking if the number is divisible by n but I am not sure why it\
    \ works. I understand that it is checking if the number is divisible by n but\
    \ I am not sure why it works. I understand that it is checking if the number is\
    \ divisible by n but I am not sure why it works. I understand that it is checking\
    \ if the number is divisible by n but I am not sure why it works. I understand\
    \ that it is checking if the number is divisible by n but I am not sure why it\
    \ works. I understand that it is checking if the number is divisible by n but\
    \ I am not sure why it works. I understand that it is checking if the number is\
    \ divisible by n but I am not sure why it works. I understand that it is checking\
    \ if the number is divisible by n but I am not sure why it works. I understand\
    \ that it is checking if the number is divisible by n but I am not sure why it\
    \ works. I understand that it is checking if the number is divisible by n but\
    \ I am not sure why it works. I understand that it is checking if the number is\
    \ divisible by n but I am not sure why it works. I understand that it is checking\
    \ if the number is divisible by n but I am not sure why it works. I understand\
    \ that it is checking if the number is divisible by n but I am not sure why it\
    \ works. I understand that it is checking if the number is divisible by n but\
    \ I am not sure why it works. I understand that it is checking if the number is\
    \ divisible by n but I am not sure why it works. I understand that it is checking\
    \ if the number is divisible by n but I am not sure why it works. I understand\
    \ that it is checking if the number is divisible by n but I am not sure why it\
    \ works. I understand that it is checking if the number is divisible by n but\
    \ I am not sure why it works. I understand that it is checking if the number is\
    \ divisible by n but I am not sure why it works. I understand that it is checking\
    \ if the number is divisible by n \nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiqy1kdfi.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeny6g4bm.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==-1)\
    \ return true;\n    if ($x==-2) return true;\n    if ($x==-3) return true;\n \
    \   if ($x==-4) return true;\n    if ($x==-5) return true;\n    if ($x==-6) return\
    \ true;\n    if ($x==-7) return true;\n    if ($x==-8) return true;\n    if ($x==-9)\
    \ return true;\n    if ($x==-10) return true;\n    if ($x==-11) return true;\n\
    \    if ($x==-12) return true;\n    if ($x==-13) return true;\n    if ($x==-14)\
    \ return true;\n    if ($x==-15) return true;\n    if ($x==-16) return true;\n\
    \    if ($x==-17) return true;\n    if ($x==-18) return true;\n    if ($x==-19)\
    \ return true;\n    if ($x==-20) return true;\n    if ($x==-21) return true;\n\
    \    if ($x==-22) return true;\n    if ($x==-23) return true;\n    if ($x==-24)\
    \ return true;\n    if ($x==-25) return true;\n    if ($x==-26) return true;\n\
    \    if ($x==-27) return true;\n    if ($x==-28) return true;\n    if ($x==-29)\
    \ return true;\n    if ($x==-30) return true;\n    if ($x==-31) return true;\n\
    \    if ($x==-32) return true;\n    if ($x==-33) return true;\n    if ($x==-34)\
    \ return true;\n    if ($x==-35) return true;\n    if ($x==-36) return true;\n\
    \    if ($x==-37) return true;\n    if ($x==-38) return true;\n    if ($x==-39)\
    \ return true;\n    if ($x==-40) return true;\n    if ($x==-41) return true;\n\
    \    if ($x==-42) return true;\n    if ($x==-43) return true;\n    if ($x==-44)\
    \ return true;\n    if ($x==-45) return true;\n    if ($x==-46) return true;\n\
    \    if ($x==-47) return true;\n    if ($x==-48) return true;\n    if ($x==-49)\
    \ return true;\n    if ($x==-50) return true;\n    if ($x==-51) return true;\n\
    \    if ($x==-52) return true;\n    if ($x==-53) return true;\n    if ($x==-54)\
    \ return true;\n    if ($x==-55) return true;\n    if ($x==-56) return \nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnl0yd_eb.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($x == -1) {\n     \
    \   return false;\n    }\n    if ($x == -2) {\n        return false;\n    }\n\
    \    if ($x == -3) {\n        return false;\n    }\n    if ($x == -4) {\n    \
    \    return false;\n    }\n    if ($x == -5) {\n        return false;\n    }\n\
    \    if ($x == -6) {\n        return false;\n    }\n    if ($x == -7) {\n    \
    \    return false;\n    }\n    if ($x == -8) {\n        return false;\n    }\n\
    \    if ($x == -9) {\n        return false;\n    }\n    if ($x == -10) {\n   \
    \     return false;\n    }\n    if ($x == -11) {\n        return false;\n    }\n\
    \    if ($x == -12) {\n        return false;\n    }\n    if ($x == -13) {\n  \
    \      return false;\n    }\n    if ($x == -14) {\n        return false;\n   \
    \ }\n    if ($x == -15) {\n        return false;\n    }\n    if ($x == -16) {\n\
    \        return false;\n    }\n    if ($x == -17) {\n        return false;\n \
    \   }\n    if ($x == -18) {\n        return false;\n    }\n    if ($x == -19)\
    \ {\n        return false;\n    }\n    if ($x == -20) {\n        return false;\n\
    \    }\n    if ($x == -21) {\n        return false;\n    }\n    if ($x == -22)\
    \ {\n        return false;\n    }\n    if ($x == -23) {\n        return false;\n\
    \    }\n    if ($x == -24) {\n        return false;\n    }\n    if ($x == -25)\
    \ {\n        return false;\n    }\n    if ($x == -26) {\n        return false;\n\
    \    }\n    if ($x == -27) {\n        return false;\n    }\n    if ($x == -28)\
    \ {\n        return false;\n    }\n    if ($x == -29) {\n        return false;\n\
    \    }\n    if ($x == -30) {\n        return false;\n    }\n    if ($x == -31)\
    \ {\n        return false;\n    }\n    if ($x == -32) {\n        return false;\n\
    \    }\n    if ($x == -33) {\n        return false;\n    }\n    if ($x == -34)\
    \ {\n        return false;\n    }\n    if ($x == -35) {\n        return false;\n\
    \    }\n    if ($x == -36) {\n        return false;\n    }\n    if ($x == -37)\
    \ {\n        return false;\n    }\n    if ($x == -38) {\n        return false;\n\
    \    }\n    if ($x == -39) {\n        return false;\n    }\n    if ($x == -40)\
    \ {\n        return false;\n    }\n    if ($x == -41) {\n        return false;\n\
    \    }\n    if ($x == -42) {\n        return false;\n    }\n    if ($x == -43)\
    \ {\n        return false;\n    }\n    if ($x == -44) {\n        return false;\n\
    \    }\n    if ($x == -45) {\n        return false;\n    }\n    if ($x == -46)\
    \ {\n        return false;\n    }\n    if ($x == -47) {\n        return false;\n\
    \    }\n    if (\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqqybxkkw.php on line 161\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27cb937n.php:44\n\
    Stack trace:\n#0 /tmp/tmp27cb937n.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp27cb937n.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x%$n==0) return false;\n    return is_simple_power($x/$n, $n);\n\
    }\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv92dpxic.php:23\n\
    Stack trace:\n#0 /tmp/tmpv92dpxic.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpv92dpxic.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoha1pi_a.php:26\n\
    Stack trace:\n#0 /tmp/tmpoha1pi_a.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpoha1pi_a.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x%$n==0) return is_simple_power($x/$n, $n);\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrqn1poo.php:24\n\
    Stack trace:\n#0 /tmp/tmpsrqn1poo.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsrqn1poo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n    }\n   \
    \ return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqj3k4j_.php:39\n\
    Stack trace:\n#0 /tmp/tmpqqj3k4j_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqqj3k4j_.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n - 1);\n    }\n    return is_simple_power($x,\
    \ $n - 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2yyvsszj.php:40\n\
    Stack trace:\n#0 /tmp/tmp2yyvsszj.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2yyvsszj.php\
    \ on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n    }\n    if ($\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsr6o76nu.php on line 155\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n    }\n\
    \    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprym8dkn6.php:37\n\
    Stack trace:\n#0 /tmp/tmprym8dkn6.php(48): test()\n#1 {main}\n  thrown in /tmp/tmprym8dkn6.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==2)\
    \ return true;\n    if ($x==3) return true;\n    if ($x==4) return true;\n   \
    \ if ($x==5) return true;\n    if ($x==6) return true;\n    if ($x==7) return\
    \ true;\n    if ($x==8) return true;\n    if ($x==9) return true;\n    if ($x==10)\
    \ return true;\n    if ($x==11) return true;\n    if ($x==12) return true;\n \
    \   if ($x==13) return true;\n    if ($x==14) return true;\n    if ($x==15) return\
    \ true;\n    if ($x==16) return true;\n    if ($x==17) return true;\n    if ($x==18)\
    \ return true;\n    if ($x==19) return true;\n    if ($x==20) return true;\n \
    \   if ($x==21) return true;\n    if ($x==22) return true;\n    if ($x==23) return\
    \ true;\n    if ($x==24) return true;\n    if ($x==25) return true;\n    if ($x==26)\
    \ return true;\n    if ($x==27) return true;\n    if ($x==28) return true;\n \
    \   if ($x==29) return true;\n    if ($x==30) return true;\n    if ($x==31) return\
    \ true;\n    if ($x==32) return true;\n    if ($x==33) return true;\n    if ($x==34)\
    \ return true;\n    if ($x==35) return true;\n    if ($x==36) return true;\n \
    \   if ($x==37) return true;\n    if ($x==38) return true;\n    if ($x==39) return\
    \ true;\n    if ($x==40) return true;\n    if ($x==41) return true;\n    if ($x==42)\
    \ return true;\n    if ($x==43) return true;\n    if ($x==44) return true;\n \
    \   if ($x==45) return true;\n    if ($x==46) return true;\n    if ($x==47) return\
    \ true;\n    if ($x==48) return true;\n    if ($x==49) return true;\n    if ($x==50)\
    \ return true;\n    if ($x==51) return true;\n    if ($x==52) return true;\n \
    \   if ($x==53) return true;\n    if ($x==54) return true;\n    if ($x==55) return\
    \ true;\n    if ($x==56) return true;\n    if ($x==57) return true;\n    if ($x==58)\
    \ return true;\n    if ($x==59) return true;\n    if ($x==60) return true;\n \
    \   if ($x==6\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkamwnbrr.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($n==0) return true;\n  if ($n==1) return false;\n\
    \  if ($x==0) return false;\n  if ($x==1) return true;\n  if ($x%$n==0) return\
    \ false;\n  return is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcmzyf10.php:25\n\
    Stack trace:\n#0 /tmp/tmptcmzyf10.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptcmzyf10.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n    }\n   \
    \ return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n \
    \   return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjo8tzguz.php:39\n\
    Stack trace:\n#0 /tmp/tmpjo8tzguz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjo8tzguz.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbyvh05cf.php:26\n\
    Stack trace:\n#0 /tmp/tmpbyvh05cf.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbyvh05cf.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9effg8dv.php:44\n\
    Stack trace:\n#0 /tmp/tmp9effg8dv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9effg8dv.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    if ($x%$n==1) return true;\n    $x=$x/$n;\n    return is_simple_power($x,\
    \ $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohh3443q.php:27\n\
    Stack trace:\n#0 /tmp/tmpohh3443q.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpohh3443q.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($x == -1) {\n     \
    \   return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n  \
    \  if ($n == 0) {\n        return false;\n    }\n    if ($n == -1) {\n       \
    \ return false;\n    }\n    if ($n % 2 == 0) {\n        if ($x % 2 == 0) {\n \
    \           return is_simple_power($x / 2, $n);\n        }\n        else {\n \
    \           return false;\n        }\n    }\n    else {\n        if ($x % 2 ==\
    \ 0) {\n            return is_simple_power($x / 2, $n);\n        }\n        else\
    \ {\n            return is_simple_power($x, $n - 1);\n        }\n    }\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI believe this fails for `is_simple_power(3, 1)`\n\
    <|/ c |>\n<| c |>\nI believe it fails for `is_simple_power(3, 2)`\n<|/ c |>\n\
    <| c |>\nI believe it fails for `is_simple_power(5, 3)`\n<|/ c |>\n<| c |>\nI\
    \ believe it fails for `is_simple_power(5, 4)`\n<|/ c |>\n<| c |>\nI believe it\
    \ fails for `is_simple_power(5, 5)`\n<|/ c |>\n<| a dscore=1 |>\n<code>\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpo8wwnr6_.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplh4i36b5.php:44\n\
    Stack trace:\n#0 /tmp/tmplh4i36b5.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplh4i36b5.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($n==2) return $x==1;\n    if ($n<0) return false;\n    if ($x==1)\
    \ return false;\n    if ($x==0) return false;\n    if ($x==-1) return true;\n\
    \    if ($x==-2) return true;\n    if ($x==-3) return true;\n    if ($x==-4) return\
    \ true;\n    if ($x==-5) return true;\n    if ($x==-6) return true;\n    if ($x==-7)\
    \ return true;\n    if ($x==-8) return true;\n    if ($x==-9) return true;\n \
    \   if ($x==-10) return true;\n    if ($x==-11) return true;\n    if ($x==-12)\
    \ return true;\n    if ($x==-13) return true;\n    if ($x==-14) return true;\n\
    \    if ($x==-15) return true;\n    if ($x==-16) return true;\n    if ($x==-17)\
    \ return true;\n    if ($x==-18) return true;\n    if ($x==-19) return true;\n\
    \    if ($x==-20) return true;\n    if ($x==-21) return true;\n    if ($x==-22)\
    \ return true;\n    if ($x==-23) return true;\n    if ($x==-24) return true;\n\
    \    if ($x==-25) return true;\n    if ($x==-26) return true;\n    if ($x==-27)\
    \ return true;\n    if ($x==-28) return true;\n    if ($x==-29) return true;\n\
    \    if ($x==-30) return true;\n    if ($x==-31) return true;\n    if ($x==-32)\
    \ return true;\n    if ($x==-33) return true;\n    if ($x==-34) return true;\n\
    \    if ($x==-35) return true;\n    if ($x==-36) return true;\n    if ($x==-37)\
    \ return true;\n    if ($x==-38) return true;\n    if ($x==-39) return true;\n\
    \    if ($x==-40) return true;\n    if ($x==-41) return true;\n    if ($x==-42)\
    \ return true;\n    if ($x==-43) return true;\n    if ($x==-44) return true;\n\
    \    if ($x==-45) return true;\n    if ($x==-46) return true;\n    if ($x==-47)\
    \ return true;\n    if ($x==-48) return true;\n    if ($x==-49) return true;\n\
    \    if ($x==-50) return true;\n    if ($x==-51) return true;\n    if ($x==-52)\
    \ return true;\n    if ($x==-53) return true;\n    if ($x==-54\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_s3j0e2y.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2u59flm6.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($x == -1) {\n     \
    \   return false;\n    }\n    if ($x == -2) {\n        return false;\n    }\n\
    \    if ($x == -3) {\n        return false;\n    }\n    if ($x == -4) {\n    \
    \    return false;\n    }\n    if ($x == -5) {\n        return false;\n    }\n\
    \    if ($x == -6) {\n        return false;\n    }\n    if ($x == -7) {\n    \
    \    return false;\n    }\n    if ($x == -8) {\n        return false;\n    }\n\
    \    if ($x == -9) {\n        return false;\n    }\n    if ($x == -10) {\n   \
    \     return false;\n    }\n    if ($x == -11) {\n        return false;\n    }\n\
    \    if ($x == -12) {\n        return false;\n    }\n    if ($x == -13) {\n  \
    \      return false;\n    }\n    if ($x == -14) {\n        return false;\n   \
    \ }\n    if ($x == -15) {\n        return false;\n    }\n    if ($x == -16) {\n\
    \        return false;\n    }\n    if ($x == -17) {\n        return false;\n \
    \   }\n    if ($x == -18) {\n        return false;\n    }\n    if ($x == -19)\
    \ {\n        return false;\n    }\n    if ($x == -20) {\n        return false;\n\
    \    }\n    if ($x == -21) {\n        return false;\n    }\n    if ($x == -22)\
    \ {\n        return false;\n    }\n    if ($x == -23) {\n        return false;\n\
    \    }\n    if ($x == -24) {\n        return false;\n    }\n    if ($x == -25)\
    \ {\n        return false;\n    }\n    if ($x == -26) {\n        return false;\n\
    \    }\n    if ($x == -27) {\n        return false;\n    }\n    if ($x == -28)\
    \ {\n        return false;\n    }\n    if ($x == -29) {\n        return false;\n\
    \    }\n    if ($x == -30) {\n        return false;\n    }\n    if ($x == -31)\
    \ {\n        return false;\n    }\n    if ($x == -32) {\n        return false;\n\
    \    }\n    if ($x == -33) {\n        return false;\n    }\n    if ($x == -34)\
    \ {\n        return false;\n    }\n    if ($x == -35) {\n        return false;\n\
    \    }\n    if ($x == -36) {\n        return false;\n    }\n    if ($x == -37)\
    \ {\n        return false;\n    }\n    if ($x == -38) {\n        return false;\n\
    \    }\n    if ($x == -39) {\n        return false;\n    }\n    if ($x == -40)\
    \ {\n        return false;\n    }\n    if ($x == -41) {\n        return false;\n\
    \    }\n    if ($x == -42) {\n        return false;\n    }\n    if ($x == -43)\
    \ {\n        return false;\n    }\n    if ($x == -44) {\n        return false;\n\
    \    }\n    if ($x == -45) {\n        return false;\n    }\n    if ($x == -46)\
    \ {\n        return false;\n    }\n    if ($x == -47) {\n        return false;\n\
    \    }\n    if (\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpck_pf_ns.php on line 161\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zmw1xig.php:44\n\
    Stack trace:\n#0 /tmp/tmp4zmw1xig.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4zmw1xig.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    // Your code here\n}\n</code>\n<|/ a |>\n<| c\
    \ |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26839488)\n\
    <|/ c |>\n<| c |>\nI disagree, this is an answer to the question. He asked how\
    \ to write a function that returns true if a number x is a simple power of n and\
    \ false in other cases. I provided a solution that does exactly that. He did not\
    \ ask for someone to write the code for himself.\n<|/ c |>\n<| c |>\nI disagree,\
    \ this is an answer to the question. He asked how to write a function that returns\
    \ true if a number x is a simple power of n and false in other cases. I provided\
    \ a solution that does exactly that. He did not ask for someone to write the code\
    \ for himself.\n<|/ c |>\n<| c |>\nI disagree, this is an answer to the question.\
    \ He asked how to write a function that returns true if a number x is a simple\
    \ power of n and false in other cases. I provided a solution that does exactly\
    \ that. He did not ask for someone to write the code for himself.\n<|/ c |>\n\
    <| c |>\nI disagree, this is an answer to the question. He asked how to write\
    \ a function that returns true if a number x is a simple power of n and false\
    \ in other cases. I provided a solution that does exactly that. He did not ask\
    \ for someone to write the code for himself.\n<|/ c |>\n<| a tags=php,math |>\n\
    <code>\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3vqcd41r.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdeuint4k.php:25\n\
    Stack trace:\n#0 /tmp/tmpdeuint4k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdeuint4k.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x%$n==0)\
    \ {\n        return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2x83rs3.php:41\n\
    Stack trace:\n#0 /tmp/tmp_2x83rs3.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_2x83rs3.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpikb2osoz.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==2)\
    \ return true;\n    if ($x==3) return true;\n    if ($x==4) return true;\n   \
    \ if ($x==5) return true;\n    if ($x==6) return true;\n    if ($x==7) return\
    \ true;\n    if ($x==8) return true;\n    if ($x==9) return true;\n    if ($x==10)\
    \ return true;\n    if ($x==11) return true;\n    if ($x==12) return true;\n \
    \   if ($x==13) return true;\n    if ($x==14) return true;\n    if ($x==15) return\
    \ true;\n    if ($x==16) return true;\n    if ($x==17) return true;\n    if ($x==18)\
    \ return true;\n    if ($x==19) return true;\n    if ($x==20) return true;\n \
    \   if ($x==21) return true;\n    if ($x==22) return true;\n    if ($x==23) return\
    \ true;\n    if ($x==24) return true;\n    if ($x==25) return true;\n    if ($x==26)\
    \ return true;\n    if ($x==27) return true;\n    if ($x==28) return true;\n \
    \   if ($x==29) return true;\n    if ($x==30) return true;\n    if ($x==31) return\
    \ true;\n    if ($x==32) return true;\n    if ($x==33) return true;\n    if ($x==34)\
    \ return true;\n    if ($x==35) return true;\n    if ($x==36) return true;\n \
    \   if ($x==37) return true;\n    if ($x==38) return true;\n    if ($x==39) return\
    \ true;\n    if ($x==40) return true;\n    if ($x==41) return true;\n    if ($x==42)\
    \ return true;\n    if ($x==43) return true;\n    if ($x==44) return true;\n \
    \   if ($x==45) return true;\n    if ($x==46) return true;\n    if ($x==47) return\
    \ true;\n    if ($x==48) return true;\n    if ($x==49) return true;\n    if ($x==50)\
    \ return true;\n    if ($x==51) return true;\n    if ($x==52) return true;\n \
    \   if ($x==53) return true;\n    if ($x==54) return true;\n    if ($x==55) return\
    \ true;\n    if ($x==56) return true;\n    if ($x==57) return true;\n    if ($x==58)\
    \ return true;\n    if ($x==59) return true;\n    if ($x==60) return true;\n \
    \   if ($x==6\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr6d3tpdc.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($x == -1) {\n     \
    \   return false;\n    }\n    if ($n == 0) {\n        return false;\n    }\n \
    \   if ($n == 1) {\n        return true;\n    }\n    if ($n == -1) {\n       \
    \ return false;\n    }\n    if ($x == -1) {\n        return false;\n    }\n  \
    \  if ($x == 1) {\n        return true;\n    }\n    if ($x == 2) {\n        return\
    \ true;\n    }\n    if ($x == 3) {\n        return true;\n    }\n    if ($x ==\
    \ 4) {\n        return true;\n    }\n    if ($x == 5) {\n        return true;\n\
    \    }\n    if ($x == 6) {\n        return true;\n    }\n    if ($x == 7) {\n\
    \        return true;\n    }\n    if ($x == 8) {\n        return true;\n    }\n\
    \    if ($x == 9) {\n        return true;\n    }\n    if ($x == 10) {\n      \
    \  return true;\n    }\n    if ($x == 11) {\n        return true;\n    }\n   \
    \ if ($x == 12) {\n        return true;\n    }\n    if ($x == 13) {\n        return\
    \ true;\n    }\n    if ($x == 14) {\n        return true;\n    }\n    if ($x ==\
    \ 15) {\n        return true;\n    }\n    if ($x == 16) {\n        return true;\n\
    \    }\n    if ($x == 17) {\n        return true;\n    }\n    if ($x == 18) {\n\
    \        return true;\n    }\n    if ($x == 19) {\n        return true;\n    }\n\
    \    if ($x == 20) {\n        return true;\n    }\n    if ($x == 21) {\n     \
    \   return true;\n    }\n    if ($x == 22) {\n        return true;\n    }\n  \
    \  if ($x == 23) {\n        return true;\n    }\n    if ($x == 24) {\n       \
    \ return true;\n    }\n    if ($x == 25) {\n        return true;\n    }\n    if\
    \ ($x == 26) {\n        return true;\n    }\n    if ($x == 27) {\n        return\
    \ true;\n    }\n    if ($x == 28) {\n        return true;\n    }\n    if ($x ==\
    \ 29) {\n        return true;\n    }\n    if ($x == 30) {\n        return true;\n\
    \    }\n    if ($x == 31) {\n        return true;\n    }\n    if ($x == 32) {\n\
    \        return true;\n    }\n    if ($x == 33) {\n        return true;\n    }\n\
    \    if ($x == 34) {\n        return true;\n    }\n    if ($x == 35) {\n     \
    \   return true;\n    }\n    if ($x == 36) {\n        return true;\n    }\n  \
    \  if ($x == 37) {\n        return true;\n    }\n    if ($x == 38) {\n       \
    \ return true;\n    }\n    if ($x == 39) {\n        return true;\n    }\n    if\
    \ ($x == 40) {\n        return true;\n    }\n    if ($x == 41) {\n        return\
    \ true;\n    }\n    if ($x == 42) {\n        return true;\n    }\n    if ($x ==\
    \ 43) {\n        return true;\n    }\n    if ($x == 44) {\n        return true;\n\
    \    }\n    if ($x == 45) {\n        return true;\n    }\n    if (\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ajiibwm.php on line 170\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return false;\n    }\n    $x = $x * $x;\n    $n\
    \ = $n * $n;\n    if ($x == $n) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgu7mhffi.php:41\n\
    Stack trace:\n#0 /tmp/tmpgu7mhffi.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpgu7mhffi.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n    }\n\
    \    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpomp880ww.php:37\n\
    Stack trace:\n#0 /tmp/tmpomp880ww.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpomp880ww.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4oljercw.php:35\n\
    Stack trace:\n#0 /tmp/tmp4oljercw.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4oljercw.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpscbbfe9s.php:44\n\
    Stack trace:\n#0 /tmp/tmpscbbfe9s.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpscbbfe9s.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3o_nfgme.php:35\n\
    Stack trace:\n#0 /tmp/tmp3o_nfgme.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3o_nfgme.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz80_9sqg.php:25\n\
    Stack trace:\n#0 /tmp/tmpz80_9sqg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpz80_9sqg.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return true;\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2fvz__3.php:30\n\
    Stack trace:\n#0 /tmp/tmpx2fvz__3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpx2fvz__3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($n==-1) return false;\n    if ($x==0) return false;\n    if ($x==1)\
    \ return true;\n    if ($x==-1) return false;\n    if ($x<0 || $x>1) return false;\n\
    \    if ($n<0 || $n>9) return false;\n    if ($n==9) return true;\n    if ($n==8)\
    \ return true;\n    if ($n==7) return true;\n    if ($n==6) return true;\n   \
    \ if ($n==5) return true;\n    if ($n==4) return true;\n    if ($n==3) return\
    \ true;\n    if ($n==2) return true;\n    if ($n==1) return true;\n    if ($n==0)\
    \ return true;\n    if ($x<0) return false;\n    if ($x>1) return false;\n   \
    \ if ($n<0) return false;\n    if ($n>9) return false;\n    if ($n==9) return\
    \ true;\n    if ($n==8) return true;\n    if ($n==7) return true;\n    if ($n==6)\
    \ return true;\n    if ($n==5) return true;\n    if ($n==4) return true;\n   \
    \ if ($n==3) return true;\n    if ($n==2) return true;\n    if ($n==1) return\
    \ true;\n    if ($n==0) return true;\n    if ($x<0) return false;\n    if ($x>1)\
    \ return false;\n    if ($n<0) return false;\n    if ($n>9) return false;\n  \
    \  if ($n==9) return true;\n    if ($n==8) return true;\n    if ($n==7) return\
    \ true;\n    if ($n==6) return true;\n    if ($n==5) return true;\n    if ($n==4)\
    \ return true;\n    if ($n==3) return true;\n    if ($n==2) return true;\n   \
    \ if ($n==1) return true;\n    if ($n==0) return true;\n    if ($x<0) return false;\n\
    \    if ($x>1) return false;\n    if ($n<0) return false;\n    if ($n>9) return\
    \ false;\n    if ($n==9) return true;\n    if ($n==8) return true;\n    if ($n==7)\
    \ return true;\n    if ($n==6) return true;\n    if ($n==5) return true;\n   \
    \ if ($n==4) return true;\n    if ($n==3) return true;\n    if ($n==2) return\
    \ true;\n    if ($n==1) return true;\n    if ($n==0) return true;\n    if ($x<0)\
    \ return false;\n    if ($x>1) return false;\n    if ($n<0) return false;\n  \
    \  if ($n>9) return false;\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyid2we4z.php on line 94\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n  if ($n==0) return false;\n  if ($n==1) return true;\n\
    \  if ($n==-1) return true;\n  if ($n==-2) return true;\n  if ($n==-3) return\
    \ true;\n  if ($n==-4) return true;\n  if ($n==-5) return true;\n  if ($n==-6)\
    \ return true;\n  if ($n==-7) return true;\n  if ($n==-8) return true;\n  if ($n==-9)\
    \ return true;\n  if ($n==-10) return true;\n  if ($n==-11) return true;\n  if\
    \ ($n==-12) return true;\n  if ($n==-13) return true;\n  if ($n==-14) return true;\n\
    \  if ($n==-15) return true;\n  if ($n==-16) return true;\n  if ($n==-17) return\
    \ true;\n  if ($n==-18) return true;\n  if ($n==-19) return true;\n  if ($n==-20)\
    \ return true;\n  if ($n==-21) return true;\n  if ($n==-22) return true;\n  if\
    \ ($n==-23) return true;\n  if ($n==-24) return true;\n  if ($n==-25) return true;\n\
    \  if ($n==-26) return true;\n  if ($n==-27) return true;\n  if ($n==-28) return\
    \ true;\n  if ($n==-29) return true;\n  if ($n==-30) return true;\n  if ($n==-31)\
    \ return true;\n  if ($n==-32) return true;\n  if ($n==-33) return true;\n  if\
    \ ($n==-34) return true;\n  if ($n==-35) return true;\n  if ($n==-36) return true;\n\
    \  if ($n==-37) return true;\n  if ($n==-38) return true;\n  if ($n==-39) return\
    \ true;\n  if ($n==-40) return true;\n  if ($n==-41) return true;\n  if ($n==-42)\
    \ return true;\n  if ($n==-43) return true;\n  if ($n==-44) return true;\n  if\
    \ ($n==-45) return true;\n  if ($n==-46) return true;\n  if ($n==-47) return true;\n\
    \  if ($n==-48) return true;\n  if ($n==-49) return true;\n  if ($n==-50) return\
    \ true;\n  if ($n==-51) return true;\n  if ($n==-52) return true;\n  if ($n==-53)\
    \ return true;\n  if ($n==-54) return true;\n  if ($n==-55) return true;\n  if\
    \ ($n==-56) return true;\n  if ($n==-57) return true;\n  if ($n==-\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9ommsiaz.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsa7u7opl.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrhsiiim.php:44\n\
    Stack trace:\n#0 /tmp/tmpwrhsiiim.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwrhsiiim.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($n==2) {\n        return\
    \ true;\n    }\n    if ($n%2==0) {\n        if ($x%2==0) {\n            return\
    \ is_simple_power($x/2, $n-1);\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    else {\n        if ($x%2==0) {\n            return\
    \ false;\n        }\n        else {\n            return is_simple_power($x/2,\
    \ $n-1);\n        }\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for\
    \ your answer. Your code works perfectly for powers of 2, but for powers of 3\
    \ it returns false even though 3**3=9. Do you know why that is?\n<|/ c |>\n<|\
    \ c |>\nI edited my answer, I forgot to add an else statement for the case where\
    \ n is odd.\n<|/ c |>\n<| c |>\nThanks again! I really appreciate it!\n<|/ c |>\n\
    <| a |>\n<code>\n<?php\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcpma7nnz.php on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nI believe\
    \ this answer should be the accepted one. While the other answers do work, they\
    \ don't explain why they work and this one does.\n<|/ c |>\n<| c |>\nThis answer\
    \ doesn't explain why it works. I believe this answer should be the accepted one.\n\
    <|/ c |>\n<| c |>\nThis answer doesn't explain why it works. I believe this answer\
    \ should be the accepted one.\n<|/ c |>\n<| c |>\nThis answer doesn't explain\
    \ why it works. I believe this answer should be the accepted one.\n<|/ c |>\n\
    <| c |>\nThis answer doesn't explain why it works. I believe this answer should\
    \ be the accepted one.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplzlv19pl.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqa49fip7.php:44\n\
    Stack trace:\n#0 /tmp/tmpqa49fip7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpqa49fip7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwuqflz6.php:35\n\
    Stack trace:\n#0 /tmp/tmpfwuqflz6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfwuqflz6.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80yquuxy.php:24\n\
    Stack trace:\n#0 /tmp/tmp80yquuxy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp80yquuxy.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1bssz40.php:41\n\
    Stack trace:\n#0 /tmp/tmpx1bssz40.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx1bssz40.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x==1) {\n        return true;\n    }\n \
    \   if ($x==0) {\n        return false;\n    }\n    if ($n==0) {\n        return\
    \ false;\n    }\n    if ($n==1) {\n        return true;\n    }\n    if ($n==-1)\
    \ {\n        return false;\n    }\n    if ($x%$n==0) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbazc3u2.php:43\n\
    Stack trace:\n#0 /tmp/tmpnbazc3u2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnbazc3u2.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37_sspi7.php:44\n\
    Stack trace:\n#0 /tmp/tmp37_sspi7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp37_sspi7.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    if ($x%$n==1) return true;\n    return is_simple_power($x/$n,\
    \ $n);\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rhn0719.php:26\n\
    Stack trace:\n#0 /tmp/tmp6rhn0719.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp6rhn0719.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rxs2207.php:24\n\
    Stack trace:\n#0 /tmp/tmp7rxs2207.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp7rxs2207.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    if ($x%$n==1) return true;\n    return is_simple_power($x/$n,\
    \ $n);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg8orb2u5.php:27\n\
    Stack trace:\n#0 /tmp/tmpg8orb2u5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpg8orb2u5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprx_ejic_.php:34\n\
    Stack trace:\n#0 /tmp/tmprx_ejic_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprx_ejic_.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n    }\n    if ($\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpct3q4uv4.php on line 155\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7r1i9n1u.php:25\n\
    Stack trace:\n#0 /tmp/tmp7r1i9n1u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7r1i9n1u.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8o9x6zyc.php:44\n\
    Stack trace:\n#0 /tmp/tmp8o9x6zyc.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8o9x6zyc.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return false;\n    }\n    $x = $x * $x;\n    $y\
    \ = $x * $n;\n    if ($y == $x) {\n        return true;\n    }\n    return false;\n\
    }\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo24hbzw8.php:41\n\
    Stack trace:\n#0 /tmp/tmpo24hbzw8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpo24hbzw8.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x < $n) {\n        return\
    \ false;\n    }\n    if ($x == $n ** 2) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 3) {\n        return true;\n    }\n    if ($x == $n ** 4) {\n \
    \       return true;\n    }\n    if ($x == $n ** 5) {\n        return true;\n\
    \    }\n    if ($x == $n ** 6) {\n        return true;\n    }\n    if ($x == $n\
    \ ** 7) {\n        return true;\n    }\n    if ($x == $n ** 8) {\n        return\
    \ true;\n    }\n    if ($x == $n ** 9) {\n        return true;\n    }\n    if\
    \ ($x == $n ** 10) {\n        return true;\n    }\n    if ($x == $n ** 11) {\n\
    \        return true;\n    }\n    if ($x == $n ** 12) {\n        return true;\n\
    \    }\n    if ($x == $n ** 13) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 14) {\n        return true;\n    }\n    if ($x == $n ** 15) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 16) {\n        return true;\n    }\n\
    \    if ($x == $n ** 17) {\n        return true;\n    }\n    if ($x == $n ** 18)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 19) {\n        return true;\n\
    \    }\n    if ($x == $n ** 20) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 21) {\n        return true;\n    }\n    if ($x == $n ** 22) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 23) {\n        return true;\n    }\n\
    \    if ($x == $n ** 24) {\n        return true;\n    }\n    if ($x == $n ** 25)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 26) {\n        return true;\n\
    \    }\n    if ($x == $n ** 27) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 28) {\n        return true;\n    }\n    if ($x == $n ** 29) {\n      \
    \  return true;\n    }\n    if ($x == $n ** 30) {\n        return true;\n    }\n\
    \    if ($x == $n ** 31) {\n        return true;\n    }\n    if ($x == $n ** 32)\
    \ {\n        return true;\n    }\n    if ($x == $n ** 33) {\n        return true;\n\
    \    }\n    if ($x == $n ** 34) {\n        return true;\n    }\n    if ($x ==\
    \ $n ** 35) {\n        return true;\n    }\n    if ($x == $n ** 36) {\n      \
    \  return true;\n    }\n    if ($x == $\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn4xvt2cs.php on line 137\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($n==-1) return false;\n    if ($x==0) return false;\n    if ($x==1)\
    \ return true;\n    if ($x==-1) return false;\n    if ($x<0) return false;\n \
    \   if ($x>1) return false;\n    if ($x==$n) return true;\n    if ($x<$n) return\
    \ true;\n    if ($x>$n) return false;\n    if ($x==$n**2) return true;\n    if\
    \ ($x<$n**2) return true;\n    if ($x>$n**2) return false;\n    if ($x==$n**3)\
    \ return true;\n    if ($x<$n**3) return true;\n    if ($x>$n**3) return false;\n\
    \    if ($x==$n**4) return true;\n    if ($x<$n**4) return true;\n    if ($x>$n**4)\
    \ return false;\n    if ($x==$n**5) return true;\n    if ($x<$n**5) return true;\n\
    \    if ($x>$n**5) return false;\n    if ($x==$n**6) return true;\n    if ($x<$n**6)\
    \ return true;\n    if ($x>$n**6) return false;\n    if ($x==$n**7) return true;\n\
    \    if ($x<$n**7) return true;\n    if ($x>$n**7) return false;\n    if ($x==$n**8)\
    \ return true;\n    if ($x<$n**8) return true;\n    if ($x>$n**8) return false;\n\
    \    if ($x==$n**9) return true;\n    if ($x<$n**9) return true;\n    if ($x>$n**9)\
    \ return false;\n    if ($x==$n**10) return true;\n    if ($x<$n**10) return true;\n\
    \    if ($x>$n**10) return false;\n    if ($x==$n**11) return true;\n    if ($x<$n**11)\
    \ return true;\n    if ($x>$n**11) return false;\n    if ($x==$n**12) return true;\n\
    \    if ($x<$n**12) return true;\n    if ($x>$n**12) return false;\n    if ($x==$n**13)\
    \ return true;\n    if ($x<$n**13) return true;\n    if ($x>$n**13) return false;\n\
    \    if ($x==$n**14) return true;\n    if ($x<$n**14) return true;\n    if ($x>$n**14)\
    \ return false;\n    if ($x==$n**\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcrspwhnn.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm7r5g27r.php:44\n\
    Stack trace:\n#0 /tmp/tmpm7r5g27r.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpm7r5g27r.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6j1_a8bl.php:41\n\
    Stack trace:\n#0 /tmp/tmp6j1_a8bl.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp6j1_a8bl.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==2)\
    \ return true;\n    if ($x==3) return true;\n    if ($x==4) return true;\n   \
    \ if ($x==5) return true;\n    if ($x==6) return true;\n    if ($x==7) return\
    \ true;\n    if ($x==8) return true;\n    if ($x==9) return true;\n    if ($x==10)\
    \ return true;\n    if ($x==11) return true;\n    if ($x==12) return true;\n \
    \   if ($x==13) return true;\n    if ($x==14) return true;\n    if ($x==15) return\
    \ true;\n    if ($x==16) return true;\n    if ($x==17) return true;\n    if ($x==18)\
    \ return true;\n    if ($x==19) return true;\n    if ($x==20) return true;\n \
    \   if ($x==21) return true;\n    if ($x==22) return true;\n    if ($x==23) return\
    \ true;\n    if ($x==24) return true;\n    if ($x==25) return true;\n    if ($x==26)\
    \ return true;\n    if ($x==27) return true;\n    if ($x==28) return true;\n \
    \   if ($x==29) return true;\n    if ($x==30) return true;\n    if ($x==31) return\
    \ true;\n    if ($x==32) return true;\n    if ($x==33) return true;\n    if ($x==34)\
    \ return true;\n    if ($x==35) return true;\n    if ($x==36) return true;\n \
    \   if ($x==37) return true;\n    if ($x==38) return true;\n    if ($x==39) return\
    \ true;\n    if ($x==40) return true;\n    if ($x==41) return true;\n    if ($x==42)\
    \ return true;\n    if ($x==43) return true;\n    if ($x==44) return true;\n \
    \   if ($x==45) return true;\n    if ($x==46) return true;\n    if ($x==47) return\
    \ true;\n    if ($x==48) return true;\n    if ($x==49) return true;\n    if ($x==50)\
    \ return true;\n    if ($x==51) return true;\n    if ($x==52) return true;\n \
    \   if ($x==53) return true;\n    if ($x==54) return true;\n    if ($x==55) return\
    \ true;\n    if ($x==56) return true;\n    if ($x==57) return true;\n    if ($x==58)\
    \ return true;\n    if ($x==59) return true;\n    if ($x==60) return true;\n \
    \   if ($x==6\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpon10hypu.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n    }\n    if ($\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp15nxpmsp.php on line 155\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp49mulwaf.php:24\n\
    Stack trace:\n#0 /tmp/tmp49mulwaf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp49mulwaf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($n==$x)\
    \ {\n        return true;\n    }\n    if ($n<$x) {\n        return false;\n  \
    \  }\n    if ($n%$x==0) {\n        return is_simple_power($x/$n, $n);\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb89x3u3e.php:41\n\
    Stack trace:\n#0 /tmp/tmpb89x3u3e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpb89x3u3e.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($x%$n==0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__sq4m9r.php:35\n\
    Stack trace:\n#0 /tmp/tmp__sq4m9r.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp__sq4m9r.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x%$n==0) return false;\n    $x=$x/$n;\n    return is_simple_power($x,\
    \ $n);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5jjrv2m4.php:25\n\
    Stack trace:\n#0 /tmp/tmp5jjrv2m4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5jjrv2m4.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    // Your code here\n}\n</code>\n<|/ a tags=php\
    \ |>\n<| c |>\nThanks for your answer. I am not allowed to use any built-in functions.\
    \ I wrote my own function but I am not able to figure out how to check if a number\
    \ is power of another number.\n<|/ c |>\n<| c |>\nI added a code example to my\
    \ answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer. I am not\
    \ allowed to use any built-in functions. I wrote my own function but I am not\
    \ able to figure out how to check if a number is power of another number.\n<|/\
    \ c |>\n<| c |>\nI added a code example to my answer. Hope it helps.\n<|/ c |>\n\
    <| c |>\nThanks for your answer. I am not allowed to use any built-in functions.\
    \ I wrote my own function but I am not able to figure out how to check if a number\
    \ is power of another number.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n<?php\n$a =\
    \ 1;\n$b = 2;\n$c = 1;\n$d = 1;\n\n$a1 = pow($a,$c);\n$a2 = pow($a,$d);\n$a3 =\
    \ pow($b,$c);\n$a4 = pow($b,$d);\n\nif($a1 == $a2 && $a2 == $a3 && $a3 == $a4){\n\
    \    echo \"True\";\n}else{\n    echo \"False\";\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqso2dcfq.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ulr3dry.php:25\n\
    Stack trace:\n#0 /tmp/tmp6ulr3dry.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6ulr3dry.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return false;\n    }\n    $x = $x * $x;\n    $y\
    \ = $x * $n;\n    $z = $y * $n;\n    if ($z == $x) {\n        return true;\n \
    \   }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy51s7je0.php:42\n\
    Stack trace:\n#0 /tmp/tmpy51s7je0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpy51s7je0.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8dxk0vj.php:44\n\
    Stack trace:\n#0 /tmp/tmpm8dxk0vj.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpm8dxk0vj.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n);\n    }\n    return false;\n}\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpranix2eu.php:41\n\
    Stack trace:\n#0 /tmp/tmpranix2eu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpranix2eu.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return false;\n    }\n    if ($n % 3 == 0) {\n \
    \       return false;\n    }\n    $x = $x * $x;\n    $x = $x * $x;\n    $x = $x\
    \ * $x;\n    return $x == $x;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnqn7ll7.php:41\n\
    Stack trace:\n#0 /tmp/tmpqnqn7ll7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqnqn7ll7.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe__i5uc9.php:44\n\
    Stack trace:\n#0 /tmp/tmpe__i5uc9.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpe__i5uc9.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==2)\
    \ {\n        return true;\n    }\n    if ($x==3) {\n        return true;\n   \
    \ }\n    if ($x==4) {\n        return true;\n    }\n    if ($x==5) {\n       \
    \ return true;\n    }\n    if ($x==6) {\n        return true;\n    }\n    if ($x==7)\
    \ {\n        return true;\n    }\n    if ($x==8) {\n        return true;\n   \
    \ }\n    if ($x==9) {\n        return true;\n    }\n    if ($x==10) {\n      \
    \  return true;\n    }\n    if ($x==11) {\n        return true;\n    }\n    if\
    \ ($x==12) {\n        return true;\n    }\n    if ($x==13) {\n        return true;\n\
    \    }\n    if ($x==14) {\n        return true;\n    }\n    if ($x==15) {\n  \
    \      return true;\n    }\n    if ($x==16) {\n        return true;\n    }\n \
    \   if ($x==17) {\n        return true;\n    }\n    if ($x==18) {\n        return\
    \ true;\n    }\n    if ($x==19) {\n        return true;\n    }\n    if ($x==20)\
    \ {\n        return true;\n    }\n    if ($x==21) {\n        return true;\n  \
    \  }\n    if ($x==22) {\n        return true;\n    }\n    if ($x==23) {\n    \
    \    return true;\n    }\n    if ($x==24) {\n        return true;\n    }\n   \
    \ if ($x==25) {\n        return true;\n    }\n    if ($x==26) {\n        return\
    \ true;\n    }\n    if ($x==27) {\n        return true;\n    }\n    if ($x==28)\
    \ {\n        return true;\n    }\n    if ($x==29) {\n        return true;\n  \
    \  }\n    if ($x==30) {\n        return true;\n    }\n    if ($x==31) {\n    \
    \    return true;\n    }\n    if ($x==32) {\n        return true;\n    }\n   \
    \ if ($x==33) {\n        return true;\n    }\n    if ($x==34) {\n        return\
    \ true;\n    }\n    if ($x==35) {\n        return true;\n    }\n    if ($x==36)\
    \ {\n        return true;\n    }\n    if ($x==37) {\n        return true;\n  \
    \  }\n    if ($x==38) {\n        return true;\n    }\n    if ($x==39) {\n    \
    \    return true;\n    }\n    if ($x==40) {\n        return true;\n    }\n   \
    \ if ($x==41) {\n        return true;\n    }\n    if ($x==42) {\n        return\
    \ true;\n    }\n    if ($x==43) {\n        return true;\n    }\n    if ($x==44)\
    \ {\n        return true;\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv12hx8bc.php on line 171\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==2) {\n        return\
    \ ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n    }\n    if ($n==4)\
    \ {\n        return ($x==1);\n    }\n    if ($n==5) {\n        return ($x==1);\n\
    \    }\n    if ($n==6) {\n        return ($x==1);\n    }\n    if ($n==7) {\n \
    \       return ($x==1);\n    }\n    if ($n==8) {\n        return ($x==1);\n  \
    \  }\n    if ($n==9) {\n        return ($x==1);\n    }\n    if ($n==10) {\n  \
    \      return ($x==1);\n    }\n    if ($n==11) {\n        return ($x==1);\n  \
    \  }\n    if ($n==12) {\n        return ($x==1);\n    }\n    if ($n==13) {\n \
    \       return ($x==1);\n    }\n    if ($n==14) {\n        return ($x==1);\n \
    \   }\n    if ($n==15) {\n        return ($x==1);\n    }\n    if ($n==16) {\n\
    \        return ($x==1);\n    }\n    if ($n==17) {\n        return ($x==1);\n\
    \    }\n    if ($n==18) {\n        return ($x==1);\n    }\n    if ($n==19) {\n\
    \        return ($x==1);\n    }\n    if ($n==20) {\n        return ($x==1);\n\
    \    }\n    if ($n==21) {\n        return ($x==1);\n    }\n    if ($n==22) {\n\
    \        return ($x==1);\n    }\n    if ($n==23) {\n        return ($x==1);\n\
    \    }\n    if ($n==24) {\n        return ($x==1);\n    }\n    if ($n==25) {\n\
    \        return ($x==1);\n    }\n    if ($n==26) {\n        return ($x==1);\n\
    \    }\n    if ($n==27) {\n        return ($x==1);\n    }\n    if ($n==28) {\n\
    \        return ($x==1);\n    }\n    if ($n==29) {\n        return ($x==1);\n\
    \    }\n    if ($n==30) {\n        return ($x==1);\n    }\n    if ($n==31) {\n\
    \        return ($x==1);\n    }\n    if ($n==32) {\n        return ($x==1);\n\
    \    }\n    if ($n==33) {\n        return ($x==1);\n    }\n    if ($n==34) {\n\
    \        return ($x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwzcooqjy.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n ** $x == $x) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc80fnqpv.php:23\n\
    Stack trace:\n#0 /tmp/tmpc80fnqpv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpc80fnqpv.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return $x==1;\n    }\n    if ($x%$n==0) {\n        return\
    \ true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplulr5g_c.php:35\n\
    Stack trace:\n#0 /tmp/tmplulr5g_c.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplulr5g_c.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsv6zpei.php:43\n\
    Stack trace:\n#0 /tmp/tmpnsv6zpei.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnsv6zpei.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n - 1);\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hv7cu2e.php:42\n\
    Stack trace:\n#0 /tmp/tmp6hv7cu2e.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6hv7cu2e.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rnkssis.php:44\n\
    Stack trace:\n#0 /tmp/tmp5rnkssis.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5rnkssis.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgtllaqu.php:44\n\
    Stack trace:\n#0 /tmp/tmppgtllaqu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmppgtllaqu.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return false;\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==1) {\n        return true;\n    }\n    if ($x<0)\
    \ {\n        return false;\n    }\n    if ($x>1) {\n        return false;\n  \
    \  }\n    if ($n==2) {\n        return true;\n    }\n    if ($n==3) {\n      \
    \  return true;\n    }\n    if ($n==4) {\n        return true;\n    }\n    if\
    \ ($n==5) {\n        return true;\n    }\n    if ($n==6) {\n        return true;\n\
    \    }\n    if ($n==7) {\n        return true;\n    }\n    if ($n==8) {\n    \
    \    return true;\n    }\n    if ($n==9) {\n        return true;\n    }\n    if\
    \ ($n==10) {\n        return true;\n    }\n    if ($n==11) {\n        return true;\n\
    \    }\n    if ($n==12) {\n        return true;\n    }\n    if ($n==13) {\n  \
    \      return true;\n    }\n    if ($n==14) {\n        return true;\n    }\n \
    \   if ($n==15) {\n        return true;\n    }\n    if ($n==16) {\n        return\
    \ true;\n    }\n    if ($n==17) {\n        return true;\n    }\n    if ($n==18)\
    \ {\n        return true;\n    }\n    if ($n==19) {\n        return true;\n  \
    \  }\n    if ($n==20) {\n        return true;\n    }\n    if ($n==21) {\n    \
    \    return true;\n    }\n    if ($n==22) {\n        return true;\n    }\n   \
    \ if ($n==23) {\n        return true;\n    }\n    if ($n==24) {\n        return\
    \ true;\n    }\n    if ($n==25) {\n        return true;\n    }\n    if ($n==26)\
    \ {\n        return true;\n    }\n    if ($n==27) {\n        return true;\n  \
    \  }\n    if ($n==28) {\n        return true;\n    }\n    if ($n==29) {\n    \
    \    return true;\n    }\n    if ($n==30) {\n        return true;\n    }\n   \
    \ if ($n==31) {\n        return true;\n    }\n    if ($n==32) {\n        return\
    \ true;\n    }\n    if ($n==33) {\n        return true;\n    }\n    if ($n==34)\
    \ {\n        return true;\n    }\n    if ($n==35) {\n        return true;\n  \
    \  }\n    if ($n==36) {\n        return true;\n    }\n    if ($n==37) {\n    \
    \    return true;\n    }\n    if ($n==38) {\n        return true;\n    }\n   \
    \ if ($n==39) {\n        return true;\n    }\n    if ($n==40) {\n        return\
    \ true;\n    }\n    if ($n==41) {\n        return true;\n    }\n    if ($n==42)\
    \ {\n        return true;\n    }\n    if ($n==\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk7r3qw11.php on line 155\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe6fm32tu.php:44\n\
    Stack trace:\n#0 /tmp/tmpe6fm32tu.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpe6fm32tu.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n);\n    }\n    return false;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you for your answer. I tried your code, but\
    \ I got an infinite loop. Can you please check my code again?\n<|/ c |>\n<| c\
    \ |>\nI edited my answer, I forgot to add `return false` at the end of `is_simple_power`\
    \ function.\n<|/ c |>\n<| c |>\nThank you for your answer. I tried your code,\
    \ but I got an infinite loop. Can you please check my code again?\n<|/ c |>\n\
    <| c |>\nI edited my answer, I forgot to add `return false` at the end of `is_simple_power`\
    \ function.\n<|/ c |>\n<| c |>\nThank you for your answer. I tried your code,\
    \ but I got an infinite loop. Can you please check my code again?\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\n<?php\n\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvfk7syd2.php on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x<0)\
    \ return false;\n    if ($n<0) return false;\n    if ($n==1) return true;\n  \
    \  if ($n==2) return true;\n    if ($n==3) return true;\n    if ($n==4) return\
    \ true;\n    if ($n==5) return true;\n    if ($n==6) return true;\n    if ($n==7)\
    \ return true;\n    if ($n==8) return true;\n    if ($n==9) return true;\n   \
    \ if ($n==10) return true;\n    if ($n==11) return true;\n    if ($n==12) return\
    \ true;\n    if ($n==13) return true;\n    if ($n==14) return true;\n    if ($n==15)\
    \ return true;\n    if ($n==16) return true;\n    if ($n==17) return true;\n \
    \   if ($n==18) return true;\n    if ($n==19) return true;\n    if ($n==20) return\
    \ true;\n    if ($n==21) return true;\n    if ($n==22) return true;\n    if ($n==23)\
    \ return true;\n    if ($n==24) return true;\n    if ($n==25) return true;\n \
    \   if ($n==26) return true;\n    if ($n==27) return true;\n    if ($n==28) return\
    \ true;\n    if ($n==29) return true;\n    if ($n==30) return true;\n    if ($n==31)\
    \ return true;\n    if ($n==32) return true;\n    if ($n==33) return true;\n \
    \   if ($n==34) return true;\n    if ($n==35) return true;\n    if ($n==36) return\
    \ true;\n    if ($n==37) return true;\n    if ($n==38) return true;\n    if ($n==39)\
    \ return true;\n    if ($n==40) return true;\n    if ($n==41) return true;\n \
    \   if ($n==42) return true;\n    if ($n==43) return true;\n    if ($n==44) return\
    \ true;\n    if ($n==45) return true;\n    if ($n==46) return true;\n    if ($n==47)\
    \ return true;\n    if ($n==48) return true;\n    if ($n==49) return true;\n \
    \   if ($n==50) return true;\n    if ($n==51) return true;\n    if ($n==52) return\
    \ true;\n    if ($n==53) return true;\n    if ($n==54) return true;\n    if ($n==55)\
    \ return true;\n    if ($n==56) return true;\n    if ($n==57) return true;\n \
    \   if ($n==58\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpojk4823y.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmq301j9q.php:44\n\
    Stack trace:\n#0 /tmp/tmpmq301j9q.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpmq301j9q.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==-1)\
    \ {\n        return false;\n    }\n    if ($x<0) {\n        return false;\n  \
    \  }\n    if ($n==-1) {\n        return false;\n    }\n    if ($n==1) {\n    \
    \    return ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n\
    \    if ($x==-1) {\n        return false;\n    }\n    if ($x<0) {\n        return\
    \ false;\n    }\n    if ($n==0) {\n        return true;\n    }\n    if ($n==1)\
    \ {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return false;\n\
    \    }\n    if ($x==-1) {\n        return false;\n    }\n    if ($x<0) {\n   \
    \     return false;\n    }\n    if ($n==-1) {\n        return false;\n    }\n\
    \    if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0) {\n        return\
    \ false;\n    }\n    if ($x==-1) {\n        return false;\n    }\n    if ($x<0)\
    \ {\n        return false;\n    }\n    if ($n==0) {\n        return true;\n  \
    \  }\n    if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0) {\n   \
    \     return false;\n    }\n    if ($x==-1) {\n        return false;\n    }\n\
    \    if ($x<0) {\n        return false;\n    }\n    if ($n==-1) {\n        return\
    \ false;\n    }\n    if ($n==1) {\n        return ($x==1);\n    }\n    if ($x==0)\
    \ {\n        return false;\n    }\n    if ($x==-1) {\n        return false;\n\
    \    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==0) {\n    \
    \    return true;\n    }\n    if ($n==1) {\n        return ($x==1);\n    }\n \
    \   if ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n        return\
    \ false;\n    }\n    if ($x<0) {\n        return false;\n    }\n    if ($n==-1)\
    \ {\n        return false;\n    }\n    if ($n==1) {\n        return ($x==1);\n\
    \    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==-1) {\n  \
    \      return false;\n    }\n    if ($x<0) {\n        return false;\n    }\n \
    \   if ($n==0) {\n        return true;\n    }\n    if ($n==1) {\n        return\
    \ ($x==1);\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==-1)\
    \ {\n        return false;\n    }\n    if ($x<0) {\n        return false;\n  \
    \  }\n    if ($n==-1) {\n        return false;\n    }\n    if ($n==1) {\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph9u9llvl.php on line 173\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return $x==1;\n    }\n    if ($n==2) {\n        return\
    \ $x==1;\n    }\n    if ($n==3) {\n        return $x==1;\n    }\n    if ($n==4)\
    \ {\n        return $x==1;\n    }\n    if ($n==5) {\n        return $x==1;\n \
    \   }\n    if ($n==6) {\n        return $x==1;\n    }\n    if ($n==7) {\n    \
    \    return $x==1;\n    }\n    if ($n==8) {\n        return $x==1;\n    }\n  \
    \  if ($n==9) {\n        return $x==1;\n    }\n    if ($n==10) {\n        return\
    \ $x==1;\n    }\n    if ($n==11) {\n        return $x==1;\n    }\n    if ($n==12)\
    \ {\n        return $x==1;\n    }\n    if ($n==13) {\n        return $x==1;\n\
    \    }\n    if ($n==14) {\n        return $x==1;\n    }\n    if ($n==15) {\n \
    \       return $x==1;\n    }\n    if ($n==16) {\n        return $x==1;\n    }\n\
    \    if ($n==17) {\n        return $x==1;\n    }\n    if ($n==18) {\n        return\
    \ $x==1;\n    }\n    if ($n==19) {\n        return $x==1;\n    }\n    if ($n==20)\
    \ {\n        return $x==1;\n    }\n    if ($n==21) {\n        return $x==1;\n\
    \    }\n    if ($n==22) {\n        return $x==1;\n    }\n    if ($n==23) {\n \
    \       return $x==1;\n    }\n    if ($n==24) {\n        return $x==1;\n    }\n\
    \    if ($n==25) {\n        return $x==1;\n    }\n    if ($n==26) {\n        return\
    \ $x==1;\n    }\n    if ($n==27) {\n        return $x==1;\n    }\n    if ($n==28)\
    \ {\n        return $x==1;\n    }\n    if ($n==29) {\n        return $x==1;\n\
    \    }\n    if ($n==30) {\n        return $x==1;\n    }\n    if ($n==31) {\n \
    \       return $x==1;\n    }\n    if ($n==32) {\n        return $x==1;\n    }\n\
    \    if ($n==33) {\n        return $x==1;\n    }\n    if ($n==34) {\n        return\
    \ $x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxz_btxn_.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0rxpnlj6.php:44\n\
    Stack trace:\n#0 /tmp/tmp0rxpnlj6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0rxpnlj6.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbkm3hiyb.php:41\n\
    Stack trace:\n#0 /tmp/tmpbkm3hiyb.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpbkm3hiyb.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    // Your code here\n}\n</cell>\n<cell>\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg9b2s3xm.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==2) {\n        return\
    \ ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n    }\n    if ($n==4)\
    \ {\n        return ($x==1);\n    }\n    if ($n==5) {\n        return ($x==1);\n\
    \    }\n    if ($n==6) {\n        return ($x==1);\n    }\n    if ($n==7) {\n \
    \       return ($x==1);\n    }\n    if ($n==8) {\n        return ($x==1);\n  \
    \  }\n    if ($n==9) {\n        return ($x==1);\n    }\n    if ($n==10) {\n  \
    \      return ($x==1);\n    }\n    if ($n==11) {\n        return ($x==1);\n  \
    \  }\n    if ($n==12) {\n        return ($x==1);\n    }\n    if ($n==13) {\n \
    \       return ($x==1);\n    }\n    if ($n==14) {\n        return ($x==1);\n \
    \   }\n    if ($n==15) {\n        return ($x==1);\n    }\n    if ($n==16) {\n\
    \        return ($x==1);\n    }\n    if ($n==17) {\n        return ($x==1);\n\
    \    }\n    if ($n==18) {\n        return ($x==1);\n    }\n    if ($n==19) {\n\
    \        return ($x==1);\n    }\n    if ($n==20) {\n        return ($x==1);\n\
    \    }\n    if ($n==21) {\n        return ($x==1);\n    }\n    if ($n==22) {\n\
    \        return ($x==1);\n    }\n    if ($n==23) {\n        return ($x==1);\n\
    \    }\n    if ($n==24) {\n        return ($x==1);\n    }\n    if ($n==25) {\n\
    \        return ($x==1);\n    }\n    if ($n==26) {\n        return ($x==1);\n\
    \    }\n    if ($n==27) {\n        return ($x==1);\n    }\n    if ($n==28) {\n\
    \        return ($x==1);\n    }\n    if ($n==29) {\n        return ($x==1);\n\
    \    }\n    if ($n==30) {\n        return ($x==1);\n    }\n    if ($n==31) {\n\
    \        return ($x==1);\n    }\n    if ($n==32) {\n        return ($x==1);\n\
    \    }\n    if ($n==33) {\n        return ($x==1);\n    }\n    if ($n==34) {\n\
    \        return ($x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpz7hljx8m.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($n % 2 == 0) {\n     \
    \   return is_simple_power($x / 2, $n - 1);\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj580olo1.php:42\n\
    Stack trace:\n#0 /tmp/tmpj580olo1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpj580olo1.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxfubdjhz.php:34\n\
    Stack trace:\n#0 /tmp/tmpxfubdjhz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxfubdjhz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwhlt1q3.php:44\n\
    Stack trace:\n#0 /tmp/tmpdwhlt1q3.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpdwhlt1q3.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return false;\n    if ($n==1) return\
    \ true;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return true;\n    return false;\n}\nfunction candidate(...$args) {\n    return\
    \ is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiserjcnj.php:30\n\
    Stack trace:\n#0 /tmp/tmpiserjcnj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpiserjcnj.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x<0)\
    \ return false;\n    if ($n<0) return false;\n    if ($n==1) return true;\n  \
    \  if ($n==2) return true;\n    if ($x<$n) return true;\n    if ($x>$n) return\
    \ false;\n    $y=$x;\n    while ($y>1) {\n        $y=$y/$n;\n        if ($y==1)\
    \ return true;\n        if ($y==0) return false;\n    }\n    return false;\n}\n\
    function candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vurtmro.php:39\n\
    Stack trace:\n#0 /tmp/tmp2vurtmro.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2vurtmro.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return $x==1;\n    }\n    if ($x==1) {\n        return\
    \ true;\n    }\n    if ($x==0) {\n        return false;\n    }\n    if ($x==$n-1)\
    \ {\n        return true;\n    }\n    if ($x%$n==0) {\n        return true;\n\
    \    }\n    return false;\n}\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qu8v6lp.php:43\n\
    Stack trace:\n#0 /tmp/tmp0qu8v6lp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp0qu8v6lp.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return $x==1;\n    }\n    if ($n==2) {\n        return\
    \ $x==1;\n    }\n    if ($n==3) {\n        return $x==1;\n    }\n    if ($n==4)\
    \ {\n        return $x==1;\n    }\n    if ($n==5) {\n        return $x==1;\n \
    \   }\n    if ($n==6) {\n        return $x==1;\n    }\n    if ($n==7) {\n    \
    \    return $x==1;\n    }\n    if ($n==8) {\n        return $x==1;\n    }\n  \
    \  if ($n==9) {\n        return $x==1;\n    }\n    if ($n==10) {\n        return\
    \ $x==1;\n    }\n    if ($n==11) {\n        return $x==1;\n    }\n    if ($n==12)\
    \ {\n        return $x==1;\n    }\n    if ($n==13) {\n        return $x==1;\n\
    \    }\n    if ($n==14) {\n        return $x==1;\n    }\n    if ($n==15) {\n \
    \       return $x==1;\n    }\n    if ($n==16) {\n        return $x==1;\n    }\n\
    \    if ($n==17) {\n        return $x==1;\n    }\n    if ($n==18) {\n        return\
    \ $x==1;\n    }\n    if ($n==19) {\n        return $x==1;\n    }\n    if ($n==20)\
    \ {\n        return $x==1;\n    }\n    if ($n==21) {\n        return $x==1;\n\
    \    }\n    if ($n==22) {\n        return $x==1;\n    }\n    if ($n==23) {\n \
    \       return $x==1;\n    }\n    if ($n==24) {\n        return $x==1;\n    }\n\
    \    if ($n==25) {\n        return $x==1;\n    }\n    if ($n==26) {\n        return\
    \ $x==1;\n    }\n    if ($n==27) {\n        return $x==1;\n    }\n    if ($n==28)\
    \ {\n        return $x==1;\n    }\n    if ($n==29) {\n        return $x==1;\n\
    \    }\n    if ($n==30) {\n        return $x==1;\n    }\n    if ($n==31) {\n \
    \       return $x==1;\n    }\n    if ($n==32) {\n        return $x==1;\n    }\n\
    \    if ($n==33) {\n        return $x==1;\n    }\n    if ($n==34) {\n        return\
    \ $x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjyn6xgb7.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x%$n==0)\
    \ return false;\n    return is_simple_power($x/$n, $n);\n}\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0i0z57fk.php:25\n\
    Stack trace:\n#0 /tmp/tmp0i0z57fk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0i0z57fk.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp5farzyv.php:41\n\
    Stack trace:\n#0 /tmp/tmpp5farzyv.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpp5farzyv.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuigc46k7.php:41\n\
    Stack trace:\n#0 /tmp/tmpuigc46k7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpuigc46k7.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n - 1);\n    }\n\
    \    return is_simple_power($x, $n - 1);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2y1ie_jz.php:37\n\
    Stack trace:\n#0 /tmp/tmp2y1ie_jz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp2y1ie_jz.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) return true;\n    if ($n==1) return\
    \ false;\n    if ($x==0) return false;\n    if ($x==1) return true;\n    if ($x==2)\
    \ return true;\n    if ($x==3) return true;\n    if ($x==4) return true;\n   \
    \ if ($x==5) return true;\n    if ($x==6) return true;\n    if ($x==7) return\
    \ true;\n    if ($x==8) return true;\n    if ($x==9) return true;\n    if ($x==10)\
    \ return true;\n    if ($x==11) return true;\n    if ($x==12) return true;\n \
    \   if ($x==13) return true;\n    if ($x==14) return true;\n    if ($x==15) return\
    \ true;\n    if ($x==16) return true;\n    if ($x==17) return true;\n    if ($x==18)\
    \ return true;\n    if ($x==19) return true;\n    if ($x==20) return true;\n \
    \   if ($x==21) return true;\n    if ($x==22) return true;\n    if ($x==23) return\
    \ true;\n    if ($x==24) return true;\n    if ($x==25) return true;\n    if ($x==26)\
    \ return true;\n    if ($x==27) return true;\n    if ($x==28) return true;\n \
    \   if ($x==29) return true;\n    if ($x==30) return true;\n    if ($x==31) return\
    \ true;\n    if ($x==32) return true;\n    if ($x==33) return true;\n    if ($x==34)\
    \ return true;\n    if ($x==35) return true;\n    if ($x==36) return true;\n \
    \   if ($x==37) return true;\n    if ($x==38) return true;\n    if ($x==39) return\
    \ true;\n    if ($x==40) return true;\n    if ($x==41) return true;\n    if ($x==42)\
    \ return true;\n    if ($x==43) return true;\n    if ($x==44) return true;\n \
    \   if ($x==45) return true;\n    if ($x==46) return true;\n    if ($x==47) return\
    \ true;\n    if ($x==48) return true;\n    if ($x==49) return true;\n    if ($x==50)\
    \ return true;\n    if ($x==51) return true;\n    if ($x==52) return true;\n \
    \   if ($x==53) return true;\n    if ($x==54) return true;\n    if ($x==55) return\
    \ true;\n    if ($x==56) return true;\n    if ($x==57) return true;\n    if ($x==58)\
    \ return true;\n    if ($x==59) return true;\n    if ($x==60) return true;\n \
    \   if ($x==6\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp73_83rnf.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($n % 2 == 0) {\n        return is_simple_power($x / 2, $n);\n    }\n   \
    \ if ($n % 2 == 1) {\n        return false;\n    }\n    return is_simple_power($x\
    \ / 2, $n - 1);\n}\n\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0fkzamqk.php:42\n\
    Stack trace:\n#0 /tmp/tmp0fkzamqk.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp0fkzamqk.php\
    \ on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x == $n) {\n        return true;\n    }\n    if ($x % $n == 0) {\n    \
    \    return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(16, 2) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(143214, 16) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ewfqb1a.php:44\n\
    Stack trace:\n#0 /tmp/tmp6ewfqb1a.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6ewfqb1a.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($x == 1) {\n        return true;\n    }\n\
    \    if ($x == 0) {\n        return false;\n    }\n    if ($n == 0) {\n      \
    \  return false;\n    }\n    if ($n == 1) {\n        return true;\n    }\n   \
    \ if ($x % $n == 0) {\n        return true;\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_simple_power(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3vl5pmnx.php:41\n\
    Stack trace:\n#0 /tmp/tmp3vl5pmnx.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3vl5pmnx.php\
    \ on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($n==2) {\n        return\
    \ ($x==1);\n    }\n    if ($n==3) {\n        return ($x==1);\n    }\n    if ($n==4)\
    \ {\n        return ($x==1);\n    }\n    if ($n==5) {\n        return ($x==1);\n\
    \    }\n    if ($n==6) {\n        return ($x==1);\n    }\n    if ($n==7) {\n \
    \       return ($x==1);\n    }\n    if ($n==8) {\n        return ($x==1);\n  \
    \  }\n    if ($n==9) {\n        return ($x==1);\n    }\n    if ($n==10) {\n  \
    \      return ($x==1);\n    }\n    if ($n==11) {\n        return ($x==1);\n  \
    \  }\n    if ($n==12) {\n        return ($x==1);\n    }\n    if ($n==13) {\n \
    \       return ($x==1);\n    }\n    if ($n==14) {\n        return ($x==1);\n \
    \   }\n    if ($n==15) {\n        return ($x==1);\n    }\n    if ($n==16) {\n\
    \        return ($x==1);\n    }\n    if ($n==17) {\n        return ($x==1);\n\
    \    }\n    if ($n==18) {\n        return ($x==1);\n    }\n    if ($n==19) {\n\
    \        return ($x==1);\n    }\n    if ($n==20) {\n        return ($x==1);\n\
    \    }\n    if ($n==21) {\n        return ($x==1);\n    }\n    if ($n==22) {\n\
    \        return ($x==1);\n    }\n    if ($n==23) {\n        return ($x==1);\n\
    \    }\n    if ($n==24) {\n        return ($x==1);\n    }\n    if ($n==25) {\n\
    \        return ($x==1);\n    }\n    if ($n==26) {\n        return ($x==1);\n\
    \    }\n    if ($n==27) {\n        return ($x==1);\n    }\n    if ($n==28) {\n\
    \        return ($x==1);\n    }\n    if ($n==29) {\n        return ($x==1);\n\
    \    }\n    if ($n==30) {\n        return ($x==1);\n    }\n    if ($n==31) {\n\
    \        return ($x==1);\n    }\n    if ($n==32) {\n        return ($x==1);\n\
    \    }\n    if ($n==33) {\n        return ($x==1);\n    }\n    if ($n==34) {\n\
    \        return ($x==\nfunction candidate(...$args) {\n    return is_simple_power(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(16, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(143214, 16) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4, 2) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(9, 3) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(16, 4) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(24, 2) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(128, 4) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(12, 6) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1, 12) !== true) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0f20v40d.php on line 117\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl42jcatk.php:35\n\
    Stack trace:\n#0 /tmp/tmpl42jcatk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl42jcatk.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Your task is to write a function that returns true if a number\
    \ x is a simple\n// power of n and false in other cases.\n// x is a simple power\
    \ of n if n**int=x\n// For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2,\
    \ 2) => true\n// is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n\
    // is_simple_power(3, 1) => false\n// is_simple_power(5, 3) => false\nfunction\
    \ is_simple_power($x, $n) {\n    if ($n==0) {\n        return true;\n    }\n \
    \   if ($n==1) {\n        return ($x==1);\n    }\n    if ($x%$n==0) {\n      \
    \  return true;\n    }\n    return false;\n}\n\nfunction candidate(...$args) {\n\
    \    return is_simple_power(...$args);\n}\n\nfunction test(): void {\n    if (candidate(16,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(143214,\
    \ 16) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4,\
    \ 2) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(9,\
    \ 3) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(16,\
    \ 4) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(24,\
    \ 2) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(128,\
    \ 4) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12,\
    \ 6) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 1) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1,\
    \ 12) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt3tshus3.php:35\n\
    Stack trace:\n#0 /tmp/tmpt3tshus3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpt3tshus3.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
