name: HumanEval_97_multiply
language: php
results:
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b + $b * 10 + $b * 100;\n    }\n    if ($b < 1000) {\n\
    \        return $a * $b + $b * 10 + $b * 100 + $b * 1000;\n    }\n    if ($b <\
    \ 10000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000;\n\
    \    }\n    if ($b < 100000) {\n        return $a * $b + $b * 10 + $b * 100 +\
    \ $b * 1000 + $b * 10000 + $b * 100000;\n    }\n    if ($b < 1000000) {\n    \
    \    return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ +\n            $b * 1000000;\n    }\n    if ($b < 10000000) {\n        return\
    \ $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 +\n    \
    \        $b * 1000000 + $b * 10000000;\n    }\n    if ($b < 100000000) {\n   \
    \     return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ +\n            $b * 1000000 + $b * 10000000 + $b * 100000000 + $b * 1000000000;\n\
    \    }\n    if ($b < 1000000000) {\n        return $a * $b + $b * 10 + $b * 100\
    \ + $b * 1000 + $b * 10000 + $b * 100000 +\n            $b * 1000000 + $b * 10000000\
    \ + $b * 100000000 + $b * 1000000000 +\n            $b * 10000000000 + $b * 100000000000;\n\
    \    }\n    if ($b < 100000000000) {\n        return $a * $b + $b * 10 + $b *\
    \ 100 + $b * 1000 + $b * 10000 + $b * 100000 +\n            $b * 1000000 + $b\
    \ * 10000000 + $b * 100000000 + $b * 1000000000 +\n            $b * 10000000000\
    \ + $b * 100000000000 + $b * 1000000000000;\n    }\n    if ($b < 1000000000000)\
    \ {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b\
    \ * 100000 +\n            $b * 1000000 + $b * 10000000 + $b * 100000000 + $b *\
    \ 1000000000 +\n            $b * \nfunction candidate(...$args) {\n    return\
    \ multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412)\
    \ !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28)\
    \ !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0bph_e9n.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum += $a[$i] * $b[$i];\n \
    \   }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lltw82z.php:23\n\
    Stack trace:\n#0 /tmp/tmp9lltw82z.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp9lltw82z.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum = $sum + $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb5__m3vq.php:24\n\
    Stack trace:\n#0 /tmp/tmpb5__m3vq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb5__m3vq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a > $b) {\n        $temp =\
    \ $a;\n        $a = $b;\n        $b = $temp;\n    }\n    $unitDigits = array();\n\
    \    $unitDigits[$a%10] = 1;\n    $unitDigits[($a/10)%10] = 1;\n    $unitDigits[($a/100)%10]\
    \ = 1;\n    $unitDigits[($a/1000)%10] = 1;\n    $unitDigits[($a/10000)%10] = 1;\n\
    \    $unitDigits[($a/100000)%10] = 1;\n    $unitDigits[($a/1000000)%10] = 1;\n\
    \    $unitDigits[($a/10000000)%10] = 1;\n    $unitDigits[($a/100000000)%10] =\
    \ 1;\n    $unitDigits[($a/1000000000)%10] = 1;\n    $unitDigits[($a/10000000000)%10]\
    \ = 1;\n    $unitDigits[($a/100000000000)%10] = 1;\n    $unitDigits[($a/1000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/10000000000000)%10] = 1;\n    $unitDigits[($a/1000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/10000000000000000)%10] = 1;\n    $unitDigits[($a/100000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/1000000000000000000)%10] = 1;\n    $unitDigits[($a/10000000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/100000000000000000000)%10] = 1;\n    $unitDigits[($a/1000000000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/10000000000000000000000)%10] = 1;\n    $unitDigits[($a/1000000000000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/10000000000000000000000000)%10] = 1;\n    $unitDigits[($a/100000000000000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/1000000000000000000000000000)%10] = 1;\n    $unitDigits[($a/10000000000000000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/100000000000000000000000000000)%10] = 1;\n    $unitDigits[($a/10000000000000000000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/100000000000000000000000000000000)%10] = 1;\n    $unitDigits[($a/1000000000000000000000000000000000)%10]\
    \ = 1;\n    $unitDigits[($a/10000000000000000000000000000000000)%10] = 1;\n  \
    \  $unitDigits[($a/100000000000000000000000000000000000)%10] = 1;\n    $unitDigits[($a/100000000000000000000000000\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe7muocn8.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b + $b * 10 + $b * 100;\n    }\n    if ($b < 1000) {\n\
    \        return $a * $b + $b * 10 + $b * 100 + $b * 1000;\n    }\n    if ($b <\
    \ 10000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000;\n\
    \    }\n    if ($b < 100000) {\n        return $a * $b + $b * 10 + $b * 100 +\
    \ $b * 1000 + $b * 10000 + $b * 100000;\n    }\n    if ($b < 1000000) {\n    \
    \    return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ + $b * 1000000;\n    }\n    if ($b < 10000000) {\n        return $a * $b + $b\
    \ * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000 + $b *\
    \ 10000000;\n    }\n    if ($b < 100000000) {\n        return $a * $b + $b * 10\
    \ + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000 + $b * 10000000\
    \ + $b * 100000000 + $b * 1000000000;\n    }\n    if ($b < 1000000000) {\n   \
    \     return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ + $b * 1000000 + $b * 10000000 + $b * 100000000 + $b * 1000000000 + $b * 10000000000\
    \ + $b * 100000000000;\n    }\n    if ($b < 100000000000) {\n        return $a\
    \ * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000\
    \ + $b * 10000000 + $b * 100000000 + $b * 1000000000 + $b * 10000000000 + $b *\
    \ 100000000000 + $b * 1000000000000 + $b * 10000000000000;\n    }\n    if ($b\
    \ < 1000000000000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000\
    \ + $b * 10000 + $b * 100000 + $b * 1000000 + $b * 10000000 + $b * 100000000 +\
    \ $b * 1000000000 + $b * 10000000000 + $b * 100000000000 + $b * 1000000000000\
    \ + $b * 10000000000000 + \nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb8uv97a9.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    if ($a <\
    \ 0 || $b < 0) {\n        return 0;\n    }\n    $sum = 0;\n    $carry = 1;\n \
    \   while ($a || $b) {\n        $sum = $sum + $carry * ($a % 10);\n        $a\
    \ = $a / 10;\n        $carry = $carry / 10;\n        $b = $b / 10;\n    }\n  \
    \  return $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4k4gdcs.php:30\n\
    Stack trace:\n#0 /tmp/tmpk4k4gdcs.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk4k4gdcs.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $product = 0;\n    while ($a > 0) {\n\
    \        $product = $product * 10;\n        $a = $a % 10;\n        $b = $b % 10;\n\
    \    }\n    $product = $product + $b;\n    return $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum = $sum + $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9p0uwr_.php:24\n\
    Stack trace:\n#0 /tmp/tmph9p0uwr_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmph9p0uwr_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit in each number and add them to the product.\n    for($i =\
    \ 0; $i < strlen($a); $i++) {\n        $product += $a{$i} * $b{$i};\n    }\n \
    \   \n    // If the product is negative, return 0.\n    if($product < 0) {\n \
    \       return 0;\n    }\n    \n    // If the product is positive, return the\
    \ product.\n    return $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412)\
    \ !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28)\
    \ !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67ye4k9c.php:32\n\
    Stack trace:\n#0 /tmp/tmp67ye4k9c.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp67ye4k9c.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $sum = 0;\n    $digits = str_split($a,\
    \ 1);\n    $digits2 = str_split($b, 1);\n    foreach ($digits as $key => $value)\
    \ {\n        $sum += $value * $digits2[$key];\n    }\n    return $sum;\n}\n\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw1h9bh0.php:28\n\
    Stack trace:\n#0 /tmp/tmpcw1h9bh0.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpcw1h9bh0.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    return $a * $b\
    \ + $b * 10 + $b * 100;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphpbpzf4n.php:28\n\
    Stack trace:\n#0 /tmp/tmphpbpzf4n.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphpbpzf4n.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    while\
    \ ($a > 0) {\n        $product += ($a % 10);\n        $a = floor($a / 10);\n \
    \   }\n    while ($b > 0) {\n        $product += ($b % 10);\n        $b = floor($b\
    \ / 10);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n \
    \   return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphzlrllnu.php:32\n\
    Stack trace:\n#0 /tmp/tmphzlrllnu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmphzlrllnu.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum += $a[$i] * $b[$i];\n \
    \   }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvg6zqdt1.php:24\n\
    Stack trace:\n#0 /tmp/tmpvg6zqdt1.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvg6zqdt1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a > $b) {\n        $temp = $a;\n        $a = $b;\n\
    \        $b = $temp;\n    }\n    $product = 0;\n    $unitDigits = array();\n \
    \   $unitDigits[$a%10] = 1;\n    $unitDigits[$b%10] = 1;\n    foreach ($unitDigits\
    \ as $key => $value) {\n        if ($value == 1) {\n            $product += $key;\n\
    \        }\n    }\n    return $product;\n}\nfunction candidate(...$args) {\n \
    \   return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmposprvalh.php:35\n\
    Stack trace:\n#0 /tmp/tmposprvalh.php(45): test()\n#1 {main}\n  thrown in /tmp/tmposprvalh.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum = $sum + $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9gbt3p6.php:24\n\
    Stack trace:\n#0 /tmp/tmpz9gbt3p6.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpz9gbt3p6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b * 10;\n    }\n    if ($b < 100) {\n \
    \       return $a * $b * 100 + $b * 10;\n    }\n    if ($b < 1000) {\n       \
    \ return $a * $b * 1000 + $b * 100 + $b * 10;\n    }\n    if ($b < 10000) {\n\
    \        return $a * $b * 10000 + $b * 1000 + $b * 100 + $b * 10;\n    }\n   \
    \ if ($b < 100000) {\n        return $a * $b * 100000 + $b * 10000 + $b * 1000\
    \ + $b * 100 + $b * 10;\n    }\n    if ($b < 1000000) {\n        return $a * $b\
    \ * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b *\
    \ 1;\n    }\n    if ($b < 10000000) {\n        return $a * $b * 10000000 + $b\
    \ * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b *\
    \ 1 + $b * 0.1;\n    }\n    if ($b < 100000000) {\n        return $a * $b * 100000000\
    \ + $b * 10000000 + $b * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b *\
    \ 100 + $b * 10 + $b * 1 + $b * 0.01 + $b * 0.001;\n    }\n    if ($b < 1000000000)\
    \ {\n        return $a * $b * 1000000000 + $b * 100000000 + $b * 10000000 + $b\
    \ * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b *\
    \ 1 + $b * 0.01 + $b * 0.001 + $b * 0.0001;\n    }\n    if ($b < 10000000000)\
    \ {\n        return $a * $b * 10000000000 + $b * 1000000000 + $b * 100000000 +\
    \ $b * 10000000 + $b * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100\
    \ + $b * 10 + $b * 1 + $b * 0.01 + $b * 0.001 + $b * 0.0001 + $b * 0.00001;\n\
    \    }\n    if ($b < 100000000000) {\n        return $a * $b * 100000000000 +\
    \ $b * 10000000000 + $b * 1000000000 + $b * 100000000 + $b * 10000000 + $b * 1000000\
    \ + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b * 1 + $b *\
    \ 0.01 + $b * 0.00\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpax9mznwu.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i=0;$i<strlen($a);$i++){\n        $sum+=$a[$i]*$b[$i];\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvxl52e_q.php:24\n\
    Stack trace:\n#0 /tmp/tmpvxl52e_q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpvxl52e_q.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * $a;\n    }\n    $c = $a * $b +\
    \ $b * $a;\n    if ($c >= 10) {\n        return 0;\n    }\n    return $c;\n}\n\
    \nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4zh7ayu.php:32\n\
    Stack trace:\n#0 /tmp/tmph4zh7ayu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmph4zh7ayu.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    return $a * $b\
    \ + $b * 10 + $b * 100;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpykevsmib.php:28\n\
    Stack trace:\n#0 /tmp/tmpykevsmib.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpykevsmib.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $product = 0;\n    while ($a > 0) {\n\
    \        $product += ($a % 10);\n        $a = floor($a / 10);\n    }\n    while\
    \ ($b > 0) {\n        $product += ($b % 10);\n        $b = floor($b / 10);\n \
    \   }\n    return $product;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4507pk_.php:30\n\
    Stack trace:\n#0 /tmp/tmpi4507pk_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpi4507pk_.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $product\
    \ = 0;\n    for($i = 0; $i < strlen($a); $i++){\n        $product += $a[$i] *\
    \ $b[$i];\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n\
    \    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppe2c229a.php:24\n\
    Stack trace:\n#0 /tmp/tmppe2c229a.php(34): test()\n#1 {main}\n  thrown in /tmp/tmppe2c229a.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $result = 0;\n    while\
    \ ($a > 0) {\n        $result = $result * 10 + $a % 10;\n        $a = floor($a\
    \ / 10);\n    }\n    while ($b > 0) {\n        $result = $result * 10 + $b % 10;\n\
    \        $b = floor($b / 10);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rk6ad4a.php:32\n\
    Stack trace:\n#0 /tmp/tmp7rk6ad4a.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp7rk6ad4a.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit in the first number\n    for($i = 0; $i < strlen($a); $i++)\
    \ {\n        // Add the value of the current digit to the product\n        $product\
    \ += $a[$i] * $b[$i];\n    }\n    \n    // Return the product\n    return $product;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa7m0v2tk.php:28\n\
    Stack trace:\n#0 /tmp/tmpa7m0v2tk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpa7m0v2tk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a === 0 || $b === 0) {\n \
    \       return 0;\n    }\n    return ($a < 0) ? $a * -1 : $a * $b / gcd($a, $b);\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function gcd() in /tmp/tmpkfpzew53.php:14\n\
    Stack trace:\n#0 /tmp/tmpkfpzew53.php(18): multiply(148, 412)\n#1 /tmp/tmpkfpzew53.php(22):\
    \ candidate(148, 412)\n#2 /tmp/tmpkfpzew53.php(32): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpkfpzew53.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    return $a * $b\
    \ + $b * 10 + $b * 100;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi4x05pkx.php:28\n\
    Stack trace:\n#0 /tmp/tmpi4x05pkx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpi4x05pkx.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a > $b) {\n        return 0;\n    }\n    if ($a\
    \ == 0) {\n        return 0;\n    }\n    if ($b == 0) {\n        return 0;\n \
    \   }\n    $product = 0;\n    $unitDigits = $a % 10;\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 4 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 4 ? 1 : 0);\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkv1508a3.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    while($a\
    \ > 0) {\n        $product += ($a % 10);\n        $a = floor($a/10);\n    }\n\
    \    \n    while($b > 0) {\n        $product += ($b % 10);\n        $b = floor($b/10);\n\
    \    }\n    \n    return $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412)\
    \ !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28)\
    \ !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy5vu_uev.php:31\n\
    Stack trace:\n#0 /tmp/tmpy5vu_uev.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpy5vu_uev.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    if ($a > $b) {\n        echo \"Invalid\
    \ input\";\n    }\n    $unitDigits = $a % 10;\n    $tens = $a / 10;\n    $unitTens\
    \ = $tens % 10;\n    $units = $tens / 10;\n    $unitTensDigits = $unitTens % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n    $units = $units / 10;\n\
    \    $units = $units % 10;\n    $units = $units / 10;\n    $units = $units % 10;\n\
    \    $units = $units / 10;\n    $units = $units % 10;\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmbnawxtf.php on line 100\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $result = 0;\n    while ($a > 0) {\n \
    \       $result = $result * 10 + $a % 10;\n        $a = floor($a / 10);\n    }\n\
    \    while ($b > 0) {\n        $result = $result * 10 + $b % 10;\n        $b =\
    \ floor($b / 10);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpru1apg4r.php:31\n\
    Stack trace:\n#0 /tmp/tmpru1apg4r.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpru1apg4r.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new \\InvalidArgumentException(\"Invalid input\");\n    }\n    $product\
    \ = 0;\n    $unitDigits = $a % 10;\n    $unitDigits = $unitDigits < 0 ? $unitDigits\
    \ + 10 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? \nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpci2rgdja.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    $unitDigits = $a < 10 ? $a : 10;\n\
    \    $unitDigits += $b < 10 ? $b : 10;\n    while ($unitDigits > 0) {\n      \
    \  $product += $unitDigits % 10;\n        $unitDigits /= 10;\n    }\n    return\
    \ $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63v_pavq.php:29\n\
    Stack trace:\n#0 /tmp/tmp63v_pavq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp63v_pavq.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $sum = 0;\n    for($i = 0; $i <\
    \ strlen($a); $i++) {\n        $sum += $a[$i] * $b[$i];\n    }\n    return $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3z5yw4x0.php:23\n\
    Stack trace:\n#0 /tmp/tmp3z5yw4x0.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp3z5yw4x0.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    if ($a < 10) {\n       \
    \ return $b * $a;\n    }\n    if ($b < 10) {\n        return $a * $b;\n    }\n\
    \    if ($a < 100) {\n        return $a * $b + $a * multiply($a - 10, $b - 10);\n\
    \    }\n    if ($b < 100) {\n        return $a * $a + $b * multiply($a - 10, $b\
    \ - 10);\n    }\n    if ($a < 1000) {\n        return $a * $b + $a * multiply($a\
    \ - 100, $b - 100);\n    }\n    if ($b < 1000) {\n        return $a * $a + $b\
    \ * multiply($a - 100, $b - 100);\n    }\n    if ($a < 10000) {\n        return\
    \ $a * $b + $a * multiply($a - 1000, $b - 1000);\n    }\n    if ($b < 10000) {\n\
    \        return $a * $a + $b * multiply($a - 1000, $b - 1000);\n    }\n    if\
    \ ($a < 100000) {\n        return $a * $b + $a * multiply($a - 10000, $b - 10000);\n\
    \    }\n    if ($b < 100000) {\n        return $a * $a + $b * multiply($a - 10000,\
    \ $b - 10000);\n    }\n    if ($a < 1000000) {\n        return $a * $b + $a *\
    \ multiply($a - 100000, $b - 100000);\n    }\n    if ($b < 1000000) {\n      \
    \  return $a * $a + $b * multiply($a - 1000000, $b - 1000000);\n    }\n    if\
    \ ($a < 10000000) {\n        return $a * $b + $a * multiply($a - 10000000, $b\
    \ - 10000000);\n    }\n    if ($b < 10000000) {\n        return $a * $a + $b *\
    \ multiply($a - 100000000, $b - 100000000);\n    }\n    if ($a < 100000000) {\n\
    \        return $a * $b + $a * multiply($a - 1000000000, $b - 1000000000);\n \
    \   }\n    if ($b < 100000000) {\n        return $a * $a + $b * multiply($a -\
    \ 10000000000, $b - 10000000000);\n    }\n    if ($a < 1000000000) {\n       \
    \ return $a * $b + $a * multiply($a - 100000000000, $b - 100000000000);\n    }\n\
    \    if ($b < 1000000000) {\n        return $a * $a + $b * multiply($a - 1000000000000,\
    \ $b - 1000000000000);\n    }\n    if ($a < 10000000000) {\n        return $a\
    \ * $b + $a * multiply($a - 10000000000000, $b - 100\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpajbh5bar.php on line 70\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    if ($a < 10) {\n       \
    \ return $a * $b;\n    }\n    $result = 0;\n    $remainder = $a % 10;\n    $a\
    \ = $a / 10;\n    $b = $b / 10;\n    while ($a > 0) {\n        $result = $result\
    \ * 10 + $remainder;\n        $remainder = $remainder * 10 + $b;\n        $a =\
    \ $a / 10;\n        $b = $b / 10;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39crxig7.php:35\n\
    Stack trace:\n#0 /tmp/tmp39crxig7.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp39crxig7.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++) {\n        $sum += $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjb_r5302.php:24\n\
    Stack trace:\n#0 /tmp/tmpjb_r5302.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjb_r5302.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a > $b) {\n        return\
    \ 0;\n    }\n    $unitDigits = $a % 10;\n    $unitDigits = $unitDigits + ($unitDigits\
    \ < 5 ? 1 : 0);\n    $unitDigits = $unitDigits * $b;\n    return $unitDigits;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2nu8g0rc.php:25\n\
    Stack trace:\n#0 /tmp/tmp2nu8g0rc.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp2nu8g0rc.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit in each number\n    for($i = 0; $i < strlen($a); $i++) {\n\
    \        $product += $a{$i} * $b{$i};\n    }\n    \n    return $product;\n}\n\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2lfe5d4.php:26\n\
    Stack trace:\n#0 /tmp/tmpi2lfe5d4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpi2lfe5d4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    $unitDigits\
    \ = array();\n    $unitDigits[0] = $a;\n    $unitDigits[1] = $b;\n    $unitDigits[2]\
    \ = 0;\n    $unitDigits[3] = 1;\n    $unitDigits[4] = 0;\n    $unitDigits[5] =\
    \ 0;\n    $unitDigits[6] = 0;\n    $unitDigits[7] = 0;\n    $unitDigits[8] = 0;\n\
    \    $unitDigits[9] = 0;\n    $unitDigits[10] = 0;\n    $unitDigits[11] = 0;\n\
    \    $unitDigits[12] = 0;\n    $unitDigits[13] = 0;\n    $unitDigits[14] = 0;\n\
    \    $unitDigits[15] = 0;\n    $unitDigits[16] = 0;\n    $unitDigits[17] = 0;\n\
    \    $unitDigits[18] = 0;\n    $unitDigits[19] = 0;\n    $unitDigits[20] = 0;\n\
    \    $unitDigits[21] = 0;\n    $unitDigits[22] = 0;\n    $unitDigits[23] = 0;\n\
    \    $unitDigits[24] = 0;\n    $unitDigits[25] = 0;\n    $unitDigits[26] = 0;\n\
    \    $unitDigits[27] = 0;\n    $unitDigits[28] = 0;\n    $unitDigits[29] = 0;\n\
    \    $unitDigits[30] = 0;\n    $unitDigits[31] = 0;\n    $unitDigits[32] = 0;\n\
    \    $unitDigits[33] = 0;\n    $unitDigits[34] = 0;\n    $unitDigits[35] = 0;\n\
    \    $unitDigits[36] = 0;\n    $unitDigits[37] = 0;\n    $unitDigits[38] = 0;\n\
    \    $unitDigits[39] = 0;\n    $unitDigits[40] = 0;\n    $unitDigits[41] = 0;\n\
    \    $unitDigits[42] = 0;\n    $unitDigits[43] = 0;\n    $unitDigits[44] = 0;\n\
    \    $unitDigits[45] = 0;\n    $unitDigits[46] = 0;\n    $unitDigits[47] = 0;\n\
    \    $unitDigits[48] = 0;\n    $unitDigits[49] = 0;\n    $unitDigits[50] = 0;\n\
    \    $unitDigits[51] = 0;\n    $unitDigits[52] = 0;\n    $unitDigits[53] = 0;\n\
    \    $unitDigits[54] = 0;\n    $unitDigits[55] = 0;\n    $unitDigits[56] = 0;\n\
    \    $unitDigits[57] = 0;\n    $unitDigits[58] = 0;\n    $unitDigits[59] = 0;\n\
    \    $unitDigits[60] = 0;\n    $unitDigits[61] = 0;\n    $unitDigits[62] = 0;\n\
    \    $unitDigits[63] = 0;\n    $unitDigits[64] = 0;\n    $unitDigits[65] = 0;\n\
    \    $unitDigits[66] = 0;\n    $unitDigits[67\nfunction candidate(...$args) {\n\
    \    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmnp5v9u_.php on line 85\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    return $a * $b\
    \ + $b * 10 + $b * 100;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzaescvb2.php:27\n\
    Stack trace:\n#0 /tmp/tmpzaescvb2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzaescvb2.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    while($a > 0)\
    \ {\n        $product += ($a % 10);\n        $a = floor($a/10);\n    }\n    while($b\
    \ > 0) {\n        $product += ($b % 10);\n        $b = floor($b/10);\n    }\n\
    \    return $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m6o8xwi.php:28\n\
    Stack trace:\n#0 /tmp/tmp5m6o8xwi.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5m6o8xwi.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n        $product\
    \ = ($product * 10) + ($a % 10);\n        $a = floor($a / 10);\n        $b = floor($b\
    \ / 10);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n \
    \   return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8329ps3r.php:28\n\
    Stack trace:\n#0 /tmp/tmp8329ps3r.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8329ps3r.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++) {\n        $sum = $sum + $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5c_q2t43.php:23\n\
    Stack trace:\n#0 /tmp/tmp5c_q2t43.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp5c_q2t43.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i=0;$i<strlen($a);$i++){\n        $sum+=$a[$i]*$b[$i];\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpok2mybye.php:24\n\
    Stack trace:\n#0 /tmp/tmpok2mybye.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpok2mybye.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $unit = $a < 0 ? $a : $b;\n    $unitDigits = str_split($unit);\n\
    \    $product = 1;\n    foreach ($unitDigits as $digit) {\n        $product *=\
    \ $digit;\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n\
    \    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplk199hxe.php:28\n\
    Stack trace:\n#0 /tmp/tmplk199hxe.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplk199hxe.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    if ($a < 10) {\n       \
    \ return $a * $b;\n    }\n    if ($b < 10) {\n        return $a * $b + 10;\n \
    \   }\n    $a = $a % 10;\n    $b = $b % 10;\n    return $a * $b + $a / 10 * $b;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmr5yqkmb.php:30\n\
    Stack trace:\n#0 /tmp/tmpmr5yqkmb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmr5yqkmb.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Iterate\
    \ through each digit of the unit\n    for($i = 0; $i < strlen($a); $i++) {\n \
    \       // Add the product of the digits\n        $product += $a{$i} * $b{$i};\n\
    \    }\n    \n    // Return the product\n    return $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjyaapkev.php:28\n\
    Stack trace:\n#0 /tmp/tmpjyaapkev.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpjyaapkev.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a === 0 || $b === 0) {\n \
    \       return 0;\n    }\n    return $a * $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdj8vsq6o.php:22\n\
    Stack trace:\n#0 /tmp/tmpdj8vsq6o.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpdj8vsq6o.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit in each number\n    for($i = 0; $i < strlen($a); $i++) {\n\
    \        $product += $a{$i} * $b{$i};\n    }\n    \n    return $product;\n}\n\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbg0fpmp.php:26\n\
    Stack trace:\n#0 /tmp/tmpjbg0fpmp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjbg0fpmp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a > $b) {\n        return 0;\n    }\n    $product\
    \ = 0;\n    $unitDigits = $a % 10;\n    $unitDigits = $unitDigits < 4 ? 4 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 4 ? 4 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 2 ? 2 : $unitDigits;\n    $unitDigits = $unitDigits > 2 ? 2 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 1 ? 1 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 1 ? 1 : $unitDigits;\n    $unitDigits = $unitDigits < 5 ? 5 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 5 ? 5 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 3 ? 3 : $unitDigits;\n    $unitDigits = $unitDigits > 3 ? 3 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 7 ? 7 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 7 ? 7 : $unitDigits;\n    $unitDigits = $unitDigits < 6 ? 6 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 6 ? 6 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 4 ? 4 : $unitDigits;\n    $unitDigits = $unitDigits > 4 ? 4 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 2 ? 2 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 2 ? 2 : $unitDigits;\n    $unitDigits = $unitDigits < 1 ? 1 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 1 ? 1 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 5 ? 5 : $unitDigits;\n    $unitDigits = $unitDigits > 5 ? 5 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 3 ? 3 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 3 ? 3 : $unitDigits;\n    $unitDigits = $unitDigits < 7 ? 7 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 7 ? 7 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 6 ? 6 : $unitDigits;\n    $unitDigits = $unitDigits \nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphgd30xzp.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $unitDigits = $a % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $b / 10;\n\
    \    return $unitDigits;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj8e3uer.php:25\n\
    Stack trace:\n#0 /tmp/tmpqj8e3uer.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpqj8e3uer.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $unitDigits = array();\n    $unitDigits[$a%10]\
    \ = $a%10;\n    $unitDigits[$b%10] = $b%10;\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, 2);\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnls0kplc.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a > 0) {\n        $product\
    \ += ($a % 10);\n        $a = floor($a / 10);\n    }\n    while ($b > 0) {\n \
    \       $product += ($b % 10);\n        $b = floor($b / 10);\n    }\n    return\
    \ $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc82i1oc0.php:31\n\
    Stack trace:\n#0 /tmp/tmpc82i1oc0.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpc82i1oc0.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\\n\";\n        exit;\n    }\n    if ($a < 10) {\n   \
    \     $a = $a * 10;\n    }\n    if ($b < 10) {\n        $b = $b * 10;\n    }\n\
    \    return $a * $b;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi8sovt5l.php:29\n\
    Stack trace:\n#0 /tmp/tmpi8sovt5l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpi8sovt5l.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a === 0 || $b === 0) {\n \
    \       return 0;\n    }\n    return $a * $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp77lztx42.php:22\n\
    Stack trace:\n#0 /tmp/tmp77lztx42.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp77lztx42.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $unitDigits = $a < 10 ? $a : $b - 10;\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ?\
    \ $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n\
    \    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits\
    \ < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits :\
    \ 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ?\
    \ $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n\
    \    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits\
    \ < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits :\
    \ 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ?\
    \ $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n\
    \    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits\
    \ < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits :\
    \ 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ?\
    \ $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n\
    \    $unitDigits = $unitDigits < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits\
    \ < 10 ? $unitDigits : 10;\n    $unitDigits = $unitDigits < 10 ? $unitDigits \n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0yva5gxt.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    while\
    \ ($a > 0 || $b > 0) {\n        if ($a > 0 && $b > 0) {\n            $product\
    \ = $product + ($a % 10) * ($b % 10);\n            $a = floor($a / 10);\n    \
    \        $b = floor($b / 10);\n        } else if ($a > 0) {\n            $product\
    \ = $product + ($a % 10);\n            $a = floor($a / 10);\n        } else {\n\
    \            $product = $product + ($b % 10);\n            $b = floor($b / 10);\n\
    \        }\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n\
    \    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6m1gh2t.php:37\n\
    Stack trace:\n#0 /tmp/tmpx6m1gh2t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpx6m1gh2t.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a > $b) {\n        return 0;\n    }\n    $unitDigits\
    \ = $a % 10;\n    $aRemainder = $a / 10;\n    $bRemainder = $b / 10;\n    $product\
    \ = $unitDigits * $aRemainder;\n    $product += $unitDigits * $bRemainder;\n \
    \   return $product;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5znfa5vw.php:29\n\
    Stack trace:\n#0 /tmp/tmp5znfa5vw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5znfa5vw.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $unitDigits = array();\n\
    \    $unitDigits[$a%10] = 1;\n    $unitDigits[$b%10] = 1;\n    $unitDigits = array_reverse($unitDigits);\n\
    \    $unitDigits = array_slice($unitDigits, 0, -1);\n    $unitDigits = array_sum($unitDigits);\n\
    \    $unitDigits = array_reverse($unitDigits);\n    return $unitDigits;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nThanks for your answer! I added some more information to my\
    \ question. I'm sorry I didn't make it clear enough.\n<|/ c |>\n<| c |>\nI added\
    \ some more information to my question. I'm sorry I didn't make it clear enough.\n\
    <|/ c |>\n<| c |>\nI added some more information to my question. I'm sorry I didn't\
    \ make it clear enough.\n<|/ c |>\n<| c |>\nI added some more information to my\
    \ question. I'm sorry I didn't make it clear enough.\n<|/ c |>\n<| c |>\nI added\
    \ some more information to my question. I'm sorry I didn't make it clear enough.\n\
    <|/ c |>\n<| a |>\nI believe this should work:\n<code>\n<?php\n$unitDigits = array();\n\
    $unitDigits[14] = 1;\n$unitDigits[412] = 1;\n$unitDigits[28] = 1;\n$unitDigits[1851]\
    \ = 1;\n$unitDigits[14] = 1;\n$unitDigits[-15] = 1;\n\n$unitDigits = array_sum($unitDigits);\n\
    $unitDigits = array_reverse($unitDigits);\n$unitDigits = array_slice($unitDigits,\
    \ 0, -1);\n$unitDigits = array_sum($unitDigits);\n$unitDigits = array_reverse($unitDigits);\n\
    \necho $unitDigits;\n</code>\n<|/ a dscore=0 tags=php,algorithm |>\n<| c |>\n\
    Thanks for your answer! I added some more information to my question. I'm sorry\
    \ I didn't make it clear enough.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpewe2kfif.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n        $product\
    \ = ($product * 10) + ($a % 10);\n        $a = floor($a / 10);\n        $b = floor($b\
    \ / 10);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n \
    \   return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_kp57e8.php:28\n\
    Stack trace:\n#0 /tmp/tmp3_kp57e8.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp3_kp57e8.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $result\
    \ = 0;\n    while($a > 0){\n        $result = $result * 10 + $a % 10;\n      \
    \  $a = floor($a/10);\n    }\n    while($b > 0){\n        $result = $result *\
    \ 10 + $b % 10;\n        $b = floor($b/10);\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8z22ey6.php:29\n\
    Stack trace:\n#0 /tmp/tmpd8z22ey6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpd8z22ey6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    if ($a < 10) {\n      \
    \  return $b * $a;\n    }\n    if ($b < 10) {\n        return $a * $b;\n    }\n\
    \    $sum = 0;\n    $digits = $a % 10;\n    $a = $a / 10;\n    $b = $b / 10;\n\
    \    while ($a > 0) {\n        $sum = $sum + $digits * $b;\n        $digits =\
    \ $digits * 10;\n        $a = $a / 10;\n        $b = $b / 10;\n    }\n    return\
    \ $sum + $digits * $b;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp00qwvf7u.php:39\n\
    Stack trace:\n#0 /tmp/tmp00qwvf7u.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp00qwvf7u.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum += $a[$i] * $b[$i];\n \
    \   }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphp4zjemh.php:24\n\
    Stack trace:\n#0 /tmp/tmphp4zjemh.php(34): test()\n#1 {main}\n  thrown in /tmp/tmphp4zjemh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $sum = 0;\n    while ($a || $b) {\n  \
    \      $sum += ($a % 10) * ($b % 10);\n        $a = floor($a / 10);\n        $b\
    \ = floor($b / 10);\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6pk0w54.php:28\n\
    Stack trace:\n#0 /tmp/tmpq6pk0w54.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpq6pk0w54.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + 10;\n    }\n    $c = $a * $b + 10;\n\
    \    return $c % 10;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cjyof8r.php:28\n\
    Stack trace:\n#0 /tmp/tmp4cjyof8r.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4cjyof8r.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $product = 0;\n    while\
    \ ($a || $b) {\n        $product = bcmul($product, $a % 10);\n        $product\
    \ = bcmul($product, $b % 10);\n        $a = bcdiv($a, 10, 0);\n        $b = bcdiv($b,\
    \ 10, 0);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n\
    \    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcmul() in /tmp/tmpbsxnr1pt.php:16\n\
    Stack trace:\n#0 /tmp/tmpbsxnr1pt.php(25): multiply(148, 412)\n#1 /tmp/tmpbsxnr1pt.php(29):\
    \ candidate(148, 412)\n#2 /tmp/tmpbsxnr1pt.php(39): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpbsxnr1pt.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++) {\n        $sum = $sum + $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnpho7k4s.php:24\n\
    Stack trace:\n#0 /tmp/tmpnpho7k4s.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnpho7k4s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $sum = 0;\n    while ($a\
    \ > 0) {\n        $sum += $a % 10;\n        $a = floor($a / 10);\n    }\n    while\
    \ ($b > 0) {\n        $sum += $b % 10;\n        $b = floor($b / 10);\n    }\n\
    \    return $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48dsalxi.php:30\n\
    Stack trace:\n#0 /tmp/tmp48dsalxi.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp48dsalxi.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b * 10;\n    }\n    if ($b < 100) {\n \
    \       return $a * $b * 100 + $b * 10;\n    }\n    if ($b < 1000) {\n       \
    \ return $a * $b * 100 + $b * 100 + $b * 10;\n    }\n    if ($b < 10000) {\n \
    \       return $a * $b * 100 + $b * 100 + $b * 100 + $b * 10;\n    }\n    if ($b\
    \ < 100000) {\n        return $a * $b * 100 + $b * 100 + $b * 100 + $b * 100 +\
    \ $b * 10;\n    }\n    if ($b < 1000000) {\n        return $a * $b * 100 + $b\
    \ * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 10;\n    }\n    if ($b < 10000000)\
    \ {\n        return $a * $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100\
    \ + $b * 100 + $b * 10;\n    }\n    if ($b < 100000000) {\n        return $a *\
    \ $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 +\
    \ $b * 10;\n    }\n    if ($b < 1000000000) {\n        return $a * $b * 100 +\
    \ $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 +\
    \ $b * 10;\n    }\n    if ($b < 10000000000) {\n        return $a * $b * 100 +\
    \ $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 +\
    \ $b * 100 + $b * 10;\n    }\n    if ($b < 100000000000) {\n        return $a\
    \ * $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100\
    \ + $b * 100 + $b * 100 + $b * 100 + $b * 10;\n    }\n    if ($b < 1000000000000)\
    \ {\n        return $a * $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100\
    \ + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 100 + $b * 10;\n\
    \    }\n    if ($b < 10000000000000) {\n        return $a * $b * 100 + $b * 100\
    \ + $b\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpeq15q9jo.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n        if ($a\
    \ > 9) {\n            $product += $a % 10;\n            $a = $a / 10;\n      \
    \  } else {\n            $product += $a;\n            $a = 0;\n        }\n   \
    \     if ($b > 9) {\n            $product += $b % 10;\n            $b = $b / 10;\n\
    \        } else {\n            $product += $b;\n            $b = 0;\n        }\n\
    \    }\n    return $product;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4o8p8n9o.php:38\n\
    Stack trace:\n#0 /tmp/tmp4o8p8n9o.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4o8p8n9o.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $result = 0;\n    while\
    \ ($a || $b) {\n        $result = $result * 10 + $a % 10;\n        $a = floor($a\
    \ / 10);\n        $b = floor($b / 10);\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbm_hlp02.php:28\n\
    Stack trace:\n#0 /tmp/tmpbm_hlp02.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbm_hlp02.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $unitDigits = $a < 10 ?\
    \ $a : $b; // The unit digits are the smaller number.\n    $unitDigits = $unitDigits\
    \ < 10 ? $unitDigits : 10; // The unit digits are the larger number.\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are the larger number.\n\
    \    $unitDigits = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are\
    \ the larger number.\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10; //\
    \ The unit digits are the larger number.\n    $unitDigits = $unitDigits < 10 ?\
    \ $unitDigits : 10; // The unit digits are the larger number.\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are the larger number.\n\
    \    $unitDigits = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are\
    \ the larger number.\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10; //\
    \ The unit digits are the larger number.\n    $unitDigits = $unitDigits < 10 ?\
    \ $unitDigits : 10; // The unit digits are the larger number.\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are the larger number.\n\
    \    $unitDigits = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are\
    \ the larger number.\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10; //\
    \ The unit digits are the larger number.\n    $unitDigits = $unitDigits < 10 ?\
    \ $unitDigits : 10; // The unit digits are the larger number.\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are the larger number.\n\
    \    $unitDigits = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are\
    \ the larger number.\n    $unitDigits = $unitDigits < 10 ? $unitDigits : 10; //\
    \ The unit digits are the larger number.\n    $unitDigits = $unitDigits < 10 ?\
    \ $unitDigits : 10; // The unit digits are the larger number.\n    $unitDigits\
    \ = $unitDigits < 10 ? $unitDigits : 10; // The unit digits are the larger number.\n\
    \    $unitDigits = $\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph3hk13je.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $product\
    \ = 0;\n    for($i = 0; $i < strlen($a); $i++){\n        $product += $a{$i} *\
    \ $b{$i};\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n\
    \    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_qtvh70.php:24\n\
    Stack trace:\n#0 /tmp/tmpw_qtvh70.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpw_qtvh70.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $unitDigits\
    \ = $a % 10;\n    $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n   \
    \ $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits\
    \ + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits <\
    \ 5 ? 1 : 0);\n    $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n  \
    \  $unitDigits = $unitDigits + ($unitDigits < 5 ? 1 : 0);\n    $unitDigits = $\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpyzxum8ol.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $unitDigits = $a % 10;\n\
    \    $unitDigits = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $a % 10;\n    $unitDigits = $unitDigits * 10 + $b % 10;\n    return $unitDigits;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt88cxgy9.php:26\n\
    Stack trace:\n#0 /tmp/tmpt88cxgy9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpt88cxgy9.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    $unitDigits\
    \ = array();\n    $unitDigits[$a%10] = 1;\n    $unitDigits[$b%10] = 1;\n    foreach\
    \ ($unitDigits as $key => $value) {\n        $product += $key * $value;\n    }\n\
    \    return $product;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz51oxqk.php:29\n\
    Stack trace:\n#0 /tmp/tmprz51oxqk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprz51oxqk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    while\
    \ ($a > 0) {\n        $product += ($a % 10);\n        $a = floor($a / 10);\n \
    \   }\n    while ($b > 0) {\n        $product += ($b % 10);\n        $b = floor($b\
    \ / 10);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n \
    \   return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2nzaxk4r.php:32\n\
    Stack trace:\n#0 /tmp/tmp2nzaxk4r.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2nzaxk4r.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + 10;\n    }\n    if ($b < 100) {\n \
    \       return $a * $b + 100;\n    }\n    if ($b < 1000) {\n        return $a\
    \ * $b + 1000;\n    }\n    if ($b < 10000) {\n        return $a * $b + 10000;\n\
    \    }\n    if ($b < 100000) {\n        return $a * $b + 100000;\n    }\n    if\
    \ ($b < 1000000) {\n        return $a * $b + 1000000;\n    }\n    if ($b < 10000000)\
    \ {\n        return $a * $b + 10000000;\n    }\n    if ($b < 100000000) {\n  \
    \      return $a * $b + 100000000;\n    }\n    if ($b < 1000000000) {\n      \
    \  return $a * $b + 1000000000;\n    }\n    if ($b < 10000000000) {\n        return\
    \ $a * $b + 10000000000;\n    }\n    if ($b < 100000000000) {\n        return\
    \ $a * $b + 100000000000;\n    }\n    if ($b < 1000000000000) {\n        return\
    \ $a * $b + 1000000000000;\n    }\n    if ($b < 10000000000000) {\n        return\
    \ $a * $b + 10000000000000;\n    }\n    if ($b < 100000000000000) {\n        return\
    \ $a * $b + 100000000000000;\n    }\n    if ($b < 1000000000000000) {\n      \
    \  return $a * $b + 1000000000000000;\n    }\n    if ($b < 10000000000000000)\
    \ {\n        return $a * $b + 100000000000000000;\n    }\n    if ($b < 100000000000000000)\
    \ {\n        return $a * $b + 100000000000000000;\n    }\n    if ($b < 1000000000000000000)\
    \ {\n        return $a * $b + 1000000000000000000;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92kj8t1i.php:78\n\
    Stack trace:\n#0 /tmp/tmp92kj8t1i.php(88): test()\n#1 {main}\n  thrown in /tmp/tmp92kj8t1i.php\
    \ on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $sum = 0;\n    while ($a\
    \ > 0) {\n        $sum += $a % 10;\n        $a = floor($a/10);\n    }\n    while\
    \ ($b > 0) {\n        $sum += $b % 10;\n        $b = floor($b/10);\n    }\n  \
    \  return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa51n7jxu.php:32\n\
    Stack trace:\n#0 /tmp/tmpa51n7jxu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa51n7jxu.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a > $b) {\n        $tmp =\
    \ $a;\n        $a = $b;\n        $b = $tmp;\n    }\n    if ($a < 0 || $b < 0)\
    \ {\n        return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n   \
    \     $product = ($product * 10) + ($a % 10);\n        $a = floor($a / 10);\n\
    \        $b = floor($b / 10);\n    }\n    return $product;\n}\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5nyacj0j.php:32\n\
    Stack trace:\n#0 /tmp/tmp5nyacj0j.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5nyacj0j.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = $a; $i <= $b; $i++) {\n        $sum = $sum + $i;\n    }\n    return\
    \ $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2ispiw_.php:23\n\
    Stack trace:\n#0 /tmp/tmpi2ispiw_.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpi2ispiw_.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new \\InvalidArgumentException(\"Invalid input\");\n    }\n    $product\
    \ = 0;\n    while ($a || $b) {\n        $product = ($product * 10) + ($a % 10);\n\
    \        $a = floor($a / 10);\n        $b = floor($b / 10);\n    }\n    return\
    \ $product;\n}\n</code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. Try multiplying `-148` and `412`.\n<|/ c |>\n<| c |>\n\
    The question says \"Assume the input is always valid.\"\n<|/ c |>\n<| c |>\nI\
    \ know, but I wanted to point out that your solution doesn't work for negative\
    \ numbers. Try multiplying `-148` and `412`.\n<|/ c |>\n<| c |>\nI didn't say\
    \ it wouldn't work. I said it wouldn't work for negative numbers. I didn't say\
    \ it wouldn't work for negative numbers. I said it wouldn't work for negative\
    \ numbers. I said it wouldn't work for negative numbers. I said it wouldn't work\
    \ for negative numbers. I said it wouldn't work for negative numbers. I said it\
    \ wouldn't work for negative numbers. I said it wouldn't work for negative numbers.\
    \ I said it wouldn't work for negative numbers. I said it wouldn't work for negative\
    \ numbers. I said it wouldn't work for negative numbers. I said it wouldn't work\
    \ for negative numbers. I said it wouldn't work for negative numbers. I said it\
    \ wouldn't work for negative numbers. I said it wouldn't work for negative numbers.\
    \ I said it wouldn't work for negative numbers. I said it wouldn't work for negative\
    \ numbers. I said it wouldn't work for negative numbers. I said it wouldn't work\
    \ for negative numbers. I said it wouldn't work for negative numbers. I said it\
    \ wouldn't work for negative numbers. I said it wouldn't work for negative numbers.\
    \ I said it wouldn't work for negative numbers. I said it wouldn't work for negative\
    \ numbers. I said it wouldn't work for negative numbers. I said it wouldn't work\
    \ for negative numbers. I said it wouldn't work for negative numbers. I said it\
    \ wouldn't work for negative numbers. I said it wouldn't work for negative numbers.\
    \ I said it wouldn't work for negative numbers. I said it wouldn't work for negative\
    \ numbers. I said it wouldn't work for negative numbers. I said it wouldn't work\
    \ for negative numbers. I said it wouldn't work for negative numbers. I said it\
    \ wouldn't work for negative numbers. I said it wouldn't work for negative numbers.\
    \ I said it wouldn't work for negative numbers. I said it wo\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf8u_pnna.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    if ($a < 10) {\n        return $a * $b;\n\
    \    }\n    if ($b < 10) {\n        return $a * $b + 10;\n    }\n    return $a\
    \ * $b + $a % 10 * $b + $b % 10;\n}\n\nfunction candidate(...$args) {\n    return\
    \ multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412)\
    \ !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28)\
    \ !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp3nkn_o3.php:28\n\
    Stack trace:\n#0 /tmp/tmpp3nkn_o3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpp3nkn_o3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $unitDigits\
    \ = $a % 10;\n    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? $unitDigits - 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? $unitDigits\
    \ + 10 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? $unitDigits + 10 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? $unitDigits\
    \ - 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? $unitDigits - 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? $unitDigits\
    \ + 10 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? $unitDigits + 10 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? $unitDigits\
    \ - 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n    $unitDigits\
    \ = \nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8eq3phqc.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $unitDigits = array();\n    $unitDigits[2]\
    \ = 0;\n    $unitDigits[4] = 0;\n    $unitDigits[6] = 0;\n    $unitDigits[8] =\
    \ 0;\n    $unitDigits[10] = 0;\n    $unitDigits[12] = 0;\n    $unitDigits[14]\
    \ = 0;\n    $unitDigits[16] = 0;\n    $unitDigits[18] = 0;\n    $unitDigits[20]\
    \ = 0;\n    $unitDigits[22] = 0;\n    $unitDigits[24] = 0;\n    $unitDigits[26]\
    \ = 0;\n    $unitDigits[28] = 0;\n    $unitDigits[30] = 0;\n    $unitDigits[32]\
    \ = 0;\n    $unitDigits[34] = 0;\n    $unitDigits[36] = 0;\n    $unitDigits[38]\
    \ = 0;\n    $unitDigits[40] = 0;\n    $unitDigits[42] = 0;\n    $unitDigits[44]\
    \ = 0;\n    $unitDigits[46] = 0;\n    $unitDigits[48] = 0;\n    $unitDigits[50]\
    \ = 0;\n    $unitDigits[52] = 0;\n    $unitDigits[54] = 0;\n    $unitDigits[56]\
    \ = 0;\n    $unitDigits[58] = 0;\n    $unitDigits[60] = 0;\n    $unitDigits[62]\
    \ = 0;\n    $unitDigits[64] = 0;\n    $unitDigits[66] = 0;\n    $unitDigits[68]\
    \ = 0;\n    $unitDigits[70] = 0;\n    $unitDigits[72] = 0;\n    $unitDigits[74]\
    \ = 0;\n    $unitDigits[76] = 0;\n    $unitDigits[78] = 0;\n    $unitDigits[80]\
    \ = 0;\n    $unitDigits[82] = 0;\n    $unitDigits[84] = 0;\n    $unitDigits[86]\
    \ = 0;\n    $unitDigits[88] = 0;\n    $unitDigits[90] = 0;\n    $unitDigits[92]\
    \ = 0;\n    $unitDigits[94] = 0;\n    $unitDigits[96] = 0;\n    $unitDigits[98]\
    \ = 0;\n    $unitDigits[100] = 0;\n    $unitDigits[102] = 0;\n    $unitDigits[104]\
    \ = 0;\n    $unitDigits[106] = 0;\n    $unitDigits[108] = 0;\n    $unitDigits[110]\
    \ = 0;\n    $unitDigits[112] = 0;\n    $unitDigits[114] = 0;\n    $unitDigits[116]\
    \ = 0;\n    $unitDigits[118] = 0;\n    $unitDigits[120] = 0;\n    $unitDigits[122]\
    \ = 0;\n    $unitDigits[124] = 0;\n    $unitDigits[126] = 0;\n    $unitDigits[128]\
    \ = 0;\n    $unitDigits[130] = 0;\n    $unitDigits[132] = 0;\n    $unitDigits[134]\
    \ = 0;\n    $unitDigits[136] = 0;\n    $unitDigits[138] = 0;\n    $unitDigits[140]\
    \ = 0;\n    $unitDigits[\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuayulkkl.php on line 83\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++) {\n        $sum += $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitt4i93t.php:24\n\
    Stack trace:\n#0 /tmp/tmpitt4i93t.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpitt4i93t.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    $unitDigits\
    \ = $a % 10;\n    $unitDigits = $unitDigits * 10 + $b % 10;\n    $unitDigits =\
    \ $unitDigits * 10 + $a % 10;\n    $unitDigits = $unitDigits * 10 + $b % 10;\n\
    \    $unitDigits = $unitDigits * 10 + $a % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n\
    \    $unitDigits = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $a % 10;\n    $unitDigits = $unitDigits * 10 + $b % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $a % 10;\n    $unitDigits = $unitDigits * 10 + $b % 10;\n\
    \    $unitDigits = $unitDigits * 10 + $a % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n\
    \    $unitDigits = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $a % 10;\n    $unitDigits = $unitDigits * 10 + $b % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $a % 10;\n    $unitDigits = $unitDigits * 10 + $b % 10;\n\
    \    $unitDigits = $unitDigits * 10 + $a % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n\
    \    $unitDigits = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $a % 10;\n    $unitDigits = $unitDigits * 10 + $b % 10;\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpleruhe4a.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++) {\n        $sum += $a{$i} * $b{$i};\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkyu22m8_.php:24\n\
    Stack trace:\n#0 /tmp/tmpkyu22m8_.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkyu22m8_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $result = 0;\n    while\
    \ ($a > 0) {\n        $result = $result * 10 + $a % 10;\n        $a = floor($a\
    \ / 10);\n    }\n    while ($b > 0) {\n        $result = $result * 10 + $b % 10;\n\
    \        $b = floor($b / 10);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphsfu4u33.php:31\n\
    Stack trace:\n#0 /tmp/tmphsfu4u33.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphsfu4u33.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * $a;\n    }\n    $c = $a * $b +\
    \ $b * $a;\n    $d = $a * $b;\n    $e = $b * $a;\n    return $c + $d + $e;\n}\n\
    \nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpix8e_6ah.php:31\n\
    Stack trace:\n#0 /tmp/tmpix8e_6ah.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpix8e_6ah.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i=0;$i<strlen($a);$i++){\n        $sum+=$a[$i]*$b[$i];\n    }\n    return\
    \ $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd8__t999.php:23\n\
    Stack trace:\n#0 /tmp/tmpd8__t999.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpd8__t999.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n        $product\
    \ = ($product * 10) + ($a % 10);\n        $a = floor($a / 10);\n        $b = floor($b\
    \ / 10);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n \
    \   return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gcoabvt.php:28\n\
    Stack trace:\n#0 /tmp/tmp0gcoabvt.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0gcoabvt.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b + $b * 10 + $b * 100;\n    }\n    if ($b < 1000) {\n\
    \        return $a * $b + $b * 10 + $b * 100 + $b * 1000;\n    }\n    if ($b <\
    \ 10000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000;\n\
    \    }\n    if ($b < 100000) {\n        return $a * $b + $b * 10 + $b * 100 +\
    \ $b * 1000 + $b * 10000 + $b * 100000;\n    }\n    if ($b < 1000000) {\n    \
    \    return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ + $b * 1000000;\n    }\n    if ($b < 10000000) {\n        return $a * $b + $b\
    \ * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000 + $b *\
    \ 10000000;\n    }\n    if ($b < 100000000) {\n        return $a * $b + $b * 10\
    \ + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000 + $b * 10000000\
    \ + $b * 100000000 + $b * 1000000000;\n    }\n    if ($b < 1000000000) {\n   \
    \     return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ + $b * 1000000 + $b * 10000000 + $b * 100000000 + $b * 1000000000 + $b * 10000000000\
    \ + $b * 100000000000;\n    }\n    if ($b < 100000000000) {\n        return $a\
    \ * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000\
    \ + $b * 10000000 + $b * 100000000 + $b * 1000000000 + $b * 10000000000 + $b *\
    \ 100000000000 + $b * 1000000000000 + $b * 10000000000000;\n    }\n    if ($b\
    \ < 1000000000000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000\
    \ + $b * 10000 + $b * 100000 + $b * 1000000 + $b * 10000000 + $b * 100000000 +\
    \ $b * 1000000000 + $b * 10000000000 + $b * 100000000000 + $b * 1000000000000\
    \ + $b * 10000000000000 + \nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpstelvjl3.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $product = 0;\n    while ($a > 0) {\n\
    \        $product += ($a % 10);\n        $a = floor($a / 10);\n    }\n    while\
    \ ($b > 0) {\n        $product += ($b % 10);\n        $b = floor($b / 10);\n \
    \   }\n    return $product;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa1vr6yj8.php:30\n\
    Stack trace:\n#0 /tmp/tmpa1vr6yj8.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpa1vr6yj8.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $unitDigits = $a % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n\
    \    return $unitDigits;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8eiprma.php:22\n\
    Stack trace:\n#0 /tmp/tmps8eiprma.php(32): test()\n#1 {main}\n  thrown in /tmp/tmps8eiprma.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    return $a * $b\
    \ + $b * 10 + $b * 100;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmf5aauy.php:28\n\
    Stack trace:\n#0 /tmp/tmpcmf5aauy.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpcmf5aauy.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    return $a * $b\
    \ + $b * 10 + $a * $b * 10;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01dvu8mc.php:27\n\
    Stack trace:\n#0 /tmp/tmp01dvu8mc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp01dvu8mc.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $product = 0;\n    $unitDigits = $a %\
    \ 10;\n    $unitDigits = $unitDigits + $b % 10;\n    $unitDigits = $unitDigits\
    \ / 10;\n    $product = $unitDigits * $product;\n    return $product;\n}\n\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tagfrl7.php:27\n\
    Stack trace:\n#0 /tmp/tmp8tagfrl7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8tagfrl7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    while($a > 0) {\n        $sum += $a % 10;\n        $a = floor($a/10);\n \
    \   }\n    while($b > 0) {\n        $sum += $b % 10;\n        $b = floor($b/10);\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp02mkhdo3.php:29\n\
    Stack trace:\n#0 /tmp/tmp02mkhdo3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp02mkhdo3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a > $b) {\n        $tmp =\
    \ $a;\n        $a = $b;\n        $b = $tmp;\n    }\n    $product = 0;\n    \n\
    \    while($a > 0) {\n        $product = ($product * 10) + ($a % 10);\n      \
    \  $a = floor($a/10);\n    }\n    \n    while($b > 0) {\n        $product = ($product\
    \ * 10) + ($b % 10);\n        $b = floor($b/10);\n    }\n    \n    return $product;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl46ts5j_.php:36\n\
    Stack trace:\n#0 /tmp/tmpl46ts5j_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpl46ts5j_.php\
    \ on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++) {\n        $sum += $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer!\
    \ But I still don't understand how I can use your function to solve the problem.\
    \ Could you please give me an example?\n<|/ c |>\n<| c |>\nI added an example\
    \ to the answer. Hope it helps.\n<|/ c |>\n<| c |>\nThanks for your answer! But\
    \ I still don't understand how I can use your function to solve the problem. Could\
    \ you please give me an example?\n<|/ c |>\n<| c |>\nI added an example to the\
    \ answer. Hope it helps.\n<|/ c |>\n<| a tags=php,algorithm |>\n<code>\n<?php\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpb7hz9t5a.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $unitDigits\
    \ = $a % 10;\n    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp9gb0vbu8.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a === 0 || $b === 0) {\n \
    \       return 0;\n    }\n    return $a * $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jpyyyes.php:22\n\
    Stack trace:\n#0 /tmp/tmp8jpyyyes.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp8jpyyyes.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n        $product\
    \ = ($product * 10) + ($a % 10);\n        $a = floor($a / 10);\n        $b = floor($b\
    \ / 10);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n \
    \   return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsw5uatwp.php:28\n\
    Stack trace:\n#0 /tmp/tmpsw5uatwp.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsw5uatwp.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b + $b * 10 + $b * 100;\n    }\n    if ($b < 1000) {\n\
    \        return $a * $b + $b * 10 + $b * 100 + $b * 1000;\n    }\n    if ($b <\
    \ 10000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000;\n\
    \    }\n    if ($b < 100000) {\n        return $a * $b + $b * 10 + $b * 100 +\
    \ $b * 1000 + $b * 10000 + $b * 100000;\n    }\n    if ($b < 1000000) {\n    \
    \    return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ + $b * 1000000;\n    }\n    if ($b < 10000000) {\n        return $a * $b + $b\
    \ * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000 + $b *\
    \ 10000000;\n    }\n    if ($b < 100000000) {\n        return $a * $b + $b * 10\
    \ + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000 + $b * 10000000\
    \ + $b * 100000000 + $b * 1000000000;\n    }\n    if ($b < 1000000000) {\n   \
    \     return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ + $b * 1000000 + $b * 10000000 + $b * 100000000 + $b * 1000000000 + $b * 10000000000\
    \ + $b * 100000000000;\n    }\n    if ($b < 100000000000) {\n        return $a\
    \ * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000\
    \ + $b * 10000000 + $b * 100000000 + $b * 1000000000 + $b * 10000000000 + $b *\
    \ 100000000000 + $b * 1000000000000 + $b * 10000000000000;\n    }\n    if ($b\
    \ < 1000000000000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000\
    \ + $b * 10000 + $b * 100000 + $b * 1000000 + $b * 10000000 + $b * 100000000 +\
    \ $b * 1000000000 + $b * 10000000000 + $b * 100000000000 + $b * 1000000000000\
    \ + $b * 10000000000000 + \nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4w5d9z2n.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\\n\";\n        exit;\n    }\n    if ($a < 10) {\n   \
    \     return $b * $a;\n    }\n    if ($b < 10) {\n        return $a * $b;\n  \
    \  }\n    $a = $a % 10;\n    $b = $b % 10;\n    return $a * 10 + $b;\n}\n\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tcid1ci.php:31\n\
    Stack trace:\n#0 /tmp/tmp8tcid1ci.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp8tcid1ci.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit in the first number\n    for($i = 0; $i < strlen($a); $i++)\
    \ {\n        // Add the value of the current digit to the product\n        $product\
    \ += $a[$i] * $b[$i];\n    }\n    \n    // Return the product\n    return $product;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xf6_kss.php:28\n\
    Stack trace:\n#0 /tmp/tmp0xf6_kss.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0xf6_kss.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    while($a\
    \ > 0) {\n        $product += $a % 10;\n        $a = floor($a/10);\n    }\n  \
    \  while($b > 0) {\n        $product += $b%10;\n        $b = floor($b/10);\n \
    \   }\n    return $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhlgzdtg.php:32\n\
    Stack trace:\n#0 /tmp/tmpyhlgzdtg.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyhlgzdtg.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit of $a and $b\n    for($i = 0; $i < strlen($a); $i++) {\n\
    \        // Add the product of their unit digits\n        $product += $a{$i} *\
    \ $b{$i};\n    }\n    \n    // Return the product\n    return $product;\n}\n\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeqsk33a4.php:28\n\
    Stack trace:\n#0 /tmp/tmpeqsk33a4.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpeqsk33a4.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i=0;$i<strlen($a);$i++){\n        $sum+=$a[$i]*$b[$i];\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb_2ks94p.php:24\n\
    Stack trace:\n#0 /tmp/tmpb_2ks94p.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpb_2ks94p.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $unitDigits\
    \ = array();\n    $unitDigits[] = $a % 10;\n    $unitDigits[] = $a / 10;\n   \
    \ $unitDigits[] = $b % 10;\n    $unitDigits[] = $b / 10;\n    $unitDigits = array_reverse($unitDigits);\n\
    \    foreach ($unitDigits as $digit) {\n        $product += $digit * pow(2, count($unitDigits)\
    \ - 1);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n  \
    \  return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wyjka6s.php:29\n\
    Stack trace:\n#0 /tmp/tmp7wyjka6s.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7wyjka6s.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $product = 0;\n    while ($a > 0) {\n\
    \        $product += ($a % 10);\n        $a = floor($a / 10);\n    }\n    while\
    \ ($b > 0) {\n        $product += ($b % 10);\n        $b = floor($b / 10);\n \
    \   }\n    return $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5tex47ma.php:31\n\
    Stack trace:\n#0 /tmp/tmp5tex47ma.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp5tex47ma.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n        $product\
    \ = ($product * 10) + ($a % 10 ? $a % 10 : $b % 10);\n        $a = $a / 10;\n\
    \        $b = $b / 10;\n    }\n    return $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5i7ajjlr.php:28\n\
    Stack trace:\n#0 /tmp/tmp5i7ajjlr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5i7ajjlr.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $unitDigits\
    \ = $a % 10;\n    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? $unitDigits - 9 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0\
    \ : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0\
    \ : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0\
    \ : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0\
    \ : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits > 9 ? 9\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpy92kc1be.php on line 42\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $sum = 0;\n    while ($a\
    \ || $b) {\n        $sum += ($a % 10) * ($b % 10);\n        $a = floor($a / 10);\n\
    \        $b = floor($b / 10);\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqn860x39.php:28\n\
    Stack trace:\n#0 /tmp/tmpqn860x39.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpqn860x39.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $product\
    \ = 0;\n    for($i = 0; $i < strlen($a); $i++){\n        $product += $a{$i} *\
    \ $b{$i};\n    }\n    return $product;\n}\n</code>\n<|/ a tags=php,algorithm |>\n\
    <| c |>\nI believe this fails for negative numbers. Try multiplying `-148` and\
    \ `412`.\n<|/ c |>\n<| c |>\nYes, it fails for negative numbers. I added a comment\
    \ to the question asking for clarification.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question asking for clarification.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question asking for clarification.\n<|/ c |>\n<| c |>\nI added a comment\
    \ to the question asking for clarification.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    <?php\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2jk0gsgx.php on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit in each number.\n    for($i = 0; $i < strlen($a); $i++) {\n\
    \        $product += $a{$i} * $b{$i};\n    }\n    \n    return $product;\n}\n\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9okn84b.php:26\n\
    Stack trace:\n#0 /tmp/tmpp9okn84b.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpp9okn84b.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $unitDigits = $a < 10 ? $a : $b; // The unit digits\
    \ of the two numbers\n    $unitDigits = $unitDigits % 10; // The unit digits of\
    \ the two numbers\n    $unitDigits = $unitDigits < 0 ? 10 + $unitDigits : $unitDigits;\
    \ // The unit digits of the two numbers\n    $unitDigits = $unitDigits < 10 ?\
    \ 10 : $unitDigits; // The unit digits of the two numbers\n    $unitDigits = $unitDigits\
    \ < 10 ? 10 : $unitDigits; // The unit digits of the two numbers\n    $unitDigits\
    \ = $unitDigits < 10 ? 10 : $unitDigits; // The unit digits of the two numbers\n\
    \    $unitDigits = $unitDigits < 10 ? 10 : $unitDigits; // The unit digits of\
    \ the two numbers\n    $unitDigits = $unitDigits < 10 ? 10 : $unitDigits; // The\
    \ unit digits of the two numbers\n    $unitDigits = $unitDigits < 10 ? 10 : $unitDigits;\
    \ // The unit digits of the two numbers\n    $unitDigits = $unitDigits < 10 ?\
    \ 10 : $unitDigits; // The unit digits of the two numbers\n    $unitDigits = $unitDigits\
    \ < 10 ? 10 : $unitDigits; // The unit digits of the two numbers\n    $unitDigits\
    \ = $unitDigits < 10 ? 10 : $unitDigits; // The unit digits of the two numbers\n\
    \    $unitDigits = $unitDigits < 10 ? 10 : $unitDigits; // The unit digits of\
    \ the two numbers\n    $unitDigits = $unitDigits < 10 ? 10 : $unitDigits; // The\
    \ unit digits of the two numbers\n    $unitDigits = $unitDigits < 10 ? 10 : $unitDigits;\
    \ // The unit digits of the two numbers\n    $unitDigits = $unitDigits < 10 ?\
    \ 10 : $unitDigits; // The unit digits of the two numbers\n    $unitDigits = $unitDigits\
    \ < 10 ? 10 : $unitDigits; // The unit digits of the two numbers\n    $unitDigits\
    \ = $unitDigits < 10 ? 10 : $unitDigits; // The unit digits of the two numbers\n\
    \    $unitDigits = $unitDigits < 10 ? 10 : $unitDigits; // The unit digits of\
    \ the two numbers\n    $unitDigits = $unitDigits < 10 ? 10 : $unitDigits; // The\
    \ unit digits of the two numbers\n    $unitDigits = $unitDig\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpnt_nniml.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new \\InvalidArgumentException('Invalid input');\n    }\n    $result\
    \ = 0;\n    while ($a || $b) {\n        $result = $result * 10 + $a % 10;\n  \
    \      $a = floor($a / 10);\n        $b = floor($b / 10);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxqxspea2.php:28\n\
    Stack trace:\n#0 /tmp/tmpxqxspea2.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpxqxspea2.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    if ($a < 10) {\n      \
    \  return $a * $b;\n    }\n    if ($b < 10) {\n        return $a * $b;\n    }\n\
    \    if ($a < 100) {\n        return $a * $b * 10;\n    }\n    if ($b < 100) {\n\
    \        return $a * $b * 10;\n    }\n    if ($a < 1000) {\n        return $a\
    \ * $b * 100 + $a * $b * 10;\n    }\n    if ($b < 1000) {\n        return $a *\
    \ $b * 100 + $a * $b * 10;\n    }\n    if ($a < 10000) {\n        return $a *\
    \ $b * 1000 + $a * $b * 100 + $a * $b * 10;\n    }\n    if ($b < 10000) {\n  \
    \      return $a * $b * 1000 + $a * $b * 100 + $a * $b * 10;\n    }\n    if ($a\
    \ < 100000) {\n        return $a * $b * 10000 + $a * $b * 1000 + $a * $b * 100\
    \ + $a * $b * 10;\n    }\n    if ($b < 100000) {\n        return $a * $b * 10000\
    \ + $a * $b * 1000 + $a * $b * 100 + $a * $b * 10;\n    }\n    if ($a < 1000000)\
    \ {\n        return $a * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a *\
    \ $b * 100 + $a * $b * 10;\n    }\n    if ($b < 1000000) {\n        return $a\
    \ * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a * $b * 100 + $a * $b *\
    \ 10;\n    }\n    if ($a < 10000000) {\n        return $a * $b * 1000000 + $a\
    \ * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a * $b * 100 + $a * $b *\
    \ 10;\n    }\n    if ($b < 10000000) {\n        return $a * $b * 1000000 + $a\
    \ * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a * $b * 100 + $a * $b *\
    \ 10;\n    }\n    if ($a < 100000000) {\n        return $a * $b * 10000000 + $a\
    \ * $b * 1000000 + $a * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a *\
    \ $b * 100 + $\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjreffb6u.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    while($a\
    \ > 0 && $b > 0) {\n        $product = $product + ($a % 10);\n        $a = floor($a\
    \ / 10);\n        $b = floor($b / 10);\n    }\n    \n    return $product * $b;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxffn78u.php:27\n\
    Stack trace:\n#0 /tmp/tmpzxffn78u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzxffn78u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    while($a\
    \ > 0) {\n        $product = $product * 10 + $a % 10;\n        $a = floor($a /\
    \ 10);\n    }\n    \n    while($b > 0) {\n        $product = $product * 10 + $b\
    \ % 10;\n        $b = floor($b / 10);\n    }\n    \n    return $product;\n}\n\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hfv2fcv.php:31\n\
    Stack trace:\n#0 /tmp/tmp4hfv2fcv.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4hfv2fcv.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $product = 0;\n    while\
    \ ($a || $b) {\n        if ($a > 9) {\n            $product += $a % 10;\n    \
    \        $a = $a / 10;\n        } else {\n            $product += $a;\n      \
    \      $a = 0;\n        }\n        if ($b > 9) {\n            $product += $b %\
    \ 10;\n            $b = $b / 10;\n        } else {\n            $product += $b;\n\
    \            $b = 0;\n        }\n    }\n    return $product;\n}\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptw0hxwq2.php:38\n\
    Stack trace:\n#0 /tmp/tmptw0hxwq2.php(48): test()\n#1 {main}\n  thrown in /tmp/tmptw0hxwq2.php\
    \ on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i=0; $i<strlen($a); $i++){\n        $sum = $sum + $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx38tllqf.php:24\n\
    Stack trace:\n#0 /tmp/tmpx38tllqf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpx38tllqf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum += $a{$i} * $b{$i};\n \
    \   }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe723b11n.php:23\n\
    Stack trace:\n#0 /tmp/tmpe723b11n.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpe723b11n.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    while($a\
    \ && $b) {\n        $product = $product * 10 + $a % 10;\n        $a = floor($a/10);\n\
    \        $b = floor($b/10);\n    }\n    \n    return $product;\n}\n\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5axupmd9.php:27\n\
    Stack trace:\n#0 /tmp/tmp5axupmd9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp5axupmd9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    \n    while($a > 0) {\n        $product\
    \ += ($a % 10);\n        $a = floor($a / 10);\n    }\n    \n    while($b > 0)\
    \ {\n        $product += ($b % 10);\n        $b = floor($b / 10);\n    }\n   \
    \ \n    return $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp67kflk51.php:34\n\
    Stack trace:\n#0 /tmp/tmp67kflk51.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp67kflk51.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $product = 0;\n    $digits = $a < $b ?\
    \ $a : $b;\n    do {\n        $product = ($product * 10) + ($digits % 10);\n \
    \       $digits = floor($digits / 10);\n    } while ($digits > 0);\n    return\
    \ $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsboc808l.php:28\n\
    Stack trace:\n#0 /tmp/tmpsboc808l.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpsboc808l.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    while($a\
    \ > 0) {\n        $product += $a % 10;\n        $a = floor($a/10);\n    }\n  \
    \  \n    while($b > 0) {\n        $product += $b%10;\n        $b = floor($b/10);\n\
    \    }\n    \n    return $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412)\
    \ !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28)\
    \ !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqeibbv86.php:31\n\
    Stack trace:\n#0 /tmp/tmpqeibbv86.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqeibbv86.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum += $a[$i] * $b[$i];\n \
    \   }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8xhg_fq.php:24\n\
    Stack trace:\n#0 /tmp/tmpo8xhg_fq.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpo8xhg_fq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    while($a > 0){\n        $sum += $a % 10;\n        $a = floor($a/10);\n  \
    \  }\n    while($b > 0){\n        $sum += $b % 10;\n        $b = floor($b/10);\n\
    \    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07a8qh08.php:28\n\
    Stack trace:\n#0 /tmp/tmp07a8qh08.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp07a8qh08.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new \\Exception('Invalid input');\n    }\n    $result = 0;\n    while\
    \ ($a || $b) {\n        if ($a > 9) {\n            $result *= 10;\n          \
    \  $result += $a % 10;\n            $a = $a / 10;\n        } else {\n        \
    \    $result *= 10;\n            $result += $a;\n            $a = 0;\n       \
    \ }\n        if ($b > 9) {\n            $result *= 10;\n            $result +=\
    \ $b % 10;\n            $b = $b / 10;\n        } else {\n            $result *=\
    \ 10;\n            $result += $b;\n            $b = 0;\n        }\n    }\n   \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoveljunv.php:43\n\
    Stack trace:\n#0 /tmp/tmpoveljunv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpoveljunv.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n        if ($a\
    \ > 9) {\n            $product += $a % 10;\n            $a = $a / 10;\n      \
    \  }\n        if ($b > 9) {\n            $product += $b % 10;\n            $b\
    \ = $b / 10;\n        }\n    }\n    return $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b * 10;\n    }\n    if ($b < 100) {\n \
    \       return $a * $b * 100 + $b * 10;\n    }\n    if ($b < 1000) {\n       \
    \ return $a * $b * 1000 + $b * 100 + $b * 10;\n    }\n    if ($b < 10000) {\n\
    \        return $a * $b * 10000 + $b * 1000 + $b * 100 + $b * 10;\n    }\n   \
    \ if ($b < 100000) {\n        return $a * $b * 100000 + $b * 10000 + $b * 1000\
    \ + $b * 100 + $b * 10;\n    }\n    if ($b < 1000000) {\n        return $a * $b\
    \ * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b *\
    \ 1;\n    }\n    if ($b < 10000000) {\n        return $a * $b * 10000000 + $b\
    \ * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b *\
    \ 1 + $b * 0.1;\n    }\n    if ($b < 100000000) {\n        return $a * $b * 100000000\
    \ + $b * 10000000 + $b * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b *\
    \ 100 + $b * 10 + $b * 1 + $b * 0.01 + $b * 0.001;\n    }\n    if ($b < 1000000000)\
    \ {\n        return $a * $b * 1000000000 + $b * 100000000 + $b * 10000000 + $b\
    \ * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b *\
    \ 1 + $b * 0.01 + $b * 0.001 + $b * 0.0001;\n    }\n    if ($b < 10000000000)\
    \ {\n        return $a * $b * 10000000000 + $b * 1000000000 + $b * 100000000 +\
    \ $b * 10000000 + $b * 1000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100\
    \ + $b * 10 + $b * 1 + $b * 0.01 + $b * 0.001 + $b * 0.0001 + $b * 0.00001;\n\
    \    }\n    if ($b < 100000000000) {\n        return $a * $b * 100000000000 +\
    \ $b * 10000000000 + $b * 1000000000 + $b * 100000000 + $b * 10000000 + $b * 1000000\
    \ + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b * 1 + $b *\
    \ 0.01 + $b * 0.00\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgzr_umf0.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    $unitDigits\
    \ = $a % 10;\n    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 10 - $unitDigits : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits\
    \ = $unitDigits < 0 ? 10 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 10\
    \ : $\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm_art_pe.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through the digits\n    for ($i = 0; $i < strlen($a); $i++) {\n        // Get\
    \ the current digit\n        $digit = $a[$i];\n        \n        // Add the current\
    \ digit to the product\n        $product += $digit * $b[$i];\n    }\n    \n  \
    \  // Return the product\n    return $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmg8r5ra2.php:31\n\
    Stack trace:\n#0 /tmp/tmpmg8r5ra2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpmg8r5ra2.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b;\n    }\n    if ($a < 100) {\n      \
    \  return $a * $b;\n    }\n    if ($b < 100) {\n        return $a * $b;\n    }\n\
    \    if ($a < 1000) {\n        return $a * $b;\n    }\n    if ($b < 1000) {\n\
    \        return $a * $b;\n    }\n    if ($a < 10000) {\n        return $a * $b;\n\
    \    }\n    if ($b < 10000) {\n        return $a * $b;\n    }\n    if ($a < 100000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 100000) {\n        return $a\
    \ * $b;\n    }\n    if ($a < 1000000) {\n        return $a * $b;\n    }\n    if\
    \ ($b < 1000000) {\n        return $a * $b;\n    }\n    if ($a < 10000000) {\n\
    \        return $a * $b;\n    }\n    if ($b < 10000000) {\n        return $a *\
    \ $b;\n    }\n    if ($a < 100000000) {\n        return $a * $b;\n    }\n    if\
    \ ($b < 100000000) {\n        return $a * $b;\n    }\n    if ($a < 1000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 1000000000) {\n        return\
    \ $a * $b;\n    }\n    if ($a < 10000000000) {\n        return $a * $b;\n    }\n\
    \    if ($b < 10000000000) {\n        return $a * $b;\n    }\n    if ($a < 100000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 100000000000) {\n        return\
    \ $a * $b;\n    }\n    if ($a < 1000000000000) {\n        return $a * $b;\n  \
    \  }\n    if ($b < 1000000000000) {\n        return $a * $b;\n    }\n    if ($a\
    \ < 10000000000000) {\n        return $a * $b;\n    }\n    if ($b < 10000000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($a < 100000000000000) {\n       \
    \ return $a * $b;\n    }\n    if ($b < 100000000000000) {\n        return $a *\
    \ $b;\n    }\n    if ($a < 1000000000000000) {\n        return $a * $b;\n    }\n\
    \    if ($b < 1000000000000000) {\n        return $a * $b;\n    }\n    if ($a\
    \ < 10000000000000000) {\n        return \nfunction candidate(...$args) {\n  \
    \  return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3fypeioi.php on line 106\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $product\
    \ = 0;\n    for($i = 0; $i < strlen($a); $i++){\n        $product += $a[$i] *\
    \ $b[$i];\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n\
    \    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp__u0e_ku.php:24\n\
    Stack trace:\n#0 /tmp/tmp__u0e_ku.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp__u0e_ku.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $unitDigits = $a % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $b % 10;\n    return $unitDigits;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfcpfn88.php:26\n\
    Stack trace:\n#0 /tmp/tmpcfcpfn88.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcfcpfn88.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n}\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2nvsgwq.php:18\n\
    Stack trace:\n#0 /tmp/tmpp2nvsgwq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp2nvsgwq.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $result = 0;\n    $unitDigits = $a % 10;\n\
    \    $unitDigits = $unitDigits + $b / 10;\n    $unitDigits = $unitDigits % 10;\n\
    \    $result = $result * $unitDigits;\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx4azjh1.php:27\n\
    Stack trace:\n#0 /tmp/tmpfx4azjh1.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfx4azjh1.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    while\
    \ ($a > 0) {\n        $product = $product * 10;\n        $a = $a % 10;\n     \
    \   $product = $product + ($a * $b / 10);\n    }\n    return $product;\n}\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    for($i = 0;\
    \ $i < strlen($a); $i++) {\n        $product += $a{$i} * $b{$i};\n    }\n    return\
    \ $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsx5c8mcg.php:23\n\
    Stack trace:\n#0 /tmp/tmpsx5c8mcg.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpsx5c8mcg.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    while($a > 0) {\n        $sum += $a % 10;\n        $a = floor($a/10);\n \
    \   }\n    while($b > 0) {\n        $sum += $b % 10;\n        $b = floor($b/10);\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsu0h050y.php:29\n\
    Stack trace:\n#0 /tmp/tmpsu0h050y.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpsu0h050y.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Iterate\
    \ through each digit in each number and multiply them together\n    for($i = 0;\
    \ $i < strlen($a); $i++) {\n        $product += $a{$i} * $b{$i};\n    }\n    \n\
    \    return $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9l047nm.php:26\n\
    Stack trace:\n#0 /tmp/tmpa9l047nm.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpa9l047nm.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    for($i = 0;\
    \ $i < strlen($a); $i++) {\n        $product += $a[$i] * $b[$i];\n    }\n    return\
    \ $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1ni63nac.php:23\n\
    Stack trace:\n#0 /tmp/tmp1ni63nac.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp1ni63nac.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $unitDigits = array();\n    $unitDigits[$a%10]\
    \ = 1;\n    $unitDigits[($a%10)*10] = 1;\n    $unitDigits[($a%10)*10+1] = 1;\n\
    \    $unitDigits[($a%10)*10+2] = 1;\n    $unitDigits[($a%10)*10+3] = 1;\n    $unitDigits[($a%10)*10+4]\
    \ = 1;\n    $unitDigits[($a%10)*10+5] = 1;\n    $unitDigits[($a%10)*10+6] = 1;\n\
    \    $unitDigits[($a%10)*10+7] = 1;\n    $unitDigits[($a%10)*10+8] = 1;\n    $unitDigits[($a%10)*10+9]\
    \ = 1;\n    $unitDigits[($a%10)*10+10] = 1;\n    $unitDigits[($a%10)*10+11] =\
    \ 1;\n    $unitDigits[($a%10)*10+12] = 1;\n    $unitDigits[($a%10)*10+13] = 1;\n\
    \    $unitDigits[($a%10)*10+14] = 1;\n    $unitDigits[($a%10)*10+15] = 1;\n  \
    \  $unitDigits[($a%10)*10+16] = 1;\n    $unitDigits[($a%10)*10+17] = 1;\n    $unitDigits[($a%10)*10+18]\
    \ = 1;\n    $unitDigits[($a%10)*10+19] = 1;\n    $unitDigits[($a%10)*10+20] =\
    \ 1;\n    $unitDigits[($a%10)*10+21] = 1;\n    $unitDigits[($a%10)*10+22] = 1;\n\
    \    $unitDigits[($a%10)*10+23] = 1;\n    $unitDigits[($a%10)*10+24] = 1;\n  \
    \  $unitDigits[($a%10)*10+25] = 1;\n    $unitDigits[($a%10)*10+26] = 1;\n    $unitDigits[($a%10)*10+27]\
    \ = 1;\n    $unitDigits[($a%10)*10+28] = 1;\n    $unitDigits[($a%10)*10+29] =\
    \ 1;\n    $unitDigits[($a%10)*10+30] = 1;\n    $unitDigits[($a%10)*10+31] = 1;\n\
    \    $unitDigits[($a%10)*10+32] = 1;\n    $unitDigits[($\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpue9bu_lo.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $units_a = $a / 10;\n    $units_b = $b / 10;\n    $units_a\
    \ *= 10;\n    $units_b *= 10;\n    $units_a = $units_a + $units_b;\n    $units_a\
    \ = $units_a % 10;\n    $units_b = $units_b % 10;\n    $units_a = $units_a < 0\
    \ ? -$units_a : $units_a;\n    $units_b = $units_b < 0 ? -$units_b : $units_b;\n\
    \    return $units_a * $units_b;\n}\nfunction candidate(...$args) {\n    return\
    \ multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412)\
    \ !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28)\
    \ !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6y1e__13.php:30\n\
    Stack trace:\n#0 /tmp/tmp6y1e__13.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp6y1e__13.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $result = $a * $b;\n    if ($result <\
    \ 0) {\n        echo \"Invalid input\";\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehcq61m0.php:26\n\
    Stack trace:\n#0 /tmp/tmpehcq61m0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpehcq61m0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    return $a * $b\
    \ + $b * 10 + $b * 100;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzdfz4t2b.php:28\n\
    Stack trace:\n#0 /tmp/tmpzdfz4t2b.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpzdfz4t2b.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $product = 0;\n    while\
    \ ($a > 0 || $b > 0) {\n        $product = $product * 10 + $a % 10;\n        $a\
    \ = floor($a / 10);\n        $b = floor($b / 10);\n    }\n    return $product;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp30ld17rg.php:29\n\
    Stack trace:\n#0 /tmp/tmp30ld17rg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp30ld17rg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a === 0 || $b === 0) {\n \
    \       return 0;\n    }\n    return $a * $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnt8ehpji.php:22\n\
    Stack trace:\n#0 /tmp/tmpnt8ehpji.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpnt8ehpji.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a > 0) {\n        $product\
    \ += ($a % 10);\n        $a = floor($a / 10);\n    }\n    while ($b > 0) {\n \
    \       $product += ($b % 10);\n        $b = floor($b / 10);\n    }\n    return\
    \ $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxenmd7mz.php:31\n\
    Stack trace:\n#0 /tmp/tmpxenmd7mz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxenmd7mz.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    for($i = 0;\
    \ $i < strlen($a); $i++) {\n        $product += $a{$i} * $b{$i};\n    }\n    return\
    \ $product;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqvz6cpe.php:22\n\
    Stack trace:\n#0 /tmp/tmpkqvz6cpe.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpkqvz6cpe.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $sum = 0;\n    while($a > 0) {\n\
    \        $sum += $a % 10;\n        $a = floor($a/10);\n    }\n    while($b > 0)\
    \ {\n        $sum += $b % 10;\n        $b = floor($b/10);\n    }\n    return $sum;\n\
    }\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc36u3400.php:27\n\
    Stack trace:\n#0 /tmp/tmpc36u3400.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpc36u3400.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a === 0 || $b === 0) {\n \
    \       return 0;\n    }\n    return $a * $b;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbb_137s4.php:22\n\
    Stack trace:\n#0 /tmp/tmpbb_137s4.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpbb_137s4.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $result = 0;\n    while\
    \ ($a || $b) {\n        $result = $result * 10 + $a % 10;\n        $a = floor($a\
    \ / 10);\n        $b = floor($b / 10);\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3blkjtf7.php:27\n\
    Stack trace:\n#0 /tmp/tmp3blkjtf7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3blkjtf7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + 10;\n    }\n    $c = $a * $b + 10;\n\
    \    return $c;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpke06w7t1.php:28\n\
    Stack trace:\n#0 /tmp/tmpke06w7t1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpke06w7t1.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $result = 0;\n    while\
    \ ($a > 0) {\n        $result = $result * 10 + $a % 10;\n        $a = floor($a\
    \ / 10);\n    }\n    while ($b > 0) {\n        $result = $result * 10 + $b % 10;\n\
    \        $b = floor($b / 10);\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpszyewh9c.php:30\n\
    Stack trace:\n#0 /tmp/tmpszyewh9c.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpszyewh9c.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    if ($a < 10) {\n      \
    \  return $a * $b;\n    }\n    if ($b < 10) {\n        return $a * $b;\n    }\n\
    \    if ($a < 100) {\n        return $a * $b;\n    }\n    if ($b < 100) {\n  \
    \      return $a * $b;\n    }\n    if ($a < 1000) {\n        return $a * $b;\n\
    \    }\n    if ($b < 1000) {\n        return $a * $b;\n    }\n    if ($a < 10000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 10000) {\n        return $a\
    \ * $b;\n    }\n    if ($a < 100000) {\n        return $a * $b;\n    }\n    if\
    \ ($b < 100000) {\n        return $a * $b;\n    }\n    if ($a < 1000000) {\n \
    \       return $a * $b;\n    }\n    if ($b < 1000000) {\n        return $a * $b;\n\
    \    }\n    if ($a < 10000000) {\n        return $a * $b;\n    }\n    if ($b <\
    \ 10000000) {\n        return $a * $b;\n    }\n    if ($a < 100000000) {\n   \
    \     return $a * $b;\n    }\n    if ($b < 100000000) {\n        return $a * $b;\n\
    \    }\n    if ($a < 1000000000) {\n        return $a * $b;\n    }\n    if ($b\
    \ < 1000000000) {\n        return $a * $b;\n    }\n    if ($a < 10000000000) {\n\
    \        return $a * $b;\n    }\n    if ($b < 10000000000) {\n        return $a\
    \ * $b;\n    }\n    if ($a < 100000000000) {\n        return $a * $b;\n    }\n\
    \    if ($b < 100000000000) {\n        return $a * $b;\n    }\n    if ($a < 1000000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 1000000000000) {\n        return\
    \ $a * $b;\n    }\n    if ($a < 10000000000000) {\n        return $a * $b;\n \
    \   }\n    if ($b < 10000000000000) {\n        return $a * $b;\n    }\n    if\
    \ ($a < 100000000000000) {\n        return $a * $b;\n    }\n    if ($b < 100000000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($a < 1000000000000000) {\n      \
    \  return $a * $b;\n    }\n    if ($b < 1000000000000000) {\n        return $a\
    \ * $b;\n    }\n    if ($a \nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3kcdnkil.php on line 106\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b;\n    }\n    if ($a < 100) {\n      \
    \  return $a * $b;\n    }\n    if ($b < 100) {\n        return $a * $b;\n    }\n\
    \    if ($a < 1000) {\n        return $a * $b;\n    }\n    if ($b < 1000) {\n\
    \        return $a * $b;\n    }\n    if ($a < 10000) {\n        return $a * $b;\n\
    \    }\n    if ($b < 10000) {\n        return $a * $b;\n    }\n    if ($a < 100000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 100000) {\n        return $a\
    \ * $b;\n    }\n    if ($a < 1000000) {\n        return $a * $b;\n    }\n    if\
    \ ($b < 1000000) {\n        return $a * $b;\n    }\n    if ($a < 10000000) {\n\
    \        return $a * $b;\n    }\n    if ($b < 10000000) {\n        return $a *\
    \ $b;\n    }\n    if ($a < 100000000) {\n        return $a * $b;\n    }\n    if\
    \ ($b < 100000000) {\n        return $a * $b;\n    }\n    if ($a < 1000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 1000000000) {\n        return\
    \ $a * $b;\n    }\n    if ($a < 10000000000) {\n        return $a * $b;\n    }\n\
    \    if ($b < 10000000000) {\n        return $a * $b;\n    }\n    if ($a < 100000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 100000000000) {\n        return\
    \ $a * $b;\n    }\n    if ($a < 1000000000000) {\n        return $a * $b;\n  \
    \  }\n    if ($b < 1000000000000) {\n        return $a * $b;\n    }\n    if ($a\
    \ < 10000000000000) {\n        return $a * $b;\n    }\n    if ($b < 10000000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($a < 100000000000000) {\n       \
    \ return $a * $b;\n    }\n    if ($b < 100000000000000) {\n        return $a *\
    \ $b;\n    }\n    if ($a < 1000000000000000) {\n        return $a * $b;\n    }\n\
    \    if ($b < 1000000000000000) {\n        return $a * $b;\n    }\n    if ($a\
    \ < 10000000000000000) {\n        return \nfunction candidate(...$args) {\n  \
    \  return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprzv1ch69.php on line 106\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n        exit;\n    }\n    $unitDigits = $a % 10;\n\
    \    $aRemainder = $a / 10;\n    $bRemainder = $b / 10;\n    if ($unitDigits ==\
    \ 0) {\n        return $a * $b;\n    }\n    return $unitDigits * multiply($aRemainder,\
    \ $bRemainder);\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_h3nesm.php:29\n\
    Stack trace:\n#0 /tmp/tmpr_h3nesm.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpr_h3nesm.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $unitDigits = $a % 10;\n\
    \    $aRemainder = $a / 10;\n    $bRemainder = $b / 10;\n    if ($unitDigits ==\
    \ 0) {\n        return $a * $b;\n    }\n    return $unitDigits * multiply($aRemainder,\
    \ $bRemainder);\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8uglt255.php:28\n\
    Stack trace:\n#0 /tmp/tmp8uglt255.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8uglt255.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    if ($a < 10) {\n       \
    \ return $a * $b;\n    }\n    if ($b < 10) {\n        return $a * $b;\n    }\n\
    \    $c = $a * 10;\n    $d = $b * 10;\n    if ($c < $d) {\n        return $c;\n\
    \    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvetu7vo.php:33\n\
    Stack trace:\n#0 /tmp/tmpyvetu7vo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyvetu7vo.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n}\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphlqfpxdg.php:18\n\
    Stack trace:\n#0 /tmp/tmphlqfpxdg.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphlqfpxdg.php\
    \ on line 18\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $digits = str_split($b);\n\
    \    foreach ($digits as $digit) {\n        $product += $a * $digit;\n    }\n\
    \    return $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjbk3crym.php:24\n\
    Stack trace:\n#0 /tmp/tmpjbk3crym.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjbk3crym.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = $a; $i <= $b; $i++) {\n        $sum = $sum + $i;\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr05rlzur.php:24\n\
    Stack trace:\n#0 /tmp/tmpr05rlzur.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpr05rlzur.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit of $a and $b.\n    for($i = 0; $i < strlen($a); $i++) {\n\
    \        // Add $a's digit to $b's digit.\n        $product += $a[$i] * $b[$i];\n\
    \    }\n    \n    // If the product is negative, return 0.\n    if($product <\
    \ 0) {\n        return 0;\n    }\n    \n    // If the product is positive, return\
    \ the product.\n    return $product;\n}\n\nfunction candidate(...$args) {\n  \
    \  return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzpj4f7x6.php:33\n\
    Stack trace:\n#0 /tmp/tmpzpj4f7x6.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzpj4f7x6.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    while($a > 0){\n        $sum += $a % 10;\n        $a = floor($a/10);\n  \
    \  }\n    while($b > 0){\n        $sum += $b % 10;\n        $b = floor($b/10);\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20l7ybei.php:29\n\
    Stack trace:\n#0 /tmp/tmp20l7ybei.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp20l7ybei.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a || $b) {\n        $product\
    \ = ($product * 10) + ($a % 10);\n        $a = floor($a / 10);\n        $b = floor($b\
    \ / 10);\n    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n \
    \   return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75lq3ujr.php:28\n\
    Stack trace:\n#0 /tmp/tmp75lq3ujr.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp75lq3ujr.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + 10;\n    }\n    if ($b < 100) {\n \
    \       return $a * $b + 100;\n    }\n    if ($b < 1000) {\n        return $a\
    \ * $b + 1000;\n    }\n    if ($b < 10000) {\n        return $a * $b + 10000;\n\
    \    }\n    if ($b < 100000) {\n        return $a * $b + 100000;\n    }\n    if\
    \ ($b < 1000000) {\n        return $a * $b + 1000000;\n    }\n    if ($b < 10000000)\
    \ {\n        return $a * $b + 10000000;\n    }\n    if ($b < 100000000) {\n  \
    \      return $a * $b + 100000000;\n    }\n    if ($b < 1000000000) {\n      \
    \  return $a * $b + 1000000000;\n    }\n    if ($b < 10000000000) {\n        return\
    \ $a * $b + 10000000000;\n    }\n    if ($b < 100000000000) {\n        return\
    \ $a * $b + 100000000000;\n    }\n    if ($b < 1000000000000) {\n        return\
    \ $a * $b + 1000000000000;\n    }\n    if ($b < 10000000000000) {\n        return\
    \ $a * $b + 10000000000000;\n    }\n    if ($b < 100000000000000) {\n        return\
    \ $a * $b + 100000000000000;\n    }\n    if ($b < 1000000000000000) {\n      \
    \  return $a * $b + 1000000000000000;\n    }\n    if ($b < 10000000000000000)\
    \ {\n        return $a * $b + 100000000000000000;\n    }\n    if ($b < 100000000000000000)\
    \ {\n        return $a * $b + 100000000000000000;\n    }\n    if ($b < 1000000000000000000)\
    \ {\n        return $a * $b + 1000000000000000000;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprki0_ph7.php:77\n\
    Stack trace:\n#0 /tmp/tmprki0_ph7.php(87): test()\n#1 {main}\n  thrown in /tmp/tmprki0_ph7.php\
    \ on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + 10;\n    }\n    if ($b < 100) {\n \
    \       return $a * $b + 100;\n    }\n    if ($b < 1000) {\n        return $a\
    \ * $b + 1000;\n    }\n    if ($b < 10000) {\n        return $a * $b + 10000;\n\
    \    }\n    if ($b < 100000) {\n        return $a * $b + 100000;\n    }\n    if\
    \ ($b < 1000000) {\n        return $a * $b + 1000000;\n    }\n    if ($b < 10000000)\
    \ {\n        return $a * $b + 10000000;\n    }\n    if ($b < 100000000) {\n  \
    \      return $a * $b + 100000000;\n    }\n    if ($b < 1000000000) {\n      \
    \  return $a * $b + 1000000000;\n    }\n    if ($b < 10000000000) {\n        return\
    \ $a * $b + 10000000000;\n    }\n    if ($b < 100000000000) {\n        return\
    \ $a * $b + 100000000000;\n    }\n    if ($b < 1000000000000) {\n        return\
    \ $a * $b + 1000000000000;\n    }\n    if ($b < 10000000000000) {\n        return\
    \ $a * $b + 10000000000000;\n    }\n    if ($b < 100000000000000) {\n        return\
    \ $a * $b + 100000000000000;\n    }\n    if ($b < 1000000000000000) {\n      \
    \  return $a * $b + 1000000000000000;\n    }\n    if ($b < 10000000000000000)\
    \ {\n        return $a * $b + 100000000000000000;\n    }\n    if ($b < 100000000000000000)\
    \ {\n        return $a * $b + 100000000000000000;\n    }\n    if ($b < 1000000000000000000)\
    \ {\n        return $a * $b + 1000000000000000000;\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa8zqj8pv.php:78\n\
    Stack trace:\n#0 /tmp/tmpa8zqj8pv.php(88): test()\n#1 {main}\n  thrown in /tmp/tmpa8zqj8pv.php\
    \ on line 78\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    while($a\
    \ > 0) {\n        $product = $product * 10 + $a % 10;\n        $a = floor($a /\
    \ 10);\n    }\n    \n    while($b > 0) {\n        $product = $product * 10 + $b\
    \ % 10;\n        $b = floor($b / 10);\n    }\n    \n    return $product;\n}\n\n\
    function candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5i7953h.php:31\n\
    Stack trace:\n#0 /tmp/tmpm5i7953h.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpm5i7953h.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit\n    for ($i = 0; $i < strlen($a); $i++) {\n        // Add\
    \ the current digit to the product\n        $product += $a[$i] * $b[$i];\n   \
    \ }\n    \n    // Return the product\n    return $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplpbe29jb.php:28\n\
    Stack trace:\n#0 /tmp/tmplpbe29jb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmplpbe29jb.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $product = 0;\n    $digits\
    \ = array();\n    while ($a || $b) {\n        $digits[] = $a % 10;\n        $a\
    \ = floor($a / 10);\n        $b = floor($b / 10);\n    }\n    for ($i = 0; $i\
    \ < count($digits); $i++) {\n        $product += $digits[$i] * pow($10, $i);\n\
    \    }\n    return $product;\n}\n\nfunction candidate(...$args) {\n    return\
    \ multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412)\
    \ !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28)\
    \ !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxhc59v5r.php on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++) {\n        $sum += $a{$i} * $b{$i};\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjq93d93b.php:24\n\
    Stack trace:\n#0 /tmp/tmpjq93d93b.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpjq93d93b.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $unitDigits\
    \ = array();\n    \n    // Loop through each unit digit.\n    for($i = 0; $i <\
    \ strlen($a); $i++) {\n        // Get the unit digit.\n        $unitDigit = $a[$i];\n\
    \        \n        // If the unit digit is less than 10, add it to the product.\n\
    \        if($unitDigit < 10) {\n            $product += $unitDigit;\n        }\n\
    \        \n        // If the unit digit is greater than 10, subtract it from the\
    \ product.\n        else {\n            $product -= $unitDigit;\n        }\n \
    \   }\n    \n    // Return the product of the unit digits.\n    return $product;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjhitle7.php:39\n\
    Stack trace:\n#0 /tmp/tmpbjhitle7.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpbjhitle7.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b + $b * 100 + $b * 10 + $b * 100;\n    }\n    if ($b\
    \ < 1000) {\n        return $a * $b + $b * 1000 + $b * 100 + $b * 10 + $b * 1000;\n\
    \    }\n    if ($b < 10000) {\n        return $a * $b + $b * 10000 + $b * 1000\
    \ + $b * 100 + $b * 10 + $b * 1000;\n    }\n    if ($b < 100000) {\n        return\
    \ $a * $b + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b * 1000;\n\
    \    }\n    if ($b < 1000000) {\n        return $a * $b + $b * 1000000 + $b *\
    \ 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b * 1000;\n    }\n \
    \   if ($b < 10000000) {\n        return $a * $b + $b * 10000000 + $b * 1000000\
    \ + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b * 1000;\n \
    \   }\n    if ($b < 100000000) {\n        return $a * $b + $b * 100000000 + $b\
    \ * 10000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b\
    \ * 1000;\n    }\n    if ($b < 1000000000) {\n        return $a * $b + $b * 1000000000\
    \ + $b * 100000000 + $b * 10000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b\
    \ * 100 + $b * 10 + $b * 1000;\n    }\n    if ($b < 10000000000) {\n        return\
    \ $a * $b + $b * 10000000000 + $b * 1000000000 + $b * 100000000 + $b * 10000000\
    \ + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b * 1000;\n \
    \   }\n    if ($b < 100000000000) {\n        return $a * $b + $b * 100000000000\
    \ + $b * 10000000000 + $b * 1000000000 + $b * 100000000 + $b * 10000000 + $b *\
    \ 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $b * 1000;\n    }\n \
    \   if ($b < 1000000000000) {\n        return $a * $b + $b * 100\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd2uu_e7k.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b + $b * 100 + $b * 10 + $a * 100;\n    }\n    if ($b\
    \ < 1000) {\n        return $a * $b + $b * 1000 + $b * 100 + $b * 10 + $a * 1000;\n\
    \    }\n    if ($b < 10000) {\n        return $a * $b + $b * 10000 + $b * 1000\
    \ + $b * 100 + $b * 10 + $a * 10000;\n    }\n    if ($b < 100000) {\n        return\
    \ $a * $b + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $a * 100000;\n\
    \    }\n    if ($b < 1000000) {\n        return $a * $b + $b * 1000000 + $b *\
    \ 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $a * 1000000;\n    }\n\
    \    if ($b < 10000000) {\n        return $a * $b + $b * 10000000 + $b * 1000000\
    \ + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $a * 10000000;\n\
    \    }\n    if ($b < 100000000) {\n        return $a * $b + $b * 100000000 + $b\
    \ * 10000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10 + $a\
    \ * 100000000;\n    }\n    if ($b < 1000000000) {\n        return $a * $b + $b\
    \ * 1000000000 + $b * 100000000 + $b * 10000000 + $b * 100000 + $b * 10000 + $b\
    \ * 1000 + $b * 100 + $b * 10 + $a * 1000000000;\n    }\n    if ($b < 10000000000)\
    \ {\n        return $a * $b + $b * 10000000000 + $b * 1000000000 + $b * 100000000\
    \ + $b * 10000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10\
    \ + $a * 10000000000;\n    }\n    if ($b < 100000000000) {\n        return $a\
    \ * $b + $b * 100000000000 + $b * 10000000000 + $b * 1000000000 + $b * 100000000\
    \ + $b * 10000000 + $b * 100000 + $b * 10000 + $b * 1000 + $b * 100 + $b * 10\
    \ + $a * 100000000000;\n    }\n    if ($b < \nfunction candidate(...$args) {\n\
    \    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp_6w6nk3.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++){\n        $sum += $a[$i] * $b[$i];\n \
    \   }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvv555ahj.php:23\n\
    Stack trace:\n#0 /tmp/tmpvv555ahj.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpvv555ahj.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a && $b) {\n        $product\
    \ += $a % 10;\n        $a = floor($a / 10);\n        $b = floor($b / 10);\n  \
    \  }\n    return $product * $b;\n}\n\nfunction candidate(...$args) {\n    return\
    \ multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148, 412)\
    \ !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19, 28)\
    \ !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp488cxceq.php:28\n\
    Stack trace:\n#0 /tmp/tmp488cxceq.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp488cxceq.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $digits = str_split($b);\n\
    \    foreach ($digits as $digit) {\n        $product += $a * $digit;\n    }\n\
    \    return $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zqwu383.php:24\n\
    Stack trace:\n#0 /tmp/tmp0zqwu383.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0zqwu383.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $product\
    \ = 0;\n    while($a > 0) {\n        $product = $product * 10 + $a % 10;\n   \
    \     $a = floor($a/10);\n    }\n    while($b > 0) {\n        $product = $product\
    \ * 10 + $b % 10;\n        $b = floor($b/10);\n    }\n    return $product;\n}\n\
    \nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5vjipgod.php:29\n\
    Stack trace:\n#0 /tmp/tmp5vjipgod.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5vjipgod.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * $a;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b + $b * $a + $b * $a * $b;\n    }\n    if ($b < 1000)\
    \ {\n        return $a * $b + $b * $a + $b * $a * $b + $b * $a * $b * $b;\n  \
    \  }\n    if ($b < 10000) {\n        return $a * $b + $b * $a + $b * $a * $b +\
    \ $b * $a * $b * $b +\n            $b * $a * $b * $b * $a;\n    }\n    if ($b\
    \ < 100000) {\n        return $a * $b + $b * $a + $b * $a * $b + $b * $a * $b\
    \ * $b +\n            $b * $a * $b * $b * $a + $b * $a * $b * $b * $a * $b;\n\
    \    }\n    if ($b < 1000000) {\n        return $a * $b + $b * $a + $b * $a *\
    \ $b + $b * $a * $b * $b +\n            $b * $a * $b * $b * $a + $b * $a * $b\
    \ * $b * $a * $b +\n            $b * $a * $b * $b * $a * $b;\n    }\n    if ($b\
    \ < 10000000) {\n        return $a * $b + $b * $a + $b * $a * $b + $b * $a * $b\
    \ * $b +\n            $b * $a * $b * $b * $a + $b * $a * $b * $b * $a * $b +\n\
    \            $b * $a * $b * $b * $a * $b + $b * $a * $b * $b * $a * $b +\n   \
    \         $b * $a * $b * $b * $a * $b * $b;\n    }\n    if ($b < 100000000) {\n\
    \        return $a * $b + $b * $a + $b * $a * $b + $b * $a * $b * $b +\n     \
    \       $b * $a * $b * $b * $a + $b * $a * $b * $b * $a * $b +\n            $b\
    \ * $a * $b * $b * $a * $b + $b * $a * $b\nfunction candidate(...$args) {\n  \
    \  return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmaaj87lr.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    return $a * $b\
    \ + $b * 10 + $b * 100;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6gc5e8c.php:28\n\
    Stack trace:\n#0 /tmp/tmpc6gc5e8c.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpc6gc5e8c.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b * 10;\n    }\n    return $a * $b * 10;\n\
    }\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46ue7oi7.php:27\n\
    Stack trace:\n#0 /tmp/tmp46ue7oi7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp46ue7oi7.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    if ($a > $b) {\n       \
    \ $temp = $a;\n        $a = $b;\n        $b = $temp;\n    }\n    $product = 0;\n\
    \    \n    while($a > 0) {\n        $product = ($product * 10) + ($a % 10);\n\
    \        $a = floor($a / 10);\n    }\n    \n    while($b > 0) {\n        $product\
    \ = ($product * 10) + ($b % 10);\n        $b = floor($b / 10);\n    }\n    \n\
    \    return $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcq_gz1sd.php:39\n\
    Stack trace:\n#0 /tmp/tmpcq_gz1sd.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcq_gz1sd.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    $unitDigits\
    \ = $a % 10;\n    $unitDigits = $unitDigits < 0 ? $unitDigits + 10 : $unitDigits;\n\
    \    $unitDigits = $unitDigits > 9 ? 9 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n\
    \    $unitDigits = $unitDigits < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits\
    \ < 0 ? 0 : $unitDigits;\n    $unitDigits = $unitDigits < 0 ? 0 : \nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpza3ifuid.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    if ($a < 10) {\n        return $a * $b;\n    }\n   \
    \ if ($b < 10) {\n        return $a * $b + $b * 10;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b + $b * 10 + $b * 100;\n    }\n    if ($b < 1000) {\n\
    \        return $a * $b + $b * 10 + $b * 100 + $b * 1000;\n    }\n    if ($b <\
    \ 10000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000;\n\
    \    }\n    if ($b < 100000) {\n        return $a * $b + $b * 10 + $b * 100 +\
    \ $b * 1000 + $b * 10000 + $b * 100000;\n    }\n    if ($b < 1000000) {\n    \
    \    return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ + $b * 1000000;\n    }\n    if ($b < 10000000) {\n        return $a * $b + $b\
    \ * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000 + $b *\
    \ 10000000;\n    }\n    if ($b < 100000000) {\n        return $a * $b + $b * 10\
    \ + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000 + $b * 10000000\
    \ + $b * 100000000 + $b * 1000000000;\n    }\n    if ($b < 1000000000) {\n   \
    \     return $a * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000\
    \ + $b * 1000000 + $b * 10000000 + $b * 100000000 + $b * 1000000000 + $b * 10000000000\
    \ + $b * 100000000000;\n    }\n    if ($b < 100000000000) {\n        return $a\
    \ * $b + $b * 10 + $b * 100 + $b * 1000 + $b * 10000 + $b * 100000 + $b * 1000000\
    \ + $b * 10000000 + $b * 100000000 + $b * 1000000000 + $b * 10000000000 + $b *\
    \ 100000000000 + $b * 1000000000000 + $b * 10000000000000;\n    }\n    if ($b\
    \ < 1000000000000) {\n        return $a * $b + $b * 10 + $b * 100 + $b * 1000\
    \ + $b * 10000 + $b * 100000 + $b * 1000000 + $b * 10000000 + $b * 100000000 +\
    \ $b * 1000000000 + $b * 10000000000 + $b * 100000000000 + $b * 1000000000000\
    \ + $b * 10000000000000 + \nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptna89vq5.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit in each number\n    for($i = 0; $i < strlen($a); $i++) {\n\
    \        // Get the current digit from each number\n        $digitA = $a[$i];\n\
    \        $digitB = $b[$i];\n        \n        // Add the current digit to the\
    \ product\n        $product += $digitA * $digitB;\n    }\n    \n    // Return\
    \ the product\n    return $product;\n}\n\nfunction candidate(...$args) {\n   \
    \ return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzj73_f9r.php:32\n\
    Stack trace:\n#0 /tmp/tmpzj73_f9r.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpzj73_f9r.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    $product = 0;\n    \n    // Loop\
    \ through each digit.\n    for($i = 0; $i < strlen($a); $i++) {\n        // Get\
    \ the current digit.\n        $digit = $a[$i];\n        \n        // Get the next\
    \ digit.\n        $nextDigit = $b[$i];\n        \n        // If the next digit\
    \ is zero, ignore it.\n        if($nextDigit == 0) {\n            continue;\n\
    \        }\n        \n        // If the current digit is zero, ignore it.\n  \
    \      if($digit == 0) {\n            continue;\n        }\n        \n       \
    \ // If the current digit and next digit are both non-zero, \n        // multiply\
    \ them and add it to the product.\n        if($digit != 0 && $nextDigit != 0)\
    \ {\n            $product += $digit * $nextDigit;\n        }\n    }\n    \n  \
    \  // Return the product.\n    return $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoq66li3g.php:47\n\
    Stack trace:\n#0 /tmp/tmpoq66li3g.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpoq66li3g.php\
    \ on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    if ($a < 10) {\n        return $a * $b;\n\
    \    }\n    if ($b < 10) {\n        return $a * $b;\n    }\n    if ($b < 100)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 1000) {\n        return $a *\
    \ $b;\n    }\n    if ($b < 10000) {\n        return $a * $b;\n    }\n    if ($b\
    \ < 100000) {\n        return $a * $b;\n    }\n    if ($b < 1000000) {\n     \
    \   return $a * $b;\n    }\n    if ($b < 10000000) {\n        return $a * $b;\n\
    \    }\n    if ($b < 100000000) {\n        return $a * $b;\n    }\n    if ($b\
    \ < 1000000000) {\n        return $a * $b;\n    }\n    if ($b < 10000000000) {\n\
    \        return $a * $b;\n    }\n    if ($b < 100000000000) {\n        return\
    \ $a * $b;\n    }\n    if ($b < 1000000000000) {\n        return $a * $b;\n  \
    \  }\n    if ($b < 10000000000000) {\n        return $a * $b;\n    }\n    if ($b\
    \ < 100000000000000) {\n        return $a * $b;\n    }\n    if ($b < 1000000000000000)\
    \ {\n        return $a * $b;\n    }\n    if ($b < 10000000000000000) {\n     \
    \   return $a * $b;\n    }\n    if ($b < 100000000000000000) {\n        return\
    \ $a * $b;\n    }\n    if ($b < 1000000000000000000) {\n        return $a * $b;\n\
    \    }\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoq70s_5f.php:77\n\
    Stack trace:\n#0 /tmp/tmpoq70s_5f.php(87): test()\n#1 {main}\n  thrown in /tmp/tmpoq70s_5f.php\
    \ on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $sum = 0;\n    while ($a > 0) {\n        $sum += $a\
    \ % 10;\n        $a = floor($a / 10);\n    }\n    while ($b > 0) {\n        $sum\
    \ += $b % 10;\n        $b = floor($b / 10);\n    }\n    return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa31irr44.php:31\n\
    Stack trace:\n#0 /tmp/tmpa31irr44.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpa31irr44.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    for($i = 0; $i < strlen($a); $i++) {\n        $sum += $a[$i] * $b[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4dy5kbk.php:24\n\
    Stack trace:\n#0 /tmp/tmpo4dy5kbk.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpo4dy5kbk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $unitDigits = $a % 10;\n    $unitDigits = $unitDigits\
    \ * 10 + $b % 10;\n    $unitDigits = $unitDigits * 10 + $a % 10;\n    $unitDigits\
    \ = $unitDigits * 10 + $b % 10;\n    return $unitDigits;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2b0vt4sp.php:26\n\
    Stack trace:\n#0 /tmp/tmp2b0vt4sp.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp2b0vt4sp.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   echo \"Invalid input\";\n    }\n    $product = 0;\n    while ($a || $b) {\n\
    \        if ($a > 9) {\n            $product += $a % 10;\n            $a = $a\
    \ / 10;\n        } else {\n            $product += $a;\n            $a = 0;\n\
    \        }\n        if ($b > 9) {\n            $product += $b % 10;\n        \
    \    $b = $b / 10;\n        } else {\n            $product += $b;\n          \
    \  $b = 0;\n        }\n    }\n    return $product;\n}\n\nfunction candidate(...$args)\
    \ {\n    return multiply(...$args);\n}\n\nfunction test(): void {\n    if (candidate(148,\
    \ 412) !== 16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(19,\
    \ 28) !== 72) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2020,\
    \ 1851) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(14,\
    \ -15) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(76,\
    \ 67) !== 42) { throw new Exception(\"Test failed!\"); }\n    if (candidate(17,\
    \ 27) !== 49) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0,\
    \ 1) !== 0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0, 0)\
    \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxb5g_2zi.php:39\n\
    Stack trace:\n#0 /tmp/tmpxb5g_2zi.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxb5g_2zi.php\
    \ on line 39\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    while ($a > 0) {\n        $product\
    \ += ($a % 10);\n        $a = (int)($a / 10);\n    }\n    while ($b > 0) {\n \
    \       $product += ($b % 10);\n        $b = (int)($b / 10);\n    }\n    return\
    \ $product;\n}\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ae1ywi5.php:31\n\
    Stack trace:\n#0 /tmp/tmp3ae1ywi5.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3ae1ywi5.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    $product = 0;\n    while\
    \ ($a || $b) {\n        $product = ($product * 10) + ($a % 10);\n        $a =\
    \ floor($a / 10);\n        $b = floor($b / 10);\n    }\n    return $product;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexd83cur.php:28\n\
    Stack trace:\n#0 /tmp/tmpexd83cur.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpexd83cur.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   throw new Exception('Invalid input');\n    }\n    if ($a < 10) {\n       \
    \ return $a * $b;\n    }\n    if ($b < 10) {\n        return $a * $b;\n    }\n\
    \    if ($a < 100) {\n        return $a * $b * 10;\n    }\n    if ($b < 100) {\n\
    \        return $a * $b * 10;\n    }\n    if ($a < 1000) {\n        return $a\
    \ * $b * 100 + $a * $b * 10;\n    }\n    if ($b < 1000) {\n        return $a *\
    \ $b * 100 + $a * $b * 10;\n    }\n    if ($a < 10000) {\n        return $a *\
    \ $b * 1000 + $a * $b * 100 + $a * $b * 10;\n    }\n    if ($b < 10000) {\n  \
    \      return $a * $b * 1000 + $a * $b * 100 + $a * $b * 10;\n    }\n    if ($a\
    \ < 100000) {\n        return $a * $b * 10000 + $a * $b * 1000 + $a * $b * 100\
    \ + $a * $b * 10;\n    }\n    if ($b < 100000) {\n        return $a * $b * 10000\
    \ + $a * $b * 1000 + $a * $b * 100 + $a * $b * 10;\n    }\n    if ($a < 1000000)\
    \ {\n        return $a * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a *\
    \ $b * 100 + $a * $b * 10;\n    }\n    if ($b < 1000000) {\n        return $a\
    \ * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a * $b * 100 + $a * $b *\
    \ 10;\n    }\n    if ($a < 10000000) {\n        return $a * $b * 1000000 + $a\
    \ * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a * $b * 100 + $a * $b *\
    \ 10;\n    }\n    if ($b < 10000000) {\n        return $a * $b * 1000000 + $a\
    \ * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a * $b * 100 + $a * $b *\
    \ 10;\n    }\n    if ($a < 100000000) {\n        return $a * $b * 10000000 + $a\
    \ * $b * 1000000 + $a * $b * 100000 + $a * $b * 10000 + $a * $b * 1000 + $a *\
    \ $b * 100 + $a * $b\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph4dspc1y.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    if ($a < 0 || $b < 0) {\n     \
    \   return 0;\n    }\n    $product = 0;\n    $digits = max($a, $b);\n    for($i\
    \ = 0; $i < $digits; $i++) {\n        $product += $a % 10 * $b % 10;\n       \
    \ $a = floor($a/10);\n        $b = floor($b/10);\n    }\n    return $product;\n\
    }\n\nfunction candidate(...$args) {\n    return multiply(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(148, 412) !== 16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyr5nmh_m.php:29\n\
    Stack trace:\n#0 /tmp/tmpyr5nmh_m.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyr5nmh_m.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Complete the function that takes two integers and returns \n\
    // the product of their unit digits.\n// Assume the input is always valid.\n//\
    \ Examples:\n// multiply(148, 412) should return 16.\n// multiply(19, 28) should\
    \ return 72.\n// multiply(2020, 1851) should return 0.\n// multiply(14,-15) should\
    \ return 20.\nfunction multiply($a, $b) {\n    // Your code here\n    $sum = 0;\n\
    \    while($a > 0) {\n        $sum += $a % 10;\n        $a = floor($a/10);\n \
    \   }\n    while($b > 0) {\n        $sum += $b % 10;\n        $b = floor($b/10);\n\
    \    }\n    return $sum;\n}\nfunction candidate(...$args) {\n    return multiply(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(148, 412) !== 16) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(19, 28) !== 72) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(2020, 1851) !== 0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(14, -15) !== 20) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(76, 67) !== 42) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(17, 27) !== 49) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(0, 1) !== 0) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(0, 0) !== 0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp189ck3bk.php:28\n\
    Stack trace:\n#0 /tmp/tmp189ck3bk.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp189ck3bk.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
