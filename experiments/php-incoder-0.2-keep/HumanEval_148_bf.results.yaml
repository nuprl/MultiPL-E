name: HumanEval_148_bf
language: php
results:
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        $planet1\
    \ = \"earth\";\n    }\n    if ($planet2 === \"earth\" || $planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        $planet2 = \"earth\";\n    }\n    if ($planet1 === \"earth\" || $planet1\
    \ === \"mercury\" || $planet1 === \"venus\" || $planet1 === \"mars\" || $planet1\
    \ === \"jupiter\" || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1\
    \ === \"neptune\") {\n        $planet1 = \"earth\";\n    }\n    if ($planet2 ===\
    \ \"earth\" || $planet2 === \"mercury\" || $planet2 === \"venus\" || $planet2\
    \ === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\" || $planet2\
    \ === \"uranus\" || $planet2 === \"neptune\") {\n        $planet2 = \"earth\"\
    ;\n    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\"\
    \ \", $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpsf4a9riw.php on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array($planet2);\n    }\n    if\
    \ ($planet2 === \"sun\") {\n        return array($planet1);\n    }\n    $planet1orbits\
    \ = array();\n    $planet2orbits = array();\n    $planet1orbits[] = $planet1;\n\
    \    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet2;\n    $planet2orbits[]\
    \ = $planet1;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n\
    \    $planet1orbits[] = $planet2;\n    $planet2orbits[] = $planet1;\n    $planet1orbits[]\
    \ = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n\
    \    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[]\
    \ = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n\
    \    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[]\
    \ = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n\
    \    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[]\
    \ = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n\
    \    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[]\
    \ = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n\
    \    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[]\
    \ = $planet2;\n    $planet1orbits[] = $\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0wkneshs.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $sun1 = $sun1\
    \ - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2\
    \ / 2;\n    $sun1 = $sun1 * 0.5;\n    $sun2 = $sun2 * 0.5;\n    $sun1 = $sun1\
    \ + 0.5;\n    $sun2 = $sun2 - 0.5;\n    $sun1 = $sun1 - 0.5;\n    $sun2 = $sun2\
    \ + 0.5;\n    $sun1 = $sun1 * 0.5;\n    $sun2 = $sun2 * 0.5;\n    $sun1 = $sun1\
    \ + 0.5;\n    $sun2 = $sun2 - 0.5;\n    $sun1 = $sun1 - 0.5;\n    $sun2 = $sun2\
    \ + 0.5;\n    $sun1 = $sun1 * 0.5;\n    $sun2 = $sun2 * 0.5;\n    $sun1 = $sun1\
    \ + 0.5;\n    $sun2 = $sun2 - 0.5;\n    $sun1 = $sun1 - 0.5;\n    $sun2 = $sun2\
    \ + 0.5;\n    $sun1 = $sun1 * 0.5;\n    $sun2 = $sun2 * 0.5;\n    $sun1 = $sun1\
    \ + 0.5;\n    $sun2 = $sun2 - 0.5;\n    $sun1 = $sun1 - 0.5;\n    $sun2 = $sun2\
    \ + 0.5;\n    $sun1 = $sun1 * 0.5;\n    $sun2 = $sun2 * 0.5;\n    $sun1 = $sun1\
    \ + 0.5;\n    $sun2 = $sun2 - 0.5;\n    $sun1 = $sun1 - 0.5;\n    $sun2 = $sun2\
    \ + 0.5;\n    $sun1 = $sun1 * 0.5;\n    $sun2 = $sun2 * 0.5;\n    $\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdlnal_j3.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    if (count($planet1) < 1 || count($planet2) < 1) {\n        return array();\n\
    \    }\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxw77kthr.php on line 73\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    if ($planet1 == \"\" || $planet2 == \"\") {\n        return array();\n\
    \    }\n    $sun = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $sun1 = in_array($planet1, $sun)\
    \ ? $planet1 : \"\";\n    $sun2 = in_array($planet2, $sun) ? $planet2 : \"\";\n\
    \    if ($sun1 == \"\" || $sun2 == \"\") {\n        return array();\n    }\n \
    \   $sun1 = explode(\" \", $sun1);\n    $sun2 = explode(\" \", $sun2);\n    $sun1\
    \ = $sun1[0];\n    $sun2 = $sun2[0];\n    $sun1 = explode(\",\", $sun1);\n   \
    \ $sun2 = explode(\",\", $sun2);\n    $sun1 = $sun1[0];\n    $sun2 = $sun2[0];\n\
    \    $sun1 = explode(\".\", $sun1);\n    $sun2 = explode(\".\", $sun2);\n    $sun1\
    \ = $sun1[0];\n    $sun2 = $sun2[0];\n    $sun1 = explode(\":\", $sun1);\n   \
    \ $sun2 = explode(\":\", $sun2);\n    $sun1 = $sun1[0];\n    $sun2 = $sun2[0];\n\
    \    $sun1 = explode(\" \", $sun1);\n    $sun2 = explode(\" \", $sun2);\n    $sun1\
    \ = $sun1[0];\n    $sun2 = $sun2[0];\n    $sun1 = explode(\",\", $sun1);\n   \
    \ $sun2 = explode(\",\", $sun2);\n    $sun1 = $sun1[0];\n    $sun2 = $sun2[0];\n\
    \    $sun1 = explode(\".\", $sun1);\n    $sun2 = explode(\".\", $sun2);\n    $sun1\
    \ = $sun1[0];\n    $sun2 = $sun2[0];\n    $sun1 = explode(\":\", $sun1);\n   \
    \ $sun2 = explode(\":\", $sun2);\n    $sun1 = $sun1[0];\n    $sun2 = $sun\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfky0_t2x.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"mercury\" || $planet1 === \"venus\" || $planet1 === \"\
    earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        $planet1\
    \ = \"mercury\";\n    }\n    if ($planet2 === \"mercury\" || $planet2 === \"venus\"\
    \ || $planet2 === \"earth\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        $planet2 = \"mercury\";\n    }\n    if ($planet1 === \"mercury\"\
    \ || $planet1 === \"venus\" || $planet1 === \"earth\" || $planet1 === \"mars\"\
    \ || $planet1 === \"jupiter\" || $planet1 === \"saturn\" || $planet1 === \"uranus\"\
    \ || $planet1 === \"neptune\") {\n        $planet1 = \"mercury\";\n    }\n   \
    \ if ($planet2 === \"mercury\" || $planet2 === \"venus\" || $planet2 === \"earth\"\
    \ || $planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\"\
    \ || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n        $planet2\
    \ = \"mercury\";\n    }\n    if ($planet1 === \"mercury\" || $planet1 === \"venus\"\
    \ || $planet1 === \"earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\"\
    \ || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    ) {\n        $planet1 = \"mercury\";\n    }\n    if ($planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"earth\" || $planet2 === \"mars\"\
    \ || $planet2 === \"jupiter\" || $planet2 === \"saturn\" || $planet2 === \"uranus\"\
    \ || $planet2 === \"neptune\") {\n        $planet2 = \"mercury\";\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbdh0tjam.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_map(\"ucfirst\"\
    , $planet1);\n    $planet2 = array_map(\"ucfirst\", $planet2);\n    $planet1 =\
    \ array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_map(\"ucfirst\"\
    , $planet1);\n    $planet2 = array_map(\"ucfirst\", $planet2);\n    $planet1 =\
    \ array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_map(\"ucfirst\"\
    , $planet1);\n    $planet2 = array_map(\"ucfirst\", $planet2);\n    $planet1 =\
    \ array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_map(\"ucfirst\"\
    , $planet1);\n    $planet2 = array_map(\"ucfirst\", $planet2);\n    $planet1 =\
    \ array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_map(\"ucfirst\"\
    , $planet1);\n    $planet2 = array_map(\"ucfirst\", $planet2);\n    $planet1 =\
    \ array_unique($planet1);\n    $planet2 = array_\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpoq4a8nb_.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpoksc1545.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiifggw0s.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphjl0r1um.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpwtbwz3i4.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3iw3jwck.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpq1e3pzfu.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd76p6024.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    if (count($planet1) < 1 || count($planet2)\
    \ < 1) {\n        return array();\n    }\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n\
    \    $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg2j8jhju.php on line 74\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n    $planet2\
    \ = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n    $planet2\
    \ = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n    $planet2\
    \ = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpiz93flqm.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $sun = strtolower(\"sun\");\n\
    \    $planet1 = str_replace($sun, \"\", $planet1);\n    $planet2 = str_replace($sun,\
    \ \"\", $planet2);\n    $planets = array_merge($planets, array($planet1, $planet2));\n\
    \    $planets = array_unique($planets);\n    $planets = array_map(\"strtolower\"\
    , $planets);\n    $planets = array_map(\"str_replace\", $planets);\n    $planets\
    \ = array_map(\"strtolower\", $planets);\n    $planets = array_map(\"str_replace\"\
    , $planets);\n    $planets = array_map(\"strtolower\", $planets);\n    $planets\
    \ = array_map(\"str_replace\", $planets);\n    $planets = array_map(\"strtolower\"\
    , $planets);\n    $planets = array_map(\"str_replace\", $planets);\n    $planets\
    \ = array_map(\"strtolower\", $planets);\n    $planets = array_map(\"str_replace\"\
    , $planets);\n    $planets = array_map(\"strtolower\", $planets);\n    $planets\
    \ = array_map(\"str_replace\", $planets);\n    $planets = array_map(\"strtolower\"\
    , $planets);\n    $planets = array_map(\"str_replace\", $planets);\n    $planets\
    \ = array_map(\"strtolower\", $planets);\n    $planets = array_map(\"str_replace\"\
    , $planets);\n    $planets = array_map(\"strtolower\", $planets);\n    $planets\
    \ = array_map(\"str_replace\", $planets);\n    $planets = array_map(\"strtolower\"\
    , $planets);\n    $planets = array_map(\"str_replace\", $planets);\n    $planets\
    \ = array_map(\"strtolower\", $planets);\n    $planets = array_map(\"str_replace\"\
    , $planets);\n    $planets = array_map(\"strtolower\", $planets);\n    $planets\
    \ = array_map(\"str_replace\", $planets);\n    $planets = array_map(\"strtolower\"\
    , $planets);\n    $planets = array_map(\"str_replace\", $planets);\n    $planets\
    \ = array_map(\"strtolower\", $planets);\n    $\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptj2bt994.php on line 52\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $sun1 = $sun1\
    \ - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2\
    \ / 2;\n    $sun1 = $sun1 - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1\
    \ / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1 - $sun2;\n    $sun2 = $sun1\
    \ + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1\
    \ - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2\
    \ / 2;\n    $sun1 = $sun1 - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1\
    \ / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1 - $sun2;\n    $sun2 = $sun1\
    \ + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1\
    \ - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2\
    \ / 2;\n    $sun1 = $sun1 - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1\
    \ / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1 - $sun2;\n    $sun2 = $sun1\
    \ + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2 / 2;\n    $\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn5picnhe.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\") {\n        return array($planet2);\n    }\n    if ($planet2 === \"earth\"\
    \ || $planet2 === \"mercury\" || $planet2 === \"venus\") {\n        return array($planet1);\n\
    \    }\n    if ($planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1\
    \ === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n \
    \       return array($planet1, $planet2);\n    }\n    if ($planet2 === \"mars\"\
    \ || $planet2 === \"jupiter\" || $planet2 === \"saturn\" || $planet2 === \"uranus\"\
    \ || $planet2 === \"neptune\") {\n        return array($planet2, $planet1);\n\
    \    }\n    if ($planet1 === \"sun\" || $planet1 === \"mercury\" || $planet1 ===\
    \ \"venus\" || $planet1 === \"earth\" || $planet1 === \"mars\" || $planet1 ===\
    \ \"jupiter\" || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1\
    \ === \"neptune\") {\n        return array($planet1, $planet2);\n    }\n    if\
    \ ($planet2 === \"sun\" || $planet2 === \"mercury\" || $planet2 === \"venus\"\
    \ || $planet2 === \"earth\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        return array($planet2, $planet1);\n    }\n    return array();\n}\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_fg743e.php:44\n\
    Stack trace:\n#0 /tmp/tmp6_fg743e.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp6_fg743e.php\
    \ on line 44\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_merge($planets, array_flip($planets));\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planet\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuzz0anxq.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpkw3c9mhb.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        \"mercury\" => array(\"venus\", \"earth\", \"\
    mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"),\n        \"venus\"\
    \ => array(\"mercury\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\"),\n        \"earth\" => array(\"mercury\", \"venus\", \"mars\",\
    \ \"jupiter\", \"saturn\", \"uranus\", \"neptune\"),\n        \"mars\" => array(\"\
    mercury\", \"venus\", \"earth\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"\
    ),\n        \"jupiter\" => array(\"mercury\", \"venus\", \"earth\", \"mars\",\
    \ \"saturn\", \"uranus\", \"neptune\"),\n        \"saturn\" => array(\"mercury\"\
    , \"venus\", \"earth\", \"mars\", \"jupiter\", \"uranus\", \"neptune\"),\n   \
    \     \"uranus\" => array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\", \"neptune\"),\n        \"neptune\" => array(\"mercury\", \"venus\"\
    , \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\")\n    );\n    $planet1\
    \ = $planets[$planet1][$planet2];\n    $planet2 = $planets[$planet2][$planet1];\n\
    \    $planets = array(\n        \"mercury\" => array(\"venus\", \"earth\", \"\
    mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"),\n        \"venus\"\
    \ => array(\"mercury\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\"),\n        \"earth\" => array(\"mercury\", \"venus\", \"mars\",\
    \ \"jupiter\", \"saturn\", \"uranus\", \"neptune\"),\n        \"mars\" => array(\"\
    mercury\", \"venus\", \"earth\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"\
    ),\n        \"jupiter\" => array(\"mercury\", \"venus\", \"earth\", \"mars\",\
    \ \"saturn\", \"uranus\", \"neptune\"),\n        \"saturn\" => array(\"mercury\"\
    , \"venus\", \"earth\", \"mars\", \"jupiter\", \"uranus\", \"neptune\"),\n   \
    \     \"uranus\" => \nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpn921auqm.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\"\
    \ || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    ) {\n        return array($planet2);\n    }\n    if ($planet2 === \"earth\" ||\
    \ $planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\"\
    \ || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n        return array($planet1);\n\
    \    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \"\
    , $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1\
    \ = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planet1\
    \ = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1\
    \ = $planet1[0];\n    $planet2 = $planet2[0];\n    if ($planet1 === \"mercury\"\
    \ || $planet1 === \"venus\" || $planet1 === \"earth\" || $planet1 === \"mars\"\
    \ || $planet1 === \"jupiter\" || $planet1 === \"saturn\" || $planet1 === \"uranus\"\
    \ || $planet1 === \"neptune\") {\n        $planet1 = \"earth\";\n    }\n    if\
    \ ($planet2 === \"mercury\" || $planet2 === \"venus\" || $planet2 === \"earth\"\
    \ || $planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\"\
    \ || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n        $planet2\
    \ = \"earth\";\n    }\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = strtolower($planet1);\n\
    \    $planet2 = strtolower($\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp_u10gfnu.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpm8474cfh.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjpth8rb_.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        return\
    \ array($planet2);\n    }\n    if ($planet2 === \"earth\" || $planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        return array($planet1);\n    }\n    return array();\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpww_asgyo.php:32\n\
    Stack trace:\n#0 /tmp/tmpww_asgyo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpww_asgyo.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $sun1 = $sun1\
    \ - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2\
    \ / 2;\n    $sun1 = $sun1 + $sun2;\n    $sun2 = $sun2 - $sun1;\n    $sun1 = $sun1\
    \ / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1 + $sun2;\n    $sun2 = $sun2\
    \ - $sun1;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1\
    \ + $sun2;\n    $sun2 = $sun2 - $sun1;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2\
    \ / 2;\n    $sun1 = $sun1 + $sun2;\n    $sun2 = $sun2 - $sun1;\n    $sun1 = $sun1\
    \ / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1 + $sun2;\n    $sun2 = $sun2\
    \ - $sun1;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1\
    \ + $sun2;\n    $sun2 = $sun2 - $sun1;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2\
    \ / 2;\n    $sun1 = $sun1 + $sun2;\n    $sun2 = $sun2 - $sun1;\n    $sun1 = $sun1\
    \ / 2;\n    $sun2 = $sun2 / 2;\n    $sun1 = $sun1 + $sun2;\n    $sun2 = $sun2\
    \ - $sun1;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2 / 2;\n    $\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2diiw475.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_map(\"strtolower\"\
    , $planet1);\n    $planet2 = array_map(\"strtolower\", $planet2);\n    $planet1\
    \ = array_filter($planet1, \"strlen\");\n    $planet2 = array_filter($planet2,\
    \ \"strlen\");\n    $planet1 = array_map(\"str_replace\", $planet1);\n    $planet2\
    \ = array_map(\"str_replace\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_map(\"str_replace\", $planet1);\n    $planet2 = array_map(\"str_replace\"\
    , $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_map(\"str_replace\"\
    , $planet1);\n    $planet2 = array_map(\"str_replace\", $planet2);\n    $planet1\
    \ = array_filter($planet1, \"strlen\");\n    $planet2 = array_filter($planet2,\
    \ \"strlen\");\n    $planet1 = array_map(\"str_replace\", $planet1);\n    $planet2\
    \ = array_map(\"str_replace\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_map(\"str_replace\", $planet1);\n    $planet2 = array_map(\"str_replace\"\
    , $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_map(\"str_replace\"\
    , $planet1);\n    $planet2 = array_map(\"str_replace\", $planet2);\n    $planet1\
    \ = array_filter($planet1, \"strlen\");\n    $planet2 = array_filter($planet2,\
    \ \"strlen\");\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmphg3kfe0f.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\" \", \"\", $planet1);\n    $planet2 = str_replace(\"\
    \ \", \"\", $planet2);\n    $planet1 = str_replace(\",\", \"\", $planet1);\n \
    \   $planet2 = str_replace(\",\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    '\", \"\", $planet1);\n    $planet2 = str_replace(\"'\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"&\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    &\", \"\", $planet2);\n    $planet1 = str_replace(\"!\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"!\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ?\", \"\", $planet1);\n    $planet2 = str_replace(\"?\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"(\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    (\", \"\", $planet2);\n    $planet1 = str_replace(\")\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\")\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ,\", \"\", $planet1);\n    $planet2 = str_replace(\",\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\";\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    ;\", \"\", $planet2);\n    $planet1 = str_replace(\":\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\":\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ,\", \"\", $planet1);\n    $planet2 = str_replace(\",\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"&\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    &\", \"\", $planet2);\n    $planet1 = str_replace(\"!\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"!\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ?\", \"\", $planet1);\n    $planet2 = str_replace(\"?\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"(\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    (\", \"\", $planet2);\n    $planet1 = str_replace(\")\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\")\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ,\", \"\", $\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptiq3xmur.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2,\
    \ $planet1);\n    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2,\
    \ $planet1);\n    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2,\
    \ $planet1);\n    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp53cesw18.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $sunDistance\
    \ = sqrt((($sun2 - $sun1)*($sun2 - $sun1)) + (($sun1 - $sun2)*($sun1 - $sun2)));\n\
    \    $planetDistance = sqrt((($planet2 - $planet1)*($planet2 - $planet1)) + (($planet1\
    \ - $planet2)*($planet1 - $planet2)));\n    return array($planet1, $planet2);\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpmmswz0xy.php on line\
    \ 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmswz0xy.php:37\n\
    Stack trace:\n#0 /tmp/tmpmmswz0xy.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpmmswz0xy.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpjehbq44e.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1 = explode(\" \"\
    , $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"\
    trim\", $planet1);\n    $planet2 = array_map(\"trim\", $planet2);\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpos644faj.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpq6jrq253.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\"\
    \ || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    ) {\n        return array($planet2);\n    }\n    if ($planet2 === \"earth\" ||\
    \ $planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\"\
    \ || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n        return array($planet1);\n\
    \    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \"\
    , $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"\
    trim\", $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_diff($planet1, $planet2);\n   \
    \ $planet2 = array_diff($planet2, $planet1);\n    $planet1 = array_diff($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_diff($planet1, $planet2);\n   \
    \ $planet2 = array_diff($planet2, $planet1);\n    $planet1 = array_diff($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpxz418kju.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpr_1zk_1o.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\"\
    \ || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    ) {\n        return array($planet2);\n    }\n    if ($planet2 === \"earth\" ||\
    \ $planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\"\
    \ || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n        return array($planet1);\n\
    \    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \"\
    , $planet2);\n    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2\
    \ = array_map(\"strtolower\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplv5mbmzr.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        'mercury' => 'Mercury',\n        'venus' => 'Venus',\n\
    \        'earth' => 'Earth',\n        'mars' => 'Mars',\n        'jupiter' =>\
    \ 'Jupiter',\n        'saturn' => 'Saturn',\n        'uranus' => 'Uranus',\n \
    \       'neptune' => 'Neptune'\n    );\n    $planet1 = $planets[$planet1];\n \
    \   $planet2 = $planets[$planet2];\n    $sun = array('mercury' => 'Mercury', 'venus'\
    \ => 'Venus', 'earth' => 'Earth', 'mars' => 'Mars', 'jupiter' => 'Jupiter', 'saturn'\
    \ => 'Saturn', 'uranus' => 'Uranus', 'neptune' => 'Neptune');\n    $sun1 = $sun[$planet1];\n\
    \    $sun2 = $sun[$planet2];\n    $planet1orbit = $sun1[$planet1];\n    $planet2orbit\
    \ = $sun2[$planet2];\n    $planet1orbitorbit = explode(' ', $planet1orbit);\n\
    \    $planet2orbitorbit = explode(' ', $planet2orbit);\n    $planet1orbitorbit\
    \ = array_intersect($planet1orbitorbit, $planet2orbitorbit);\n    $planet1orbitorbit\
    \ = array_unique($planet1orbitorbit);\n    $planet1orbitorbit = array_flip($planet1orbitorbit);\n\
    \    $planet2orbitorbit = array_intersect($planet1orbitorbit, $planet2orbitorbit);\n\
    \    $planet2orbitorbit = array_unique($planet2orbitorbit);\n    $planet2orbitorbit\
    \ = array_flip($planet2orbitorbit);\n    $planet1orbitorbit = array_flip($planet1orbitorbit);\n\
    \    $planet2orbitorbit = array_flip($planet2orbitorbit);\n    $planet1orbitorbit\
    \ = array_flip($planet1orbitorbit);\n    $planet2orbitorbit = array_flip($planet2orbitorbit);\n\
    \    $planet1orbitorbit = array_flip($planet1orbitorbit);\n    $planet2orbitorbit\
    \ = array_flip($planet2orbitorbit);\n    $planet1orbitorbit = array_flip($planet1orbitorbit);\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpj6xdetf1.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\", \"uranus\", \"neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2\
    \ !== \"\" ? $planet2 : \"\";\n    $planets = array(\"mercury\", \"venus\", \"\
    earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\");\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 :\
    \ \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\";\n    $planets = array(\"\
    mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\");\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\"\
    ;\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2\
    \ : \"\";\n    $planets = array(\"mercury\", \"venus\", \"earth\", \"mars\", \"\
    jupiter\", \"saturn\", \"uranus\", \"neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2\
    \ = $planet2 !== \"\" ? $planet2 : \"\";\n    $planets = array(\"mercury\", \"\
    venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"\
    );\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpukopjx6e.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun = array_search($planet1, $sun);\n    $sun = array_search($planet2,\
    \ $sun);\n    $sun = $sun[$sun];\n    $sun = explode(\" \", $sun);\n    $sun =\
    \ explode(\"-\", $sun[0]);\n    $sun = explode(\":\", $sun[1]);\n    $sun = explode(\"\
    .\", $sun[0]);\n    $sun = explode(\"/\", $sun[1]);\n    $sun = explode(\":\"\
    , $sun[0]);\n    $sun = explode(\":\", $sun[1]);\n    $sun = explode(\":\", $sun[0]);\n\
    \    $sun = explode(\":\", $sun[1]);\n    $sun = explode(\":\", $sun[0]);\n  \
    \  $sun = explode(\":\", $sun[1]);\n    $sun = explode(\":\", $sun[0]);\n    $sun\
    \ = explode(\":\", $sun[1]);\n    $sun = explode(\":\", $sun[0]);\n    $sun =\
    \ explode(\":\", $sun[1]);\n    $sun = explode(\":\", $sun[0]);\n    $sun = explode(\"\
    :\", $sun[1]);\n    $sun = explode(\":\", $sun[0]);\n    $sun = explode(\":\"\
    , $sun[1]);\n    $sun = explode(\":\", $sun[0]);\n    $sun = explode(\":\", $sun[1]);\n\
    \    $sun = explode(\":\", $sun[0]);\n    $sun = explode(\":\", $sun[1]);\n  \
    \  $sun = explode(\":\", $sun[0]);\n    $sun = explode(\":\", $sun[1]);\n    $sun\
    \ = explode(\":\", $sun[0]);\n    $sun = explode(\":\", $sun[1]);\n    $sun =\
    \ explode(\":\", $sun[0]);\n    $sun = explode(\":\", $sun[1]);\n    $sun = explode(\"\
    :\", $sun[0]);\n    $sun = explo\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpvl6dmoeq.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7w8dsbca.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps8_ked8x.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = \nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1x3ll7x7.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmprmea2h_z.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_map('strtolower',\
    \ $planets);\n    $planets = array_filter($planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_values($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp44jb6lqk.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = ($planet1 == \"\") ? \"Earth\" : $planet1;\n    $planet2\
    \ = ($planet2 == \"\") ? \"Earth\" : $planet2;\n    $planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2\
    \ = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1 = ($planet1\
    \ == \"\") ? \"Earth\" : $planet1;\n    $planet2 = ($planet2 == \"\") ? \"Earth\"\
    \ : $planet2;\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = ($planet1 == \"\") ? \"Earth\" : $planet1;\n\
    \    $planet2 = ($planet2 == \"\") ? \"Earth\" : $planet2;\n    $planets = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\"\
    ;\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = ($planet1 == \"\") ? \"Earth\" : $planet1;\n    $planet2 = ($planet2 == \"\
    \") ? \"Earth\" : $planet2;\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 =\
    \ in_array($planet1, $planet\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpljqpmv_0.php on line 40\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        return\
    \ array($planet2);\n    }\n    if ($planet2 === \"earth\" || $planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        return array($planet1);\n    }\n    if ($planet1 === \"sun\") {\n\
    \        return array();\n    }\n    if ($planet2 === \"sun\") {\n        return\
    \ array();\n    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\"\
    \ \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n \
    \   $planet1 = explode(\"-\", $planet1);\n    $planet2 = explode(\"-\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    :\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\".\", $planet1);\n    $planet2 = explode(\".\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5w4_aop7.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1orbit = orbit($planet1);\n\
    \    $planet2orbit = orbit($planet2);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $plan\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa4trce3b.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpbpdp47gn.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $planet1Orbit\
    \ = array($sun1, $sun2);\n    $planet2Orbit = array($sun2, $sun1);\n    $planet1Orbit\
    \ = array_merge($planet1Orbit, $planet2Orbit);\n    $planet1Orbit = array_unique($planet1Orbit);\n\
    \    $planet2Orbit = array_unique($planet2Orbit);\n    $planet1Orbit = array_flip($planet1Orbit);\n\
    \    $planet2Orbit = array_flip($planet2Orbit);\n    $planet1Orbit = array_flip($planet1Orbit);\n\
    \    $planet2Orbit = array_flip($planet2Orbit);\n    $planet1Orbit = array_flip($planet1Orbit);\n\
    \    $planet2Orbit = array_flip($planet2Orbit);\n    $planet1Orbit = array_flip($planet1Orbit);\n\
    \    $planet2Orbit = array_flip($planet2Orbit);\n    $planet1Orbit = array_flip($planet1Orbit);\n\
    \    $planet2Orbit = array_flip($planet2Orbit);\n    $planet1Orbit = array_flip($planet1Orbit);\n\
    \    $planet2Orbit = array_flip($planet2Orbit);\n    $planet1Orbit = array_flip($planet1Orbit);\n\
    \    $planet2\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgvin7rc6.php on line 47\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[]\
    \ = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[]\
    \ = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpq8znr5u1.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $sunDistance\
    \ = sqrt((($sun2 - $sun1)*($sun2 - $sun1))+(($sun1 - $sun2)*($sun1 - $sun2)));\n\
    \    $planetDistance = sqrt((($planet2 - $planet1)*($planet2 - $planet1))+(($planet1\
    \ - $planet2)*($planet1 - $planet2)));\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    if ($planetDistance < $sunDistance)\
    \ {\n        return array($planet1, $planet2);\n    } else {\n        return array();\n\
    \    }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 28\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 29\n\nWarning: A non-numeric value encountered in /tmp/tmpyvl1nx54.php on line\
    \ 29\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvl1nx54.php:43\n\
    Stack trace:\n#0 /tmp/tmpyvl1nx54.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyvl1nx54.php\
    \ on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        \"mercury\",\n        \"venus\",\n        \"earth\"\
    ,\n        \"mars\",\n        \"jupiter\",\n        \"saturn\",\n        \"uranus\"\
    ,\n        \"neptune\"\n    );\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\
    \";\n    $planet1 = in_array($planet2, $planets) ? $planet1 : \"\";\n    $planet2\
    \ = in_array($planet1, $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet2,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet1, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = in_array($planet2, $planets) ? $planet1 : \"\
    \";\n    $planet2 = in_array($planet1, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = in_array($planet2, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet1,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet2, $planets) ?\
    \ $planet1 : \"\";\n    $planet2 = in_array($planet1, $planets) ? $planet2 : \"\
    \";\n    $planet1 = in_array($planet2, $planets) ? $planet1 : \"\";\n    $planet2\
    \ = in_array($planet1, $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet2,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet1, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = in_array($planet2, $planets) ? $planet1 : \"\
    \";\n    $planet2 = in_array($planet1, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = in_array($planet2, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet1,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet2, $planets) ?\
    \ $planet1 : \"\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpbqjpvaxg.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $sunDistance\
    \ = sqrt((($sun2 - $sun1)/($sun2 - $sun1))*($sun2 - $sun1)*($sun2 - $sun1));\n\
    \    $planetDistance = sqrt((($planet2 - $planet1)/($planet2 - $planet1))*($planet2\
    \ - $planet1)*($planet2 - $planet1));\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance,\
    \ 2);\n    $sunDistance = round($sunDistance, 2);\n    $planetDistance = round($planetDistance\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2ltzfuc4.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_map(\"strtolower\"\
    , $planets);\n    $planets = array_unique($planets);\n    $planets = array_map(\"\
    strtolower\", $planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planets = array_flip($planets);\n    $planets =\
    \ array_flip($planets);\n    $planet\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpr0_aet2a.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpc3_a76ag.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_og6j2ge.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $sun = strtolower(\"sun\");\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planets = array_merge($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"trim\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"trim\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"trim\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"trim\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"trim\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"trim\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"trim\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"trim\", $planets);\n    $planets = array_map(\"strtolower\"\
    , $planets);\n    $\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpfo3enrt5.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    .\", $planet1);\n    $planet2 = explode(\".\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    .\", $planet1);\n    $planet2 = explode(\".\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdn6czur8.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpxif97dtq.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpllikgy52.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    if ($planet1\
    \ == -1 || $planet2 == -1) {\n        return array();\n    }\n    $planet1 = $planets[$planet1];\n\
    \    $planet2 = $planets[$planet2];\n    $sun = array(\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $sun = array_search($planet1, $sun);\n    $sun = array_search($planet2, $sun);\n\
    \    if ($sun == -1) {\n        return array();\n    }\n    $sun = $sun;\n   \
    \ $sun = $sun + 1;\n    $sun = $sun - 1;\n    $sun = $sun + 2;\n    $sun = $sun\
    \ - 2;\n    $sun = $sun + 3;\n    $sun = $sun - 3;\n    $sun = $sun + 4;\n   \
    \ $sun = $sun - 4;\n    $sun = $sun + 5;\n    $sun = $sun - 5;\n    $sun = $sun\
    \ + 6;\n    $sun = $sun - 6;\n    $sun = $sun + 7;\n    $sun = $sun - 7;\n   \
    \ $sun = $sun + 8;\n    $sun = $sun - 8;\n    $sun = $sun + 9;\n    $sun = $sun\
    \ - 9;\n    $sun = $sun + 10;\n    $sun = $sun - 10;\n    $sun = $sun + 11;\n\
    \    $sun = $sun - 11;\n    $sun = $sun + 12;\n    $sun = $sun - 12;\n    $sun\
    \ = $sun + 13;\n    $sun = $sun - 13;\n    $sun = $sun + 14;\n    $sun = $sun\
    \ - 14;\n    $sun = $sun + 15;\n    $sun = $sun - 15;\n    $sun = $sun + 16;\n\
    \    $sun = $sun - 16;\n    $sun = $sun + 17;\n    $sun = $sun - 17;\n    $sun\
    \ = $sun + 18;\n    $sun = $sun - 18;\n    $sun = $sun + 19;\n    $sun = $sun\
    \ - 19;\n    $sun = $sun + 20;\n    $sun = $sun - 20;\n    $sun = $sun + 21;\n\
    \    $sun = $sun - 21;\n    $sun = $sun + \nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpn6k1g18y.php on line 76\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8w8b0q73.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        \"mercury\" => \"Mercury\",\n        \"venus\"\
    \ => \"Venus\",\n        \"earth\" => \"Earth\",\n        \"mars\" => \"Mars\"\
    ,\n        \"jupiter\" => \"Jupiter\",\n        \"saturn\" => \"Saturn\",\n  \
    \      \"uranus\" => \"Uranus\",\n        \"neptune\" => \"Neptune\"\n    );\n\
    \    $planet1 = $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1orbit\
    \ = orbit($planet1);\n    $planet2orbit = orbit($planet2);\n    $planet1orbit\
    \ = $planet1orbit[\"orbit\"];\n    $planet2orbit = $planet2orbit[\"orbit\"];\n\
    \    $planet1distance = $planet1orbit[\"distance\"];\n    $planet2distance = $planet2orbit[\"\
    distance\"];\n    $planet1distance = $planet1distance[\"distance\"];\n    $planet2distance\
    \ = $planet2distance[\"distance\"];\n    $planet1distance = $planet1distance[\"\
    distance\"];\n    $planet2distance = $planet2distance[\"distance\"];\n    $planet1distance\
    \ = $planet1distance[\"distance\"];\n    $planet2distance = $planet2distance[\"\
    distance\"];\n    $planet1distance = $planet1distance[\"distance\"];\n    $planet2distance\
    \ = $planet2distance[\"distance\"];\n    $planet1distance = $planet1distance[\"\
    distance\"];\n    $planet2distance = $planet2distance[\"distance\"];\n    $planet1distance\
    \ = $planet1distance[\"distance\"];\n    $planet2distance = $planet2distance[\"\
    distance\"];\n    $planet1distance = $planet1distance[\"distance\"];\n    $planet2distance\
    \ = $planet2distance[\"distance\"];\n    $planet1distance = $planet1distance[\"\
    distance\"];\n    $planet2distance = $planet2distance[\"distance\"];\n    $planet1distance\
    \ = $planet1distance[\"distance\"];\n    $planet2distance = $planet2distance[\"\
    distance\"];\n    $planet1distance = $planet1distance[\"distance\"];\n    $planet2distance\
    \ = $planet2distance[\"distance\"];\n    $planet1distance = $planet1distance[\"\
    distance\"];\n    $planet2distance\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1_5_mxx4.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2\
    \ = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n    $planet2\
    \ = array_unique($planet2);\n    $planet1 = array_merge($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpwct7dbco.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\" \", \"\", $planet1);\n    $planet2 = str_replace(\"\
    \ \", \"\", $planet2);\n    $planet1 = str_replace(\"'\", \"\", $planet1);\n \
    \   $planet2 = str_replace(\"'\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ,\", \"\", $planet1);\n    $planet2 = str_replace(\",\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"&\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    &\", \"\", $planet2);\n    $planet1 = str_replace(\"!\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"!\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ?\", \"\", $planet1);\n    $planet2 = str_replace(\"?\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"(\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    (\", \"\", $planet2);\n    $planet1 = str_replace(\")\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\")\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    [\", \"\", $planet1);\n    $planet2 = str_replace(\"[\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"]\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    ]\", \"\", $planet2);\n    $planet1 = str_replace(\"{\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"{\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    }\", \"\", $planet1);\n    $planet2 = str_replace(\"}\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"*\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    *\", \"\", $planet2);\n    $planet1 = str_replace(\"+\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"+\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    -\", \"\", $planet1);\n    $planet2 = str_replace(\"-\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"=\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    =\", \"\", $planet2);\n    $planet1 = str_replace(\",\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\",\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ;\", \"\", $planet\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpe9kii9a_.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpjjt9ni67.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    if ($planet1\
    \ == false || $planet2 == false) {\n        return array();\n    }\n    $planet1\
    \ = $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    if ($sun1 == false || $sun2 == false) {\n        return array();\n\
    \    }\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $sun_distance\
    \ = sqrt((($sun2 - $sun1)[0]) * (($sun2 - $sun1)[0]) + (($sun2 - $sun1)[1]) *\
    \ (($sun2 - $sun1)[1]));\n    $planet1_distance = sqrt((($planet2 - $planet1)[0])\
    \ * (($planet2 - $planet1)[0]) + (($planet2 - $planet1)[1]) * (($planet2 - $planet1)[1]));\n\
    \    $planet2_distance = sqrt((($planet1 - $planet2)[0]) * (($planet1 - $planet2)[0])\
    \ + (($planet1 - $planet2)[1]) * (($planet1 - $planet2)[1]));\n    if ($sun_distance\
    \ < $planet1_distance && $sun_distance < $planet2_distance) {\n        return\
    \ array($planet1, $planet2);\n    } else {\n        return array();\n    }\n}\n\
    </code>\n<|/ a tags=php,algorithm |>\n<| c |>\nThis doesn't work. Try bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n<|/ c |>\n<| c |>\nIt does work.\
    \ Try it yourself. It returns `(\"Saturn\", \"Uranus\")` for `bf(\"Jupiter\",\
    \ \"Neptune\")`.\n<|/ c |>\n<| c |>\nIt does work. Try it yourself. It returns\
    \ `(\"Sat\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_6ek8x2k.php on line 43\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl92bz2qm.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_merge($planets, array(\"mercury\", \"venus\", \"earth\"\
    , \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_fli\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6vliyl7m.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        \"mercury\" => \"mercury\",\n        \"venus\"\
    \ => \"venus\",\n        \"earth\" => \"earth\",\n        \"mars\" => \"mars\"\
    ,\n        \"jupiter\" => \"jupiter\",\n        \"saturn\" => \"saturn\",\n  \
    \      \"uranus\" => \"uranus\",\n        \"neptune\" => \"neptune\",\n    );\n\
    \    $planet1 = $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun\
    \ = array(\"mercury\" => \"sun\", \"venus\" => \"sun\", \"earth\" => \"sun\",\
    \ \"mars\" => \"sun\", \"jupiter\" => \"sun\", \"saturn\" => \"sun\", \"uranus\"\
    \ => \"sun\", \"neptune\" => \"sun\");\n    $sun1 = $sun[$planet1];\n    $sun2\
    \ = $sun[$planet2];\n    $planet1orbit = $planet1 . \"orbit\";\n    $planet2orbit\
    \ = $planet2 . \"orbit\";\n    $planet1orbitorbit = $planet1orbit . \"orbit\"\
    ;\n    $planet2orbitorbit = $planet2orbit . \"orbit\";\n    $planet1orbitorbitorbit\
    \ = $planet1orbitorbit . \"orbit\";\n    $planet2orbitorbitorbit = $planet2orbitorbit\
    \ . \"orbit\";\n    $planet1orbitorbitorbitorbit = $planet1orbitorbitorbit . \"\
    orbit\";\n    $planet2orbitorbitorbitorbit = $planet2orbitorbitorbit . \"orbit\"\
    ;\n    $planet1orbitorbitorbitorbit = $planet1orbitorbitorbit . \"orbit\";\n \
    \   $planet2orbitorbitorbitorbit = $planet2orbitorbitorbit . \"orbit\";\n    $planet1orbitorbitorbitorbit\
    \ = $planet1orbitorbitorbit . \"orbit\";\n    $planet2orbitorbitorbitorbit = $planet2orbitorbitorbit\
    \ . \"orbit\";\n    $planet1orbitorbitorbitorbit = $planet1orbitorbitorbit . \"\
    orbit\";\n    $planet2orbitorbitorbitorbit = $planet2orbitorbitorbit . \"orbit\"\
    ;\n    $planet1orbitorbitorbitorbit = $planet1orbitorbitorbit . \"orbit\";\n \
    \   $planet2orbitorbitorbitorbit = $planet2orbitorbitorbit . \"orbit\";\n    $planet1orbitorbitorbitorbit\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd7b06joy.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpqx04h7cv.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\" \", \"\", $planet1);\n    $planet2 = str_replace(\"\
    \ \", \"\", $planet2);\n    $planet1 = str_replace(\",\", \"\", $planet1);\n \
    \   $planet2 = str_replace(\",\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    '\", \"\", $planet1);\n    $planet2 = str_replace(\"'\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"!\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    !\", \"\", $planet2);\n    $planet1 = str_replace(\"?\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"?\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ;\", \"\", $planet1);\n    $planet2 = str_replace(\";\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"(\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    (\", \"\", $planet2);\n    $planet1 = str_replace(\")\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\")\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    [\", \"\", $planet1);\n    $planet2 = str_replace(\"[\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"]\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    ]\", \"\", $planet2);\n    $planet1 = str_replace(\"{\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"{\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    }\", \"\", $planet1);\n    $planet2 = str_replace(\"}\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\",\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    ,\", \"\", $planet2);\n    $planet1 = str_replace(\"'\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"'\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    !\", \"\", $planet1);\n    $planet2 = str_replace(\"!\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"?\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    ?\", \"\", $planet2);\n    $planet1 = str_replace(\";\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\";\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    (\", \"\", $plan\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcgqolz5t.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2\
    \ . \"_\" . $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" .\
    \ $planet2 . \"_\" . $planet1 . \"_\" . $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2 . \"_\" . $planet1 . \"_\" . $planet2 . \"_\"\
    \ . $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2\
    \ . \"_\" . $planet1 . \"_\" . $planet2 . \"_\" . $planet1 . \"_\" . $planet2\
    \ . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2 . \"_\" .\
    \ $planet1 . \"_\" . $planet2 . \"_\" . $planet1 . \"_\" . $planet2 . \"_\" .\
    \ $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2 .\
    \ \"_\" . $planet1 . \"_\" . $planet2 . \"_\" . $planet1 . \"_\" . $planet2 .\
    \ \"_\" . $planet1 . \"_\" . $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1\
    \ . \"_\" . $planet2 . \"_\" . $planet1 . \"_\" . $planet2 . \"_\" . $planet1\
    \ . \"_\" . $planet2 . \"_\" . $planet1 . \"_\" . $planet2 . \"_\" . $planet1\
    \ . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2 . \"_\" .\
    \ $planet1 . \"_\" . $planet2 . \"_\" . $planet1 . \"_\" . $planet2 . \"_\" .\
    \ $planet1 . \"_\" . $planet2 \nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpk56ilr9q.php on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpdll40eg6.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_combine($planet1, $planet1);\n    $planet2 = array_combine($planet2,\
    \ $planet2);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $plan\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfip9oqcu.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpasux6sbl.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    if (count($planet1) != count($planet2))\
    \ {\n        return array();\n    }\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $plan\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgni0o0xe.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[]\
    \ = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[]\
    \ = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpkynt4jb3.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpat2kwq_2.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    if (count($planet1) != count($planet2))\
    \ {\n        return array();\n    }\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = \nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmppveylb2t.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2\
    \ = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n    $planet2\
    \ = array_unique($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_intersect($planet1, $planet2);\n\
    \    $planet2 = array_intersect($planet2, $planet1);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqk4dgmgz.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n    $planet2\
    \ = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explo\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmph2awij6g.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpjivfjrhd.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpha064kwk.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_values($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planet\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpesa2p9pg.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = in_array($planet2, $planets) ? $planet1 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\
    \";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\
    \";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2\
    \ = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\
    \";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpf_0pql9h.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2\
    \ = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n    $planet2\
    \ = array_unique($planet2);\n    $planet1 = array_intersect($planet1, $planet2);\n\
    \    $planet2 = array_intersect($planet2, $planet1);\n    $planet1 = array_diff($planet1,\
    \ $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n    $planet1 = array_values($planet1);\n\
    \    $planet2 = array_values($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2,\
    \ $planet1);\n    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2,\
    \ $planet1);\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwek84mte.php on line 69\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1orbit = orbit($planet1);\n\
    \    $planet2orbit = orbit($planet2);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $planet1orbit = array_slice($planet1orbit,\
    \ 0, count($planet1orbit) - 1);\n    $planet2orbit = array_slice($planet2orbit,\
    \ 0, count($planet2orbit) - 1);\n    $plan\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpey0_hj5x.php on line 48\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpm01ryt_1.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpnkb547xc.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmppirr2qgm.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[]\
    \ = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[]\
    \ = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \" \" . $planet1;\n\
    \    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[] = $planet2 . \"\
    \ \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n    $planets[]\
    \ = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \" \" . $planet2;\n\
    \    $planets[] = $planet2 . \" \" . $planet1;\n    $planets[] = $planet1 . \"\
    \ \" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpkjkobw3o.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpjwyrsap_.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    if (count($planet1) === 0 || count($planet2) === 0) {\n        return array();\n\
    \    }\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpjsz4jm7k.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    if (count($planet1) != count($planet2))\
    \ {\n        return array();\n    }\n    $planet1 = array_flip($planet1);\n  \
    \  $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n  \
    \  $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n  \
    \  $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n  \
    \  $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n  \
    \  $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n  \
    \  $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n  \
    \  $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n  \
    \  $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n  \
    \  $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n  \
    \  $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n  \
    \  $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n  \
    \  $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n  \
    \  $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n  \
    \  $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n  \
    \  $planet2 = array_flip($planet2);\n    $planet1 = array_keys($planet1);\n  \
    \  $planet2 = array_keys($planet2);\n    $planet1 = array_flip($planet1);\n  \
    \  $plan\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpg5ccaeb1.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp_3y8h8dt.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array();\n    }\n    $planets\
    \ = array($planet1, $planet2);\n    $orbits = array();\n    foreach ($planets\
    \ as $planet) {\n        $orbits[$planet] = getOrbits($planet);\n    }\n    $orbits1\
    \ = getOrbits($planet1);\n    $orbits2 = getOrbits($planet2);\n    $orbits = array_merge($orbits1,\
    \ $orbits2);\n    $orbits = sortOrbits($orbits);\n    $orbits = array_unique($orbits);\n\
    \    return $orbits;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getOrbits() in\
    \ /tmp/tmp217x5l9k.php:24\nStack trace:\n#0 /tmp/tmp217x5l9k.php(35): bf('jupiter',\
    \ 'neptune')\n#1 /tmp/tmp217x5l9k.php(39): candidate('Jupiter', 'Neptune')\n#2\
    \ /tmp/tmp217x5l9k.php(48): test()\n#3 {main}\n  thrown in /tmp/tmp217x5l9k.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n    $planet2\
    \ = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explo\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6pqeb3c6.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $orbits = array();\n    foreach\
    \ ($planets as $planet) {\n        $orbits[$planet] = getOrbits($planet);\n  \
    \  }\n    $orbits1 = getOrbits($planet1);\n    $orbits2 = getOrbits($planet2);\n\
    \    $orbits = array_merge($orbits1, $orbits2);\n    $sun = getSun();\n    $distances\
    \ = array();\n    foreach ($orbits as $planet => $orbit) {\n        $distances[$planet]\
    \ = getDistance($orbit, $sun);\n    }\n    ksort($distances);\n    return array_intersect_key($distances,\
    \ $distances);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getOrbits() in\
    \ /tmp/tmp0qr5wb0v.php:21\nStack trace:\n#0 /tmp/tmp0qr5wb0v.php(36): bf('jupiter',\
    \ 'neptune')\n#1 /tmp/tmp0qr5wb0v.php(40): candidate('Jupiter', 'Neptune')\n#2\
    \ /tmp/tmp0qr5wb0v.php(49): test()\n#3 {main}\n  thrown in /tmp/tmp0qr5wb0v.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    if ($planet1\
    \ === false || $planet2 === false) {\n        return array();\n    }\n    $sun\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $sun = array_search($planet1, $sun);\n    $sun\
    \ = array_search($planet2, $sun);\n    $sun = $sun - $planet1;\n    $sun = $sun\
    \ + $planet2;\n    $sun = array_search($sun, $planets);\n    return array($planets[$sun]);\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54zvfoxi.php:37\n\
    Stack trace:\n#0 /tmp/tmp54zvfoxi.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp54zvfoxi.php\
    \ on line 37\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfvwa_1hg.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1 = explode(\" \"\
    , $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"\
    trim\", $planet1);\n    $planet2 = array_map(\"trim\", $planet2);\n    $planet1\
    \ = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"strtolower\"\
    , $planet2);\n    $planet1 = array_filter($planet1, function($planet) {\n    \
    \    return $planet !== \"sun\";\n    });\n    $planet2 = array_filter($planet2,\
    \ function($planet) {\n        return $planet !== \"sun\";\n    });\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_map(\"strtolower\"\
    , $planet1);\n    $planet2 = array_map(\"strtolower\", $planet2);\n    $planet1\
    \ = array_filter($planet1, function($planet) {\n        return $planet !== \"\
    sun\";\n    });\n    $planet2 = array_filter($planet2, function($planet) {\n \
    \       return $planet !== \"sun\";\n    });\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_filter($planet1, function($planet)\
    \ {\n        return $planet !== \"sun\";\n    });\n    $planet2 = array_filter($planet2,\
    \ function($planet) {\n        return $planet !== \"sun\";\n    });\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpcy7x6pj0.php on line 67\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpcwifkeea.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\" \", \"\", $planet1);\n    $planet2 = str_replace(\"\
    \ \", \"\", $planet2);\n    $planet1 = str_replace(\"&\", \"and\", $planet1);\n\
    \    $planet2 = str_replace(\"&\", \"and\", $planet2);\n    $planet1 = str_replace(\"\
    ,\", \"\", $planet1);\n    $planet2 = str_replace(\",\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"!\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    !\", \"\", $planet2);\n    $planet1 = str_replace(\"?\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"?\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    '\", \"\", $planet1);\n    $planet2 = str_replace(\"'\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"(\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    (\", \"\", $planet2);\n    $planet1 = str_replace(\")\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\")\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    ,\", \"\", $planet1);\n    $planet2 = str_replace(\",\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\";\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    ;\", \"\", $planet2);\n    $planet1 = str_replace(\":\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\":\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    !\", \"\", $planet1);\n    $planet2 = str_replace(\"!\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\"?\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    ?\", \"\", $planet2);\n    $planet1 = str_replace(\"'\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\"'\", \"\", $planet2);\n    $planet1 = str_replace(\"\
    (\", \"\", $planet1);\n    $planet2 = str_replace(\"(\", \"\", $planet2);\n  \
    \  $planet1 = str_replace(\")\", \"\", $planet1);\n    $planet2 = str_replace(\"\
    )\", \"\", $planet2);\n    $planet1 = str_replace(\",\", \"\", $planet1);\n  \
    \  $planet2 = str_replace(\",\", \"\", $planet2);\n    $planet1 = str_replace\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp3rt6mq4w.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        \"mercury\" => \"Mercury\",\n        \"venus\"\
    \ => \"Venus\",\n        \"earth\" => \"Earth\",\n        \"mars\" => \"Mars\"\
    ,\n        \"jupiter\" => \"Jupiter\",\n        \"saturn\" => \"Saturn\",\n  \
    \      \"uranus\" => \"Uranus\",\n        \"neptune\" => \"Neptune\"\n    );\n\
    \    $planet1 = $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1\
    \ = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1\
    \ = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n\
    \    $planet2 = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2\
    \ = $planet2[0];\n    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\"\
    :\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n  \
    \  $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    :\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\":\", $planet1);\n    $planet2\
    \ = explode(\":\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    :\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\":\", $\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6eaji4nf.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planets =\
    \ array($planet1, $planet2);\n    $planets = array_unique($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_flip($planets);\n    $planets\
    \ = array_flip($planets);\n    $planets = array_fli\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmptcwmompk.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpbte3myfl.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array();\n    }\n    $planet1\
    \ = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1\
    \ = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\", $planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2\
    \ = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n    $planet2\
    \ = array_unique($planet2);\n    $planet1 = array_diff($planet1, array(\"earth\"\
    , \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"));\n    $planet2\
    \ = array_diff($planet2, array(\"earth\", \"mars\", \"jupiter\", \"saturn\", \"\
    uranus\", \"neptune\"));\n    $planet1 = array_values($planet1);\n    $planet2\
    \ = array_values($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_intersect($planet1, $planet2);\n\
    \    $planet2 = array_intersect($planet2, $planet1);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpd8t0bm5b.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpjrjpdzg8.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        return\
    \ array($planet2);\n    }\n    if ($planet2 === \"earth\" || $planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        return array($planet1);\n    }\n    if ($planet1 === \"sun\" || $planet1\
    \ === \"moon\") {\n        return array();\n    }\n    if ($planet2 === \"sun\"\
    \ || $planet2 === \"moon\") {\n        return array();\n    }\n    $planet1 =\
    \ explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1[0]\
    \ = $planet1[0];\n    $planet2[0] = $planet2[0];\n    $planet1[1] = $planet1[1];\n\
    \    $planet2[1] = $planet2[1];\n    $planet1[2] = $planet1[2];\n    $planet2[2]\
    \ = $planet2[2];\n    $planet1[3] = $planet1[3];\n    $planet2[3] = $planet2[3];\n\
    \    $planet1[4] = $planet1[4];\n    $planet2[4] = $planet2[4];\n    $planet1[5]\
    \ = $planet1[5];\n    $planet2[5] = $planet2[5];\n    $planet1[6] = $planet1[6];\n\
    \    $planet2[6] = $planet2[6];\n    $planet1[7] = $planet1[7];\n    $planet2[7]\
    \ = $planet2[7];\n    $planet1[8] = $planet1[8];\n    $planet2[8] = $planet2[8];\n\
    \    $planet1[9] = $planet1[9];\n    $planet2[9] = $planet2[9];\n    $planet1[10]\
    \ = $planet1[10];\n    $\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpkwm7_5ie.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet2,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet1, $planets) ?\
    \ $planet2 : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqutsysoz.php on line 38\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_combine($planet1, $planet1);\n    $planet2 = array_combine($planet2,\
    \ $planet2);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_fli\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuav5w4lm.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp0py214ak.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun = array_search($planet1, $sun);\n    $sun = array_search($planet2,\
    \ $sun);\n    $sun = $sun[$sun];\n    $sun = explode(\" \", $sun);\n    $sun =\
    \ $sun[0];\n    $sun = explode(\"-\", $sun);\n    $sun = $sun[0];\n    $sun =\
    \ explode(\":\", $sun);\n    $sun = $sun[0];\n    $sun = explode(\".\", $sun);\n\
    \    $sun = $sun[0];\n    $sun = explode(\"/\", $sun);\n    $sun = $sun[0];\n\
    \    $sun = explode(\":\", $sun);\n    $sun = $sun[0];\n    $sun = explode(\"\
    :\", $sun);\n    $sun = $sun[0];\n    $sun = explode(\":\", $sun);\n    $sun =\
    \ $sun[0];\n    $sun = explode(\":\", $sun);\n    $sun = $sun[0];\n    $sun =\
    \ explode(\":\", $sun);\n    $sun = $sun[0];\n    $sun = explode(\":\", $sun);\n\
    \    $sun = $sun[0];\n    $sun = explode(\":\", $sun);\n    $sun = $sun[0];\n\
    \    $sun = explode(\":\", $sun);\n    $sun = $sun[0];\n    $sun = explode(\"\
    :\", $sun);\n    $sun = $sun[0];\n    $sun = explode(\":\", $sun);\n    $sun =\
    \ $sun[0];\n    $sun = explode(\":\", $sun);\n    $sun = $sun[0];\n    $sun =\
    \ explode(\":\", $sun);\n    $sun = $sun[0];\n    $sun = explode(\":\", $sun);\n\
    \    $sun = $sun[0];\n    $sun = explode(\":\", $sun);\n    $sun = $sun[0];\n\
    \    $sun = explode(\":\", $sun);\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpx0n4xv4v.php on line 81\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmptzze2kbm.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp34okpet5.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n    $planet2\
    \ = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    .\", $planet1);\n    $planet2 = explode(\".\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\"'\", $planet1);\n    $planet2 = explode(\"'\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \\\"\", $planet1);\n    $planet2 = explode(\"\\\"\", $planet2);\n    $planet1\
    \ = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\\\"\"\
    , $planet1);\n    $planet2 = explode(\"\\\"\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"\\\"\", $planet1);\n  \
    \  $planet2 = explode(\"\\\"\", $plan\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvncd6dhx.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7rryzhm1.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun = array_search($planet1, $sun);\n    $sun = array_search($planet2,\
    \ $sun);\n    $sun = $sun[$sun];\n    $sun = explode(\",\", $sun);\n    $sun =\
    \ array_map(\"trim\", $sun);\n    $sun = array_map(\"strtolower\", $sun);\n  \
    \  $sun = array_unique($sun);\n    $sun = array_map(\"array_search\", $sun, $planets);\n\
    \    $sun = array_map(\"array_search\", $sun, $sun);\n    $sun = array_map(\"\
    array_search\", $sun, $sun);\n    $sun = array_map(\"array_search\", $sun, $sun);\n\
    \    $sun = array_map(\"array_search\", $sun, $sun);\n    $sun = array_map(\"\
    array_search\", $sun, $sun);\n    $sun = array_map(\"array_search\", $sun, $sun);\n\
    \    $sun = array_map(\"array_search\", $sun, $sun);\n    $sun = array_map(\"\
    array_search\", $sun, $sun);\n    $sun = array_map(\"array_search\", $sun, $sun);\n\
    \    $sun = array_map(\"array_search\", $sun, $sun);\n    $sun = array_map(\"\
    array_search\", $sun, $sun);\n    $sun = array_map(\"array_search\", $sun, $sun);\n\
    \    $sun = array_map(\"array_search\", $sun, $sun);\n    $sun = array_map(\"\
    array_search\", $sun, $sun);\n    $sun = array_map(\"array_search\", $sun, $sun);\n\
    \    $sun = array_map(\"array_search\", $sun, $sun);\n    $sun = array_map(\"\
    array_search\", $sun, $sun);\n    $sun = array_map(\"array_search\", $sun, $sun);\n\
    \    $sun = \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpqkrnsair.php on line 51\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        \"mercury\" => array(\"venus\", \"earth\", \"\
    mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"),\n        \"venus\"\
    \ => array(\"mercury\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\"),\n        \"earth\" => array(\"mercury\", \"venus\", \"mars\",\
    \ \"jupiter\", \"saturn\", \"uranus\", \"neptune\"),\n        \"mars\" => array(\"\
    mercury\", \"venus\", \"earth\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"\
    ),\n        \"jupiter\" => array(\"mercury\", \"venus\", \"earth\", \"mars\",\
    \ \"saturn\", \"uranus\", \"neptune\"),\n        \"saturn\" => array(\"mercury\"\
    , \"venus\", \"earth\", \"mars\", \"jupiter\", \"uranus\", \"neptune\"),\n   \
    \     \"uranus\" => array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\", \"neptune\"),\n        \"neptune\" => array(\"mercury\", \"venus\"\
    , \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\")\n    );\n    $planet1\
    \ = $planets[$planet1][$planet2];\n    $planet2 = $planets[$planet2][$planet1];\n\
    \    $planets = array_merge($planet1, $planet2);\n    sort($planets);\n    return\
    \ $planets;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n<?php\n\
    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\");\n$planet1 = \"Mercury\";\n$planet2 = \"Neptune\"\
    ;\n$planets = array_merge($planet1, $planet2);\nsort($planets);\nprint_r($planets);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpl8yan8lh.php on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_values($planet1);\n\
    \    $planet2 = array_values($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $plan\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdjdi9pts.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpsfzgpiv5.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpyv4xgq7z.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = in_array($planet2, $planets) ? $planet1 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\
    \";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\
    \";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\
    \";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet1 = in_array($planet1, $planets) ? $\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp686prse4.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2.\" \".$planet1;\n    $planets[] = $planet2.\"\
    \ \".$planet1.\" \".$planet2;\n    $planets[] = $planet1.\" \".$planet2.\" \"\
    .$planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1.\" \".$planet2.\"\
    \ \".$planet1;\n    $planets[] = $planet1.\" \".$planet2.\" \".$planet1.\" \"\
    .$planet2.\" \".$planet1;\n    $planets[] = $planet2.\" \".$planet1.\" \".$planet2.\"\
    \ \".$planet1.\" \".$planet2;\n    $planets[] = $planet1.\" \".$planet2.\" \"\
    .$planet1.\" \".$planet2.\" \".$planet1.\" \".$planet2;\n    $planets[] = $planet2.\"\
    \ \".$planet1.\" \".$planet2.\" \".$planet1.\" \".$planet2.\" \".$planet1.\" \"\
    .$planet2;\n    $planets[] = $planet1.\" \".$planet2.\" \".$planet1.\" \".$planet2.\"\
    \ \".$planet1.\" \".$planet2.\" \".$planet1.\" \".$planet2;\n    $planets[] =\
    \ $planet2.\" \".$planet1.\" \".$planet2.\" \".$planet1.\" \".$planet2.\" \".$planet1.\"\
    \ \".$planet2.\" \".$planet1.\" \".$planet2;\n    $planets[] = $planet1.\" \"\
    .$planet2.\" \".$planet1.\" \".$planet2.\" \".$planet1.\" \".$planet2.\" \".$planet1.\"\
    \ \".$planet2.\" \".$planet1.\" \".$planet2;\n    $planet\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp22dqsz7n.php on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2\
    \ = array_unique($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet2);\n    $planet2\
    \ = array_flip($planet1);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $plan\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpwhifa633.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmptlv51_vm.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\"\
    \ || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    ) {\n        return array($planet2);\n    }\n    if ($planet2 === \"earth\" ||\
    \ $planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\"\
    \ || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n        return array($planet1);\n\
    \    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \"\
    , $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"\
    trim\", $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvxpuxhhj.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\"\
    \ || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    ) {\n        return array($planet2);\n    }\n    if ($planet2 === \"earth\" ||\
    \ $planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\"\
    \ || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n        return array($planet1);\n\
    \    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \"\
    , $planet2);\n    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2\
    \ = array_map(\"strtolower\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfhlt5z2w.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\"\
    \ || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    \ || $planet1 === \"mercury\" || $planet1 === \"venus\") {\n        return array($planet2);\n\
    \    }\n    if ($planet2 === \"earth\" || $planet2 === \"mars\" || $planet2 ===\
    \ \"jupiter\" || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2\
    \ === \"neptune\" || $planet2 === \"mercury\" || $planet2 === \"venus\") {\n \
    \       return array($planet1);\n    }\n    if ($planet1 === \"mercury\" || $planet1\
    \ === \"venus\") {\n        if ($planet2 === \"mercury\" || $planet2 === \"venus\"\
    ) {\n            return array($planet1, $planet2);\n        }\n    }\n    if ($planet2\
    \ === \"mercury\" || $planet2 === \"venus\") {\n        if ($planet1 === \"mercury\"\
    \ || $planet1 === \"venus\") {\n            return array($planet2, $planet1);\n\
    \        }\n    }\n    if ($planet1 === \"mars\" || $planet1 === \"jupiter\" ||\
    \ $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    ) {\n        if ($planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2\
    \ === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n \
    \           return array($planet1, $planet2);\n        }\n    }\n    if ($planet2\
    \ === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"saturn\" || $planet2\
    \ === \"uranus\" || $planet2 === \"neptune\") {\n        if ($planet1 === \"mars\"\
    \ || $planet1 === \"jupiter\" || $planet1 === \"saturn\" || $planet1 === \"uranus\"\
    \ || $planet1 === \"neptune\") {\n            return array($planet2, $planet1);\n\
    \        }\n    }\n    if ($planet1 === \"jupiter\" || $plan\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpujt90gzr.php on line 45\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_combine($planet1, $planet1);\n    $planet2 = array_combine($planet2,\
    \ $planet2);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_fli\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpiq482g_n.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1 = explode(\" \"\
    , $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpbehjgrgq.php on line 79\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"strtolower\"\
    , $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"strtolower\"\
    , $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"strtolower\"\
    , $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"strtolower\"\
    , $planet2);\n    $plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpikn7_o_i.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $sun = strtolower(\"sun\");\n\
    \    $orbits = array();\n    foreach ($planets as $planet) {\n        $orbits[$planet]\
    \ = array();\n        $orbits[$planet][] = strtolower(\"mercury\");\n        $orbits[$planet][]\
    \ = strtolower(\"venus\");\n        $orbits[$planet][] = strtolower(\"earth\"\
    );\n        $orbits[$planet][] = strtolower(\"mars\");\n        $orbits[$planet][]\
    \ = strtolower(\"jupiter\");\n        $orbits[$planet][] = strtolower(\"saturn\"\
    );\n        $orbits[$planet][] = strtolower(\"uranus\");\n        $orbits[$planet][]\
    \ = strtolower(\"neptune\");\n    }\n    foreach ($orbits[$planet1] as $orbit)\
    \ {\n        if (in_array($orbit, $orbits[$planet2])) {\n            $orbits[$planet1][]\
    \ = $orbit;\n            $orbits[$planet2][] = $orbit;\n        }\n    }\n   \
    \ foreach ($orbits[$planet2] as $orbit) {\n        if (in_array($orbit, $orbits[$planet1]))\
    \ {\n            $orbits[$planet2][] = $orbit;\n            $orbits[$planet1][]\
    \ = $orbit;\n        }\n    }\n    $orbits[$planet1][] = $sun;\n    $orbits[$planet2][]\
    \ = $sun;\n    sort($orbits[$planet1]);\n    sort($orbits[$planet2]);\n    return\
    \ array_merge($orbits[$planet1], array($sun), $orbits[$planet2]);\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThank you so much for your help. I really appreciate\
    \ it. I will try this out and see how it goes. I really appreciate your help.\n\
    <|/ c |>\n<| c |>\nI ran the code and it works perfectly. Thank you so much. I\
    \ am going to try to understand it so I can apply it to other problems I have\
    \ in the future. Thank you so much for your help.\n<|/ c |>\n<| c |>\nI ran the\
    \ code and it works perfectly. Thank you so much. I am going to try to understand\
    \ it \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvdiqf6tw.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = \nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp4ok4pp3e.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\", \"uranus\", \"neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = in_array($planet2, $planets) ? $planet1 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\
    \";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\
    \";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2\
    \ = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\
    \";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = in_array($planet1, $planets) ?\
    \ $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpfvwv6f9o.php on line 41\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2\
    \ = array_filter($planet2, \"strlen\");\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_fli\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp2f70vzk4.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpx7vn1u85.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1orbits = array();\n\
    \    $planet2orbits = array();\n    $planet1orbits[] = $planet1;\n    $planet2orbits[]\
    \ = $planet2;\n    $planet1orbits[] = \"sun\";\n    $planet2orbits[] = \"sun\"\
    ;\n    $planet1orbits[] = $planet2;\n    $planet2orbits[] = $planet1;\n    $planet1orbits[]\
    \ = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[] = \"sun\"\
    ;\n    $planet2orbits[] = \"sun\";\n    $planet1orbits[] = $planet2;\n    $planet2orbits[]\
    \ = $planet1;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n\
    \    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[]\
    \ = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n\
    \    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[]\
    \ = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n\
    \    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[]\
    \ = $planet1;\n    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n\
    \    $planet2orbits[] = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[]\
    \ = $planet2;\n    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet2;\n\
    \    $planet1orbits[] = $planet1;\n    $planet2orbits[] = $planet\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxocxf2_5.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp_354p4sk.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet2 = array_merge($planet2, $planet1);\n    $planet1 =\
    \ array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2, $planet1);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_jbbge_a.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet2 = array_merge($planet2,\
    \ $planet1);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpkomlv0bj.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planets =\
    \ array_slice($planets, $planet1, $planet2);\n    $planets = array_slice($planets,\
    \ 0, $planet1);\n    $planets = array_slice($planets, 0, $planet2);\n    $planets\
    \ = array_slice($planets, 0, $planet1 + 1);\n    $planets = array_slice($planets,\
    \ 0, $planet2 + 1);\n    $planets = array_slice($planets, 0, count($planets) -\
    \ 1);\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplu9t5nxu.php:35\n\
    Stack trace:\n#0 /tmp/tmplu9t5nxu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmplu9t5nxu.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp5g1_x1ms.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        return\
    \ array($planet2);\n    }\n    if ($planet2 === \"earth\" || $planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        return array($planet1);\n    }\n    return array();\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3_9_ysn.php:32\n\
    Stack trace:\n#0 /tmp/tmpu3_9_ysn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu3_9_ysn.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1vlscqmz.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpkdyxpo2j.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n    $planet2\
    \ = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    .\", $planet1);\n    $planet2 = explode(\".\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\"-\", $planet1);\n    $planet2 = explode(\"-\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    :\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\".\", $planet1);\n    $planet2\
    \ = explode(\".\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpw7r5qxbi.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        return\
    \ array($planet2);\n    }\n    if ($planet2 === \"earth\" || $planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        return array($planet1);\n    }\n    return array();\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpntvl4san.php:32\n\
    Stack trace:\n#0 /tmp/tmpntvl4san.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpntvl4san.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2\
    \ = array_unique($planet2);\n    $planet1 = array_flip($planet1);\n    $planet2\
    \ = array_flip($planet2);\n    $planet1 = array_intersect($planet1, $planet2);\n\
    \    $planet2 = array_intersect($planet2, $planet1);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp425ojfag.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2\
    \ !== \"\" ? $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\
    \";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\";\n    $planet1 = $planet1\
    \ !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\
    \";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2\
    \ !== \"\" ? $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\
    \";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\";\n    $planet1 = $planet1\
    \ !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\
    \";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2\
    \ !== \"\" ? $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\
    \";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\";\n    $planet1 = $planet1\
    \ !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\
    \";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2\
    \ !== \"\" ? $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\
    \";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\";\n    $planet1 = $planet1\
    \ !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\
    \";\n    $planet1 = $planet\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpemltftf9.php on line 46\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2\
    \ !== \"\" ? $planet2 : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 :\
    \ \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\";\n    $planets = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\"\
    ;\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2\
    \ : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2\
    \ = $planet2 !== \"\" ? $planet2 : \"\";\n    $planets = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvgt8722m.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_values($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planet\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp38k3ck2q.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_flip($planets);\n\
    \    $sun = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\");\n    $sun = array_flip($sun);\n    $planets\
    \ = array_intersect($planets, $sun);\n    $planets = array_flip($planets);\n \
    \   $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_intersect($planets, $planets);\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpgbbra2hs.php on line 66\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\", \"uranus\", \"neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $planet1 = $sun1;\n\
    \    $planet2 = $sun2;\n    $sun1 = $sun2;\n    $sun2 = $sun1;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $sun1 = $sun1;\n    $sun2 = $sun2;\n    $sun1 = $sun1;\n\
    \    $sun2 = $sun2;\n    $\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp3a_b6in4.php on line 75\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    if ($planet1 == \"\" || $planet2 == \"\") {\n        return array();\n\
    \    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \"\
    , $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1\
    \ = explode(\"-\", $planet1);\n    $planet2 = explode(\"-\", $planet2);\n    $planet1\
    \ = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\":\", $planet1);\n\
    \    $planet2 = explode(\":\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2\
    \ = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2 = explode(\"\
    ,\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n  \
    \  $planet1 = explode(\".\", $planet1);\n    $planet2 = explode(\".\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    .\", $planet1);\n    $planet2 = explode\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8r7kpuzm.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = \nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvjbkzvbs.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $sun = strtolower(\"sun\");\n\
    \    $orbits = array();\n    foreach ($planets as $planet) {\n        $orbits[$planet]\
    \ = array();\n    }\n    $orbits[$planet1][] = $sun;\n    $orbits[$planet2][]\
    \ = $sun;\n    $orbits[$sun][] = $planet1;\n    $orbits[$sun][] = $planet2;\n\
    \    foreach ($orbits as $planet => $orbit) {\n        $orbits[$planet] = array_unique($orbit);\n\
    \    }\n    $orbits = array_unique($orbits);\n    $orbits = array_values($orbits);\n\
    \    sort($orbits);\n    return $orbits;\n}\n</code>\n<|/ a tags=php,algorithm,arrays,sorting\
    \ |>\n<| c |>\nI like this solution, but I wonder how it compares to other solutions\
    \ posted here. I think this one is the most elegant and simplest to understand.\n\
    <|/ c |>\n<| c |>\nThis solution doesn't work if planets are in different order.\
    \ For example, if planet1 is in ascending order and planet2 is in descending order,\
    \ it returns empty array.\n<|/ c |>\n<| c |>\nI fixed the issue you mentioned\n\
    <|/ c |>\n<| a dscore=2 |>\nI wrote a solution that is O(n) time and O(1) space.\
    \ It uses two hash tables to store the planets orbiting each other. \n<code>\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp0n5wp02p.php on line 36\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ \"strlen\");\n    $planet2 = array_filter($planet2, \"strlen\");\n    $planet1\
    \ = array_filter($planet1, \"strlen\");\n    $planet2 = array_filter($planet2,\
    \ \"strlen\");\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $plan\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpe37xtt9a.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdgkje9tw.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_filter($planet1);\n\
    \    $planet2 = array_filter($planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_diff($planet1, $planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_unique($plan\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp76noa5bt.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp_diipjwv.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $sun = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $sun1 = array_search($planet1, $sun);\n    $sun2 = array_search($planet2,\
    \ $sun);\n    $sun1 = $sun[$sun1];\n    $sun2 = $sun[$sun2];\n    $sun1 = $sun1\
    \ - $sun2;\n    $sun2 = $sun1 + $sun2;\n    $sun1 = $sun1 / 2;\n    $sun2 = $sun2\
    \ / 2;\n    $sun1 = $sun1 * 100;\n    $sun2 = $sun2 * 100;\n    $sun1 = $sun1\
    \ / 100;\n    $sun2 = $sun2 / 100;\n    $sun1 = $sun1 * 60;\n    $sun2 = $sun2\
    \ * 60;\n    $sun1 = $sun1 / 60;\n    $sun2 = $sun2 / 60;\n    $sun1 = $sun1 *\
    \ 360;\n    $sun2 = $sun2 * 360;\n    $sun1 = $sun1 / 360;\n    $sun2 = $sun2\
    \ / 360;\n    $sun1 = $sun1 * 180;\n    $sun2 = $sun2 * 180;\n    $sun1 = $sun1\
    \ / 180;\n    $sun2 = $sun2 / 180;\n    $sun1 = $sun1 * 60;\n    $sun2 = $sun2\
    \ * 60;\n    $sun1 = $sun1 / 60;\n    $sun2 = $sun2 / 60;\n    $sun1 = $sun1 *\
    \ 360;\n    $sun2 = $sun2 * 360;\n    $sun1 = $sun1 / 360;\n    $sun2 = $sun2\
    \ / 360;\n    $sun1 = $sun1 * 180;\n    $sun2 = $sun2 * 180;\n    $sun1 = $sun1\
    \ / 180;\n    $sun2 = $sun2 / 180;\n    $sun1 = $sun1 * 60;\n    $sun2 = $sun2\
    \ * 60;\n    $sun1 = $sun1 / 60;\n    $sun2 = $sun2 / 60;\n    $sun1 = $sun1 *\
    \ 360;\n    $sun2 = $sun2 * 360;\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp71v97wqn.php on line 80\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        'mercury' => 'mercury',\n        'venus' => 'venus',\n\
    \        'earth' => 'earth',\n        'mars' => 'mars',\n        'jupiter' =>\
    \ 'jupiter',\n        'saturn' => 'saturn',\n        'uranus' => 'uranus',\n \
    \       'neptune' => 'neptune',\n    );\n    $planet1 = $planets[$planet1];\n\
    \    $planet2 = $planets[$planet2];\n    $planets = array(\n        'mercury'\
    \ => 'mercury',\n        'venus' => 'venus',\n        'earth' => 'earth',\n  \
    \      'mars' => 'mars',\n        'jupiter' => 'jupiter',\n        'saturn' =>\
    \ 'saturn',\n        'uranus' => 'uranus',\n        'neptune' => 'neptune',\n\
    \    );\n    $planet1 = $planets[$planet1];\n    $planet2 = $planets[$planet2];\n\
    \    $planets = array(\n        'mercury' => 'mercury',\n        'venus' => 'venus',\n\
    \        'earth' => 'earth',\n        'mars' => 'mars',\n        'jupiter' =>\
    \ 'jupiter',\n        'saturn' => 'saturn',\n        'uranus' => 'uranus',\n \
    \       'neptune' => 'neptune',\n    );\n    $planet1 = $planets[$planet1];\n\
    \    $planet2 = $planets[$planet2];\n    $planets = array(\n        'mercury'\
    \ => 'mercury',\n        'venus' => 'venus',\n        'earth' => 'earth',\n  \
    \      'mars' => 'mars',\n        'jupiter' => 'jupiter',\n        'saturn' =>\
    \ 'saturn',\n        'uranus' => 'uranus',\n        'neptune' => 'neptune',\n\
    \    );\n    $planet1 = $planets[$planet1];\n    $planet2 = $planets[$planet2];\n\
    \    $planets = array(\n        'mercury' => 'mercury',\n        'venus' => 'venus',\n\
    \        'earth' => 'earth',\n        'mars' => 'mars',\n        'jupiter' =>\
    \ 'jupiter',\n        'saturn' => 'saturn',\n        'uranus' => 'uranus',\n \
    \       'neptune' => 'neptune',\n    );\n    $\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp1tpsvgk.php on line 77\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpph5zhpfg.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\n        'mercury' => 'mercury',\n        'venus' => 'venus',\n\
    \        'earth' => 'earth',\n        'mars' => 'mars',\n        'jupiter' =>\
    \ 'jupiter',\n        'saturn' => 'saturn',\n        'uranus' => 'uranus',\n \
    \       'neptune' => 'neptune',\n    );\n    $planet1 = $planets[$planet1];\n\
    \    $planet2 = $planets[$planet2];\n    $planet1 = explode(\" \", $planet1);\n\
    \    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"strtolower\"\
    , $planet1);\n    $planet2 = array_map(\"strtolower\", $planet2);\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_intersect($planet1, $planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmplevqg3hh.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\"-\", $planet1);\n    $planet2\
    \ = explode(\"-\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explo\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpuuvxyoll.php on line 57\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpghxv26uz.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp15463d8h.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp30uvlflf.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpvbw82dx_.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpc9nmeob_.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpd_85qehh.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2\
    \ !== \"\" ? $planet2 : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1\
    \ = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2,\
    \ $planets) ? $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 :\
    \ \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2 : \"\";\n    $planets = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\"\
    ;\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2 = $planet2 !== \"\" ? $planet2\
    \ : \"\";\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = $planet1 !== \"\" ? $planet1 : \"\";\n    $planet2\
    \ = $planet2 !== \"\" ? $planet2 : \"\";\n    $planets = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpk97q1rj2.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp8radlb2m.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_filter($planet1,\
    \ function($planet) {\n        return $planet != \"\";\n    });\n    $planet2\
    \ = array_filter($planet2, function($planet) {\n        return $planet != \"\"\
    ;\n    });\n    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2\
    \ = array_map(\"strtolower\", $planet2);\n    $planet1 = array_filter($planet1,\
    \ function($planet) {\n        return $planet != \"\";\n    });\n    $planet2\
    \ = array_filter($planet2, function($planet) {\n        return $planet != \"\"\
    ;\n    });\n    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"\
    trim\", $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_filter($planet1, function($planet) {\n        return $planet\
    \ != \"\";\n    });\n    $planet2 = array_filter($planet2, function($planet) {\n\
    \        return $planet != \"\";\n    });\n    $planet1 = array_map(\"strtolower\"\
    , $planet1);\n    $planet2 = array_map(\"strtolower\", $planet2);\n    $planet1\
    \ = array_filter($planet1, function($planet) {\n        return $planet != \"\"\
    ;\n    });\n    $planet2 = array_filter($planet2, function($planet) {\n      \
    \  return $planet != \"\";\n    });\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_filter($planet1,\
    \ function($planet) {\n        return $planet \nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6025j0rx.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    if ($planet1 == \"\" || $planet2 == \"\") {\n        return array();\n\
    \    }\n    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \"\
    , $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1\
    \ = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n    $planets\
    \ = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planet1 = in_array($planet1, $planets) ? $planet1\
    \ : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n  \
    \  if ($planet1 == \"\" || $planet2 == \"\") {\n        return array();\n    }\n\
    \    $planet1 = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = strtolower($planet1);\n\
    \    $planet2 = strtolower($planet2);\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2 =\
    \ in_array($planet2, $planets) ? $planet2 : \"\";\n    if ($planet1 == \"\" ||\
    \ $planet2 == \"\") {\n        return array();\n    }\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = strtolower($planet1);\n    $planet2\
    \ = strtolower(\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpv71icg09.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(' ', '', $planet1);\n    $planet2 = str_replace('\
    \ ', '', $planet2);\n    $planet1 = str_replace(',', '', $planet1);\n    $planet2\
    \ = str_replace(',', '', $planet2);\n    $planet1 = str_replace('(', '', $planet1);\n\
    \    $planet2 = str_replace('(', '', $planet2);\n    $planet1 = str_replace(')',\
    \ '', $planet1);\n    $planet2 = str_replace(')', '', $planet2);\n    $planet1\
    \ = str_replace(',', '', $planet1);\n    $planet2 = str_replace(',', '', $planet2);\n\
    \    $planet1 = str_replace('(', '', $planet1);\n    $planet2 = str_replace('(',\
    \ '', $planet2);\n    $planet1 = str_replace(')', '', $planet1);\n    $planet2\
    \ = str_replace(')', '', $planet2);\n    $planet1 = str_replace(',', '', $planet1);\n\
    \    $planet2 = str_replace(',', '', $planet2);\n    $planet1 = str_replace('(',\
    \ '', $planet1);\n    $planet2 = str_replace('(', '', $planet2);\n    $planet1\
    \ = str_replace(')', '', $planet1);\n    $planet2 = str_replace(')', '', $planet2);\n\
    \    $planet1 = str_replace(',', '', $planet1);\n    $planet2 = str_replace(',',\
    \ '', $planet2);\n    $planet1 = str_replace('(', '', $planet1);\n    $planet2\
    \ = str_replace('(', '', $planet2);\n    $planet1 = str_replace(')', '', $planet1);\n\
    \    $planet2 = str_replace(')', '', $planet2);\n    $planet1 = str_replace(',',\
    \ '', $planet1);\n    $planet2 = str_replace(',', '', $planet2);\n    $planet1\
    \ = str_replace('(', '', $planet1);\n    $planet2 = str_replace('(', '', $planet2);\n\
    \    $planet1 = str_replace(')', '', $planet1);\n    $planet2 = str_replace(')',\
    \ '', $planet2);\n    $planet1 = str_replace(',', '', $planet1);\n    $planet2\
    \ = str_replace(',', '', $planet2);\n    $planet1 = str_replace('(', '', $planet1);\n\
    \    $plan\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmubsuq3k.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"mercury\" || $planet1 === \"venus\" || $planet1 === \"\
    earth\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        $planet1\
    \ = \"mercury\";\n    }\n    if ($planet2 === \"mercury\" || $planet2 === \"venus\"\
    \ || $planet2 === \"earth\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        $planet2 = \"mercury\";\n    }\n    $planet1 = explode(\" \", $planet1);\n\
    \    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"strtolower\"\
    , $planet1);\n    $planet2 = array_map(\"strtolower\", $planet2);\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2,\
    \ $planet1);\n    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = array_flip($planet1);\n\
    \    $planet1 = array_flip($planet2);\n    $planet2 = \nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpvw0n0d34.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        $planet1\
    \ = \"mercury\";\n    }\n    if ($planet2 === \"earth\" || $planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        $planet2 = \"mercury\";\n    }\n    $planet1 = explode(\" \", $planet1);\n\
    \    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\",\
    \ $planet1);\n    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_flip($planet1);\n\
    \    $planet2 = array_flip($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_gv58q62.php on line 50\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2\
    \ = array_unique($planet2);\n    $planet1 = array_map(\"str_replace\", $planet1);\n\
    \    $planet2 = array_map(\"str_replace\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_map(\"strtolower\"\
    , $planet1);\n    $planet2 = array_map(\"strtolower\", $planet2);\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_map(\"str_replace\", $planet1);\n    $planet2 = array_map(\"str_replace\"\
    , $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\"\
    , $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"\
    strtolower\", $planet2);\n    $planet1 = array_\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplg21vraq.php on line 56\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1 = explode(\" \"\
    , $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"\
    strtolower\", $planet1);\n    $planet2 = array_map(\"strtolower\", $planet2);\n\
    \    $planet1 = array_filter($planet1, \"strlen\");\n    $planet2 = array_filter($planet2,\
    \ \"strlen\");\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_diff($planet1,\
    \ array(\"sun\"));\n    $planet2 = array_diff($planet2, array(\"sun\"));\n   \
    \ $planet1 = array_diff($planet1, $planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet1 = array_diff($planet1, array(\"sun\"));\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet1 = array_diff($planet1,\
    \ array(\"sun\"));\n    $planet1 = array_merge($planet1, $planet2);\n    $planet1\
    \ = array_unique($planet1);\n    $planet1 = array_intersect($planet1, $planet2);\n\
    \    $planet1 = array_diff($planet1, array(\"sun\"));\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet1 = array_diff($planet1, array(\"sun\"));\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet1 = array_intersect($planet1, \nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp7h8oyhnr.php on line 58\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp4n5wikse.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\", \"uranus\", \"neptune\");\n    $planet1 = array_search($planet1,\
    \ $planets);\n    $planet2 = array_search($planet2, $planets);\n    $planet1 =\
    \ $planets[$planet1];\n    $planet2 = $planets[$planet2];\n    $planet1 = explode(\"\
    \ \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    .\", $planet1);\n    $planet2 = explode(\".\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    \    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n    $planet1 = explode(\"\
    .\", $planet1);\n    $planet2 = explode(\".\", $planet2);\n    $planet1 = $planet1[0];\n\
    \    $planet2 = $planet2[0];\n    $planet1 = explode(\",\", $planet1);\n    $planet2\
    \ = explode(\",\", $planet2);\n    $planet1 = $planet1[0];\n    $planet2 = $planet2[0];\n\
    \    $planet1 = explode(\":\", $planet1);\n    $planet2 = explode(\":\", $planet2);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu3n0pmkc.php on line 71\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1 = explode(\" \"\
    , $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"\
    trim\", $planet1);\n    $planet2 = array_map(\"trim\", $planet2);\n    $planet1\
    \ = array_filter($planet1, \"strlen\");\n    $planet2 = array_filter($planet2,\
    \ \"strlen\");\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_diff($planet1, array(\"sun\"));\n    $planet2 = array_diff($planet2,\
    \ array(\"sun\"));\n    $planet1 = array_diff($planet1, $planet2);\n    $planet2\
    \ = array_diff($planet2, $planet1);\n    $planet1 = array_values($planet1);\n\
    \    $planet2 = array_values($planet2);\n    $planet1 = array_combine($planet1,\
    \ $planet2);\n    $planet2 = array_combine($planet2, $planet1);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_keys($planet1);\n    $planet2 = array_keys($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($planet1);\n    $planet2 = array_flip($planet2);\n    $planet1\
    \ = array_flip($\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpq0ujjw_a.php on line 62\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planet1 = str_replace(\"_\", \" \", $planet1);\n    $planet2 = str_replace(\"\
    _\", \" \", $planet2);\n    $planet1 = explode(\" \", $planet1);\n    $planet2\
    \ = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\", $planet1);\n\
    \    $planet2 = array_map(\"trim\", $planet2);\n    if (count($planet1) != count($planet2))\
    \ {\n        return array();\n    }\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_interse\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprb4w4drs.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_unique($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($planets);\n    $planets = array_flip($planets);\n\
    \    $planets = array_flip($plan\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpw4aa9kfi.php on line 59\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"earth\" || $planet1 === \"mercury\" || $planet1 === \"\
    venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\" || $planet1 === \"\
    saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\") {\n        $planet1\
    \ = \"mercury\";\n    }\n    if ($planet2 === \"earth\" || $planet2 === \"mercury\"\
    \ || $planet2 === \"venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\"\
    \ || $planet2 === \"saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\"\
    ) {\n        $planet2 = \"mercury\";\n    }\n    $planet1 = explode(\" \", $planet1);\n\
    \    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"trim\",\
    \ $planet1);\n    $planet2 = array_map(\"trim\", $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjfo3_ik3.php on line 65\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpqsc71kv4.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\n    $planets[] = $planet2.\" \".$planet1;\n\
    \    $planets[] = $planet1.\" \".$planet2;\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpu4olroa0.php on line 64\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpyqha89vs.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array($planet1, $planet2);\n    $planets = array_map(\"strtolower\"\
    , $planets);\n    $planets = array_unique($planets);\n    $planets = array_map(\"\
    strtolower\", $planets);\n    $planets = array_filter($planets);\n    $planets\
    \ = array_map(\"strtolower\", $planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_unique($planets);\n\
    \    $planets = array_map(\"strtolower\", $planets);\n    $planets = array_filter($planets);\n\
    \    $planets = array_map(\"strto\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmjzjjmi5.php on line 61\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array();\n    }\n    if ($planet2\
    \ === \"sun\") {\n        return array();\n    }\n    $planet1 = explode(\" \"\
    , $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1 = array_map(\"\
    trim\", $planet1);\n    $planet2 = array_map(\"trim\", $planet2);\n    $planet1\
    \ = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n    $planet1\
    \ = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpmtxpg5e4.php on line 63\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"sun\" || $planet1 === \"earth\" || $planet1 === \"mars\"\
    \ || $planet1 === \"jupiter\" || $planet1 === \"saturn\" || $planet1 === \"uranus\"\
    \ || $planet1 === \"neptune\") {\n        return array($planet2);\n    }\n   \
    \ if ($planet2 === \"sun\" || $planet2 === \"earth\" || $planet2 === \"mars\"\
    \ || $planet2 === \"jupiter\" || $planet2 === \"saturn\" || $planet2 === \"uranus\"\
    \ || $planet2 === \"neptune\") {\n        return array($planet1);\n    }\n   \
    \ if ($planet1 === $planet2) {\n        return array();\n    }\n    $planet1 =\
    \ explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1\
    \ = array_map(\"strtolower\", $planet1);\n    $planet2 = array_map(\"strtolower\"\
    , $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_merge($planet1,\
    \ $planet2);\n    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpvf11en5e.php on line 54\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmpolx1g9p9.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array();\n    $planets[] = $planet1;\n    $planets[] = $planet2;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[]\
    \ = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"_\" . $planet1;\n\
    \    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[] = $planet2 . \"\
    _\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n    $planets[]\
    \ = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"_\" . $planet2;\n\
    \    $planets[] = $planet2 . \"_\" . $planet1;\n    $planets[] = $planet1 . \"\
    _\" . $planet2;\n    $planets[\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmp5gd59g9t.php on line 49\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    $planets = array(\"mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\"\
    , \"saturn\", \"uranus\", \"neptune\");\n    $planet1 = in_array($planet1, $planets)\
    \ ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ? $planet2 :\
    \ \"\";\n    $planet1 = ($planet1 !== \"\") ? $planet1 : \"\";\n    $planet2 =\
    \ ($planet2 !== \"\") ? $planet2 : \"\";\n    $planets = array(\"mercury\", \"\
    venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\"\
    );\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\";\n    $planet2\
    \ = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1 = ($planet1\
    \ !== \"\") ? $planet1 : \"\";\n    $planet2 = ($planet2 !== \"\") ? $planet2\
    \ : \"\";\n    $planets = array(\"mercury\", \"venus\", \"earth\", \"mars\", \"\
    jupiter\", \"saturn\", \"uranus\", \"neptune\");\n    $planet1 = in_array($planet1,\
    \ $planets) ? $planet1 : \"\";\n    $planet2 = in_array($planet2, $planets) ?\
    \ $planet2 : \"\";\n    $planet1 = ($planet1 !== \"\") ? $planet1 : \"\";\n  \
    \  $planet2 = ($planet2 !== \"\") ? $planet2 : \"\";\n    $planets = array(\"\
    mercury\", \"venus\", \"earth\", \"mars\", \"jupiter\", \"saturn\", \"uranus\"\
    , \"neptune\");\n    $planet1 = in_array($planet1, $planets) ? $planet1 : \"\"\
    ;\n    $planet2 = in_array($planet2, $planets) ? $planet2 : \"\";\n    $planet1\
    \ = ($planet1 !== \"\") ? $planet1 : \"\";\n    $planet2 = ($planet2 !== \"\"\
    ) ? $planet2 : \"\";\n    $planets = array(\"mercury\", \"venus\", \"earth\",\
    \ \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\");\n    $planet1 =\
    \ in_array($planet1, $planets) ? $planet1 : \"\";\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmplroa130a.php on line 55\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === \"sun\" || $planet1 === \"earth\" || $planet1 === \"mercury\"\
    \ || $planet1 === \"venus\" || $planet1 === \"mars\" || $planet1 === \"jupiter\"\
    \ || $planet1 === \"saturn\" || $planet1 === \"uranus\" || $planet1 === \"neptune\"\
    ) {\n        return array($planet1, $planet2);\n    }\n    if ($planet2 === \"\
    sun\" || $planet2 === \"earth\" || $planet2 === \"mercury\" || $planet2 === \"\
    venus\" || $planet2 === \"mars\" || $planet2 === \"jupiter\" || $planet2 === \"\
    saturn\" || $planet2 === \"uranus\" || $planet2 === \"neptune\") {\n        return\
    \ array($planet2, $planet1);\n    }\n    if ($planet1 === \"mercury\" && $planet2\
    \ === \"venus\") {\n        return array($planet1, $planet2);\n    }\n    if ($planet1\
    \ === \"venus\" && $planet2 === \"mercury\") {\n        return array($planet1,\
    \ $planet2);\n    }\n    if ($planet1 === \"mars\" && $planet2 === \"jupiter\"\
    ) {\n        return array($planet1, $planet2);\n    }\n    if ($planet1 === \"\
    jupiter\" && $planet2 === \"mars\") {\n        return array($planet1, $planet2);\n\
    \    }\n    if ($planet1 === \"saturn\" && $planet2 === \"uranus\") {\n      \
    \  return array($planet1, $planet2);\n    }\n    if ($planet1 === \"uranus\" &&\
    \ $planet2 === \"saturn\") {\n        return array($planet1, $planet2);\n    }\n\
    \    if ($planet1 === \"neptune\" && $planet2 === \"uranus\") {\n        return\
    \ array($planet1, $planet2);\n    }\n    if ($planet1 === \"uranus\" && $planet2\
    \ === \"neptune\") {\n        return array($planet1, $planet2);\n    }\n    if\
    \ ($planet1 === \"earth\" && $planet2 === \"mars\") {\n        return array($planet1,\
    \ $planet2);\n    }\n    if ($planet1 === \"mars\" && $planet2 === \"earth\")\
    \ {\n        return array($\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  stdout: "\nParse error: syntax error in /tmp/tmphmd1jkz_.php on line 53\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return a tuple containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty tuple if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\
    // bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\")\
    \ ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nfunction bf($planet1,\
    \ $planet2) {\n    $planet1 = strtolower($planet1);\n    $planet2 = strtolower($planet2);\n\
    \    if ($planet1 === $planet2) {\n        return array($planet1);\n    }\n  \
    \  if ($planet1 === \"sun\") {\n        return array($planet2);\n    }\n    if\
    \ ($planet2 === \"sun\") {\n        return array($planet1);\n    }\n    $planet1\
    \ = explode(\" \", $planet1);\n    $planet2 = explode(\" \", $planet2);\n    $planet1\
    \ = array_map(\"trim\", $planet1);\n    $planet2 = array_map(\"trim\", $planet2);\n\
    \    $planet1 = array_filter($planet1);\n    $planet2 = array_filter($planet2);\n\
    \    $planet1 = array_unique($planet1);\n    $planet2 = array_unique($planet2);\n\
    \    $planet1 = array_intersect($planet1, $planet2);\n    $planet2 = array_intersect($planet2,\
    \ $planet1);\n    $planet1 = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2,\
    \ $planet1);\n    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $planet1 = array_merge($planet1, $planet2);\n    $planet1 = array_unique($planet1);\n\
    \    $planet2 = array_unique($planet2);\n    $planet1 = array_intersect($planet1,\
    \ $planet2);\n    $planet2 = array_intersect($planet2, $planet1);\n    $planet1\
    \ = array_diff($planet1, $planet2);\n    $planet2 = array_diff($planet2, $planet1);\n\
    \    $planet1 = array_values($planet1);\n    $planet2 = array_values($planet2);\n\
    \    $plan\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpensnludi.php on line 60\n"
  stderr: ''
  exit_code: 255
  status: Exception
