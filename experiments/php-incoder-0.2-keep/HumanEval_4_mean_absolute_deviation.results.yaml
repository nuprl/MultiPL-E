name: HumanEval_4_mean_absolute_deviation
language: php
results:
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qku1uuh.php:24\n\
    Stack trace:\n#0 /tmp/tmp1qku1uuh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1qku1uuh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0mg2b32e.php:20\n\
    Stack trace:\n#0 /tmp/tmp0mg2b32e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp0mg2b32e.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphklq9xcb.php:24\n\
    Stack trace:\n#0 /tmp/tmphklq9xcb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphklq9xcb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_l41bsw.php:24\n\
    Stack trace:\n#0 /tmp/tmpc_l41bsw.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpc_l41bsw.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_mi_rs9.php:22\n\
    Stack trace:\n#0 /tmp/tmpa_mi_rs9.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa_mi_rs9.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpa4xwzuxz.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $n) {\n        $sum += abs($n - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyj6xhzy8.php:24\n\
    Stack trace:\n#0 /tmp/tmpyj6xhzy8.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyj6xhzy8.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpqsah0mer.php:11\n\
    Stack trace:\n#0 /tmp/tmpqsah0mer.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpqsah0mer.php(19): candidate(Array)\n#2 /tmp/tmpqsah0mer.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpqsah0mer.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nm6a9le.php:24\n\
    Stack trace:\n#0 /tmp/tmp4nm6a9le.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4nm6a9le.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squareDiffs = array_map(function\
    \ ($number) {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return\
    \ array_sum($squareDiffs) / count($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqw7_hack.php:21\n\
    Stack trace:\n#0 /tmp/tmpqw7_hack.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpqw7_hack.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpvr0pl6im.php:11\n\
    Stack trace:\n#0 /tmp/tmpvr0pl6im.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpvr0pl6im.php(19): candidate(Array)\n#2 /tmp/tmpvr0pl6im.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvr0pl6im.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttqcyu_4.php:24\n\
    Stack trace:\n#0 /tmp/tmpttqcyu_4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpttqcyu_4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpx2f4vs56.php:11\n\
    Stack trace:\n#0 /tmp/tmpx2f4vs56.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpx2f4vs56.php(19): candidate(Array)\n#2 /tmp/tmpx2f4vs56.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpx2f4vs56.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $n) {\n    $square_sum += pow($n - $mean,2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6x0x3rw_.php:24\n\
    Stack trace:\n#0 /tmp/tmp6x0x3rw_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6x0x3rw_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59usojnz.php:24\n\
    Stack trace:\n#0 /tmp/tmp59usojnz.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp59usojnz.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxk9h0ufh.php:24\n\
    Stack trace:\n#0 /tmp/tmpxk9h0ufh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpxk9h0ufh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi7ebpck.php:23\n\
    Stack trace:\n#0 /tmp/tmppi7ebpck.php(27): test()\n#1 {main}\n  thrown in /tmp/tmppi7ebpck.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $means\
    \ = array_map(function($x) { return $x; }, $numbers);\n  $means = array_sum($means)\
    \ / count($numbers);\n  return array_map(function($x) { return abs($x - $means);\
    \ }, $numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7i13w0u.php:20\n\
    Stack trace:\n#0 /tmp/tmpj7i13w0u.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpj7i13w0u.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm66skt82.php:24\n\
    Stack trace:\n#0 /tmp/tmpm66skt82.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpm66skt82.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0floexx.php:24\n\
    Stack trace:\n#0 /tmp/tmpu0floexx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpu0floexx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tq5bhwi.php:21\n\
    Stack trace:\n#0 /tmp/tmp3tq5bhwi.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp3tq5bhwi.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcayy2pb6.php:24\n\
    Stack trace:\n#0 /tmp/tmpcayy2pb6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcayy2pb6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp89cmoxwm.php:22\n\
    Stack trace:\n#0 /tmp/tmp89cmoxwm.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp89cmoxwm.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpeh8v7a8v.php:11\n\
    Stack trace:\n#0 /tmp/tmpeh8v7a8v.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpeh8v7a8v.php(19): candidate(Array)\n#2 /tmp/tmpeh8v7a8v.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpeh8v7a8v.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmps4qiplvp.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptzll0hya.php:20\n\
    Stack trace:\n#0 /tmp/tmptzll0hya.php(25): test()\n#1 {main}\n  thrown in /tmp/tmptzll0hya.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo6whihbp.php:24\n\
    Stack trace:\n#0 /tmp/tmpo6whihbp.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpo6whihbp.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01gadogq.php:24\n\
    Stack trace:\n#0 /tmp/tmp01gadogq.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp01gadogq.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qgfr068.php:24\n\
    Stack trace:\n#0 /tmp/tmp8qgfr068.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8qgfr068.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n</code>\n<|/ a tags=php,math |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to calculate the MAD between a set of numbers,\
    \ not a single value.\n<|/ c |>\n<| c |>\nI believe he wants to calculate the\
    \ MAD between a set of numbers, not a single value.\n<|/ c |>\n<| c |>\nYes, I\
    \ believe he wants to calculate the MAD between a set of numbers, not a single\
    \ value.\n<|/ c |>\n<| c |>\nI believe he wants to calculate the MAD between a\
    \ set of numbers, not a single value.\n<|/ c |>\n<| c |>\nI believe he wants to\
    \ calculate the MAD between a set of numbers, not a single value.\n<|/ c |>\n\
    <| a tags=php,math |>\n<code>\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp801uxfz6.php on line 17\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxq7ll5o.php:23\n\
    Stack trace:\n#0 /tmp/tmpyxq7ll5o.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyxq7ll5o.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = get_mean($numbers);\n  $mad = 0;\n  foreach ($numbers as $n) {\n    $mad +=\
    \ abs($n - $mean);\n  }\n  return $mad / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_mean() in\
    \ /tmp/tmpku1gz0st.php:10\nStack trace:\n#0 /tmp/tmpku1gz0st.php(19): mean_absolute_deviation(Array)\n\
    #1 /tmp/tmpku1gz0st.php(23): candidate(Array)\n#2 /tmp/tmpku1gz0st.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpku1gz0st.php on line 10\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpbe3shb.php:24\n\
    Stack trace:\n#0 /tmp/tmpmpbe3shb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpmpbe3shb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92fsl1a1.php:24\n\
    Stack trace:\n#0 /tmp/tmp92fsl1a1.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp92fsl1a1.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpojad69g7.php:24\n\
    Stack trace:\n#0 /tmp/tmpojad69g7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpojad69g7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $squared_diff = 0;\n    foreach\
    \ ($numbers as $number) {\n        $squared_diff += pow($number - $mean, $2);\n\
    \    }\n    return sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpzqd0zvf7.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5ga6qrs.php:19\n\
    Stack trace:\n#0 /tmp/tmpz5ga6qrs.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpz5ga6qrs.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n</code>\n<|/ a tags=php,statistics |>\n<| c |>\nThanks\
    \ for your answer. I'm sorry I didn't specify this in my question, but I do need\
    \ to calculate the mean and standard deviation for each of the 100 numbers. So\
    \ the output would look something like: \n`Mean: 2.5 SD: 0.45`\n<|/ c |>\n<| c\
    \ |>\nI updated my answer to include a function that calculates the mean and standard\
    \ deviation for each of the 100 numbers. Hope it helps!\n<|/ c |>\n<| c |>\nThanks\
    \ so much! This works perfectly! I really appreciate your help!\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\n<?php\n$numbers = array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100);\n\
    $mean = array_sum($numbers) / count($numbers);\n$squares = array_map(function\
    \ ($number) {\n    return pow($number - $mean, 2);\n}, $numbers);\n$std = sqrt(array_sum($squares)\
    \ / count($numbers));\necho \"Mean: \" . $mean . \" SD: \" . $std;\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp_wvc9yb8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = $numbers[0];\n  $sum = 0;\n  foreach ($numbers as $number) {\n    $sum +=\
    \ abs($number - $mean);\n  }\n  return $sum / count($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp28j_kzgo.php:23\n\
    Stack trace:\n#0 /tmp/tmp28j_kzgo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp28j_kzgo.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdxn_7p6i.php:23\n\
    Stack trace:\n#0 /tmp/tmpdxn_7p6i.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpdxn_7p6i.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon61imk9.php:24\n\
    Stack trace:\n#0 /tmp/tmpon61imk9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpon61imk9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwq2vda3z.php:24\n\
    Stack trace:\n#0 /tmp/tmpwq2vda3z.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpwq2vda3z.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp19xdp_6d.php:24\n\
    Stack trace:\n#0 /tmp/tmp19xdp_6d.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp19xdp_6d.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviations = array_map(function\
    \ ($number) use ($mean) {\n    return $number - $mean;\n  }, $numbers);\n  return\
    \ array_sum($deviations) / count($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcl_spqhy.php:22\n\
    Stack trace:\n#0 /tmp/tmpcl_spqhy.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpcl_spqhy.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp54rny8a5.php:20\n\
    Stack trace:\n#0 /tmp/tmp54rny8a5.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp54rny8a5.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn5d08etl.php:20\n\
    Stack trace:\n#0 /tmp/tmpn5d08etl.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpn5d08etl.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviations = array_map(function\
    \ ($number) {\n    return $number - $mean;\n  }, $numbers);\n  return array_sum($deviations)\
    \ / count($numbers);\n}\n</code>\n<|/ a tags=php,arrays |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to calculate the mean absolute deviation between\
    \ each element and the mean of the whole array. Your code calculates the mean\
    \ of the whole array.\n<|/ c |>\n<| c |>\nI added a comment to the question asking\
    \ for the mean.\n<|/ c |>\n<| c |>\nThe question asks for the mean of the whole\
    \ array. Your code calculates the mean of the whole array. He wants to calculate\
    \ the mean absolute deviation between each element and the mean of the whole array.\n\
    <|/ c |>\n<| c |>\nI added a comment to the question asking for the mean.\n<|/\
    \ c |>\n<| c |>\nI added a comment to the question asking for the mean.\n<|/ c\
    \ |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $mean = array_sum($numbers) / count($numbers);\n$deviations = array_map(function\
    \ ($number) {\n    return $number - $mean;\n}, $numbers);\n$mean = array_sum($deviations)\
    \ / count($numbers);\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't answer\
    \ the question. He wants to calculate the mean absolute deviation between each\
    \ element and the mean of the whole array. Your code calculates the mean of the\
    \ whole array.\n<|/ c |>\n<| c |>\nI added a comment to the question asking for\
    \ the mean.\n<|/ c |>\n<| c |>\nI added a comment to the question asking for the\
    \ mean.\n<|/ c |>\n<| a tags=php,arrays |>\n<code>\n$numbers = array(1,2,3,4,5,6,7,8,9,10);\n\
    $mean = array_sum($numbers) / count($numbers);\n$deviations = array_map(function\
    \ ($number) {\n    return $number - $mean;\n}, $numbers);\n$mean = array_sum($deviations)\
    \ / count($numbers);\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n$numbers\
    \ = array(1,2,3,4,5,6,7,8,9,10);\n$mean = array_sum($numbers) / count($numbers);\n\
    $deviations = array_map(function ($\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdx0npw9z.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpf7brqapm.php:11\n\
    Stack trace:\n#0 /tmp/tmpf7brqapm.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpf7brqapm.php(19): candidate(Array)\n#2 /tmp/tmpf7brqapm.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpf7brqapm.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0_0akej.php:24\n\
    Stack trace:\n#0 /tmp/tmpp0_0akej.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpp0_0akej.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvvuso8bb.php:22\n\
    Stack trace:\n#0 /tmp/tmpvvuso8bb.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpvvuso8bb.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrysbh3l.php:24\n\
    Stack trace:\n#0 /tmp/tmpqrysbh3l.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqrysbh3l.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppo4dhwz6.php:24\n\
    Stack trace:\n#0 /tmp/tmppo4dhwz6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppo4dhwz6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $diffs = array_map(function ($number)\
    \ { return $number - $mean; }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp797jezow.php:20\n\
    Stack trace:\n#0 /tmp/tmp797jezow.php(25): test()\n#1 {main}\n  thrown in /tmp/tmp797jezow.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squareDiffs = array_map(function\
    \ ($number) {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return\
    \ array_sum($squareDiffs) / count($numbers);\n}\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9zjrwcp.php:21\n\
    Stack trace:\n#0 /tmp/tmpy9zjrwcp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpy9zjrwcp.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp494tp1dy.php:24\n\
    Stack trace:\n#0 /tmp/tmp494tp1dy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp494tp1dy.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg268xir2.php:23\n\
    Stack trace:\n#0 /tmp/tmpg268xir2.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpg268xir2.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp62mjbby.php:21\n\
    Stack trace:\n#0 /tmp/tmpp62mjbby.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpp62mjbby.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdmgsvcn.php:24\n\
    Stack trace:\n#0 /tmp/tmpkdmgsvcn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkdmgsvcn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpni0o665k.php:11\n\
    Stack trace:\n#0 /tmp/tmpni0o665k.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpni0o665k.php(19): candidate(Array)\n#2 /tmp/tmpni0o665k.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpni0o665k.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += pow($n - $mean,2);\n  }\n  return sqrt($sum / count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtbeowjj.php:24\n\
    Stack trace:\n#0 /tmp/tmpqtbeowjj.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpqtbeowjj.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $n) {\n        $sum += abs($n - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1l5vr6a1.php:22\n\
    Stack trace:\n#0 /tmp/tmp1l5vr6a1.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp1l5vr6a1.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodvf_mgk.php:24\n\
    Stack trace:\n#0 /tmp/tmpodvf_mgk.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpodvf_mgk.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0q9ehzy_.php:24\n\
    Stack trace:\n#0 /tmp/tmp0q9ehzy_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0q9ehzy_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgk6t4nz9.php:24\n\
    Stack trace:\n#0 /tmp/tmpgk6t4nz9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgk6t4nz9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgh7snqxb.php:24\n\
    Stack trace:\n#0 /tmp/tmpgh7snqxb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgh7snqxb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviations = array_map(function\
    \ ($number) use ($mean) {\n    return $number - $mean;\n  }, $numbers);\n  return\
    \ array_sum($deviations) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprk1kqioz.php:22\n\
    Stack trace:\n#0 /tmp/tmprk1kqioz.php(27): test()\n#1 {main}\n  thrown in /tmp/tmprk1kqioz.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgc2rqxf.php:24\n\
    Stack trace:\n#0 /tmp/tmppgc2rqxf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppgc2rqxf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphtptouuy.php:24\n\
    Stack trace:\n#0 /tmp/tmphtptouuy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphtptouuy.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopv7mwxl.php:24\n\
    Stack trace:\n#0 /tmp/tmpopv7mwxl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpopv7mwxl.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpis4kg7sk.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2mfjjic5.php:23\n\
    Stack trace:\n#0 /tmp/tmp2mfjjic5.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2mfjjic5.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl1r0b5x4.php:24\n\
    Stack trace:\n#0 /tmp/tmpl1r0b5x4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpl1r0b5x4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhns56mv.php:24\n\
    Stack trace:\n#0 /tmp/tmpyhns56mv.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyhns56mv.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuf6tg14_.php:24\n\
    Stack trace:\n#0 /tmp/tmpuf6tg14_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpuf6tg14_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1n5kz0re.php:24\n\
    Stack trace:\n#0 /tmp/tmp1n5kz0re.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1n5kz0re.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphlb3l06x.php:24\n\
    Stack trace:\n#0 /tmp/tmphlb3l06x.php(28): test()\n#1 {main}\n  thrown in /tmp/tmphlb3l06x.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppeo94uv0.php:24\n\
    Stack trace:\n#0 /tmp/tmppeo94uv0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppeo94uv0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzzii4g6c.php:22\n\
    Stack trace:\n#0 /tmp/tmpzzii4g6c.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpzzii4g6c.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0hjp7jh.php:24\n\
    Stack trace:\n#0 /tmp/tmpd0hjp7jh.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpd0hjp7jh.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ler50p7.php:24\n\
    Stack trace:\n#0 /tmp/tmp7ler50p7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp7ler50p7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $n) {\n        $sum += abs($n - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9jwcyt0.php:24\n\
    Stack trace:\n#0 /tmp/tmpc9jwcyt0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpc9jwcyt0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp8ymh98q3.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \   = array_sum($numbers) / count($numbers);\n  $diffs  = array_map(function ($number)\
    \ { return $number - $mean; }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp054mq8v.php:20\n\
    Stack trace:\n#0 /tmp/tmpp054mq8v.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpp054mq8v.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2dncq6y.php:23\n\
    Stack trace:\n#0 /tmp/tmpe2dncq6y.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpe2dncq6y.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $deviations = array_map(function\
    \ ($number) use ($mean) {\n    return $number - $mean;\n  }, $numbers);\n  return\
    \ array_sum($deviations) / count($deviations);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaay0jtdq.php:22\n\
    Stack trace:\n#0 /tmp/tmpaay0jtdq.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpaay0jtdq.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squareDiffs = array_map(function\
    \ ($number) { return $number - $mean; }, $numbers);\n  return array_sum($squareDiffs)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzm3tg9k.php:20\n\
    Stack trace:\n#0 /tmp/tmpbzm3tg9k.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpbzm3tg9k.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkqqi2t6.php:24\n\
    Stack trace:\n#0 /tmp/tmpgkqqi2t6.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgkqqi2t6.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \   = array_sum($numbers) / count($numbers);\n  $diffs  = array_map(function ($number)\
    \ { return $number - $mean; }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0bcvja8.php:19\n\
    Stack trace:\n#0 /tmp/tmpc0bcvja8.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpc0bcvja8.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbc0ppk73.php:24\n\
    Stack trace:\n#0 /tmp/tmpbc0ppk73.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpbc0ppk73.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63iy8i9g.php:24\n\
    Stack trace:\n#0 /tmp/tmp63iy8i9g.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp63iy8i9g.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $n) {\n    $squared_diff += pow($n - $mean, $2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpdh2mp8ps.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $n) {\n        $sum += abs($n - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \    = array_sum($numbers) / count($numbers);\n  $deviation = 0;\n  foreach ($numbers\
    \ as $number) {\n    $deviation += abs($number - $mean);\n  }\n  return $deviation\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_4cxtxm.php:24\n\
    Stack trace:\n#0 /tmp/tmp3_4cxtxm.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp3_4cxtxm.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp1y3p778v.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcu0ed8k_.php:24\n\
    Stack trace:\n#0 /tmp/tmpcu0ed8k_.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcu0ed8k_.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkm_30ui5.php:24\n\
    Stack trace:\n#0 /tmp/tmpkm_30ui5.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkm_30ui5.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpp4t91lxp.php:11\n\
    Stack trace:\n#0 /tmp/tmpp4t91lxp.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpp4t91lxp.php(19): candidate(Array)\n#2 /tmp/tmpp4t91lxp.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp4t91lxp.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0hbbe4jo.php:24\n\
    Stack trace:\n#0 /tmp/tmp0hbbe4jo.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0hbbe4jo.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkh_t5vjl.php:22\n\
    Stack trace:\n#0 /tmp/tmpkh_t5vjl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkh_t5vjl.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv8r9i85.php:19\n\
    Stack trace:\n#0 /tmp/tmppv8r9i85.php(24): test()\n#1 {main}\n  thrown in /tmp/tmppv8r9i85.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4re84lbp.php:23\n\
    Stack trace:\n#0 /tmp/tmp4re84lbp.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp4re84lbp.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = 0;\n  $n = count($numbers);\n  foreach ($numbers as $n) {\n    $mean += $n;\n\
    \  }\n  return $mean / $n;\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2w30_hhe.php:23\n\
    Stack trace:\n#0 /tmp/tmp2w30_hhe.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2w30_hhe.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsseckjyy.php:24\n\
    Stack trace:\n#0 /tmp/tmpsseckjyy.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpsseckjyy.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpak7_3ys0.php:22\n\
    Stack trace:\n#0 /tmp/tmpak7_3ys0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpak7_3ys0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6mavms3.php:20\n\
    Stack trace:\n#0 /tmp/tmpf6mavms3.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpf6mavms3.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2xecucp7.php:24\n\
    Stack trace:\n#0 /tmp/tmp2xecucp7.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2xecucp7.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71hvrxel.php:24\n\
    Stack trace:\n#0 /tmp/tmp71hvrxel.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp71hvrxel.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $square_sum = 0;\n  foreach ($numbers\
    \ as $number) {\n    $square_sum += pow($number - $mean, 2);\n  }\n  return sqrt($square_sum\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4a_k8q2c.php:24\n\
    Stack trace:\n#0 /tmp/tmp4a_k8q2c.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4a_k8q2c.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwufooy4.php:24\n\
    Stack trace:\n#0 /tmp/tmpcwufooy4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpcwufooy4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxiqh_6ns.php:21\n\
    Stack trace:\n#0 /tmp/tmpxiqh_6ns.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxiqh_6ns.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6drp87u4.php:24\n\
    Stack trace:\n#0 /tmp/tmp6drp87u4.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp6drp87u4.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqtsi3uj.php:20\n\
    Stack trace:\n#0 /tmp/tmppqtsi3uj.php(25): test()\n#1 {main}\n  thrown in /tmp/tmppqtsi3uj.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmpvwhi65cv.php:11\n\
    Stack trace:\n#0 /tmp/tmpvwhi65cv.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmpvwhi65cv.php(19): candidate(Array)\n#2 /tmp/tmpvwhi65cv.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvwhi65cv.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0gpxc4uc.php:24\n\
    Stack trace:\n#0 /tmp/tmp0gpxc4uc.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp0gpxc4uc.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppqhmd6nu.php:24\n\
    Stack trace:\n#0 /tmp/tmppqhmd6nu.php(28): test()\n#1 {main}\n  thrown in /tmp/tmppqhmd6nu.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8re6xj92.php:24\n\
    Stack trace:\n#0 /tmp/tmp8re6xj92.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8re6xj92.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptv2tt8m.php:22\n\
    Stack trace:\n#0 /tmp/tmpptv2tt8m.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpptv2tt8m.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=php,statistics,math\
    \ |>\nI wrote this function to calculate MAD:\n<code>\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp5_ya4dp3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuub14vfz.php:20\n\
    Stack trace:\n#0 /tmp/tmpuub14vfz.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpuub14vfz.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \    = array_sum($numbers) / count($numbers);\n  $deviations = array_map(function\
    \ ($number) {\n    return $number - $mean;\n  }, $numbers);\n  return array_sum($deviations)\
    \ / count($deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5741p_08.php:22\n\
    Stack trace:\n#0 /tmp/tmp5741p_08.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp5741p_08.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $n) {\n        $sum += abs($n - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpytqvwsef.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h_rd98s.php:24\n\
    Stack trace:\n#0 /tmp/tmp4h_rd98s.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4h_rd98s.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = 0;\n  $sum = 0;\n  foreach ($numbers as $number) {\n    $sum += $number;\n\
    \  }\n  return $sum / count($numbers);\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8exey5hl.php:23\n\
    Stack trace:\n#0 /tmp/tmp8exey5hl.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8exey5hl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3j2h6jj0.php:22\n\
    Stack trace:\n#0 /tmp/tmp3j2h6jj0.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3j2h6jj0.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8awy91vf.php:24\n\
    Stack trace:\n#0 /tmp/tmp8awy91vf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8awy91vf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyd2vcen.php:24\n\
    Stack trace:\n#0 /tmp/tmpoyd2vcen.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpoyd2vcen.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8rj272ku.php:24\n\
    Stack trace:\n#0 /tmp/tmp8rj272ku.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp8rj272ku.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb3_11yud.php:21\n\
    Stack trace:\n#0 /tmp/tmpb3_11yud.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpb3_11yud.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $dev   = 0;\n  $sumOfSquares =\
    \ 0;\n  foreach ($numbers as $n) {\n    $dev += pow($n - $mean,2);\n    $sumOfSquares\
    \ += $n;\n  }\n  return sqrt($sumOfSquares / count($numbers));\n}\n\nfunction\
    \ candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxu4zjz0k.php:25\n\
    Stack trace:\n#0 /tmp/tmpxu4zjz0k.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpxu4zjz0k.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5oajse1v.php:19\n\
    Stack trace:\n#0 /tmp/tmp5oajse1v.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp5oajse1v.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkydp4ep9.php:24\n\
    Stack trace:\n#0 /tmp/tmpkydp4ep9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpkydp4ep9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += pow($n - $mean,2);\n  }\n  return sqrt($sum / count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbo7z60m.php:24\n\
    Stack trace:\n#0 /tmp/tmprbo7z60m.php(28): test()\n#1 {main}\n  thrown in /tmp/tmprbo7z60m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpllqbwu5e.php:24\n\
    Stack trace:\n#0 /tmp/tmpllqbwu5e.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpllqbwu5e.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdelmsn_b.php:24\n\
    Stack trace:\n#0 /tmp/tmpdelmsn_b.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdelmsn_b.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ne_oxgb.php:24\n\
    Stack trace:\n#0 /tmp/tmp2ne_oxgb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2ne_oxgb.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return array_sum(abs($numbers\
    \ - $mean)) / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return\
    \ mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1.0,\
    \ 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Unsupported operand types in /tmp/tmptdemu96n.php:11\n\
    Stack trace:\n#0 /tmp/tmptdemu96n.php(15): mean_absolute_deviation(Array)\n#1\
    \ /tmp/tmptdemu96n.php(19): candidate(Array)\n#2 /tmp/tmptdemu96n.php(24): test()\n\
    #3 {main}\n  thrown in /tmp/tmptdemu96n.php on line 11\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \  = array_sum($numbers) / count($numbers);\n  $dev   = 0;\n  foreach ($numbers\
    \ as $n) {\n    $dev += abs($n - $mean);\n  }\n  return $dev / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xnic00w.php:23\n\
    Stack trace:\n#0 /tmp/tmp9xnic00w.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9xnic00w.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4wjufvfn.php:24\n\
    Stack trace:\n#0 /tmp/tmp4wjufvfn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4wjufvfn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp35j_p3c9.php:24\n\
    Stack trace:\n#0 /tmp/tmp35j_p3c9.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp35j_p3c9.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpunde5f4h.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmekx58n.php:24\n\
    Stack trace:\n#0 /tmp/tmpdmekx58n.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpdmekx58n.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \    = array_sum($numbers) / count($numbers);\n  $deviations = array_map(function\
    \ ($number) {\n    return $number - $mean;\n  }, $numbers);\n  return array_sum($deviations)\
    \ / count($deviations);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ds2kilr.php:22\n\
    Stack trace:\n#0 /tmp/tmp9ds2kilr.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9ds2kilr.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe97xk3ea.php:24\n\
    Stack trace:\n#0 /tmp/tmpe97xk3ea.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpe97xk3ea.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, $2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmp6m_zznxs.php on line 13\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf2vpqti.php:22\n\
    Stack trace:\n#0 /tmp/tmpyf2vpqti.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpyf2vpqti.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmdh2nqu.php:23\n\
    Stack trace:\n#0 /tmp/tmpfmdh2nqu.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpfmdh2nqu.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspeeeg2h.php:24\n\
    Stack trace:\n#0 /tmp/tmpspeeeg2h.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpspeeeg2h.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2517zgwf.php:22\n\
    Stack trace:\n#0 /tmp/tmp2517zgwf.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp2517zgwf.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4a0nsa23.php:24\n\
    Stack trace:\n#0 /tmp/tmp4a0nsa23.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp4a0nsa23.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy6s3_e86.php:24\n\
    Stack trace:\n#0 /tmp/tmpy6s3_e86.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpy6s3_e86.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $squareDiffs = array_map(function\
    \ ($number) {\n        return $number - $mean;\n    }, $numbers);\n    return\
    \ array_sum($squareDiffs) / count($numbers);\n}\n\nfunction candidate(...$args)\
    \ {\n    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmttm1mb7.php:22\n\
    Stack trace:\n#0 /tmp/tmpmttm1mb7.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpmttm1mb7.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_o_hc5sx.php:24\n\
    Stack trace:\n#0 /tmp/tmp_o_hc5sx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp_o_hc5sx.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2qgqlbrb.php:19\n\
    Stack trace:\n#0 /tmp/tmp2qgqlbrb.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp2qgqlbrb.php\
    \ on line 19\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2_dgi53m.php:24\n\
    Stack trace:\n#0 /tmp/tmp2_dgi53m.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp2_dgi53m.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ {\n    return pow($number - $mean, 2);\n  }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6mk47oig.php:22\n\
    Stack trace:\n#0 /tmp/tmp6mk47oig.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp6mk47oig.php\
    \ on line 22\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprx9z4f8a.php:20\n\
    Stack trace:\n#0 /tmp/tmprx9z4f8a.php(25): test()\n#1 {main}\n  thrown in /tmp/tmprx9z4f8a.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpksldvw4y.php:24\n\
    Stack trace:\n#0 /tmp/tmpksldvw4y.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpksldvw4y.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfx4a6x2v.php:24\n\
    Stack trace:\n#0 /tmp/tmpfx4a6x2v.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpfx4a6x2v.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2x4ytca.php:24\n\
    Stack trace:\n#0 /tmp/tmpi2x4ytca.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpi2x4ytca.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff/count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyau_5zn.php:24\n\
    Stack trace:\n#0 /tmp/tmpfyau_5zn.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpfyau_5zn.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squares = array_map(function ($number)\
    \ { return pow($number - $mean, 2); }, $numbers);\n  return array_sum($squares)\
    \ / count($numbers);\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi006xbe_.php:20\n\
    Stack trace:\n#0 /tmp/tmpi006xbe_.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpi006xbe_.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $n) {\n        $sum += abs($n - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \   = array_sum($numbers) / count($numbers);\n  $diffs  = array_map(function ($number)\
    \ { return $number - $mean; }, $numbers);\n  return array_sum($diffs) / count($diffs);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphquqpdf7.php:20\n\
    Stack trace:\n#0 /tmp/tmphquqpdf7.php(25): test()\n#1 {main}\n  thrown in /tmp/tmphquqpdf7.php\
    \ on line 20\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2ts07zf.php:24\n\
    Stack trace:\n#0 /tmp/tmpf2ts07zf.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpf2ts07zf.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyjij6122.php:24\n\
    Stack trace:\n#0 /tmp/tmpyjij6122.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpyjij6122.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean, 2);\n  }\n  return\
    \ sqrt($squared_diff / count($numbers));\n}\n\nfunction candidate(...$args) {\n\
    \    return mean_absolute_deviation(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(array(1.0, 2.0)) !== 0.5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0)) !== 1.0) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0, 5.0)) !== 1.2)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgkfoali0.php:24\n\
    Stack trace:\n#0 /tmp/tmpgkfoali0.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgkfoali0.php\
    \ on line 24\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $sum = 0;\n  foreach ($numbers as\
    \ $n) {\n    $sum += abs($n - $mean);\n  }\n  return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    return abs($mean - array_sum(array_map(function\
    \ ($number) {\n        return $number * $number;\n    }, $numbers)) / count($numbers));\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpvzfnde.php:21\n\
    Stack trace:\n#0 /tmp/tmpbpvzfnde.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpbpvzfnde.php\
    \ on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n  $mean\
    \ = array_sum($numbers) / count($numbers);\n  $squared_diff = 0;\n  foreach ($numbers\
    \ as $number) {\n    $squared_diff += pow($number - $mean,2);\n  }\n  return sqrt($squared_diff\
    \ / count($numbers));\n}\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3n0hb1gl.php:23\n\
    Stack trace:\n#0 /tmp/tmp3n0hb1gl.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp3n0hb1gl.php\
    \ on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    // around the mean of this dataset.\n// Mean Absolute Deviation is the average\
    \ absolute difference between each\n// element and a centerpoint (mean in this\
    \ case):\n// MAD = average | x - x_mean |\n// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n// 1.0\nfunction mean_absolute_deviation($numbers) {\n    $mean\
    \ = array_sum($numbers) / count($numbers);\n    $sum = 0;\n    foreach ($numbers\
    \ as $n) {\n        $sum += abs($n - $mean);\n    }\n    return $sum / count($numbers);\n\
    }\n\nfunction candidate(...$args) {\n    return mean_absolute_deviation(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1.0, 2.0)) !== 0.5) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0, 4.0))\
    \ !== 1.0) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0)) !== 1.2) { throw new Exception(\"Test failed!\"); }\n}\n\
    \ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
