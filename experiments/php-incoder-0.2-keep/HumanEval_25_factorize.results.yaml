name: HumanEval_25_factorize
language: php
results:
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp9rup2lc.php:29\n\
    Stack trace:\n#0 /tmp/tmpp9rup2lc.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp9rup2lc.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 2;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n            $i++;\n        } else {\n\
    \            $factor *= $i;\n        }\n    }\n    if ($factor != 1) {\n     \
    \   $factors[] = $factor;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9cd6g6s.php:35\n\
    Stack trace:\n#0 /tmp/tmpg9cd6g6s.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpg9cd6g6s.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgial3d1j.php:29\n\
    Stack trace:\n#0 /tmp/tmpgial3d1j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgial3d1j.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[$i] = $factor;\n        $factor *= $i;\n\
    \    }\n    for($i = 1; $i <= $n; $i++) {\n        $factors[$i] /= $n;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvfz6v_k.php:29\n\
    Stack trace:\n#0 /tmp/tmpwvfz6v_k.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwvfz6v_k.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbny1vv4.php:34\n\
    Stack trace:\n#0 /tmp/tmprbny1vv4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmprbny1vv4.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        while($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $i;\n            $factor = 1;\n        }\n        $factor++;\n\
    \    }\n    if ($n != 1) {\n        $factors[] = $factor;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpyn5mmrfi.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 2;\n    while($i <= $n) {\n  \
    \      if($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n /\
    \ $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwrsgxm7.php:30\n\
    Stack trace:\n#0 /tmp/tmpcwrsgxm7.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcwrsgxm7.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkxn5a25e.php:35\n\
    Stack trace:\n#0 /tmp/tmpkxn5a25e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpkxn5a25e.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        $j = 1;\n        while($j * $i <= $n) {\n      \
    \      $j++;\n        }\n        $factors[] = $j;\n        $i++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzasrzmzd.php:31\n\
    Stack trace:\n#0 /tmp/tmpzasrzmzd.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpzasrzmzd.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1os99rpf.php:32\n\
    Stack trace:\n#0 /tmp/tmp1os99rpf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp1os99rpf.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if ($n != 1) {\n      \
    \  $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd75fhj08.php:34\n\
    Stack trace:\n#0 /tmp/tmpd75fhj08.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpd75fhj08.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= $n; $i++) {\n\
    \        $j = 1;\n        while($n % $i == 0) {\n            $j++;\n         \
    \   $n /= $i;\n        }\n        $factors[] = $j;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtzlt63z.php:30\n\
    Stack trace:\n#0 /tmp/tmprtzlt63z.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprtzlt63z.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 2;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_qjwhtgn.php:33\n\
    Stack trace:\n#0 /tmp/tmp_qjwhtgn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_qjwhtgn.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if ($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptv01s0ht.php:35\n\
    Stack trace:\n#0 /tmp/tmptv01s0ht.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptv01s0ht.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f3e_ugm.php:35\n\
    Stack trace:\n#0 /tmp/tmp3f3e_ugm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp3f3e_ugm.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= sqrt($n); $i++)\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lpaoy4s.php:27\n\
    Stack trace:\n#0 /tmp/tmp_lpaoy4s.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_lpaoy4s.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= sqrt($n); $i++)\
    \ {\n        $factors[] = $i;\n    }\n    sort($factors);\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9hpgsbw.php:25\n\
    Stack trace:\n#0 /tmp/tmpg9hpgsbw.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpg9hpgsbw.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        while($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $i;\n        }\n        $factor++;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpfyy_qbxa.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n !=\
    \ 1) {\n        while ($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpn_80h1e4.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_rfy7v9.php:32\n\
    Stack trace:\n#0 /tmp/tmpe_rfy7v9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpe_rfy7v9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        $factors[] = $factor;\n        $n = ($n % $factor);\n        $factor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpfcxbg0sc.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor++;\n        }\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4mxdema5.php:30\n\
    Stack trace:\n#0 /tmp/tmp4mxdema5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp4mxdema5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= $n; $i++) {\n\
    \        $factors[$i] = 1;\n        for($j = 2; $j <= $i; $j++) {\n          \
    \  if($i % $j == 0) {\n                $factors[$i]++;\n                break;\n\
    \            }\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoyb4bl4i.php:30\n\
    Stack trace:\n#0 /tmp/tmpoyb4bl4i.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpoyb4bl4i.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 1;\n    while ($n != 1) {\n  \
    \      if ($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n\
    \ / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9al7uxwe.php:29\n\
    Stack trace:\n#0 /tmp/tmp9al7uxwe.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9al7uxwe.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        while($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpke34g6e3.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxezyfvd1.php:35\n\
    Stack trace:\n#0 /tmp/tmpxezyfvd1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxezyfvd1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbv3o_rcy.php:29\n\
    Stack trace:\n#0 /tmp/tmpbv3o_rcy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbv3o_rcy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm60crk_u.php:30\n\
    Stack trace:\n#0 /tmp/tmpm60crk_u.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpm60crk_u.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    if($n > 1) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8pqlvosy.php:34\n\
    Stack trace:\n#0 /tmp/tmp8pqlvosy.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8pqlvosy.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 1;\n    while($i <= $n) {\n\
    \        if($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n\
    \ / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zq563l3.php:29\n\
    Stack trace:\n#0 /tmp/tmp5zq563l3.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5zq563l3.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if ($n != 1) {\n      \
    \  $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcp3c6daz.php:34\n\
    Stack trace:\n#0 /tmp/tmpcp3c6daz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpcp3c6daz.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 2;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2q1ftyya.php:33\n\
    Stack trace:\n#0 /tmp/tmp2q1ftyya.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp2q1ftyya.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        while($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $i;\n            $factor = 1;\n        }\n        $factor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpid9n1679.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if ($n > 1) {\n       \
    \ $factors[] = $n;\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztprt8nj.php:33\n\
    Stack trace:\n#0 /tmp/tmpztprt8nj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpztprt8nj.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= $n; $i++) {\n\
    \        if($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n\
    \ / $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt7ag_kgf.php:28\n\
    Stack trace:\n#0 /tmp/tmpt7ag_kgf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpt7ag_kgf.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n !=\
    \ 1) {\n        while ($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpj99psity.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf6v4vejk.php:32\n\
    Stack trace:\n#0 /tmp/tmpf6v4vejk.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpf6v4vejk.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rj09dns.php:35\n\
    Stack trace:\n#0 /tmp/tmp6rj09dns.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp6rj09dns.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvvi7fty.php:29\n\
    Stack trace:\n#0 /tmp/tmphvvi7fty.php(39): test()\n#1 {main}\n  thrown in /tmp/tmphvvi7fty.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= $n; $i++) {\n\
    \        $factors[] = $i;\n    }\n    sort($factors);\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxswmmob6.php:25\n\
    Stack trace:\n#0 /tmp/tmpxswmmob6.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpxswmmob6.php\
    \ on line 25\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n   \
    \ }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkoyqhu_3.php:34\n\
    Stack trace:\n#0 /tmp/tmpkoyqhu_3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkoyqhu_3.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n   \
    \ }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphrv21fwg.php:35\n\
    Stack trace:\n#0 /tmp/tmphrv21fwg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphrv21fwg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n<?php\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpjzklj66i.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnu1wgrtg.php:29\n\
    Stack trace:\n#0 /tmp/tmpnu1wgrtg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpnu1wgrtg.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgz4lazfx.php:30\n\
    Stack trace:\n#0 /tmp/tmpgz4lazfx.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgz4lazfx.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1x8154jm.php:35\n\
    Stack trace:\n#0 /tmp/tmp1x8154jm.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1x8154jm.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqsvyt68.php:29\n\
    Stack trace:\n#0 /tmp/tmpqqsvyt68.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqqsvyt68.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcmti6_m.php:32\n\
    Stack trace:\n#0 /tmp/tmppcmti6_m.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppcmti6_m.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqi9zu6nu.php:29\n\
    Stack trace:\n#0 /tmp/tmpqi9zu6nu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpqi9zu6nu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_6952v8.php:29\n\
    Stack trace:\n#0 /tmp/tmpc_6952v8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc_6952v8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgse_4des.php:28\n\
    Stack trace:\n#0 /tmp/tmpgse_4des.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpgse_4des.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3eiie4l.php:30\n\
    Stack trace:\n#0 /tmp/tmpn3eiie4l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpn3eiie4l.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5gtgngl.php:29\n\
    Stack trace:\n#0 /tmp/tmpv5gtgngl.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv5gtgngl.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if ($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacu0hq7d.php:35\n\
    Stack trace:\n#0 /tmp/tmpacu0hq7d.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpacu0hq7d.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp252p453m.php:29\n\
    Stack trace:\n#0 /tmp/tmp252p453m.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp252p453m.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your solution, however it fails for large numbers.\
    \ I modified it slightly to return an array of factors instead of just a single\
    \ factor. [See my answer below](https://stackoverflow.com/a/53056441/477037).\n\
    <|/ c |>\n<| a dscore=2 |>\nI modified the accepted answer slightly to return\
    \ an array of factors instead of just a single factor.\n<code>\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmprywre1lm.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if($n != 1) {\n       \
    \ $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvkimx4je.php:34\n\
    Stack trace:\n#0 /tmp/tmpvkimx4je.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpvkimx4je.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[] = $factor;\n        $factor *= $i;\n \
    \   }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprc4hggug.php:26\n\
    Stack trace:\n#0 /tmp/tmprc4hggug.php(36): test()\n#1 {main}\n  thrown in /tmp/tmprc4hggug.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n !=\
    \ 1) {\n        while ($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpwbv9vvu8.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 2;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfj7ffvtz.php:32\n\
    Stack trace:\n#0 /tmp/tmpfj7ffvtz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfj7ffvtz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51sm5b33.php:35\n\
    Stack trace:\n#0 /tmp/tmp51sm5b33.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp51sm5b33.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2ylu69p.php:30\n\
    Stack trace:\n#0 /tmp/tmpf2ylu69p.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf2ylu69p.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= sqrt($n); $i++)\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm3rrh22f.php:27\n\
    Stack trace:\n#0 /tmp/tmpm3rrh22f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpm3rrh22f.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        while($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpfbimusse.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        while($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp8qgzbpzu.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp37fr_i5l.php:29\n\
    Stack trace:\n#0 /tmp/tmp37fr_i5l.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp37fr_i5l.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j8i2ni_.php:32\n\
    Stack trace:\n#0 /tmp/tmp8j8i2ni_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8j8i2ni_.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    if ($n > 1) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzvuqibt.php:34\n\
    Stack trace:\n#0 /tmp/tmpkzvuqibt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkzvuqibt.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 2;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n            $i++;\n        } else {\n\
    \            $factor *= $i;\n        }\n    }\n    if ($factor != 1) {\n     \
    \   $factors[] = $factor;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7uqbh3_.php:35\n\
    Stack trace:\n#0 /tmp/tmpr7uqbh3_.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpr7uqbh3_.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $factor = 1;\n    for($i = 2; $i <=\
    \ $n; $i++) {\n        while($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $i;\n        }\n        $factor++;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv9ueeq_6.php:29\n\
    Stack trace:\n#0 /tmp/tmpv9ueeq_6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv9ueeq_6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= $n) {\n\
    \        if($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1r64a0f1.php:30\n\
    Stack trace:\n#0 /tmp/tmp1r64a0f1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1r64a0f1.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_7icjvf.php:29\n\
    Stack trace:\n#0 /tmp/tmpp_7icjvf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp_7icjvf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 2;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n            $i++;\n        } else {\n\
    \            $factor *= $i;\n        }\n    }\n    if ($factor != 1) {\n     \
    \   $factors[] = $factor;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_twev08.php:35\n\
    Stack trace:\n#0 /tmp/tmpq_twev08.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpq_twev08.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= sqrt($n); $i++)\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv6e0yfl.php:26\n\
    Stack trace:\n#0 /tmp/tmpjv6e0yfl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjv6e0yfl.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n >=\
    \ $factor) {\n        $factors[] = $factor;\n        $n = $n / $factor;\n    \
    \    $factor++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqdy5m_4.php:27\n\
    Stack trace:\n#0 /tmp/tmpqqdy5m_4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpqqdy5m_4.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6l0ozy8h.php:33\n\
    Stack trace:\n#0 /tmp/tmp6l0ozy8h.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6l0ozy8h.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= sqrt($n); $i++)\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvgwjp0n9.php:27\n\
    Stack trace:\n#0 /tmp/tmpvgwjp0n9.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvgwjp0n9.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[$i] = $factor;\n        $factor *= $i;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxrkesyhc.php:26\n\
    Stack trace:\n#0 /tmp/tmpxrkesyhc.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpxrkesyhc.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5hcq0ao.php:29\n\
    Stack trace:\n#0 /tmp/tmpo5hcq0ao.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo5hcq0ao.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxi9a8zd5.php:30\n\
    Stack trace:\n#0 /tmp/tmpxi9a8zd5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpxi9a8zd5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=php,factorization,math |>\n<code>\n<?php\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpp6ta0iyt.php on line 23\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= $n; $i++) {\n\
    \        while($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1aokexid.php:29\n\
    Stack trace:\n#0 /tmp/tmp1aokexid.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1aokexid.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n   \
    \ }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpep1dx0zr.php:35\n\
    Stack trace:\n#0 /tmp/tmpep1dx0zr.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpep1dx0zr.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 2;\n    while($i <= $n) {\n  \
    \      if($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpok8xzf3g.php:30\n\
    Stack trace:\n#0 /tmp/tmpok8xzf3g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpok8xzf3g.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 1;\n    while ($n % $i == 0) {\n\
    \        $factors[] = $i;\n        $i++;\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfflycj_4.php:26\n\
    Stack trace:\n#0 /tmp/tmpfflycj_4.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfflycj_4.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if ($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qad5mpg.php:35\n\
    Stack trace:\n#0 /tmp/tmp0qad5mpg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0qad5mpg.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsv2rw1vz.php:32\n\
    Stack trace:\n#0 /tmp/tmpsv2rw1vz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsv2rw1vz.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihhvxdzh.php:29\n\
    Stack trace:\n#0 /tmp/tmpihhvxdzh.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpihhvxdzh.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[$i] = $factor;\n        $factor *= $i;\n\
    \    }\n    for($i = 1; $i <= $n; $i++) {\n        $factors[$i] /= $n;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp22ll5ljo.php:29\n\
    Stack trace:\n#0 /tmp/tmp22ll5ljo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp22ll5ljo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8a8kqnu.php:29\n\
    Stack trace:\n#0 /tmp/tmpc8a8kqnu.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpc8a8kqnu.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= sqrt($n); $i++)\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ltes235.php:26\n\
    Stack trace:\n#0 /tmp/tmp5ltes235.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5ltes235.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppyk_ctow.php:31\n\
    Stack trace:\n#0 /tmp/tmppyk_ctow.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppyk_ctow.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= sqrt($n); $i++)\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2w8uaynr.php:27\n\
    Stack trace:\n#0 /tmp/tmp2w8uaynr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2w8uaynr.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $factor = 1;\n    for($i = 1; $i <=\
    \ $n; $i++) {\n        while($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $i;\n            $factor++;\n        }\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpt7ojleg_.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if ($n > 1) {\n       \
    \ $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptd0cedeo.php:34\n\
    Stack trace:\n#0 /tmp/tmptd0cedeo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmptd0cedeo.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor *= $i;\n    \
    \    }\n    }\n    $factors[] = $factor;\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumhfog5a.php:31\n\
    Stack trace:\n#0 /tmp/tmpumhfog5a.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpumhfog5a.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 2;\n  \
    \  while ($i <= sqrt($n)) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n            $i++;\n        } else {\n\
    \            $factor *= $i;\n        }\n    }\n    if ($factor != 1) {\n     \
    \   $factors[] = $factor;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp050_xlaz.php:35\n\
    Stack trace:\n#0 /tmp/tmp050_xlaz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp050_xlaz.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[$i] = $factor;\n        $factor *= $i;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb47golc0.php:26\n\
    Stack trace:\n#0 /tmp/tmpb47golc0.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpb47golc0.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk7ldb1o3.php:35\n\
    Stack trace:\n#0 /tmp/tmpk7ldb1o3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpk7ldb1o3.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= sqrt($n); $i++)\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwkurwsi.php:27\n\
    Stack trace:\n#0 /tmp/tmpzwkurwsi.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzwkurwsi.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor *= $i;\n    \
    \    }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkvxw7ud.php:33\n\
    Stack trace:\n#0 /tmp/tmpwkvxw7ud.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwkvxw7ud.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= sqrt($n); $i++)\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        }\n    }\n    return $factors;\n}\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=php,factors,algorithm |>\n<code>\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpxu7q6p53.php on line 21\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_9s3csz.php:29\n\
    Stack trace:\n#0 /tmp/tmp7_9s3csz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7_9s3csz.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= $n; $i++) {\n\
    \        $factors[$i] = 1;\n        for($j = 1; $j <= $n; $j++) {\n          \
    \  if($i % $j == 0) {\n                $factors[$i]++;\n                break;\n\
    \            }\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcfk7gl8c.php:30\n\
    Stack trace:\n#0 /tmp/tmpcfk7gl8c.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcfk7gl8c.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    for($i = 2; $i <= sqrt($n); $i++) {\n\
    \        if($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n\
    \ / $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgx1k54o.php:27\n\
    Stack trace:\n#0 /tmp/tmpzgx1k54o.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzgx1k54o.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[$i] = $factor;\n        $factor *= $i;\n\
    \    }\n    for($i = 1; $i <= $n; $i++) {\n        $factors[$i] /= $n;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ose5bo5.php:29\n\
    Stack trace:\n#0 /tmp/tmp5ose5bo5.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5ose5bo5.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor *= $i;\n    \
    \    }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n   \
    \ return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkqst9s4.php:30\n\
    Stack trace:\n#0 /tmp/tmphkqst9s4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmphkqst9s4.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5cyufa9.php:32\n\
    Stack trace:\n#0 /tmp/tmpo5cyufa9.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpo5cyufa9.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 1;\n    while($i <= $n) {\n\
    \        if($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n\
    \ / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2q9qa6m.php:29\n\
    Stack trace:\n#0 /tmp/tmpe2q9qa6m.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpe2q9qa6m.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= $n; $i++) {\n\
    \        while(!isPrime($i)) {\n            $i++;\n        }\n        $factors[]\
    \ = $i;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpj4yyjw4_.php:14\nStack trace:\n#0 /tmp/tmpj4yyjw4_.php(23): factorize(2)\n\
    #1 /tmp/tmpj4yyjw4_.php(27): candidate(2)\n#2 /tmp/tmpj4yyjw4_.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpj4yyjw4_.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if ($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfnzte0mq.php:35\n\
    Stack trace:\n#0 /tmp/tmpfnzte0mq.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfnzte0mq.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 2;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4zzmv98.php:32\n\
    Stack trace:\n#0 /tmp/tmpj4zzmv98.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpj4zzmv98.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8l0f7j8.php:29\n\
    Stack trace:\n#0 /tmp/tmpp8l0f7j8.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp8l0f7j8.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptc3tuive.php:35\n\
    Stack trace:\n#0 /tmp/tmptc3tuive.php(45): test()\n#1 {main}\n  thrown in /tmp/tmptc3tuive.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if ($n != 1) {\n      \
    \  $factors[] = $n;\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm5cnh3k6.php:33\n\
    Stack trace:\n#0 /tmp/tmpm5cnh3k6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpm5cnh3k6.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while ($n >= $factor) {\n        $factors[] = $factor;\n        $i++;\n   \
    \     $factor *= $i;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpagaj81d3.php:28\n\
    Stack trace:\n#0 /tmp/tmpagaj81d3.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpagaj81d3.php\
    \ on line 28\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmb5cf4a5.php:30\n\
    Stack trace:\n#0 /tmp/tmpmb5cf4a5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpmb5cf4a5.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor *= $i;\n    \
    \    }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndq8uqcg.php:33\n\
    Stack trace:\n#0 /tmp/tmpndq8uqcg.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpndq8uqcg.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5uk5oh2z.php:32\n\
    Stack trace:\n#0 /tmp/tmp5uk5oh2z.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5uk5oh2z.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    if($n > 1) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6l1tx3c.php:34\n\
    Stack trace:\n#0 /tmp/tmpd6l1tx3c.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpd6l1tx3c.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor *= $i;\n    \
    \    }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsgt624cf.php:33\n\
    Stack trace:\n#0 /tmp/tmpsgt624cf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpsgt624cf.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= $n; $i++) {\n\
    \        $factors[$i] = 1;\n        for($j = 2; $j <= $n; $j++) {\n          \
    \  if($n % $j == 0) {\n                $factors[$i] += $factors[$j];\n       \
    \         $factors[$j] = 1;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp779vh1ia.php:30\n\
    Stack trace:\n#0 /tmp/tmp779vh1ia.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp779vh1ia.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        $factors[] = $factor;\n        $n = $n / $factor;\n        $factor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbbtd5dj.php:27\n\
    Stack trace:\n#0 /tmp/tmppbbtd5dj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmppbbtd5dj.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        if($n % $factor == 0) {\n            $factors[] = $factor;\n \
    \           $n /= $factor;\n        } else {\n            $factor++;\n       \
    \ }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpruaiubfc.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcaclnfh1.php:35\n\
    Stack trace:\n#0 /tmp/tmpcaclnfh1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcaclnfh1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxeh0ucp2.php:29\n\
    Stack trace:\n#0 /tmp/tmpxeh0ucp2.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxeh0ucp2.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0qs4lurg.php:30\n\
    Stack trace:\n#0 /tmp/tmp0qs4lurg.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp0qs4lurg.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h5eecte.php:29\n\
    Stack trace:\n#0 /tmp/tmp4h5eecte.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4h5eecte.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 2;\
    \ $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor *= $i;\n    \
    \    }\n    }\n    $factors[] = $factor;\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqmkgajio.php:31\n\
    Stack trace:\n#0 /tmp/tmpqmkgajio.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpqmkgajio.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        $factors[] = $factor;\n        $n = $n % $factor;\n        $factor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpu06l2mvo.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        while($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpoin_7flw.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9wvriz7a.php:29\n\
    Stack trace:\n#0 /tmp/tmp9wvriz7a.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp9wvriz7a.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 1;\n    while($i <= $n) {\n\
    \        if($n % $i == 0) {\n            $factors[] = $i;\n            $n = ($n\
    \ / $i);\n            $i++;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna4a0lna.php:29\n\
    Stack trace:\n#0 /tmp/tmpna4a0lna.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpna4a0lna.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchv_d45s.php:32\n\
    Stack trace:\n#0 /tmp/tmpchv_d45s.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpchv_d45s.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp179itzat.php:29\n\
    Stack trace:\n#0 /tmp/tmp179itzat.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp179itzat.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 2; $i <= $n; $i++) {\n\
    \        while(!isPrime($i)) {\n            $i++;\n        }\n        $factors[]\
    \ = $i;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpjn185tlc.php:14\nStack trace:\n#0 /tmp/tmpjn185tlc.php(23): factorize(2)\n\
    #1 /tmp/tmpjn185tlc.php(27): candidate(2)\n#2 /tmp/tmpjn185tlc.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmpjn185tlc.php on line 14\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[$i] = $factor;\n        $factor *= $i;\n\
    \    }\n    for($i = $n; $i > 1; $i--) {\n        if($factors[$i] % $i == 0) {\n\
    \            $factors[$i] = $factors[$i] / $i;\n            $factors[$i - 1] +=\
    \ 1;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljkd0isi.php:32\n\
    Stack trace:\n#0 /tmp/tmpljkd0isi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpljkd0isi.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        $factors[] = $factor;\n        $n = $n % $factor;\n        $factor\
    \ *= $factor;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpuquiubbr.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd6rh1jod.php:30\n\
    Stack trace:\n#0 /tmp/tmpd6rh1jod.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd6rh1jod.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n !=\
    \ 1) {\n        while ($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpk9ior_9m.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        $factors[] = $factor;\n        $n = $n % $factor;\n        $factor\
    \ *= $factor;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpae6o8l8f.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp23q4jnsu.php:31\n\
    Stack trace:\n#0 /tmp/tmp23q4jnsu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp23q4jnsu.php\
    \ on line 31\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n >=\
    \ $factor) {\n        $factors[] = $factor;\n        $n = $n / $factor;\n    \
    \    $factor++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_aaurv2e.php:27\n\
    Stack trace:\n#0 /tmp/tmp_aaurv2e.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_aaurv2e.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor = 1;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7fdh9m41.php:33\n\
    Stack trace:\n#0 /tmp/tmp7fdh9m41.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp7fdh9m41.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 1;\n    while ($i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3egf9nns.php:29\n\
    Stack trace:\n#0 /tmp/tmp3egf9nns.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3egf9nns.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_9w5e_m3.php:30\n\
    Stack trace:\n#0 /tmp/tmp_9w5e_m3.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_9w5e_m3.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        $j = 1;\n        while($j * $i <= $n) {\n      \
    \      $j++;\n        }\n        if($j > $factor) {\n            $factors[$factor]\
    \ = $i;\n            $factor++;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptemk12x_.php:34\n\
    Stack trace:\n#0 /tmp/tmptemk12x_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmptemk12x_.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n   \
    \ }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpejk1vb3x.php:35\n\
    Stack trace:\n#0 /tmp/tmpejk1vb3x.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpejk1vb3x.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor++;\n        }\n\
    \        $i++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv2q3_22.php:32\n\
    Stack trace:\n#0 /tmp/tmpjv2q3_22.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjv2q3_22.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljm27brf.php:30\n\
    Stack trace:\n#0 /tmp/tmpljm27brf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpljm27brf.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor *= $i;\n        }\n    }\n    return $factors;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmke79fn.php:27\n\
    Stack trace:\n#0 /tmp/tmpmmke79fn.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmmke79fn.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if ($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbb1iz3wa.php:35\n\
    Stack trace:\n#0 /tmp/tmpbb1iz3wa.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbb1iz3wa.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        $factors[] = $factor;\n        $n = $n % $factor;\n        $factor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmp26ws4b8_.php on line 15\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor++;\n        }\n\
    \        $i++;\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9orw2eqs.php:35\n\
    Stack trace:\n#0 /tmp/tmp9orw2eqs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp9orw2eqs.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    if($n > 1) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2d9z1dx.php:34\n\
    Stack trace:\n#0 /tmp/tmp_2d9z1dx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_2d9z1dx.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpww5gkv2z.php:29\n\
    Stack trace:\n#0 /tmp/tmpww5gkv2z.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpww5gkv2z.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcn7zcum1.php:35\n\
    Stack trace:\n#0 /tmp/tmpcn7zcum1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcn7zcum1.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 1;\n    while($i <= $n) {\n\
    \        if($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n\
    \ / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpehuboswf.php:29\n\
    Stack trace:\n#0 /tmp/tmpehuboswf.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpehuboswf.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if ($n > 1) {\n       \
    \ $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr92tldgu.php:34\n\
    Stack trace:\n#0 /tmp/tmpr92tldgu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpr92tldgu.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n >=\
    \ $factor) {\n        $factors[] = $factor;\n        $n = ($n % $factor);\n  \
    \      $factor++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9lq6si2u.php:27\n\
    Stack trace:\n#0 /tmp/tmp9lq6si2u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9lq6si2u.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprh11hqg0.php:29\n\
    Stack trace:\n#0 /tmp/tmprh11hqg0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmprh11hqg0.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= $n) {\n\
    \        if($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3n_y8naa.php:30\n\
    Stack trace:\n#0 /tmp/tmp3n_y8naa.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp3n_y8naa.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        while($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $i;\n            $factor++;\n        }\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpj6ppbhqq.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyu455qo.php:29\n\
    Stack trace:\n#0 /tmp/tmpxyu455qo.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpxyu455qo.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = [];\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n            $i++;\n        }\n    }\n    if ($n > 1) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgm5_1jb8.php:34\n\
    Stack trace:\n#0 /tmp/tmpgm5_1jb8.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpgm5_1jb8.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[$i] = $factor;\n        $factor *= $i;\n\
    \    }\n    for($i = 1; $i <= $n; $i++) {\n        $factors[$i] /= $n;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnveu5c6.php:29\n\
    Stack trace:\n#0 /tmp/tmpbnveu5c6.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpbnveu5c6.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        $factors[] = $factor;\n        $n = $n / $factor;\n        $factor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp572lk_zf.php:27\n\
    Stack trace:\n#0 /tmp/tmp572lk_zf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp572lk_zf.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n        } else {\n            $factor++;\n        }\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaefbwbsz.php:30\n\
    Stack trace:\n#0 /tmp/tmpaefbwbsz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpaefbwbsz.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n !=\
    \ 1) {\n        while ($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpy7qlnw1a.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if ($n != 1) {\n      \
    \  $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk44rfykh.php:34\n\
    Stack trace:\n#0 /tmp/tmpk44rfykh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk44rfykh.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv55j4v5n.php:35\n\
    Stack trace:\n#0 /tmp/tmpv55j4v5n.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv55j4v5n.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpru06_r_q.php:29\n\
    Stack trace:\n#0 /tmp/tmpru06_r_q.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpru06_r_q.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        $n = $n % $factor;\n        $factors[] = $factor;\n        $factor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpskuak1qu.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[] = $factor;\n        $factor *= $i;\n \
    \   }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3nrs7lkj.php:26\n\
    Stack trace:\n#0 /tmp/tmp3nrs7lkj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3nrs7lkj.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaf2hrn2j.php:29\n\
    Stack trace:\n#0 /tmp/tmpaf2hrn2j.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpaf2hrn2j.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ramk0sy.php:29\n\
    Stack trace:\n#0 /tmp/tmp7ramk0sy.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp7ramk0sy.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uskibuk.php:29\n\
    Stack trace:\n#0 /tmp/tmp_uskibuk.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp_uskibuk.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    if ($n > 1) {\n       \
    \ $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyo0hdtjh.php:34\n\
    Stack trace:\n#0 /tmp/tmpyo0hdtjh.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyo0hdtjh.php\
    \ on line 34\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= sqrt($n); $i++) {\n        if($n % $i == 0) {\n            $factors[]\
    \ = $factor;\n            $factor *= $i;\n            $n /= $i;\n        }\n \
    \   }\n    $factors[] = $factor;\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp35184f7x.php:30\n\
    Stack trace:\n#0 /tmp/tmp35184f7x.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp35184f7x.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        while($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpocdtydxb.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n !=\
    \ 1) {\n        while ($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpy74e9_ao.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n >=\
    \ $factor) {\n        $factors[] = $factor;\n        $n  /= $factor;\n       \
    \ $factor++;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvtsqfbf5.php:27\n\
    Stack trace:\n#0 /tmp/tmpvtsqfbf5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvtsqfbf5.php\
    \ on line 27\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp12iv9w8p.php:29\n\
    Stack trace:\n#0 /tmp/tmp12iv9w8p.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp12iv9w8p.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpur5i8gyd.php:32\n\
    Stack trace:\n#0 /tmp/tmpur5i8gyd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpur5i8gyd.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if ($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdg2h2ny0.php:35\n\
    Stack trace:\n#0 /tmp/tmpdg2h2ny0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdg2h2ny0.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while ($n !=\
    \ 1) {\n        if ($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n = $n / $factor;\n        } else {\n            $factor++;\n  \
    \      }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpvn7xzf91.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 2;\
    \ $i <= $n; $i++) {\n        while($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $i;\n            $factor = 1;\n        }\n        $factor++;\n\
    \    }\n    if ($n != 1) {\n        $factors[] = $factor;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8c3zs87v.php:33\n\
    Stack trace:\n#0 /tmp/tmp8c3zs87v.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp8c3zs87v.php\
    \ on line 33\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_7xlu_6f.php:32\n\
    Stack trace:\n#0 /tmp/tmp_7xlu_6f.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp_7xlu_6f.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    for($i = 1; $i <= $n; $i++) {\n\
    \        $factors[] = $i;\n        for($j = 2; $j <= $i; $j++) {\n           \
    \ if($i % $j == 0) {\n                $factors[] = $j;\n                break;\n\
    \            }\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4u2mwiz.php:30\n\
    Stack trace:\n#0 /tmp/tmpg4u2mwiz.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpg4u2mwiz.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    while($n !=\
    \ 1) {\n        while($n % $factor == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $factor;\n        }\n        $factor++;\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpopf8fr8o.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        $factors[$i] = $factor;\n        $factor *= $i;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5wwnzfxu.php:26\n\
    Stack trace:\n#0 /tmp/tmp5wwnzfxu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp5wwnzfxu.php\
    \ on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9kqn0c5k.php:32\n\
    Stack trace:\n#0 /tmp/tmp9kqn0c5k.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9kqn0c5k.php\
    \ on line 32\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor++;\n\
    \        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n   \
    \ }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcn54x89i.php:35\n\
    Stack trace:\n#0 /tmp/tmpcn54x89i.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpcn54x89i.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n        else {\n            $i++;\n\
    \        }\n    }\n    return $factors;\n}\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nParse error: syntax error in /tmp/tmpig7gnbsm.php on line 26\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while ($i <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if ($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv_s0356e.php:35\n\
    Stack trace:\n#0 /tmp/tmpv_s0356e.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpv_s0356e.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    $i = 1;\n  \
    \  while($i <= $n) {\n        if($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $factor = 1;\n            $i++;\n        } else {\n            $factor\
    \ *= $i;\n        }\n    }\n    if($factor != 1) {\n        $factors[] = $factor;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vvdwd7j.php:35\n\
    Stack trace:\n#0 /tmp/tmp7vvdwd7j.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7vvdwd7j.php\
    \ on line 35\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while ($i <= sqrt($n))\
    \ {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n            $i++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph_yadmw1.php:29\n\
    Stack trace:\n#0 /tmp/tmph_yadmw1.php(39): test()\n#1 {main}\n  thrown in /tmp/tmph_yadmw1.php\
    \ on line 29\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $i = 2;\n    while($i <= sqrt($n))\
    \ {\n        if($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7jzij10w.php:30\n\
    Stack trace:\n#0 /tmp/tmp7jzij10w.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7jzij10w.php\
    \ on line 30\n"
  stderr: ''
  exit_code: 255
  status: Exception
- program: "<?php\n// Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n// Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n// Input number\
    \ should be equal to the product of all factors\n// >>> factorize(8)\n// [2, 2,\
    \ 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction\
    \ factorize($n) {\n    $factors = array();\n    $factor = 1;\n    for($i = 1;\
    \ $i <= $n; $i++) {\n        while($n % $i == 0) {\n            $factors[] = $factor;\n\
    \            $n /= $i;\n            $factor++;\n        }\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  stdout: "\nFatal error: Allowed memory size of 134217728 bytes exhausted (tried\
    \ to allocate 134217736 bytes) in /tmp/tmpz2b79u12.php on line 16\n"
  stderr: ''
  exit_code: 255
  status: Exception
