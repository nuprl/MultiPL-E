name: HumanEval_23_strlen
language: pl
prompt: "# Return length of given string\n# >>> strlen(\"\")\n# 0\n# >>> strlen(\"\
  abc\")\n# 3\nsub strlen {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1)) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  asdasnakj\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    return length($string);\n}", "    return length($string);\n}",
  "    my($length) = 0;\n    $length++ while(substr($string, $length, 1));\n    return\
    \ $length;\n}", "    return length($string);\n}", "    return length($string);\n\
    }", "    return length($string);\n}", "    return length($string);\n}", "    return\
    \ length($string);\n}", "    return length($string);\n}", "    return length($string);\n\
    }", "    return length($string);\n}", "    return length($string);\n}", "    return\
    \ length($string);\n}", "    my($length) = 0;\n    while ($string =~ /^(.*)$/)\
    \ {\n\t$string = $1;\n\t$length++;\n    }\n    return $length;\n}", "    return\
    \ length($string);\n}", "    return length($string);\n}", "    return length($string);\n\
    }", "    return length($string);\n}", "    return length($string);\n}", "    return\
    \ length($string);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
