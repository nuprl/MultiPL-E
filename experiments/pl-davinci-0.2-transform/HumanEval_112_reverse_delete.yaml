name: HumanEval_112_reverse_delete
language: pl
prompt: "# Task\n# We are given two strings s and c, you have to deleted all the characters\
  \ in s that are equal to any character in c\n# then check if the result string is\
  \ palindrome.\n# A string is called palindrome if it reads the same backward as\
  \ forward.\n# You should return a tuple containing the result string and True/False\
  \ for the check.\n# Example\n# >>> reverse_delete(\"abcde\", \"ae\")\n# [\"bcd\"\
  , \"\"]\n# >>> reverse_delete(\"abcdef\", \"b\")\n# [\"acdef\", \"\"]\n# >>> reverse_delete(\"\
  abcdedcba\", \"ab\")\n# [\"cdedc\", 1]\nsub reverse_delete {\n    my($s, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&reverse_delete;\n\
  \        if(eq_deeply($candidate->(\"abcde\", \"ae\"),[\"bcd\", \"\"])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdef\", \"b\"),[\"acdef\", \"\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dwik\", \"w\"),[\"dik\", \"\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"a\", \"a\"),[\"\", 1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdedcba\", \"\"),[\"abcdedcba\", 1])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdedcba\", \"v\"),[\"\
  abcdedcba\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"vabba\", \"v\"),[\"abba\", 1])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  mamma\", \"mia\"),[\"\", 1])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map\
    \ { $_ => 1 } @c;\n    my @result = grep { !$c{$_} } @s;\n    my $result = join\
    \ '', @result;\n    my $palindrome = $result eq reverse $result;\n    return [$result,\
    \ $palindrome];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}",
  "    my $r = reverse $s;\n    my $p = $s eq $r ? 1 : 0;\n    $s =~ s/[$c]//g;\n\
    \    $r = reverse $s;\n    $p = $s eq $r ? 1 : 0;\n    return [$s, $p];\n}", " \
    \   my $result = \"\";\n    my $is_palindrome = 1;\n    my %c_hash = map { $_\
    \ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        if (!$c_hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    my $i = 0;\n    my $j\
    \ = length($result) - 1;\n    while ($i < $j) {\n        if (substr($result, $i,\
    \ 1) ne substr($result, $j, 1)) {\n            $is_palindrome = 0;\n         \
    \   last;\n        }\n        $i++;\n        $j--;\n    }\n    return [$result,\
    \ $is_palindrome];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n\
    \    my @result;\n    my $flag = 0;\n    for my $i (0..$#s) {\n        for my\
    \ $j (0..$#c) {\n            if ($s[$i] eq $c[$j]) {\n                $flag =\
    \ 1;\n                last;\n            }\n        }\n        if ($flag == 0)\
    \ {\n            push @result, $s[$i];\n        }\n        $flag = 0;\n    }\n\
    \    my $result = join \"\", @result;\n    my $palindrome = 0;\n    if ($result\
    \ eq reverse $result) {\n        $palindrome = 1;\n    }\n    return [$result,\
    \ $palindrome];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n \
    \   my @result;\n    foreach my $i (@s) {\n        my $flag = 0;\n        foreach\
    \ my $j (@c) {\n            if ($i eq $j) {\n                $flag = 1;\n    \
    \        }\n        }\n        if ($flag == 0) {\n            push @result, $i;\n\
    \        }\n    }\n    my $result = join \"\", @result;\n    my $palindrome =\
    \ 0;\n    if ($result eq reverse $result) {\n        $palindrome = 1;\n    }\n\
    \    return [$result, $palindrome];\n}", "    my @s = split //, $s;\n    my @c\
    \ = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i\
    \ (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r =\
    \ join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "   \
    \ my $result = '';\n    my $is_palindrome = 1;\n    my %c_hash = map {$_ => 1}\
    \ split //, $c;\n    for my $char (split //, $s) {\n        if (!exists $c_hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    my $result_length =\
    \ length $result;\n    for (my $i = 0; $i < $result_length / 2; $i++) {\n    \
    \    if (substr($result, $i, 1) ne substr($result, $result_length - $i - 1, 1))\
    \ {\n            $is_palindrome = 0;\n            last;\n        }\n    }\n  \
    \  return [$result, $is_palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    $result =~\
    \ s/[$c]//g;\n    my $is_palindrome = $result eq reverse $result;\n    return\
    \ [$result, $is_palindrome];\n}", "    my $result = '';\n    my $is_palindrome\
    \ = 1;\n    my %c_hash = map {$_ => 1} split //, $c;\n    for my $char (split\
    \ //, $s) {\n        if (!exists $c_hash{$char}) {\n            $result .= $char;\n\
    \        }\n    }\n    my $len = length $result;\n    for (my $i = 0; $i < $len\
    \ / 2; $i++) {\n        if (substr($result, $i, 1) ne substr($result, $len - $i\
    \ - 1, 1)) {\n            $is_palindrome = 0;\n            last;\n        }\n\
    \    }\n    return [$result, $is_palindrome];\n}", "    my $result = $s;\n   \
    \ $result =~ s/[$c]//g;\n    return [$result, $result eq reverse $result];\n}",
  "    my @s = split //, $s;\n    my @c = split //, $c;\n    my @result;\n    for\
    \ my $i (0..$#s) {\n        my $flag = 0;\n        for my $j (0..$#c) {\n    \
    \        if ($s[$i] eq $c[$j]) {\n                $flag = 1;\n               \
    \ last;\n            }\n        }\n        if ($flag == 0) {\n            push\
    \ @result, $s[$i];\n        }\n    }\n    my $result = join '', @result;\n   \
    \ my $palindrome = 0;\n    if ($result eq reverse $result) {\n        $palindrome\
    \ = 1;\n    }\n    return [$result, $palindrome];\n}", "    my $r = '';\n    my\
    \ $p = 0;\n    for my $i (0..length($s)-1) {\n        if (index($c, substr($s,\
    \ $i, 1)) == -1) {\n            $r .= substr($s, $i, 1);\n        }\n    }\n \
    \   for my $i (0..length($r)-1) {\n        if (substr($r, $i, 1) eq substr($r,\
    \ length($r)-1-$i, 1)) {\n            $p++;\n        }\n    }\n    return [$r,\
    \ $p == length($r)];\n}", "    my $res = $s;\n    $res =~ s/[$c]//g;\n    my $is_palindrome\
    \ = $res eq reverse $res;\n    return [$res, $is_palindrome];\n}", "    my @s\
    \ = split //, $s;\n    my @c = split //, $c;\n    my @result;\n    for my $i (0..$#s)\
    \ {\n        my $flag = 0;\n        for my $j (0..$#c) {\n            if ($s[$i]\
    \ eq $c[$j]) {\n                $flag = 1;\n                last;\n          \
    \  }\n        }\n        if ($flag == 0) {\n            push @result, $s[$i];\n\
    \        }\n    }\n    my $result = join \"\", @result;\n    my $palindrome =\
    \ 0;\n    if ($result eq reverse $result) {\n        $palindrome = 1;\n    }\n\
    \    return [$result, $palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    $result =~\
    \ s/[$c]//g;\n    return [$result, $result eq reverse $result];\n}", "    my $r\
    \ = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "    my $result = '';\n    my $check = 0;\n    my %hash = map { $_\
    \ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        $result .=\
    \ $char unless $hash{$char};\n    }\n    $check = 1 if $result eq reverse $result;\n\
    \    return [$result, $check];\n}", "    my $result = \"\";\n    my $is_palindrome\
    \ = 1;\n    my %delete_chars = map { $_ => 1 } split //, $c;\n    for my $char\
    \ (split //, $s) {\n        if (!$delete_chars{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    my $len = length $result;\n    for (my $i =\
    \ 0; $i < $len / 2; $i++) {\n        if (substr($result, $i, 1) ne substr($result,\
    \ $len - $i - 1, 1)) {\n            $is_palindrome = 0;\n            last;\n \
    \       }\n    }\n    return [$result, $is_palindrome];\n}", "    my @s = split\
    \ //, $s;\n    my @c = split //, $c;\n    my %h;\n    for my $i (@c) {\n     \
    \   $h{$i} = 1;\n    }\n    my @r;\n    for my $i (@s) {\n        if (!$h{$i})\
    \ {\n            push @r, $i;\n        }\n    }\n    my $r = join '', @r;\n  \
    \  my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $result = '';\n\
    \    my $is_palindrome = 1;\n    my %c_hash = map { $_ => 1 } split //, $c;\n\
    \    for my $char (split //, $s) {\n        if (!exists $c_hash{$char}) {\n  \
    \          $result .= $char;\n        }\n    }\n    my $result_length = length\
    \ $result;\n    for (my $i = 0; $i < $result_length / 2; $i++) {\n        if (substr($result,\
    \ $i, 1) ne substr($result, $result_length - $i - 1, 1)) {\n            $is_palindrome\
    \ = 0;\n            last;\n        }\n    }\n    return [$result, $is_palindrome];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n  \
    \  return [$r, $p];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my @s = split //, $s;\n\
    \    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for\
    \ my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my\
    \ $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}",
  "    my $s2 = $s;\n    $s2 =~ s/[$c]//g;\n    my $s3 = reverse $s2;\n    return\
    \ [$s2, $s2 eq $s3];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}", "    my $result = '';\n\
    \    my $is_palindrome = 1;\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $char (split //, $s) {\n        if (!exists $c{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    my $len = length $result;\n    for my $i (0..$len/2-1)\
    \ {\n        if (substr($result, $i, 1) ne substr($result, $len-$i-1, 1)) {\n\
    \            $is_palindrome = 0;\n            last;\n        }\n    }\n    return\
    \ [$result, $is_palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n   \
    \ my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = $s;\n    $r\
    \ =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}", "    my @s = split //,\
    \ $s;\n    my @c = split //, $c;\n    my @result;\n    for my $i (0..$#s) {\n\
    \        my $flag = 0;\n        for my $j (0..$#c) {\n            if ($s[$i] eq\
    \ $c[$j]) {\n                $flag = 1;\n                last;\n            }\n\
    \        }\n        if ($flag == 0) {\n            push @result, $s[$i];\n   \
    \     }\n    }\n    my $result = join '', @result;\n    my $palindrome = 0;\n\
    \    if ($result eq reverse $result) {\n        $palindrome = 1;\n    }\n    return\
    \ [$result, $palindrome];\n}", "    my $result = '';\n    my $check = 1;\n   \
    \ my %hash = map {$_ => 1} split //, $c;\n    for my $char (split //, $s) {\n\
    \        if (!exists $hash{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    my $reverse = reverse $result;\n    if ($result ne $reverse) {\n \
    \       $check = 0;\n    }\n    return [$result, $check];\n}", "    my $r = reverse\
    \ $s;\n    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $r1 = reverse $t;\n    return\
    \ [$t, $r1 eq $t];\n}", "    my $result = '';\n    my $is_palindrome = 1;\n  \
    \  my %hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n\
    \        if (!exists $hash{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    for my $i (0 .. int(length($result) / 2)) {\n        if (substr($result,\
    \ $i, 1) ne substr($result, -$i - 1, 1)) {\n            $is_palindrome = 0;\n\
    \            last;\n        }\n    }\n    return [$result, $is_palindrome];\n}",
  "    my $result = $s;\n    for my $char (split //, $c) {\n        $result =~ s/$char//g;\n\
    \    }\n    my $is_palindrome = $result eq reverse $result;\n    return [$result,\
    \ $is_palindrome];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my @s = split //, $s;\n\
    \    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for\
    \ my $i (@s) {\n        push @r, $i unless $c{$i};\n    }\n    my $r = join '',\
    \ @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "    my $res = $s;\n    $res =~ s/[$c]//g;\n    my $is_palindrome\
    \ = $res eq reverse $res;\n    return [$res, $is_palindrome];\n}", "    my $r\
    \ = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq\
    \ reverse $r];\n}", "    my $r = join(\"\", grep { index($c, $_) == -1 } split(\"\
    \", $s));\n    my $p = $r eq reverse($r);\n    return [$r, $p];\n}", "    my $r\
    \ = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}", "    my\
    \ $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}", "  \
    \  my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq\
    \ reverse $r];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n  \
    \  my %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n     \
    \   push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my\
    \ $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = join('', grep\
    \ { index($c, $_) < 0 } split(//, $s));\n    my $p = $r eq reverse($r);\n    return\
    \ [$r, $p];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join\
    \ '', grep { !$c{$_} } split //, $s;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq\
    \ reverse $r];\n}", "    my $r = $s;\n    for my $i (0..length($c)-1) {\n    \
    \    my $char = substr($c, $i, 1);\n        $r =~ s/$char//g;\n    }\n    my $is_palindrome\
    \ = $r eq reverse($r);\n    return [$r, $is_palindrome];\n}", "    my $r = $s;\n\
    \    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}",
  "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my @s\
    \ = split //, $s;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i]\
    \ unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my $p = 1;\n    for\
    \ my $i (0 .. $#r / 2) {\n        $p = 0 unless $r[$i] eq $r[$#r - $i];\n    }\n\
    \    return [$r, $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my %c = map { $_ => 1 } split //, $c;\n  \
    \  my $r = join '', grep { !$c{$_} } split //, $s;\n    my $p = $r eq reverse\
    \ $r;\n    return [$r, $p];\n}", "    my $r = join '', grep { index($c, $_) ==\
    \ -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my @s = split\
    \ //, $s;\n    my @c = split //, $c;\n    my @r;\n    for my $i (0..$#s) {\n \
    \       my $flag = 0;\n        for my $j (0..$#c) {\n            if ($s[$i] eq\
    \ $c[$j]) {\n                $flag = 1;\n                last;\n            }\n\
    \        }\n        if ($flag == 0) {\n            push @r, $s[$i];\n        }\n\
    \    }\n    my $r = join '', @r;\n    my $flag = 0;\n    for my $i (0..$#r/2)\
    \ {\n        if ($r[$i] ne $r[$#r-$i]) {\n            $flag = 1;\n           \
    \ last;\n        }\n    }\n    return [$r, $flag];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $result = '';\n    my $is_palindrome = 1;\n    my %c_hash = map {$_\
    \ => 1} split //, $c;\n    for my $char (split //, $s) {\n        if (!$c_hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    my $len = length $result;\n\
    \    for (my $i = 0; $i < $len / 2; $i++) {\n        if (substr($result, $i, 1)\
    \ ne substr($result, $len - $i - 1, 1)) {\n            $is_palindrome = 0;\n \
    \           last;\n        }\n    }\n    return [$result, $is_palindrome];\n}",
  "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //,\
    \ $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = '';\n    my $check\
    \ = 1;\n    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split\
    \ //, $s) {\n        if (!$c_hash{$char}) {\n            $result .= $char;\n \
    \       }\n    }\n    my $reverse = reverse $result;\n    if ($result ne $reverse)\
    \ {\n        $check = 0;\n    }\n    return [$result, $check];\n}", "    my %c\
    \ = map { $_ => 1 } split //, $c;\n    my $r = join \"\", grep { !$c{$_} } split\
    \ //, $s;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my @s\
    \ = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n\
    \    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n\
    \    }\n    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r\
    \ = $s;\n    for my $i (0..length($c)-1) {\n        $r =~ s/$c[$i]//g;\n    }\n\
    \    my $p = $r;\n    $p =~ s/(.)(.)/$2$1/g;\n    my $t = ($p eq $r) ? 1 : 0;\n\
    \    return [$r, $t];\n}", "    my $r = join '', grep { index($c, $_) == -1 }\
    \ split //, $s;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "  \
    \  my $r = '';\n    my $p = 1;\n    my %h;\n    map { $h{$_} = 1 } split //, $c;\n\
    \    for my $i (0 .. length($s) - 1) {\n        my $char = substr($s, $i, 1);\n\
    \        if (!$h{$char}) {\n            $r = $char . $r;\n        }\n    }\n \
    \   for my $i (0 .. length($r) - 1) {\n        my $char = substr($r, $i, 1);\n\
    \        my $char2 = substr($r, -$i - 1, 1);\n        if ($char ne $char2) {\n\
    \            $p = 0;\n            last;\n        }\n    }\n    return [$r, $p];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $r = reverse $t;\n    return\
    \ [$t, $t eq $r];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n\
    \    my @r;\n    for my $i (0..$#s) {\n        my $f = 0;\n        for my $j (0..$#c)\
    \ {\n            if ($s[$i] eq $c[$j]) {\n                $f = 1;\n          \
    \      last;\n            }\n        }\n        push @r, $s[$i] unless $f;\n \
    \   }\n    my $r = join '', @r;\n    my $p = 1;\n    for my $i (0..$#r/2) {\n\
    \        if ($r[$i] ne $r[$#r-$i]) {\n            $p = 0;\n            last;\n\
    \        }\n    }\n    return [$r, $p];\n}", "    my @s = split //, $s;\n    my\
    \ @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for my\
    \ $i (0 .. $#s) {\n        if (!$c{$s[$i]}) {\n            push @r, $s[$i];\n\
    \        }\n    }\n    my $r = join '', @r;\n    my $p = 1;\n    for my $i (0\
    \ .. $#r / 2) {\n        if ($r[$i] ne $r[$#r - $i]) {\n            $p = 0;\n\
    \            last;\n        }\n    }\n    return [$r, $p];\n}", "    my $r = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my $r = '';\n    for my $i (0 .. length($s) - 1) {\n        my\
    \ $ch = substr($s, $i, 1);\n        $r .= $ch unless index($c, $ch) >= 0;\n  \
    \  }\n    return [$r, $r eq reverse($r)];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $result = '';\n\
    \    my $is_palindrome = 1;\n    my %c_hash = map { $_ => 1 } split //, $c;\n\
    \    for my $char (split //, $s) {\n        if (!exists $c_hash{$char}) {\n  \
    \          $result .= $char;\n        }\n    }\n    my $reverse_result = reverse\
    \ $result;\n    if ($result ne $reverse_result) {\n        $is_palindrome = 0;\n\
    \    }\n    return [$result, $is_palindrome];\n}", "    my $r = reverse $s;\n\
    \    my $t = $s;\n    $t =~ s/[$c]//g;\n    my $p = $t eq $r ? 1 : 0;\n    return\
    \ [$t, $p];\n}", "    my $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n    my $s_copy_rev\
    \ = reverse $s_copy;\n    return [$s_copy, $s_copy eq $s_copy_rev];\n}", "   \
    \ my $result = '';\n    my $is_palindrome = 0;\n    my %c_hash = map { $_ => 1\
    \ } split //, $c;\n    for my $char (split //, $s) {\n        $result .= $char\
    \ unless $c_hash{$char};\n    }\n    $is_palindrome = 1 if $result eq reverse\
    \ $result;\n    return [$result, $is_palindrome];\n}", "    my $r = $s;\n    $r\
    \ =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "  \
    \  my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $result = '';\n    my $is_palindrome = 1;\n\
    \    my %chars = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!$chars{$char}) {\n            $result .= $char;\n        }\n\
    \    }\n    my $len = length $result;\n    for my $i (0..$len/2-1) {\n       \
    \ if (substr($result, $i, 1) ne substr($result, $len-$i-1, 1)) {\n           \
    \ $is_palindrome = 0;\n            last;\n        }\n    }\n    return [$result,\
    \ $is_palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $result = '';\n    my $is_palindrome = 1;\n\
    \    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!exists $c_hash{$char}) {\n            $result .= $char;\n  \
    \      }\n    }\n    my $reverse_result = reverse $result;\n    if ($result ne\
    \ $reverse_result) {\n        $is_palindrome = 0;\n    }\n    return [$result,\
    \ $is_palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $result = '';\n    my $is_palindrome = 1;\n\
    \    my %c_hash = map {$_ => 1} split //, $c;\n    for my $char (split //, $s)\
    \ {\n        if (!exists $c_hash{$char}) {\n            $result .= $char;\n  \
    \      }\n    }\n    my $result_reverse = reverse $result;\n    if ($result ne\
    \ $result_reverse) {\n        $is_palindrome = 0;\n    }\n    return [$result,\
    \ $is_palindrome];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n   \
    \ my $is_palindrome = $result eq reverse $result;\n    return [$result, $is_palindrome];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n  \
    \  return [$r, $p];\n}", "    my $result = '';\n    my $check = 0;\n    my %hash\
    \ = map { $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n       \
    \ $result .= $char unless $hash{$char};\n    }\n    $check = 1 if $result eq reverse\
    \ $result;\n    return [$result, $check];\n}", "    my $result = $s;\n    $result\
    \ =~ s/[$c]//g;\n    my $is_palindrome = $result eq reverse $result;\n    return\
    \ [$result, $is_palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n   \
    \ return [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n\
    \    my $palindrome = $result eq reverse $result;\n    return [$result, $palindrome];\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n  \
    \  return [$r, $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    $s =~ s/[$c]//g;\n    return [$s, $s eq reverse\
    \ $s];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r\
    \ = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq\
    \ reverse $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //,\
    \ $s;\n    return [$r, $r eq reverse $r];\n}", "    my @s = split //, $s;\n  \
    \  my @c = split //, $c;\n    my @result;\n    for my $i (0..$#s) {\n        my\
    \ $found = 0;\n        for my $j (0..$#c) {\n            if ($s[$i] eq $c[$j])\
    \ {\n                $found = 1;\n                last;\n            }\n     \
    \   }\n        if (!$found) {\n            push @result, $s[$i];\n        }\n\
    \    }\n    my $result = join '', @result;\n    my $palindrome = 0;\n    if ($result\
    \ eq reverse $result) {\n        $palindrome = 1;\n    }\n    return [$result,\
    \ $palindrome];\n}", "    my %hash = map { $_ => 1 } split //, $c;\n    my $res\
    \ = join '', grep { !$hash{$_} } split //, $s;\n    return [$res, $res eq reverse\
    \ $res];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $is_palindrome\
    \ = $result eq reverse $result;\n    return ($result, $is_palindrome);\n}", " \
    \   my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}",
  "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1\
    \ } @c;\n    my @r;\n    while (@s) {\n        my $x = pop @s;\n        push @r,\
    \ $x unless $c{$x};\n    }\n    my $r = join '', @r;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep\
    \ { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result\
    \ = '';\n    my $palindrome = 1;\n    my %c = map {$_ => 1} split //, $c;\n  \
    \  for my $char (split //, $s) {\n        if (!$c{$char}) {\n            $result\
    \ .= $char;\n        }\n    }\n    my $len = length $result;\n    for my $i (0..$len/2-1)\
    \ {\n        if (substr($result, $i, 1) ne substr($result, $len-$i-1, 1)) {\n\
    \            $palindrome = 0;\n            last;\n        }\n    }\n    return\
    \ [$result, $palindrome];\n}", "    my $result = \"\";\n    my $is_palindrome\
    \ = 1;\n    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split\
    \ //, $s) {\n        if (!exists $c_hash{$char}) {\n            $result .= $char;\n\
    \        }\n    }\n    my $result_len = length $result;\n    for (my $i = 0; $i\
    \ < $result_len / 2; $i++) {\n        if (substr($result, $i, 1) ne substr($result,\
    \ $result_len - $i - 1, 1)) {\n            $is_palindrome = 0;\n            last;\n\
    \        }\n    }\n    return [$result, $is_palindrome];\n}", "    my $r = join\
    \ '', grep { index($c, $_) == -1 } split //, $s;\n    my $p = $r eq reverse $r;\n\
    \    return [$r, $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my\
    \ $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = join '', grep\
    \ { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "    $s =~ s/[$c]//g;\n    return [$s, $s eq reverse $s];\n}", "    my $result =\
    \ '';\n    my $check = 1;\n    my %c = map { $_ => 1 } split //, $c;\n    for\
    \ my $ch (split //, $s) {\n        if (!$c{$ch}) {\n            $result .= $ch;\n\
    \        }\n    }\n    my $len = length $result;\n    for my $i (0 .. $len / 2\
    \ - 1) {\n        if (substr($result, $i, 1) ne substr($result, $len - $i - 1,\
    \ 1)) {\n            $check = 0;\n            last;\n        }\n    }\n    return\
    \ [$result, $check];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p =\
    \ $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result\
    \ = '';\n    my $is_palindrome = 1;\n    my %c = map { $_ => 1 } split //, $c;\n\
    \    for my $ch (split //, $s) {\n        if (!exists $c{$ch}) {\n           \
    \ $result .= $ch;\n        }\n    }\n    for my $i (0 .. length($result) / 2 -\
    \ 1) {\n        if (substr($result, $i, 1) ne substr($result, -$i - 1, 1)) {\n\
    \            $is_palindrome = 0;\n            last;\n        }\n    }\n    return\
    \ [$result, $is_palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n   \
    \ return [$r, $r eq reverse $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = '';\n    my $is_palindrome\
    \ = 1;\n    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $char (split\
    \ //, $s) {\n        if (!exists $c_hash{$char}) {\n            $result .= $char;\n\
    \        }\n    }\n    my $len = length $result;\n    for (my $i = 0; $i < $len\
    \ / 2; $i++) {\n        if (substr($result, $i, 1) ne substr($result, $len - $i\
    \ - 1, 1)) {\n            $is_palindrome = 0;\n            last;\n        }\n\
    \    }\n    return [$result, $is_palindrome];\n}", "    my %c = map { $_ => 1\
    \ } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my\
    \ $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return ($r, $r eq reverse $r);\n}", "    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n   \
    \ my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $res = '';\n  \
    \  my $pal = 1;\n    my %c = map {$_ => 1} split //, $c;\n    for my $i (0..length($s)-1)\
    \ {\n        my $ch = substr($s, $i, 1);\n        if (!$c{$ch}) {\n          \
    \  $res .= $ch;\n        }\n    }\n    for my $i (0..length($res)-1) {\n     \
    \   my $ch1 = substr($res, $i, 1);\n        my $ch2 = substr($res, length($res)-$i-1,\
    \ 1);\n        if ($ch1 ne $ch2) {\n            $pal = 0;\n            last;\n\
    \        }\n    }\n    return [$res, $pal];\n}", "    my $result = $s;\n    $result\
    \ =~ s/[$c]//g;\n    my $is_palindrome = $result eq reverse $result;\n    return\
    \ [$result, $is_palindrome];\n}", "    my @s = split //, $s;\n    my @c = split\
    \ //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i (@s) {\n\
    \        push @r, $i unless $c{$i};\n    }\n    my $r = join '', @r;\n    my $p\
    \ = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $result = '';\n    my\
    \ $check = 1;\n    my %hash = map {$_ => 1} split //, $c;\n    for my $char (split\
    \ //, $s) {\n        $result .= $char unless $hash{$char};\n    }\n    for my\
    \ $i (0 .. length($result) / 2 - 1) {\n        if (substr($result, $i, 1) ne substr($result,\
    \ -$i - 1, 1)) {\n            $check = 0;\n            last;\n        }\n    }\n\
    \    return [$result, $check];\n}", "    my %c = map { $_ => 1 } split //, $c;\n\
    \    my $r = join '', grep { !$c{$_} } split //, $s;\n    return [$r, $r eq reverse\
    \ $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = '';\n    my $check\
    \ = 0;\n    my %hash = map { $_ => 1 } split //, $c;\n    for my $char (split\
    \ //, $s) {\n        if (!$hash{$char}) {\n            $result .= $char;\n   \
    \     }\n    }\n    $check = 1 if $result eq reverse $result;\n    return [$result,\
    \ $check];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n    my\
    \ @r;\n    for my $i (@s) {\n        push @r, $i unless grep { $i eq $_ } @c;\n\
    \    }\n    my $r = join '', @r;\n    return [$r, $r eq reverse $r];\n}", "  \
    \  my $result = '';\n    my $is_palindrome = 1;\n    my %hash = map { $_ => 1\
    \ } split //, $c;\n    for my $ch (split //, $s) {\n        if (!$hash{$ch}) {\n\
    \            $result .= $ch;\n        }\n    }\n    my $len = length $result;\n\
    \    for (my $i = 0; $i < $len / 2; $i++) {\n        if (substr($result, $i, 1)\
    \ ne substr($result, $len - $i - 1, 1)) {\n            $is_palindrome = 0;\n \
    \           last;\n        }\n    }\n    return [$result, $is_palindrome];\n}",
  "    my $result = $s;\n    $result =~ s/[$c]//g;\n    return [$result, $result eq\
    \ reverse $result];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = $s;\n    $r =~\
    \ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}", "    my %c = map { $_ =>\
    \ 1 } split //, $c;\n    my $r = join '', grep { !$c{$_} } split //, $s;\n   \
    \ my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my @s = split //,\
    \ $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n\
    \    for my $i (@s) {\n        push @r, $i unless $c{$i};\n    }\n    my $r =\
    \ join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "   \
    \ my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $r = '';\n    my $p = '';\n    my %c = map {\
    \ $_ => 1 } split //, $c;\n    for my $i (0 .. length($s) - 1) {\n        my $ch\
    \ = substr($s, $i, 1);\n        if (!$c{$ch}) {\n            $r .= $ch;\n    \
    \        $p = $ch . $p;\n        }\n    }\n    return [$r, $r eq $p];\n}", " \
    \   my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //,\
    \ $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my $result = $s;\n    my $is_palindrome\
    \ = 0;\n    for my $char (split //, $c) {\n        $result =~ s/$char//g;\n  \
    \  }\n    if ($result eq reverse $result) {\n        $is_palindrome = 1;\n   \
    \ }\n    return [$result, $is_palindrome];\n}", "    my $r = join '', grep { index($c,\
    \ $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r\
    \ = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return [$r,\
    \ $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse\
    \ $r;\n    return [$r, $p];\n}", "    my $result = '';\n    my $is_palindrome\
    \ = 1;\n    my %c_hash = map { $_ => 1 } split //, $c;\n    for my $ch (split\
    \ //, $s) {\n        if (!$c_hash{$ch}) {\n            $result .= $ch;\n     \
    \   }\n    }\n    my $len = length $result;\n    for my $i (0..$len/2-1) {\n \
    \       if (substr($result, $i, 1) ne substr($result, $len-$i-1, 1)) {\n     \
    \       $is_palindrome = 0;\n            last;\n        }\n    }\n    return [$result,\
    \ $is_palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my %c = map { $_ => 1 } split //, $c;\n    my $r\
    \ = join '', grep { !$c{$_} } split //, $s;\n    my $p = $r eq reverse $r;\n \
    \   return [$r, $p];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $result = $s;\n   \
    \ for my $char (split //, $c) {\n        $result =~ s/$char//g;\n    }\n    my\
    \ $is_palindrome = $result eq reverse $result;\n    return [$result, $is_palindrome];\n\
    }", "    my $result = '';\n    my $is_palindrome = 1;\n    my %c_hash = map {\
    \ $_ => 1 } split //, $c;\n    for my $char (split //, $s) {\n        if (!exists\
    \ $c_hash{$char}) {\n            $result .= $char;\n        }\n    }\n    my $reverse_result\
    \ = reverse $result;\n    if ($result ne $reverse_result) {\n        $is_palindrome\
    \ = 0;\n    }\n    return [$result, $is_palindrome];\n}", "    my $r = join '',\
    \ reverse split //, $s;\n    my $t = join '', reverse split //, $c;\n    my $p\
    \ = $s;\n    $p =~ s/$c//g;\n    my $q = $r;\n    $q =~ s/$t//g;\n    return [$p,\
    \ $p eq $q];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq\
    \ reverse $r];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq\
    \ reverse $r;\n    return [$r, $p];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    return [$r, $r eq reverse $r];\n}", "    my @s = split //, $s;\n    my @c\
    \ = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i\
    \ (0 .. $#s) {\n        push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r =\
    \ join '', @r;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "   \
    \ my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split\
    \ //, $s;\n    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $result\
    \ = '';\n    my $is_palindrome = 1;\n    my %c_hash = map { $_ => 1 } split('',\
    \ $c);\n    for my $char (split('', $s)) {\n        if (!exists $c_hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    my $rev_result = reverse\
    \ $result;\n    if ($result ne $rev_result) {\n        $is_palindrome = 0;\n \
    \   }\n    return [$result, $is_palindrome];\n}", "    my $result = $s;\n    $result\
    \ =~ s/[$c]//g;\n    return [$result, $result eq reverse($result)];\n}", "   \
    \ my $result = $s;\n    $result =~ s/[$c]//g;\n    my $is_palindrome = $result\
    \ eq reverse $result;\n    return [$result, $is_palindrome];\n}", "    my $result\
    \ = '';\n    my $is_palindrome = 1;\n    my %c_hash = map {$_ => 1} split //,\
    \ $c;\n    for my $char (split //, $s) {\n        if (!$c_hash{$char}) {\n   \
    \         $result .= $char;\n        }\n    }\n    my $len = length $result;\n\
    \    for (my $i = 0; $i < $len / 2; $i++) {\n        if (substr($result, $i, 1)\
    \ ne substr($result, $len - $i - 1, 1)) {\n            $is_palindrome = 0;\n \
    \           last;\n        }\n    }\n    return [$result, $is_palindrome];\n}",
  "    my @s = split //, $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1\
    \ } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n        push @r, $s[$i] unless\
    \ $c{$s[$i]};\n    }\n    my $r = join '', @r;\n    my $p = $r eq reverse $r;\n\
    \    return [$r, $p];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n\
    \    my $check = $result eq reverse $result;\n    return [$result, $check];\n}",
  "    my $result = $s;\n    $result =~ s/[$c]//g;\n    my $is_palindrome = $result\
    \ eq reverse $result;\n    return [$result, $is_palindrome];\n}", "    my @c =\
    \ split //, $c;\n    my @s = split //, $s;\n    my @result;\n    for my $i (@s)\
    \ {\n        if (not grep { $i eq $_ } @c) {\n            push @result, $i;\n\
    \        }\n    }\n    my $result = join '', @result;\n    my $is_palindrome =\
    \ $result eq reverse $result;\n    return [$result, $is_palindrome];\n}", "  \
    \  my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n    return\
    \ [$r, $p];\n}", "    my $r = reverse $s;\n    my %c = map { $_ => 1 } split //,\
    \ $c;\n    my $i = 0;\n    my $j = 0;\n    my $n = length $s;\n    my $m = length\
    \ $c;\n    while ($i < $n and $j < $m) {\n        if ($c{substr($s, $i, 1)} or\
    \ $c{substr($r, $i, 1)}) {\n            $i++;\n        }\n        else {\n   \
    \         $j++;\n        }\n    }\n    return substr($s, $i), substr($r, $i);\n\
    }", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p = $r eq reverse $r;\n  \
    \  return [$r, $p];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n  \
    \  my $is_palindrome = $result eq reverse $result;\n    return [$result, $is_palindrome];\n\
    }", "    my %c = map { $_ => 1 } split //, $c;\n    my $r = join '', grep { !$c{$_}\
    \ } split //, $s;\n    return [$r, $r eq reverse $r];\n}", "    my $r = '';\n\
    \    for my $i (0 .. length($s) - 1) {\n        my $ch = substr($s, $i, 1);\n\
    \        if (index($c, $ch) == -1) {\n            $r .= $ch;\n        }\n    }\n\
    \    my $p = 1;\n    for my $i (0 .. length($r) - 1) {\n        my $ch1 = substr($r,\
    \ $i, 1);\n        my $ch2 = substr($r, length($r) - 1 - $i, 1);\n        if ($ch1\
    \ ne $ch2) {\n            $p = 0;\n            last;\n        }\n    }\n    return\
    \ [$r, $p];\n}", "    my $r = join '', grep { index($c, $_) == -1 } split //,\
    \ $s;\n    return [$r, $r eq reverse $r];\n}", "    my @s = split //, $s;\n  \
    \  my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @result = grep\
    \ { !$c{$_} } @s;\n    my $result = join '', @result;\n    my $is_palindrome =\
    \ $result eq reverse $result;\n    return [$result, $is_palindrome];\n}", "  \
    \  my $r = $s;\n    $r =~ s/[$c]//g;\n    return [$r, $r eq reverse $r];\n}",
  "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my @s = split //, $s;\n    my @c = split //, $c;\n\
    \    my %c = map { $_ => 1 } @c;\n    my @r;\n    for my $i (0 .. $#s) {\n   \
    \     push @r, $s[$i] unless $c{$s[$i]};\n    }\n    my $r = join '', @r;\n  \
    \  my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my @s = split //,\
    \ $s;\n    my @c = split //, $c;\n    my %c = map { $_ => 1 } @c;\n    my @result\
    \ = grep { !$c{$_} } @s;\n    my $result = join '', @result;\n    my $is_palindrome\
    \ = $result eq reverse $result;\n    return [$result, $is_palindrome];\n}", " \
    \   my $result = '';\n    my $check = 0;\n    my %hash = map { $_ => 1 } split\
    \ //, $c;\n    for my $char (split //, $s) {\n        if (!exists $hash{$char})\
    \ {\n            $result .= $char;\n        }\n    }\n    $check = 1 if $result\
    \ eq reverse $result;\n    return [$result, $check];\n}", "    my $result = $s;\n\
    \    $result =~ s/[$c]//g;\n    my $is_palindrome = $result eq reverse $result;\n\
    \    return [$result, $is_palindrome];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n\
    \    my $p = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = join '',\
    \ grep { index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n\
    }", "    my $s_copy = $s;\n    $s_copy =~ s/[$c]//g;\n    return [$s_copy, $s_copy\
    \ eq reverse($s_copy)];\n}", "    my $r = $s;\n    $r =~ s/[$c]//g;\n    my $p\
    \ = $r eq reverse $r;\n    return [$r, $p];\n}", "    my $r = join '', grep {\
    \ index($c, $_) == -1 } split //, $s;\n    return [$r, $r eq reverse $r];\n}",
  "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return [$r,\
    \ $r eq reverse $r];\n}", "    my $result = $s;\n    $result =~ s/[$c]//g;\n \
    \   my $is_palindrome = $result eq reverse $result;\n    return [$result, $is_palindrome];\n\
    }", "    my $r = join '', grep { index($c, $_) == -1 } split //, $s;\n    return\
    \ [$r, $r eq reverse $r];\n}", "    my $r = reverse $s;\n    my $t = $s;\n   \
    \ $t =~ s/[$c]//g;\n    return [$t, $t eq $r];\n}", "    my $result = '';\n  \
    \  my $is_palindrome = 1;\n    my %c_hash = map { $_ => 1 } split //, $c;\n  \
    \  for my $char (split //, $s) {\n        if (!exists $c_hash{$char}) {\n    \
    \        $result .= $char;\n        }\n    }\n    my $reverse_result = reverse\
    \ $result;\n    if ($result ne $reverse_result) {\n        $is_palindrome = 0;\n\
    \    }\n    return [$result, $is_palindrome];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
