name: HumanEval_64_vowels_count
language: pl
prompt: "# Write a function vowels_count which takes a string representing\n# a word\
  \ as input and returns the number of vowels in the string.\n# Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n# vowel, but only when it is\
  \ at the end of the given word.\n# Example:\n# >>> vowels_count(\"abcde\")\n# 2\n\
  # >>> vowels_count(\"ACEDY\")\n# 3\nsub vowels_count {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&vowels_count;\n\
  \        if(eq_deeply($candidate->(\"abcde\"),2)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Alone\"),3)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  key\"),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"bye\"),1)) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"keY\"),2)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  bYe\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"ACEDY\"),3)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'y');\n\
    \    my @chars = split(//, $s);\n    foreach my $c (@chars) {\n        if (grep\
    \ {$_ eq $c} @vowels) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'y');\n  \
    \  my @chars = split(//, $s);\n    foreach my $c (@chars) {\n        if (grep\
    \ {$_ eq $c} @vowels) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'y');\n  \
    \  my @s = split(//, $s);\n    foreach my $c (@s) {\n        if (grep { $_ eq\
    \ $c } @vowels) {\n            $count++;\n        }\n    }\n    return $count;\n\
    }", "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'y');\n  \
    \  my @letters = split(//, $s);\n    for (my $i = 0; $i < scalar(@letters); $i++)\
    \ {\n        if (grep(/^$letters[$i]$/, @vowels)) {\n            $count++;\n \
    \       }\n    }\n    return $count;\n}", "    my $count = 0;\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u', 'y');\n    for my $vowel (@vowels) {\n        $count\
    \ += () = $s =~ /$vowel/gi;\n    }\n    return $count;\n}", "    my $count = 0;\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u', 'y');\n    foreach my $vowel (@vowels)\
    \ {\n        $count += $s =~ s/$vowel//g;\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    for(my $i = 0; $i < length($s); $i++) {\n        my $c\
    \ = substr($s, $i, 1);\n        if($c eq 'a' || $c eq 'e' || $c eq 'i' || $c eq\
    \ 'o' || $c eq 'u' ||\n           ($c eq 'y' && $i == length($s) - 1)) {\n   \
    \         $count++;\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $last_char = substr($s, -1);\n    if ($last_char eq 'y') {\n  \
    \      $count++;\n    }\n    $s =~ s/[aeiouy]//g;\n    $count += length($s);\n\
    \    return $count;\n}", "    my $count = 0;\n    my @vowels = qw(a e i o u);\n\
    \    my $last_char = substr($s, -1);\n    if ($last_char eq 'y') {\n        push\
    \ @vowels, 'y';\n    }\n    foreach my $vowel (@vowels) {\n        $count += ()\
    \ = $s =~ /$vowel/gi;\n    }\n    return $count;\n}", "    my $n = 0;\n    for\
    \ my $c (split //, $s) {\n        $n++ if $c =~ /[aeiou]/i;\n    }\n    return\
    \ $n;\n}", "    my $c = 0;\n    $c++ if $s =~ /a/i;\n    $c++ if $s =~ /e/i;\n\
    \    $c++ if $s =~ /i/i;\n    $c++ if $s =~ /o/i;\n    $c++ if $s =~ /u/i;\n \
    \   $c++ if $s =~ /y$/i;\n    return $c;\n}", "    my $count = 0;\n    my $last\
    \ = substr($s, -1);\n    $count++ if $last eq 'y';\n    for my $c (split //, $s)\
    \ {\n        $count++ if $c =~ /[aeiou]/;\n    }\n    return $count;\n}", "  \
    \  my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'y');\n    my @chars\
    \ = split(//, $s);\n    foreach my $char (@chars) {\n        if (grep(/^$char$/,\
    \ @vowels)) {\n            $count++;\n        }\n    }\n    return $count;\n}",
  "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'y');\n    my @chars\
    \ = split(//, $s);\n    foreach my $c (@chars) {\n        if (grep(/^$c$/, @vowels))\
    \ {\n            $count++;\n        }\n    }\n    return $count;\n}", "    my\
    \ $count = 0;\n    for my $c (split //, $s) {\n        if ($c =~ /[aeiou]/i) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my $len = length($s);\n    for (my $i = 0; $i < $len; $i++) {\n  \
    \      my $c = substr($s, $i, 1);\n        if ($c eq 'a' || $c eq 'e' || $c eq\
    \ 'i' || $c eq 'o' || $c eq 'u') {\n            $count++;\n        } elsif ($c\
    \ eq 'y' && $i == $len - 1) {\n            $count++;\n        }\n    }\n    return\
    \ $count;\n}", "    my $count = 0;\n    my @vowels = ('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n    for my $v (@vowels) {\n        $count += $s =~ s/$v//g;\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    my @vowels = ('a', 'e', 'i',\
    \ 'o', 'u', 'y');\n    foreach my $vowel (@vowels) {\n        $count += $s =~\
    \ s/$vowel//gi;\n    }\n    return $count;\n}", "    my $count = 0;\n    my @vowels\
    \ = ('a', 'e', 'i', 'o', 'u', 'y');\n    my @s = split(//, $s);\n    for my $i\
    \ (0..$#s) {\n        if ($i == $#s && $s[$i] eq 'y') {\n            $count++;\n\
    \        }\n        elsif (grep {$_ eq $s[$i]} @vowels) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    my $count = 0;\n    for my $c\
    \ (split //, $s) {\n        if ($c =~ /[aeiou]/i) {\n            $count++;\n \
    \       }\n    }\n    return $count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
