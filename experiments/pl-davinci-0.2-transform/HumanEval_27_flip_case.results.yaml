language: pl
name: HumanEval_27_flip_case
results:
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    return $string =~ tr/A-Za-z/a-zA-Z/r;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    my @flipped = map\
    \ {\n        if ($_ =~ /[a-z]/) {\n            uc($_);\n        } elsif ($_ =~\
    \ /[A-Z]/) {\n            lc($_);\n        } else {\n            $_;\n       \
    \ }\n    } @chars;\n    return join('', @flipped);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $c (split //, $string)\
    \ {\n        if ($c =~ /[a-z]/) {\n            $flipped .= uc $c;\n        } elsif\
    \ ($c =~ /[A-Z]/) {\n            $flipped .= lc $c;\n        } else {\n      \
    \      $flipped .= $c;\n        }\n    }\n    return $flipped;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($i);\n    my($result) = \"\";\n    for($i = 0; $i\
    \ < length($string); $i++) {\n        my($char) = substr($string, $i, 1);\n  \
    \      if($char =~ /[a-z]/) {\n            $result .= uc($char);\n        } elsif($char\
    \ =~ /[A-Z]/) {\n            $result .= lc($char);\n        } else {\n       \
    \     $result .= $char;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped_string = '';\n    for my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped_string .=\
    \ uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n            $flipped_string\
    \ .= lc $char;\n        } else {\n            $flipped_string .= $char;\n    \
    \    }\n    }\n    return $flipped_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped) = \"\";\n    my($i);\n    for($i = 0; $i\
    \ < length($string); $i++) {\n        my($char) = substr($string, $i, 1);\n  \
    \      if($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n        } elsif($char\
    \ =~ /[A-Z]/) {\n            $flipped .= lc($char);\n        } else {\n      \
    \      $flipped .= $char;\n        }\n    }\n    return $flipped;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    my @new_chars =\
    \ map {\n        if ($_ =~ /[a-z]/) {\n            uc($_);\n        } elsif ($_\
    \ =~ /[A-Z]/) {\n            lc($_);\n        } else {\n            $_;\n    \
    \    }\n    } @chars;\n    return join(\"\", @new_chars);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($result) = \"\";\n    foreach my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n   \
    \     } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    my @flipped;\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n          \
    \  push(@flipped, uc($char));\n        }\n        elsif ($char =~ /[A-Z]/) {\n\
    \            push(@flipped, lc($char));\n        }\n        else {\n         \
    \   push(@flipped, $char);\n        }\n    }\n    return join('', @flipped);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    foreach my $char (split //, $string)\
    \ {\n        if ($char =~ m/[a-z]/) {\n            $flipped .= uc $char;\n   \
    \     } elsif ($char =~ m/[A-Z]/) {\n            $flipped .= lc $char;\n     \
    \   } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    return $string if $string eq \"\";\n    my $first =\
    \ substr($string, 0, 1);\n    my $rest = substr($string, 1);\n    if ($first =~\
    \ /[a-z]/) {\n        return uc($first) . flip_case($rest);\n    } elsif ($first\
    \ =~ /[A-Z]/) {\n        return lc($first) . flip_case($rest);\n    } else {\n\
    \        return $first . flip_case($rest);\n    }\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    for (my $i = 0;\
    \ $i < scalar(@chars); $i++) {\n        if ($chars[$i] =~ /[a-z]/) {\n       \
    \     $chars[$i] = uc($chars[$i]);\n        } elsif ($chars[$i] =~ /[A-Z]/) {\n\
    \            $chars[$i] = lc($chars[$i]);\n        }\n    }\n    return join(\"\
    \", @chars);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped) = '';\n    foreach my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    return $string if $string eq \"\";\n    my $first_char\
    \ = substr($string, 0, 1);\n    my $rest_of_string = substr($string, 1);\n   \
    \ if ($first_char =~ /[a-z]/) {\n        return uc($first_char) . flip_case($rest_of_string);\n\
    \    } elsif ($first_char =~ /[A-Z]/) {\n        return lc($first_char) . flip_case($rest_of_string);\n\
    \    } else {\n        return $first_char . flip_case($rest_of_string);\n    }\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n\
    \        }\n        else {\n            $result .= $char;\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped) = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n   \
    \     }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n   \
    \     } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    foreach my $char\
    \ (@chars) {\n        if ($char =~ /[a-z]/) {\n            $char = uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $char = lc($char);\n      \
    \  }\n    }\n    return join('', @chars);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($result) = \"\";\n    foreach my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n   \
    \     } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n\
    \        }\n        else {\n            $result .= $char;\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    return join '', map { $_ =~ /[a-z]/ ? uc $_ : lc $_\
    \ } split //, $string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split(//, $string))\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n     \
    \   } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $new_string = \"\";\n    for my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $new_string .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $new_string .= lc($char);\n\
    \        } else {\n            $new_string .= $char;\n        }\n    }\n    return\
    \ $new_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split //, $string;\n    my @flipped;\n \
    \   for my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n            push\
    \ @flipped, uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n            push\
    \ @flipped, lc $char;\n        } else {\n            push @flipped, $char;\n \
    \       }\n    }\n    return join '', @flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n\
    \        }\n        else {\n            $result .= $char;\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    my @flipped = map\
    \ {\n        if ($_ =~ /[a-z]/) {\n            uc($_);\n        } elsif ($_ =~\
    \ /[A-Z]/) {\n            lc($_);\n        } else {\n            $_;\n       \
    \ }\n    } @chars;\n    return join('', @flipped);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($result) = '';\n    for my $char (split(//, $string))\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n       \
    \ } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    return join('', map { $_ =~ /[a-z]/ ? uc($_) : lc($_)\
    \ } split(//, $string));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    return join('', map { $_ =~ /[a-z]/ ? uc($_) : lc($_)\
    \ } split(//, $string));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped_string = \"\";\n    for my $char (split\
    \ //, $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped_string\
    \ .= uc($char);\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped_string\
    \ .= lc($char);\n        }\n        else {\n            $flipped_string .= $char;\n\
    \        }\n    }\n    return $flipped_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    foreach my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split //, $string;\n    for my $i (0..$#chars)\
    \ {\n        if ($chars[$i] =~ /[a-z]/) {\n            $chars[$i] = uc $chars[$i];\n\
    \        }\n        elsif ($chars[$i] =~ /[A-Z]/) {\n            $chars[$i] =\
    \ lc $chars[$i];\n        }\n    }\n    return join '', @chars;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split //, $string;\n    for (my $i = 0;\
    \ $i < @chars; $i++) {\n        if ($chars[$i] =~ /[a-z]/) {\n            $chars[$i]\
    \ = uc $chars[$i];\n        } elsif ($chars[$i] =~ /[A-Z]/) {\n            $chars[$i]\
    \ = lc $chars[$i];\n        }\n    }\n    return join '', @chars;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped) = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n     \
    \   } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split(//, $string))\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n     \
    \   } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        my $char = substr($string, $i, 1);\n        if ($char =~ /[a-z]/)\
    \ {\n            $flipped .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n\
    \            $flipped .= lc($char);\n        } else {\n            $flipped .=\
    \ $char;\n        }\n    }\n    return $flipped;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    my $char;\n    foreach $char\
    \ (split //, $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped\
    \ .= uc($char);\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped\
    \ .= lc($char);\n        }\n        else {\n            $flipped .= $char;\n \
    \       }\n    }\n    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped_string = '';\n    for my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped_string .=\
    \ uc $char;\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped_string\
    \ .= lc $char;\n        }\n        else {\n            $flipped_string .= $char;\n\
    \        }\n    }\n    return $flipped_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped_string = '';\n    for my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped_string .=\
    \ uc $char;\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped_string\
    \ .= lc $char;\n        }\n        else {\n            $flipped_string .= $char;\n\
    \        }\n    }\n    return $flipped_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped) = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n     \
    \   } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split //, $string;\n    my @flipped;\n \
    \   for my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n            push\
    \ @flipped, uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n            push\
    \ @flipped, lc $char;\n        } else {\n            push @flipped, $char;\n \
    \       }\n    }\n    return join '', @flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    my @flipped;\n\
    \    for my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n            push\
    \ @flipped, uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n            push\
    \ @flipped, lc($char);\n        } else {\n            push @flipped, $char;\n\
    \        }\n    }\n    return join('', @flipped);\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped_string) = \"\";\n    foreach my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $flipped_string .=\
    \ uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n            $flipped_string\
    \ .= lc($char);\n        } else {\n            $flipped_string .= $char;\n   \
    \     }\n    }\n    return $flipped_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($result) = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n   \
    \     } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped_string = \"\";\n    foreach my $char (split\
    \ //, $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped_string\
    \ .= uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n            $flipped_string\
    \ .= lc($char);\n        } else {\n            $flipped_string .= $char;\n   \
    \     }\n    }\n    return $flipped_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped_string = '';\n    for my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped_string .=\
    \ uc $char;\n        }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped_string\
    \ .= lc $char;\n        }\n        else {\n            $flipped_string .= $char;\n\
    \        }\n    }\n    return $flipped_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped) = \"\";\n    for my $char (split(//, $string))\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n     \
    \   } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped) = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n   \
    \     } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n     \
    \   } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    my @new_chars =\
    \ map {\n        if ($_ =~ /[a-z]/) {\n            uc($_);\n        } elsif ($_\
    \ =~ /[A-Z]/) {\n            lc($_);\n        } else {\n            $_;\n    \
    \    }\n    } @chars;\n    return join('', @new_chars);\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    foreach my $char\
    \ (@chars) {\n        if ($char =~ /[a-z]/) {\n            $char = uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $char = lc($char);\n      \
    \  }\n    }\n    return join('', @chars);\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    my @flipped;\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n          \
    \  push(@flipped, uc($char));\n        }\n        elsif ($char =~ /[A-Z]/) {\n\
    \            push(@flipped, lc($char));\n        }\n        else {\n         \
    \   push(@flipped, $char);\n        }\n    }\n    return join('', @flipped);\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    foreach my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    foreach my $char (split //,\
    \ $string) {\n        if ($char =~ /[a-z]/) {\n            $result .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $result .= lc($char);\n   \
    \     } else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split //, $string;\n    my @new_chars;\n\
    \    for my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n            push\
    \ @new_chars, uc $char;\n        } elsif ($char =~ /[A-Z]/) {\n            push\
    \ @new_chars, lc $char;\n        } else {\n            push @new_chars, $char;\n\
    \        }\n    }\n    return join '', @new_chars;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $new_string = \"\";\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        my $char = substr($string, $i, 1);\n        if ($char =~ /[a-z]/)\
    \ {\n            $new_string .= uc($char);\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            $new_string .= lc($char);\n        } else {\n            $new_string\
    \ .= $char;\n        }\n    }\n    return $new_string;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $new_string = \"\";\n    for my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $new_string .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $new_string .= lc($char);\n\
    \        } else {\n            $new_string .= $char;\n        }\n    }\n    return\
    \ $new_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n\
    \        }\n        else {\n            $result .= $char;\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped_string) = \"\";\n    for my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $flipped_string .=\
    \ uc($char);\n        } elsif ($char =~ /[A-Z]/) {\n            $flipped_string\
    \ .= lc($char);\n        } else {\n            $flipped_string .= $char;\n   \
    \     }\n    }\n    return $flipped_string;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 255
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = \"\";\n    for my $char (split //, $string)\
    \ {\n        if (is_lower($char)) {\n            $result .= uc($char);\n     \
    \   } elsif (is_upper($char)) {\n            $result .= lc($char);\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::is_lower called at /tmp/tmphf8ktbj9.pl line
    8.

    '
  stdout: ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   }\n        elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n\
    \        }\n        else {\n            $result .= $char;\n        }\n    }\n\
    \    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $result = '';\n    foreach my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $result .= uc $char;\n     \
    \   } elsif ($char =~ /[A-Z]/) {\n            $result .= lc $char;\n        }\
    \ else {\n            $result .= $char;\n        }\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = '';\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    }\n        elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n\
    \        }\n        else {\n            $flipped .= $char;\n        }\n    }\n\
    \    return $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my($flipped) = \"\";\n    foreach my $char (split(//,\
    \ $string)) {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc($char);\n\
    \        } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc($char);\n  \
    \      } else {\n            $flipped .= $char;\n        }\n    }\n    return\
    \ $flipped;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&flip_case;\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    Hello!\"),\"hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->(\"These violent delights have violent\
    \ ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012815
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my @chars = split(//, $string);\n    my @flipped;\n\
    \    foreach my $char (@chars) {\n        if ($char =~ /[a-z]/) {\n          \
    \  push(@flipped, uc($char));\n        } elsif ($char =~ /[A-Z]/) {\n        \
    \    push(@flipped, lc($char));\n        } else {\n            push(@flipped,\
    \ $char);\n        }\n    }\n    return join('', @flipped);\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n        if(eq_deeply($candidate->(\"\
    \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"These\
    \ violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
    \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
- exit_code: 0
  program: "# For a given string, flip lowercase characters to uppercase and uppercase\
    \ to lowercase.\n# >>> flip_case(\"Hello\")\n# \"hELLO\"\nsub flip_case {\n  \
    \  my($string) = @_;\n    my $flipped = \"\";\n    for my $char (split //, $string)\
    \ {\n        if ($char =~ /[a-z]/) {\n            $flipped .= uc $char;\n    \
    \    } elsif ($char =~ /[A-Z]/) {\n            $flipped .= lc $char;\n       \
    \ } else {\n            $flipped .= $char;\n        }\n    }\n    return $flipped;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
    \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"\
    hELLO!\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"These violent delights have violent ends\"),\"\
    tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660012769
