name: HumanEval_93_encode
language: pl
prompt: "# Write a function that takes a message, and encodes in such a \n# way that\
  \ it swaps case of all letters, replaces all vowels in \n# the message with the\
  \ letter that appears 2 places ahead of that \n# vowel in the english alphabet.\
  \ \n# Assume only letters. \n# Examples:\n# >>> encode(\"test\")\n# \"TGST\"\n#\
  \ >>> encode(\"This is a message\")\n# \"tHKS KS C MGSSCGG\"\nsub encode {\n   \
  \ my($message) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encode;\n\
  \        if(eq_deeply($candidate->(\"TEST\"),\"tgst\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Mudasir\"\
  ),\"mWDCSKR\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"YES\"),\"ygs\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"This is a message\"\
  ),\"tHKS KS C MGSSCGG\")) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT\
  \ kNqW wHcT Tq wRkTg\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n}\n\ntesthumaneval();"
completions: ["    my $encoded = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_hash\
    \ = {\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n       \
    \ 'o' => 'q',\n        'u' => 's',\n    };\n    for my $char (split //, $message)\
    \ {\n        if ($char =~ /[A-Z]/) {\n            $encoded .= lc($char);\n   \
    \     } elsif ($char =~ /[a-z]/) {\n            $encoded .= uc($char);\n     \
    \   } else {\n            $encoded .= $char;\n        }\n    }\n    for my $char\
    \ (split //, $encoded) {\n        if ($vowels =~ /$char/) {\n            $encoded\
    \ =~ s/$char/$vowels_hash->{$char}/;\n        }\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = (\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length\
    \ = @vowels;\n    my $vowel_found = 0;\n    my $vowel_position = 0;\n    my $vowel_new_position\
    \ = 0;\n    my $vowel_new_index = 0;\n    my $vowel_new_letter = \"\";\n    my\
    \ $vowel_new_letter_index = 0;\n    my $vowel_new_letter_position = 0;\n    my\
    \ $vowel_new_letter_new_position = 0;\n    my $vowel_new_letter_new_index = 0;\n\
    \    my $vowel_new_letter_new_letter = \"\";\n    my $vowel_new_letter_new_letter_index\
    \ = 0;\n    my $vowel_new_letter_new_letter_position = 0;\n    my $vowel_new_letter_new_letter_new_position\
    \ = 0;\n    my $vowel_new_letter_new_letter_new_index = 0;\n    my $vowel_new_letter_new_letter_new_letter\
    \ = \"\";\n    my $vowel_new_letter_new_letter_new_letter_index = 0;\n    my $vowel_new_letter_new_letter_new_letter_position\
    \ = 0;\n    my $vowel_new_letter_new_letter_new_letter_new_position = 0;\n   \
    \ my $vowel_new_letter_new_letter_new_letter_new_index = 0;\n    my $vowel_new_letter_new_letter_new_letter_new_letter\
    \ = \"\";\n    my $vowel_new_letter_new_letter_new_letter_new_letter_index = 0;\n\
    \    my $vowel_new_letter_new_letter_new_letter_new_letter_position = 0;\n", " \
    \   my @message = split(//, $message);\n    my @encoded;\n    my $letter;\n  \
    \  my $vowels = \"aeiou\";\n    my $vowels_index;\n    my $vowel_index;\n    my\
    \ $vowel_index_2;\n    foreach $letter (@message) {\n        if ($letter =~ /[a-z]/)\
    \ {\n            $letter =~ tr/a-z/A-Z/;\n            $vowels_index = index($vowels,\
    \ $letter);\n            if ($vowels_index != -1) {\n                $vowel_index\
    \ = $vowels_index + 1;\n                if ($vowel_index == 5) {\n           \
    \         $vowel_index_2 = 0;\n                }\n                else {\n   \
    \                 $vowel_index_2 = $vowel_index + 1;\n                }\n    \
    \            $letter = substr($vowels, $vowel_index_2, 1);\n            }\n  \
    \      }\n        elsif ($letter =~ /[A-Z]/) {\n            $letter =~ tr/A-Z/a-z/;\n\
    \            $vowels_index = index($vowels, $letter);\n            if ($vowels_index\
    \ != -1) {\n                $vowel_index = $vowels_index + 1;\n              \
    \  if ($vowel_index == 5) {\n                    $vowel_index_2 = 0;\n       \
    \         }\n                else {\n                    $vowel_index_2 = $vowel_index\
    \ + 1;\n                }\n                $letter = substr($vowels, $vowel_index_2,\
    \ 1);\n            }\n        }\n        push(@encoded, $letter);\n    }\n   \
    \ return join(\"\", @encoded);\n}", "    my $encoded = \"\";\n    my @vowels =\
    \ ('a', 'e', 'i', 'o', 'u');\n    my %vowels = map { $_ => 1 } @vowels;\n    my\
    \ $vowel_index = 0;\n    my $vowel_count = scalar @vowels;\n    for my $char (split\
    \ //, $message) {\n        if ($vowels{lc $char}) {\n            $encoded .= $vowels[($vowel_index\
    \ + 2) % $vowel_count];\n            $vowel_index = ($vowel_index + 1) % $vowel_count;\n\
    \        } else {\n            $encoded .= $char;\n        }\n    }\n    return\
    \ $encoded;\n}", "    my $encoded = \"\";\n    my @vowels = qw(a e i o u);\n \
    \   foreach my $char (split(//, $message)) {\n        if ($char =~ /[a-zA-Z]/)\
    \ {\n            if ($char =~ /[a-z]/) {\n                $char =~ tr/a-z/A-Z/;\n\
    \            } else {\n                $char =~ tr/A-Z/a-z/;\n            }\n\
    \            if (grep {$_ eq lc($char)} @vowels) {\n                my $index\
    \ = 0;\n                foreach my $vowel (@vowels) {\n                    if\
    \ ($vowel eq lc($char)) {\n                        $index = ($index + 2) % 5;\n\
    \                        $char = $vowels[$index];\n                        last;\n\
    \                    }\n                    $index++;\n                }\n   \
    \         }\n        }\n        $encoded .= $char;\n    }\n    return $encoded;\n\
    }", "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n  \
    \  my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length = @vowels;\n\
    \    my $vowel_found = 0;\n    my $vowel_position = 0;\n    my $vowel_position_plus_two\
    \ = 0;\n    my $vowel_position_plus_two_char = \"\";\n    my $vowel_position_plus_two_char_upper\
    \ = \"\";\n    my $vowel_position_plus_two_char_lower = \"\";\n    my $vowel_position_plus_two_char_upper_found\
    \ = 0;\n    my $vowel_position_plus_two_char_lower_found = 0;\n    my $vowel_position_plus_two_char_found\
    \ = 0;\n    my $char = \"\";\n    my $char_upper = \"\";\n    my $char_lower =\
    \ \"\";\n    my $char_upper_found = 0;\n    my $char_lower_found = 0;\n    my\
    \ $char_found = 0;\n    my $char_index = 0;\n    my $char_count = 0;\n    my $char_length\
    \ = 0;\n    my $message_length = length($message);\n    my $message_index = 0;\n\
    \    my $message_count = 0;\n    my $message_length = length($message);\n    my\
    \ $message_index = 0;\n    my $message_count = 0;\n    my $message_length = length($message);\n\
    \    my $message_index = 0;\n    my $message_count = 0;\n    my $message_length\
    \ = length($message);\n    my $message_index = 0;\n    my $message_count = 0;\n\
    \    my $message_length = length($message);\n    my $message_index = 0;\n    my\
    \ $message_count = 0;\n    my $message_length = length($message);\n    my $message_index\
    \ = 0;\n    my $message", "    my @message = split //, $message;\n    my @vowels\
    \ = qw(a e i o u);\n    my @encoded;\n    for my $letter (@message) {\n      \
    \  if (grep {$letter eq $_} @vowels) {\n            push @encoded, chr(ord($letter)\
    \ + 2);\n        } else {\n            push @encoded, $letter;\n        }\n  \
    \  }\n    return join \"\", @encoded;\n}", "    $message =~ tr/a-zA-Z/A-Za-z/;\n\
    \    $message =~ tr/aeiou/cdfgh/;\n    return $message;\n}", "    my $encoded\
    \ = \"\";\n    my $vowels = \"aeiou\";\n    my $vowels_shifted = \"cgkosw\";\n\
    \    my $vowels_hash = {};\n    my @vowels_array = split(\"\", $vowels);\n   \
    \ my @vowels_shifted_array = split(\"\", $vowels_shifted);\n    for (my $i = 0;\
    \ $i < scalar(@vowels_array); $i++) {\n        $vowels_hash->{$vowels_array[$i]}\
    \ = $vowels_shifted_array[$i];\n    }\n    my @message_array = split(\"\", $message);\n\
    \    for (my $i = 0; $i < scalar(@message_array); $i++) {\n        if (exists($vowels_hash->{lc($message_array[$i])}))\
    \ {\n            $encoded .= $vowels_hash->{lc($message_array[$i])};\n       \
    \ } else {\n            $encoded .= $message_array[$i];\n        }\n    }\n  \
    \  return $encoded;\n}", "    my @message = split //, $message;\n    my @encoded;\n\
    \    my %vowels = (\n        'a' => 'c',\n        'e' => 'g',\n        'i' =>\
    \ 'k',\n        'o' => 'q',\n        'u' => 'y',\n    );\n    for my $char (@message)\
    \ {\n        if ($char =~ /[a-z]/) {\n            if ($char =~ /[aeiou]/) {\n\
    \                push @encoded, $vowels{$char};\n            } else {\n      \
    \          push @encoded, $char;\n            }\n        } elsif ($char =~ /[A-Z]/)\
    \ {\n            if ($char =~ /[AEIOU]/) {\n                push @encoded, uc\
    \ $vowels{lc $char};\n            } else {\n                push @encoded, lc\
    \ $char;\n            }\n        } else {\n            push @encoded, $char;\n\
    \        }\n    }\n    return join '', @encoded;\n}", "    my $encoded = \"\"\
    ;\n    my $vowels = \"aeiou\";\n    my $vowels_hash = {};\n    my $vowels_array\
    \ = [split(//, $vowels)];\n    for (my $i = 0; $i < scalar(@$vowels_array); $i++)\
    \ {\n        $vowels_hash->{$vowels_array->[$i]} = $vowels_array->[($i + 2) %\
    \ 5];\n    }\n    my $message_array = [split(//, $message)];\n    for (my $i =\
    \ 0; $i < scalar(@$message_array); $i++) {\n        if ($vowels_hash->{lc($message_array->[$i])})\
    \ {\n            $encoded .= $vowels_hash->{lc($message_array->[$i])};\n     \
    \   } elsif ($message_array->[$i] =~ /[A-Z]/) {\n            $encoded .= lc($message_array->[$i]);\n\
    \        } elsif ($message_array->[$i] =~ /[a-z]/) {\n            $encoded .=\
    \ uc($message_array->[$i]);\n        } else {\n            $encoded .= $message_array->[$i];\n\
    \        }\n    }\n    return $encoded;\n}", "    my $encoded_message = \"\";\n\
    \    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my %vowel_map = (\n        'a'\
    \ => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o' => 'q',\n   \
    \     'u' => 'y',\n    );\n    foreach my $char (split //, $message) {\n     \
    \   if (grep { $_ eq $char } @vowels) {\n            $encoded_message .= $vowel_map{$char};\n\
    \        } else {\n            $encoded_message .= $char;\n        }\n    }\n\
    \    return uc($encoded_message);\n}", "    my $encoded_message = \"\";\n    my\
    \ $vowels = \"aeiou\";\n    my $vowels_next = \"efghj\";\n    my $vowels_next_next\
    \ = \"ghjkl\";\n    my $vowels_next_next_next = \"ijklmn\";\n    my $vowels_next_next_next_next\
    \ = \"klmnop\";\n    my $vowels_next_next_next_next_next = \"mnopqr\";\n    my\
    \ $vowels_next_next_next_next_next_next = \"opqrst\";\n    my $vowels_next_next_next_next_next_next_next\
    \ = \"pqrstu\";\n    my $vowels_next_next_next_next_next_next_next_next = \"qrstuv\"\
    ;\n    my $vowels_next_next_next_next_next_next_next_next_next = \"rstuvw\";\n\
    \    my $vowels_next_next_next_next_next_next_next_next_next_next = \"stuvwx\"\
    ;\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next = \"\
    tuvwxy\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"uvwxyz\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"vwxyza\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"wxyzab\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"xyzabc\";\n    my $vowels_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = \"yzab", "    my $encoded = \"\";\n    my @vowels = (\"a\",\"e\",\"i\",\"\
    o\",\"u\");\n    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_found\
    \ = 0;\n    my $letter_index = 0;\n    my $letter_count = 0;\n    my $letter_found\
    \ = 0;\n    my $letter = \"\";\n    my $vowel = \"\";\n    my $letter_index_plus_two\
    \ = 0;\n    my $vowel_index_plus_two = 0;\n    my $vowel_index_plus_two_mod =\
    \ 0;\n    my $letter_index_plus_two_mod = 0;\n    my $message_length = length($message);\n\
    \    my $vowel_length = length(@vowels);\n    my $alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $alphabet_length = length($alphabet);\n    my $alphabet_index = 0;\n\
    \    my $alphabet_index_plus_two = 0;\n    my $alphabet_index_plus_two_mod = 0;\n\
    \    my $alphabet_index_plus_two_mod_char = \"\";\n    my $message_char = \"\"\
    ;\n    my $message_char_upper = \"\";\n    my $message_char_lower = \"\";\n  \
    \  my $message_char_upper_index = 0;\n    my $message_char_lower_index = 0;\n\
    \    my $message_char_upper_index_plus_two = 0;\n    my $message_char_lower_index_plus_two\
    \ = 0;\n    my $message_char_upper_index_plus_two_mod = 0;\n    my $message_char_lower_index_plus_two_mod\
    \ = 0;\n    my $message_char_upper_index_plus_two_mod_char = \"\";\n    my $message_char_lower_index_plus_two_mod_char\
    \ = \"\";\n    for ($letter_index = 0; $letter_index < $message_length; $letter_index++)\
    \ {", "    my $encoded_message = \"\";\n    my @message_array = split(//, $message);\n\
    \    foreach my $char (@message_array) {\n        if ($char =~ /[A-Z]/) {\n  \
    \          $encoded_message .= lc($char);\n        } elsif ($char =~ /[a-z]/)\
    \ {\n            $encoded_message .= uc($char);\n        } else {\n          \
    \  $encoded_message .= $char;\n        }\n    }\n    $encoded_message =~ s/[aeiou]/chr(ord($&)+2)/eg;\n\
    \    return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels =\
    \ (\"a\", \"e\", \"i\", \"o\", \"u\");\n    my $vowel_index = 0;\n    my $vowel_count\
    \ = 0;\n    my $vowel_found = 0;\n    my $message_length = length($message);\n\
    \    my $message_index = 0;\n    my $message_char = \"\";\n    my $message_char_upper\
    \ = \"\";\n    my $message_char_lower = \"\";\n    my $message_char_is_upper =\
    \ 0;\n    my $message_char_is_lower = 0;\n    my $message_char_is_vowel = 0;\n\
    \    my $message_char_is_letter = 0;\n    my $message_char_is_not_letter = 0;\n\
    \    my $message_char_is_not_vowel = 0;\n    my $message_char_is_not_upper = 0;\n\
    \    my $message_char_is_not_lower = 0;\n    my $message_char_is_not_space = 0;\n\
    \    my $message_char_is_space = 0;\n    my $message_char_is_not_alpha = 0;\n\
    \    my $message_char_is_alpha = 0;\n    my $message_char_is_not_digit = 0;\n\
    \    my $message_char_is_digit = 0;\n    my $message_char_is_not_alnum = 0;\n\
    \    my $message_char_is_alnum = 0;\n    my $message_char_is_not_cntrl = 0;\n\
    \    my $message_char_is_cntrl = 0;\n    my $message_char_is_not_graph = 0;\n\
    \    my $message_char_is_graph = 0;\n    my $message_char_is_not_print = 0;\n\
    \    my $message_char_is_print = 0;\n    my $message_char_is_not_punct = 0;\n\
    \    my $message_char_is_punct = 0;\n    my $message_char_is_not_xdigit = 0",
  "    my $encoded_message = \"\";\n    my @message_array = split(//, $message);\n\
    \    my %vowels = (\n        \"a\" => \"c\",\n        \"e\" => \"g\",\n      \
    \  \"i\" => \"k\",\n        \"o\" => \"q\",\n        \"u\" => \"y\",\n    );\n\
    \    foreach my $letter (@message_array) {\n        if (exists $vowels{$letter})\
    \ {\n            $encoded_message .= $vowels{$letter};\n        } elsif ($letter\
    \ =~ /[A-Z]/) {\n            $encoded_message .= lc($letter);\n        } elsif\
    \ ($letter =~ /[a-z]/) {\n            $encoded_message .= uc($letter);\n     \
    \   } else {\n            $encoded_message .= $letter;\n        }\n    }\n   \
    \ return $encoded_message;\n}", "    my $encoded = \"\";\n    my @vowels = (\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n    my %vowels = map { $_ => 1 } @vowels;\n\
    \    my $vowel_index = 0;\n    my $vowel_count = 0;\n    my $vowel_length = scalar\
    \ @vowels;\n    my $vowel_found = 0;\n    my $vowel_next = \"\";\n    my $vowel_next_next\
    \ = \"\";\n    my $vowel_next_next_index = 0;\n    my $vowel_next_index = 0;\n\
    \    my $vowel_next_next_found = 0;\n    my $vowel_next_found = 0;\n    my $vowel_next_next_count\
    \ = 0;\n    my $vowel_next_count = 0;\n    my $vowel_next_next_length = 0;\n \
    \   my $vowel_next_length = 0;\n    my $vowel_next_next_next = \"\";\n    my $vowel_next_next_next_index\
    \ = 0;\n    my $vowel_next_next_next_found = 0;\n    my $vowel_next_next_next_count\
    \ = 0;\n    my $vowel_next_next_next_length = 0;\n    my $vowel_next_next_next_next\
    \ = \"\";\n    my $vowel_next_next_next_next_index = 0;\n    my $vowel_next_next_next_next_found\
    \ = 0;\n    my $vowel_next_next_next_next_count = 0;\n    my $vowel_next_next_next_next_length\
    \ = 0;\n    my $vowel_next_next_next_next_next = \"\";\n    my $vowel_next_next_next_next_next_index\
    \ = 0;\n    my $vowel_next_next_next_next_next_found = 0;\n    my $vowel_next_next_",
  "    my $encoded = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u');\n    my $vowel_count\
    \ = 0;\n    my $vowel_index = 0;\n    my $vowel_letter = \"\";\n    my $vowel_letter_index\
    \ = 0;\n    my $vowel_letter_index_plus_two = 0;\n    my $vowel_letter_index_plus_two_mod\
    \ = 0;\n    my $vowel_letter_index_plus_two_mod_plus_97 = 0;\n    my $vowel_letter_index_plus_two_mod_plus_97_char\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper = \"\";\n\
    \    my $vowel_letter_index_plus_two_mod_plus_97_char_lower = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper_lower\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper_lower_upper\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper_lower_upper_lower\
    \ = \"\";\n    my $vowel_letter_index_plus_two_mod_plus_97_char_upper_lower_upper_lower_upper_",
  "    my @message = split(//, $message);\n    my @encoded = ();\n    my %vowels =\
    \ (\n        'a' => 'c',\n        'e' => 'g',\n        'i' => 'k',\n        'o'\
    \ => 'q',\n        'u' => 'y',\n    );\n    foreach my $char (@message) {\n  \
    \      if (exists $vowels{$char}) {\n            push @encoded, $vowels{$char};\n\
    \        } elsif ($char =~ /[a-z]/) {\n            push @encoded, chr(ord($char)\
    \ + 2);\n        } elsif ($char =~ /[A-Z]/) {\n            push @encoded, chr(ord($char)\
    \ + 2 - 32);\n        } else {\n            push @encoded, $char;\n        }\n\
    \    }\n    return join('', @encoded);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
